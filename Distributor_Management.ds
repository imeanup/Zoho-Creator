/*
 * Author       : app.zohocreator
 * Generated on : 07-May-2020 01:43:02
 * Version      : 1.0
 */
 application "Distributor Management"
 {
 	date format = "dd-MMM-yyyy"
 	time zone = "Asia/Kolkata"
 	time format = "24-hr"
	section hidden
	{
		hide = true
		icon = "ui-1-eye-ban-20"
		form Add_Stock
		{
			displayname = "Add Stock"
			success message = "Added to Stock Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Product_Code
			(
				type = picklist
				displayname = "Product Code"
				values  = Add_Product.ID
    			displayformat = [Product_Code]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Warehouse_Code
			(
				type = picklist
				displayname = "Warehouse Code"
				values  = Add_Warehouse.ID
    			displayformat = [Warehouse_Code]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Stock_Inflow
			(
				type = number
				displayname = "Stock Inflow"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Stock_Outflow
			(
				type = number
				displayname = "Stock Outflow"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Availability
			(
				type = picklist
				values = {"In Stock", "Out of Stock"}
				initial value = "In Stock"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Inventory
			(
				type = picklist
				values  = Inventory_stateform.ID
    			bidirectional = Stocks
    			displayformat = [ID]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "shopping-stock"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_Warehouse
		{
			displayname = "Add Warehouse"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Company_Name
			(
				type = picklist
				displayname = "Company Name"
				values  = Company_Details.ID
    			bidirectional = Warehouse_Details
    			displayformat = [Company_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Warehouse_Code
			(
    			type = text
				displayname = "Warehouse Code"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Warehouse_Name
			(
    			type = text
				displayname = "Warehouse Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Warehouse_Address
			(
    			type = address
				displayname = "Warehouse Address"
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_12
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_22
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city2
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province2
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code2
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country2
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude2
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude2
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "shopping-shop-location"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_Category
		{
			displayname = "Add Category"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Category
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "design-shape-circle"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_Distributor_Details
		{
			displayname = "Add Distributor Details"
			success message = "Application Shared Successfully to the Distributor!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Company_Name
			(
				type = picklist
				displayname = "Company Name"
				values  = Company_Details.ID
    			bidirectional = Distributors
    			displayformat = [Company_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Distributor_Name
			(
    			type = name
				displayname = "Distributor Name"
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Distributor_Email
			(
    			type = email
				displayname = "Distributor Email"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "users-2-contacts-44"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Inventory_stateform
		{
			displayname = "Inventory"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have Product_Code
			(
				type = picklist
				displayname = "Product Code"
				values  = Add_Product.ID
    			displayformat = [Product_Code]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Qty_Inhand
			(
				type = number
				displayname = "Qty. Inhand"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Qty_Distributed
			(
				type = number
				displayname = "Qty. Distributed"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Stocks
			(
				type = list
				values  = Add_Stock.ID
    			bidirectional = Inventory
    			displayformat = [Stock_Inflow]
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "shopping-stock"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Accounting
		{
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have User
			(
				type = radiobuttons
				values = {"Supplier", "Retailer"}
				layout = 2
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Bill_Date
			(
    			type = date
				displayname = "Bill Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			Supplier_Name
			(
				type = picklist
				displayname = "Supplier Name"
				values  = Add_Supplier.ID
    			displayformat = [Name.first_name + Name.last_name + " - " + Supplier_Email]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Purchase_Orders
			(
				type = list
				displayname = "Purchase Orders"
				values  = Add_Invoice.ID
    			displayformat = [Invoice_Number]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
			Retailer_Name
			(
				type = picklist
				displayname = "Retailer Name"
				values  = Add_Contact.ID
    			displayformat = [Name.first_name + " " + Name.last_name + " - " + Email]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Sales_Orders
			(
				type = list
				displayname = "Sales Orders"
				values  = Add_Sales.ID
    			displayformat = [Invoice_ID]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Existing_Balance
			(
				displayname = "Existing Balance"
				type = USD
				initial value = 0.00
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Bill_Amount
			(
				displayname = "Bill Amount"
				type = USD
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Amount_Paid
			(
				displayname = "Amount Paid"
				type = USD
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Credits
			(
				type = USD
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Status
			(
				type = picklist
				values = {"Receivables", "Payables", "Added to Next Bill", "Recieved", "Paid"}
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "business-math"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Decline_Form
		{
			displayname = "Decline Form"
			store data in zc = false
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Order_ID
			(
				type = picklist
				displayname = "Order ID"
				values  = New_Order_Request.ID
    			displayformat = [Order_ID]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Status
			(
				type = radiobuttons
				values = {"Declined"}
				initial value = "Declined"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Comments
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "arrows-1-simple-down"
			)
			actions
			{
				Submit
				(
   					type = submit
   					displayname = "Submit"
				)
			}
		}
		form Add_Sales
		{
			displayname = "Add Sales"
			success message = "Sales Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Company_Name
			(
				type = picklist
				displayname = "Company Name"
				values  = Company_Details.ID
    			displayformat = [Company_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Invoice_ID
			(
    			type = autonumber
				displayname = "Invoice ID"
				start index = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Sales_Date
			(
    			type = date
				displayname = "Sales Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			Order_ID
			(
				type = picklist
				displayname = "Order ID"
				values  = New_Order_Request[Status == "Approved"].ID
    			bidirectional = Sales_Invoice
    			displayformat = [Order_ID]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Retailer_Email
			(
				type = picklist
				displayname = "Retailer Email"
				values  = Add_Contact.ID
    			displayformat = [Email]
				allow new entries = true
				[
					displayname = "Add New Retailer"
				]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Retailer_Name
			(
    			type = text
				displayname = "Retailer Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have List_Items_Add
			(
				type = grid
				displayname = "List Items Add"
				values  = Add_Sales_List_Items.ID
    			bidirectional = Invoice_ID
	 			row = 2
	 			column = 1   
				width = medium
			)
			Section1
			(
				type = section
				displayname = "Section"
	 			row = 3
	 			column = 0   
				width = medium
			)
			must have Total_Sales
			(
				displayname = "Total Sales"
				type = USD
	 			row = 3
	 			column = 1   
				width = medium
			)
			must have Shipping_and_Handling_Charges
			(
				displayname = "Shipping and Handling Charges"
				type = USD
	 			row = 3
	 			column = 1   
				width = medium
			)
			must have Tax_Percent
			(
    			type = percentage
				displayname = "Tax Percent"
	 			row = 3
	 			column = 1   
				width = medium
			)
			Tax_Amount
			(
				displayname = "Tax Amount"
				type = USD
	 			row = 3
	 			column = 1   
				width = medium
			)
			must have Invoice_Amount
			(
				displayname = "Invoice Amount"
				type = USD
	 			row = 3
	 			column = 1   
				width = medium
			)
			Existing_Balance
			(
				displayname = "Existing Balance"
				type = USD
				initial value = 0.00
	 			row = 3
	 			column = 1   
				width = medium
			)
			must have Amount_Received
			(
				displayname = "Amount Received"
				type = USD
	 			row = 3
	 			column = 1   
				width = medium
			)
			Returned_Date
			(
				type = list
				displayname = "Returned Date"
				values  = Return_Product.ID
    			bidirectional = Invoice_ID
    			displayformat = [Returned_Date + " - " + Qty_Returned]
				height = 60px
	 			row = 3
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "shopping-mobile-card"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		print template
			{
				Invoice
				{
						content = {"layout":"1","pageNumberOption":null,"orientation":"portrait","isFooterEnabled":false,"mainLayout":[{"elements":[{"type":"columns","element":{"split":"100","id":"elem_15e08b596601","elemStyle":"margin:15px;border-top: 1.5px solid #2ecba9;border-bottom: 2px solid #08a281;","collayouts":[{"colElements":[{"type":"text","element":{"id":"elem_15e08bdd0dc","fields":[],"content":"<div style=\"\"><div style=\"text-align: center\">   <p style=\"color: rgb(4, 170, 134); font-size: 22px; border-bottom: 2px solid rgb(8, 162, 129)\">INVOICE<\/p> <\/div><\/div>"}},{"type":"text","element":{"Fields":[{"Label_Name":"Invoice_ID"},{"Label_Name":"Sales_Date"},{"Related_Fields":["Company_Email"],"Label_Name":"Company_Name"},{"Related_Fields":["Company_Name"],"Label_Name":"Company_Name"},{"Related_Fields":["Contact_Number"],"Label_Name":"Company_Name"}],"content":"<div style=\"\"><div style=\"width: 100%; margin-top: 10px\">   <div style=\"text-align: left; width: 25%; float: left\">     <span style=\"color: rgb(92, 10, 10); font-size: 18px\">Invoice ID #<\/span>     <span style=\"color: rgb(92, 10, 10); font-size: 18px\">${Invoice_ID}<\/span>     <br />     <span style=\"color: rgb(92, 10, 10); font-size: 16px\">Date: ${Sales_Date}<\/span>   <\/div>   <div style=\"width: 70%; float: right\">     <h6 style=\"text-align: right\">       <span>${Company_Name.Company_Name}<\/span>     <\/h6>     <p style=\"text-align: right\">       <font size=\"2\">${Company_Name.Company_Email}<\/font>     <\/p>     <p style=\"text-align: right\">       <font size=\"2\">${Company_Name.Contact_Number}<\/font>     <\/p>   <\/div> <\/div><\/div>"}},{"type":"text","element":{"id":"elem_15e08c878ad","fields":[],"content":"<div style=\"\"><div style=\"margin-top: 10px; width: 100%\">   <div style=\"font-size: 16px; color: rgb(92, 10, 10); border-bottom: 1px solid rgb(236, 236, 236); width: 48%; float: left\">   Shipping From: <\/div>   <div style=\"font-size: 16px; color: rgb(92, 10, 10); border-bottom: 1px solid rgb(236, 236, 236); width: 48%; float: right; text-align: right\">   Shipping To: <\/div> <\/div><\/div>"}},{"type":"text","element":{"Fields":[{"Related_Fields":["Company_Address"],"Label_Name":"Company_Name"},{"Related_Fields":["Company_Email"],"Label_Name":"Company_Name"},{"Related_Fields":["Company_Name"],"Label_Name":"Company_Name"},{"Related_Fields":["Mobile_Number"],"Label_Name":"Company_Name"},{"Related_Fields":["Website"],"Label_Name":"Company_Name"},{"Related_Fields":["Account"],"Label_Name":"Retailer_Email"},{"Related_Fields":["Address"],"Label_Name":"Retailer_Email"},{"Related_Fields":["Email"],"Label_Name":"Retailer_Email"},{"Related_Fields":["Phone_Number"],"Label_Name":"Retailer_Email"}],"content":"<div style=\"\"><div style=\"width: 100%; background: rgb(247, 247, 247)\">   <div style=\"width: 48%; float: left; border-right: 1px solid rgb(255, 255, 255)\">     <span style=\"line-height: 2\">       <font size=\"4\">         <span>${Company_Name.Company_Name}&nbsp;<\/span>       <\/font>     <\/span>     <br />     <span style=\"padding: 2px\">       <font size=\"2\">         <span>${Company_Name.Company_Address}&nbsp;<\/span>       <\/font>     <\/span>     <br />     <span style=\"padding: 2px\">       <font size=\"2\">         <span>${Company_Name.Company_Email}&nbsp;<\/span>       <\/font>     <\/span>     <br />     <span style=\"padding: 2px\">       <font size=\"2\">         <span>           <span>${Company_Name.Mobile_Number}<\/span>         <\/span>       <\/font>     <\/span>     <br />     <span style=\"padding: 2px\">       <font size=\"2\">         <span>           <span>${Company_Name.Website}<\/span>         <\/span>       <\/font>     <\/span> <br />   <\/div>   <div style=\"width: 48%; float: right; text-align: right\">     <span style=\"line-height: 2\">       <font size=\"4\">         <span>${Retailer_Email.Account}&nbsp;<\/span>       <\/font>     <\/span>     <br />     <span style=\"padding: 2px\">       <font size=\"2\">         <span>${Retailer_Email.Address}&nbsp;<\/span>       <\/font>     <\/span>     <br />     <span style=\"padding: 2px\">       <font size=\"2\">         <span>${Retailer_Email.Email}&nbsp;<\/span>&nbsp;<\/font>     <\/span>     <br />     <span style=\"padding: 2px\">       <font size=\"2\">         <span>${Retailer_Email.Phone_Number}&nbsp;<\/span>       <\/font>     <\/span>   <br />   <\/div> <\/div><\/div>"}},{"type":"text","element":{"id":"elem_15e08e99178","fields":[],"content":"<div style=\"\"><h6>List Items:<\/h6><\/div>"}},{"id":"elem_164a33b695c","type":"lookupfields","element":{"valueStyle":"width: 50%;","valueTextStyle":"text-align: center;","fieldLayoutType":"1","related_Form":"Add_Sales_List_Items","labelText":"List Items Add","wrapperStyle":"","labelStyle":"width: 50%; display: none;","Label_Name":"List_Items_Add","refFields":[{"valueStyle":"height:35px","fieldLayoutType":"2","labelText":"Product Code","labelStyle":"height:50px;font-weight:600","Label_Name":"Product_Code"},{"valueStyle":"height:35px","fieldLayoutType":"2","labelText":"Warehouse Code","labelStyle":"height:50px;font-weight:600","Label_Name":"Warehouse_Code"},{"valueStyle":"height:35px","fieldLayoutType":"2","labelText":"Ordered Quantity","labelStyle":"height:50px;font-weight:600","Label_Name":"Ordered_Quantity"},{"valueStyle":"height:35px","fieldLayoutType":"2","labelText":"Quantity","labelStyle":"height:50px;font-weight:600","Label_Name":"Quantity"},{"valueStyle":"height:35px","fieldLayoutType":"2","labelText":"Selling Unit Price","labelStyle":"height:50px;font-weight:600","Label_Name":"Unit_Price"},{"valueStyle":"height:35px","fieldLayoutType":"2","labelText":"Sub total","labelStyle":"height:50px;font-weight:600","Label_Name":"Sub_total"}],"labelTextStyle":"text-align: center;"}},{"id":"elem_1531746922751","type":"fields","element":{"valueStyle":"width: 20%;","valueTextStyle":"\n    text-align: center;\n","fieldLayoutType":"2","labelText":"Total Sales","wrapperStyle":"","labelStyle":"width: 80%;background:white;text-align:right;","Label_Name":"Total_Sales","labelTextStyle":""}},{"id":"elem_1531746922751","type":"fields","element":{"valueStyle":"width: 20%;text-align: center;","valueTextStyle":"","fieldLayoutType":"2","labelText":"Shipping and Handling Charges","wrapperStyle":"","labelStyle":"width: 80%;background:white;text-align:right;","Label_Name":"Shipping_and_Handling_Charges","labelTextStyle":""}},{"id":"elem_1531746922751","type":"fields","element":{"valueStyle":"width: 20%;text-align: center;","valueTextStyle":"","fieldLayoutType":"2","labelText":"Tax Percent","wrapperStyle":"","labelStyle":"width: 80%;background:white;text-align:right;","Label_Name":"Tax_Percent","labelTextStyle":""}},{"id":"elem_1531746922751","type":"fields","element":{"valueStyle":"width: 20%;text-align: center;","valueTextStyle":"","fieldLayoutType":"2","labelText":"Tax Amount","wrapperStyle":"","labelStyle":"width: 80%;background:white;text-align:right;","Label_Name":"Tax_Amount","labelTextStyle":""}},{"id":"elem_1531746922751","type":"fields","element":{"valueStyle":"width: 20%;text-align: center;","valueTextStyle":"","fieldLayoutType":"2","labelText":"Amount Receivable","wrapperStyle":"","labelStyle":"width: 80%;background:white;text-align:right;","Label_Name":"Invoice_Amount","labelTextStyle":""}},{"id":"elem_1531746922751","type":"fields","element":{"valueStyle":"width: 20%;text-align: center;","valueTextStyle":"","fieldLayoutType":"2","labelText":"Amount Received","wrapperStyle":"","labelStyle":"width: 80%;background:white;text-align:right;","Label_Name":"Amount_Received","labelTextStyle":""}}]}]}}],"id":1}],"resize":"default","templateStyle":"text-align: left; width: 100%; margin: 0 auto;","isHeaderEnabled":false}
				}
			}
		}
		form Add_Contact
		{
			displayname = "Add Contact"
			success message = "Application Shared with the Contact Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Account
			(
				type = picklist
				values  = Add_Accounts.ID
    			bidirectional = Contacts
    			displayformat = [Firm_Name]
				allow new entries = true
				[
					displayname = "Add New Account"
				]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Name
			(
    			type = name
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Email
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Phone_Number
			(
    			type = phonenumber
				displayname = "Phone Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Address
			(
    			type = address
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_12
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_22
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city2
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province2
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code2
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country2
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude2
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude2
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "users-2-a-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_Accounts
		{
			displayname = "Add Accounts"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have unique Firm_Name
			(
    			type = text
				displayname = "Firm Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Address
			(
    			type = address
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_12
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_22
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city2
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province2
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code2
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country2
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude2
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude2
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Contact_Number
			(
				type = number
				displayname = "Contact Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Phone_Number
			(
    			type = phonenumber
				displayname = "Phone Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Email
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = medium
			)
			Website
			(
    			type = url
	 			row = 1
	 			column = 1   
				width = medium
			)
			Contacts
			(
				type = list
				values  = Add_Contact.ID
    			bidirectional = Account
    			displayformat = [Name.first_name + " " + Name.last_name]
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
			Amount_Transaction
			(
				displayname = "Amount Transaction"
				type = USD
				initial value = 0.00
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "shopping-mobile-card"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Charts
	{
		icon = "shopping-chart"
		pivotchart Account_Stats
		{ 
			displayname = "Account Stats"
			based on Autoview_1503658754100_Add_Accounts
					hide = true
							icon = "business-chart-bar-32"				show all rows from Add_Accounts
				(
 					Address.address_line_12  as "Address"
 					Address.address_line_22  as "Address.Address Line 2"
 					Address.district_city2  as "Address.City / District"
 					Address.country2  as "Address.Country"
 					Address.latitude2  as "Address.latitude"
 					Address.state_province2  as "Address.State / Province"
 					Address.postal_Code2  as "Address.Postal Code"
 					Address.longitude2  as "Address.longitude"
 					Phone_Number  as "Phone Number"
 					Firm_Name  as "Firm Name"
 					Contact_Number  as "Contact Number"
 					Amount_Transaction  as "Amount Transaction"
 					Email 
				)
		}
		pivotchart Monthly_Sales
		{ 
			displayname = "Monthly Sales"
			based on Autoview_1503410872960_Accounting
					hide = true
							icon = "objects-diamond"				show all rows from Accounting
				(
 					Retailer_Name  as "Retailer Name"
 					Supplier_Name  as "Supplier Name"
 					User 
 					Credits 
 					Amount_Paid  as "Amount Paid"
 					Bill_Amount  as "Bill Amount"
 					Existing_Balance  as "Existing Balance"
 					Bill_Date  as "Bill Date"
 					Status 
				)
		}
		pivotchart Sales_by_Warehouse
		{ 
			displayname = "Sales by Warehouse"
			based on Autoview_1531392035800_Add_Sales_List_Items
					hide = true
							icon = "social-1-logo-shopify"				show all rows from Add_Sales_List_Items
				(
 					Product_Code  as "Product Code"
 					Warehouse_Code  as "Warehouse Code"
 					Invoice_ID  as "Invoice ID"
 					Sub_total  as "Sub total"
 					Unit_Price  as "Selling Unit Price"
 					Quantity  as "Delivered Quantity"
 					Ordered_Quantity  as "Ordered Quantity"
				)
		}
		pivotchart Weekly_Sales
		{ 
			displayname = "Weekly Sales"
			based on Autoview_1503410872960_Accounting
					hide = true
							icon = "objects-diamond"				show all rows from Accounting
				(
 					Retailer_Name  as "Retailer Name"
 					Supplier_Name  as "Supplier Name"
 					User 
 					Credits 
 					Amount_Paid  as "Amount Paid"
 					Bill_Amount  as "Bill Amount"
 					Existing_Balance  as "Existing Balance"
 					Bill_Date  as "Bill Date"
 					Status 
				)
		}
		pivotchart Weekly_Purchase
		{ 
			displayname = "Weekly Purchase"
			based on Autoview_1503468331591_Add_Purchase_Order
					hide = true
							icon = "business-progress"				show all rows from Add_Invoice
				(
 					Tax_Amount  as "Tax Amount"
 					Tax 
 					Company_Name  as "Company Name"
 					Purchased_Amount  as "Purchased Amount"
 					Total_Amount  as "Total Amount"
 					Supplier_Name  as "Supplier"
 					PO_copy  as "Invoice copy"
 					Purchase_Date  as "Purchase Date"
 					Amount_Paid  as "Amount Paid"
 					Invoice_Number  as "Purchased Invoice Number"
 					Shipping_and_Handling_Charges  as "Shipping and Handling Charges"
 					Existing_Balance  as "Existing Balance"
				)
		}
		pivotchart Monthly_Purchase
		{ 
			displayname = "Monthly Purchase"
			based on Autoview_1503468331591_Add_Purchase_Order
					hide = true
							icon = "shopping-tag-sale"				show all rows from Add_Invoice
				(
 					Tax_Amount  as "Tax Amount"
 					Tax 
 					Company_Name  as "Company Name"
 					Purchased_Amount  as "Purchased Amount"
 					Total_Amount  as "Total Amount"
 					Supplier_Name  as "Supplier"
 					PO_copy  as "Invoice copy"
 					Purchase_Date  as "Purchase Date"
 					Amount_Paid  as "Amount Paid"
 					Invoice_Number  as "Purchased Invoice Number"
 					Shipping_and_Handling_Charges  as "Shipping and Handling Charges"
 					Existing_Balance  as "Existing Balance"
				)
		}
		pivotchart Sales_by_Customer
		{ 
			displayname = "Sales by Customer"
			based on Autoview_1503408618126_Add_Sales
					hide = true
							icon = "shopping-discount"				show all rows from Add_Sales
				(
 					Company_Name  as "Company Name"
 					Amount_Received  as "Amount Received"
 					Tax_Percent  as "Tax Percent"
 					Sales_Date  as "Sales Date"
 					Tax_Amount  as "Tax Amount"
 					Total_Sales  as "Total Sales"
 					Invoice_ID  as "Invoice ID"
 					Invoice_Amount  as "Invoice Amount"
 					Shipping_and_Handling_Charges  as "Shipping and Handling Charges"
 					Retailer_Email  as "Retailer Email"
 					Retailer_Name  as "Retailer Name"
 					Order_ID  as "Order ID"
 					Existing_Balance  as "Existing Balance"
				)
		}
	}
	section Dashboard
	{
		icon = "ui-1-dashboard-half"
				 page Dashboard 
	 	 { 
 	 	 displayname = "Dashboard" 

 	 	 icon = "ui-1-dashboard-half" 
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\twebDeviceConfig='{\"layout\":{\"style\":\"padding-right:0px;padding-top:0px;padding-bottom:0px;padding-left:0px;\",\"design\":\"fluid\",\"displayType\":\"plain\"}}'\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='html_snippet'>\n\t<![CDATA[htmlpage html_snippet()\ncontent\n&lt;%{\n\t%&gt;\n&lt;link href=&quot;https:\/\/fonts.googleapis.com\/css?family=Karla&quot; rel=&quot;stylesheet&quot;&gt;\n    &lt;link href=&quot;https:\/\/fonts.googleapis.com\/css?family=Asap+Condensed&quot; rel=&quot;stylesheet&quot;&gt;\n    &lt;link href=&quot;https:\/\/fonts.googleapis.com\/css?family=Muli&quot; rel=&quot;stylesheet&quot;&gt;\n    &lt;style&gt;\n        .Wholebodywrap {\n            margin: 0.5%;\n            width: 99%;\n            box-sizing: border-box;\n            height: 100%;\n            font-family: &quot;Karla&quot; !important;\n            overflow: hidden;\n        }\n        .filmstrip {\n            width: 100%;\n        }\n        .filmstrip .single {\n            width: 24%;\n            margin: 0 0.5%;\n            box-sizing: border-box;\n            height: 110px;\n            border: 1px solid #efefef;\n            border-radius: 5px;\n            box-shadow: 0px 0px 1px #efefef;\n            text-align: center;\n            background: #faf8f8;\n            overflow: hidden;\n            padding: 0;\n        }\n        .single:hover .fa {\n            transform: rotateY(360deg);\n            transition: all 1.2s linear;\n        }\n        .pullleft {\n            float: left;\n        }\n        .pushright {\n            float: right;\n        }\n        .headtext {\n            margin: 0.5%;\n            width: 99%;\n            font-size: 22px;\n            color: #028168;\n            box-sizing: border-box;\n            display: -webkit-inline-box;\n            font-family: &quot;karla&quot;;\n        }\n        .numText {\n            font-size: 30px;\n            height: 60%;\n            line-height: 80px;\n            font-family: &quot;sans-serif&quot;;\n            overflow: hidden;\n            text-overflow: ellipsis;\n        }\n        .singleBox_Text {\n            font-size: 14px;\n            font-family: &quot;Karla&quot; !important;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            padding: 5px !important;\n            border-top-left-radius: 15px;\n            border-bottom-left-radius: 25px;\n            box-shadow: 0px 0px 2px #efefef;\n            background: white !important;\n            border: 1px solid #ededed !important;\n            display: block;\n            overflow: hidden;\n            border-right: transparent !important;\n            white-space: nowrap;\n            float: right;\n            \/*    box-shadow: 2px 0px 2px #fff;     background: white !important;     border: 2px solid #ededed;     border-right: none;*\/\n        }\n        .Maya_Blue {\n            color: #44a1d8;\n        }\n        .singleBox_Icons {\n            padding: 3px 6px !important;\n            float: left !important;\n            background: white !important;\n        }\n        .text_Blue {\n            color: #1293de;\n        }\n        .text_Red {\n            \/*  color:#de4a2f;*\/\n            \/*  color:#F08080;*\/\n            color: #db3f26;\n        }\n        .text_Green {\n            color: #388a10;\n        }\n        .text_Parshipped {\n            color: #ddb630;\n        }\n        .text_Currency {\n            color: #3ea885;\n        }\n        .text_AquaBlue {\n            color: #6acbc7;\n        }\n        .text_DarkRed {\n            color: #7f0000;\n        }\n        .text_LightGrey {\n            color: #949292;\n        }\n        .charts {\n            float: left;\n            width: 99%;\n            margin: 0.5%;\n            border: 1px solid #ededed;\n            box-shadow: 0px 0px 1px #ededed;\n            box-sizing: border-box;\n            overflow: hidden;\n        }\n        .headwrap {\n            height: 120px;\n            position: relative;\n            width: 100%;\n            box-sizing: border-box;\n            overflow: hidden;\n        }\n        .right_strip {\n            width: 100%;\n            border: 1px solid #ededed;\n            box-sizing: border-box;\n            border-radius: 5px;\n            background: #faf8f8;\n        }\n        #sales_table {\n            height: 110px;\n            box-sizing: border-box;\n            text-align: center;\n            border-collapse: collapse;\n            font-family: &quot;karla&quot;;\n            display: block;\n        }\n        #sales_table tbody {\n            display: inline-table;\n            height: 100%;\n            \/* width: 100%; *\/\n        }\n        #sales_table td {\n            text-align: center;\n            font-size: 15px;\n        }\n        #sales_table th {\n            width: 33%;\n            \/*   white-space:pre-wrap; *\/\n            white-space: nowrap;\n            text-overflow: ellipsis;\n            overflow: hidden;\n        }\n        .chart_Header {\n            height: 33px;\n            font-size: 18px;\n            font-weight: 200;\n            -webkit-font-smoothing: antialiased;\n            margin: 2% 2% 0 2%;\n            border-bottom: 1px solid #ededed;\n            box-sizing: border-box;\n            font-family: &quot;Muli&quot;, &quot;Asap Condensed&quot;, &quot;karla&quot;;\n        }\n        .companyName {\n            font-size: xx-large;\n            color: #323a4a;\n            \/*color: #ac0b0b; *\/\n            margin: 0.2%;\n            font-family: &quot;karla&quot;;\n        }\n        .configuration {\n            width: 230px;\n            font-size: 23px;\n            font-family: &quot;karla&quot;;\n\/*             -webkit-animation: rotate 2s linear 2; *\/\n\t\t\t-webkit-animation: bounce 3s 0.1s ease-in 3; \n\t\t\t-moz-animation: bounce 3s 0.1s ease-in 3;   \n\t\t\t-o-animation:  bounce 3s 0.1s ease-in 3;    \n\t\t\t-ms-transition:bounce 3s 0.1s ease-in 3;    \n\t\t\tanimation:bounce 3s 0.1s ease-in 3;    \n\/*             color: #5c94bd; *\/\n\t\t\tcolor:#3f51b5;\n            background: white;\n            border-bottom-left-radius: 50%;\n            border-bottom-right-radius: 50%;\n            box-shadow: 0px 0px 3px #f9f9f9;\n            transition: all 0.4s linear;\n            position: relative;\n            padding-top: 20px;\n            top: -20px;\n        }\n        .configuration:hover {\n            padding: 56px 0 ;\n            font-size: 26px;\n            transition: all 0.3s linear;\n            box-shadow: 0px 0px 3px #000000;\n        }\n        #zohoreportel {\n            height: 400px !important;\n        }\n        .divEmbedContainer {\n            height: 450px !important;\n        }\n        .companyName {\n            font-size: xx-large;\n            color: #323a4a;\n            margin: 0.2%;\n            font-family: &quot;karla&quot;;\n            width: 100%;\n        }\n        #report_1 .zc-pb-elem-hdr-container,\n        #report_2 .zc-pb-elem-hdr-container,\n        #report_3 .zc-pb-elem-hdr-container,\n        #report_4 .zc-pb-elem-hdr-container,\n        #report_5 .zc-pb-elem-hdr-container,\n        #report_6 .zc-pb-elem-hdr-container,\n        #report_7 .zc-pb-elem-hdr-container,\n        #report_8 .zc-pb-elem-hdr-container,\n        #report_9 .zc-pb-elem-hdr-container,\n        #report_10 .zc-pb-elem-hdr-container {\n            border-bottom: 1px solid #eee;\n            margin: 0px 10px;\n            padding-bottom: 5px;\n        }\n        #zohoreportel {\n            width: 96%;\n            margin: 1.3% !important;\n            border: 1px solid #eee;\n        }\n        [displaytype=&quot;plain&quot;] .elemContainment&gt;.zcpage-elemContainer&gt;.column-container&gt;.zpelement-wrapper {\n            border: none !important;\n        }\n        .zc-pb-elem-hdr-container div {\n            padding-top: 10px !important;\n        }\n        .zc-pb-elem-title-container span {\n            font-size: 20px;\n            font-weight: 200;\n            -webkit-font-smoothing: antialiased;\n            box-sizing: border-box;\n            font-family: &quot;karla&quot;, &quot;Asap Condensed&quot;;\n        }\n        .view-header {\n            display: none !important;\n        }\n\t\t.zc-pb-elem-title-container span{\n\t\t    font-weight: 200;\n\t\t    -webkit-font-smoothing: antialiased;\n\t\t    box-sizing: border-box;\n\t\t    font-family: &quot;Muli&quot;,&quot;Asap Condensed&quot;,&quot;karla&quot;;\n\t\t}\n    &lt;\/style&gt;\n&lt;%\n\tgetCompanyDetails = Company_Details[ID != 0];\n\tif(getCompanyDetails.count() == 0)\n\t{\n\t\t\/\/ \t\topenUrl(&quot;#Form:Company_Details&quot;, &quot;popup window&quot;);\n\t\tcompanyName = &quot;&lt;style&gt;.zc-component{overflow:hidden;}.popupbox-wrapper{overflow:hidden;}&lt;\/style&gt;&lt;div class=&apos;zcpopup default compact&apos;&gt;&lt;div class=&apos;popupbox-overlay&apos;&gt;&lt;div class=&apos;popupbox-wrapper&apos;&gt;&lt;a class=&apos;zc-live-primary-btn configuration&apos; href=&apos;#Form:Company_Details&apos;&gt; &lt;span class=&apos;fa fa-cog&apos; style=&apos;animation: rotate 7s infinite linear;&apos;&gt;&lt;\/span&gt; &lt;span&gt;Configure&lt;\/span&gt; &lt;\/a&gt;&lt;\/div&gt;&lt;!end of popupbox-wrapper div--&gt;&lt;\/div&gt;&lt;!end of popupbox-overlay div--&gt;&lt;\/div&gt;&lt;!end of zcpopup--&gt;&quot;;\n\t}\n\telse\n\t{\n\t\tcompanyName = getCompanyDetails.Company_Name;\n\t}\n\t%&gt;\n&lt;div class=&quot;Wholebodywrap&quot;&gt;\n        &lt;div class=&quot;col-md-12 companyName&quot;&gt;&lt;%=companyName%&gt;&lt;\/div&gt;\n        &lt;!end of headtext--&gt;\n        &lt;div class=&quot;row&quot;&gt;\n            &lt;div class=&quot;col-md-9&quot;&gt;\n                &lt;div class=&quot;headwrap&quot;&gt;\n                    &lt;div class=&quot;filmstrip pullleft &quot;&gt;\n                        &lt;a href=&quot;#Warehouse&quot;&gt;\n                            &lt;div class=&quot;single pullleft&quot;&gt;\n                                &lt;div class=&quot;numText text_Blue&quot;&gt;\n                                    &lt;%=thisapp.Page.getwarehouseCount()%&gt;\n                                &lt;\/div&gt;\n                                &lt;!end of numText--&gt;\n                                &lt;div class=&quot;singleBox_Text Maya_Blue&quot;&gt;&lt;span class=&quot;fa fa-building-o singleBox_Icons&quot;&gt;&lt;\/span&gt; Warehouse&lt;\/div&gt;\n                                &lt;!end of singleBox_Text div--&gt;\n                            &lt;\/div&gt;\n                            &lt;!end of single--&gt;\n                        &lt;\/a&gt;\n                        &lt;a href=&quot;#Report:Contacts&quot;&gt;\n                            &lt;div class=&quot;single pullleft&quot;&gt;\n                                &lt;div class=&quot;numText text_Red&quot;&gt;\n                                    &lt;%=thisapp.Page.getContactCount()%&gt;\n                                &lt;\/div&gt;\n                                &lt;!end of numText--&gt;\n                                &lt;div class=&quot;singleBox_Text text_Red&quot;&gt;&lt;span class=&quot;fa fa-users singleBox_Icons&quot;&gt;&lt;\/span&gt; Contacts&lt;\/div&gt;\n                                &lt;!end of singleBox_Text div--&gt;\n                            &lt;\/div&gt;\n                            &lt;!end of single--&gt;\n                        &lt;\/a&gt;\n                        &lt;a href=&quot;#Report:Accounts_Details&quot;&gt;\n                            &lt;div class=&quot;single pullleft&quot;&gt;\n                                &lt;div class=&quot;numText text_Green&quot;&gt;\n                                    &lt;%=thisapp.Page.getAccountsCount()%&gt;\n                                &lt;\/div&gt;\n                                &lt;!end of numText--&gt;\n                                &lt;div class=&quot;singleBox_Text text_Green&quot;&gt;&lt;span class=&quot;fa fa-money singleBox_Icons&quot;&gt;&lt;\/span&gt; Accounts&lt;\/div&gt;\n                                &lt;!end of singleBox_Text div--&gt;\n                            &lt;\/div&gt;\n                            &lt;!end of single--&gt;\n                        &lt;\/a&gt;\n                        &lt;a href=&quot;#Report:Suppliers_Details&quot;&gt;\n                            &lt;div class=&quot;single pullleft&quot;&gt;\n                                &lt;div class=&quot;numText text_Parshipped&quot;&gt;\n                                    &lt;%=thisapp.Page.getSuppliersCount()%&gt;\n                                &lt;\/div&gt;\n                                &lt;!end of numText--&gt;\n                                &lt;div class=&quot;singleBox_Text text_Parshipped&quot;&gt;&lt;span class=&quot;fa fa-user singleBox_Icons&quot;&gt;&lt;\/span&gt; Suppliers&lt;\/div&gt;\n                                &lt;!end of singleBox_Text div--&gt;\n                            &lt;\/div&gt;\n                            &lt;!end of single--&gt;\n                        &lt;\/a&gt;\n                    &lt;\/div&gt;\n                    &lt;!end of headwrap--&gt;\n                &lt;\/div&gt;\n                &lt;!end of filmstrip--&gt;\n            &lt;\/div&gt;\n            &lt;! end of col-md-9--&gt;\n            &lt;div class=&quot;col-md-3&quot;&gt;\n                &lt;div class=&quot;pullleft right_strip&quot;&gt;\n                    &lt;table id=&quot;sales_table&quot; cellpadding=&quot;5&quot; cellspacing=&quot;5&quot;&gt;\n                        &lt;tbody&gt;\n                            &lt;tr&gt;\n                                &lt;th&gt;&lt;\/th&gt;\n                                &lt;!end of first column--&gt;\n                                &lt;th class=&quot;text_AquaBlue&quot;&gt;Quantity&lt;\/th&gt;\n                                &lt;!end of first column--&gt;\n                                &lt;th class=&quot;text_Currency&quot;&gt;Currency&lt;\/th&gt;\n                                &lt;!end of first column--&gt;\n                            &lt;\/tr&gt;\n                            &lt;!end of first row--&gt;\n                            &lt;tr&gt;\n                                &lt;th class=&quot;text_LightGrey&quot;&gt;Today Sales&lt;\/th&gt;\n                                &lt;!end of first column--&gt;\n                                &lt;td class=&quot;text_DarkRed&quot;&gt;\n                                    &lt;%=thisapp.Page.todaySalesQty()%&gt;units&lt;\/td&gt;\n                                &lt;!end of first column--&gt;\n                                &lt;td class=&quot;text_DarkRed&quot;&gt;$\n                                    &lt;%=thisapp.Page.todaySalesAmount()%&gt;\n                                &lt;\/td&gt;\n                                &lt;!end of first column--&gt;\n                            &lt;\/tr&gt;\n                            &lt;!end of first row--&gt;\n                            &lt;tr&gt;\n                                &lt;th class=&quot;text_LightGrey&quot;&gt;Today Purchase&lt;\/th&gt;\n                                &lt;!end of first column--&gt;\n                                &lt;td class=&quot;text_DarkRed&quot;&gt;\n                                    &lt;%=thisapp.Page.todayPurchaseQty()%&gt;units&lt;\/td&gt;\n                                &lt;!end of first column--&gt;\n                                &lt;td class=&quot;text_DarkRed&quot;&gt;$\n                                    &lt;%=thisapp.Page.todayPurchaseAmnt()%&gt;\n                                &lt;\/td&gt;\n                                &lt;!end of first column--&gt;\n                            &lt;\/tr&gt;\n                            &lt;!end of first row--&gt;\n                        &lt;\/tbody&gt;\n                        &lt;!end of tbody--&gt;\n                    &lt;\/table&gt;\n                    &lt;!end of table--&gt;\n                &lt;\/div&gt;\n                &lt;!end of right strip--&gt;\n            &lt;\/div&gt;\n            &lt;!end of col-md-3--&gt;\n        &lt;\/div&gt;\n        &lt;!end of row--&gt;\n    &lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"50%\"\n   \t>\n\t<report    \t\t appLinkName = 'thisapp'\n   \t\t linkName = 'Weekly_Sales'\n   \t\t heightType = 'auto'\n   \t\t heightValue = '700'\n   \t\t iszreport = 'true'\n   \t\t title = 'Weekly Sales'\n\n\/>\n<\/column><column\n   \t\t width=\"50%\"\n   \t>\n\t<report    \t\t appLinkName = 'thisapp'\n   \t\t linkName = 'Monthly_Sales'\n   \t\t heightType = 'auto'\n   \t\t heightValue = '700'\n   \t\t iszreport = 'true'\n   \t\t title = 'Monthly Sales'\n\n\/>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"50%\"\n   \t>\n\t<report    \t\t appLinkName = 'thisapp'\n   \t\t linkName = 'Sales_by_Customer'\n   \t\t heightType = 'auto'\n   \t\t heightValue = '700'\n   \t\t iszreport = 'true'\n   \t\t title = 'Sales by Customer'\n\n\/>\n<\/column><column\n   \t\t width=\"50%\"\n   \t>\n\t<report    \t\t appLinkName = 'thisapp'\n   \t\t linkName = 'Sales_by_Warehouse'\n   \t\t heightType = 'auto'\n   \t\t heightValue = '700'\n   \t\t iszreport = 'true'\n   \t\t title = 'Sales by Warehouse'\n\n\/>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"50%\"\n   \t>\n\t<report    \t\t appLinkName = 'thisapp'\n   \t\t linkName = 'Countries_Map'\n   \t\t heightType = 'auto'\n   \t\t heightValue = '700'\n   \t\t zc_Footer = 'false'\n   \t\t zc_AddRec = 'false'\n   \t\t zc_EditRec = 'false'\n   \t\t zc_Print = 'false'\n   \t\t zc_Export = 'false'\n   \t\t zc_DelRec = 'false'\n   \t\t zc_DuplRec = 'false'\n   \t\t zc_Search = 'false'\n   \t\t title = 'Branches'\n\n\/>\n<\/column><column\n   \t\t width=\"50%\"\n   \t>\n\t<report    \t\t appLinkName = 'thisapp'\n   \t\t linkName = 'Warehouse_Details'\n   \t\t heightType = 'auto'\n   \t\t heightValue = '700'\n   \t\t zc_Footer = 'false'\n   \t\t zc_AddRec = 'false'\n   \t\t zc_EditRec = 'false'\n   \t\t zc_Print = 'false'\n   \t\t zc_Export = 'false'\n   \t\t zc_DelRec = 'false'\n   \t\t zc_DuplRec = 'false'\n   \t\t zc_Search = 'false'\n   \t\t title = 'Warehouse Details'\n\n\/>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"50%\"\n   \t>\n\t<report    \t\t appLinkName = 'thisapp'\n   \t\t linkName = 'Weekly_Purchase'\n   \t\t heightType = 'auto'\n   \t\t heightValue = '700'\n   \t\t iszreport = 'true'\n   \t\t title = 'Weekly Purchase'\n\n\/>\n<\/column><column\n   \t\t width=\"50%\"\n   \t>\n\t<report    \t\t appLinkName = 'thisapp'\n   \t\t linkName = 'Monthly_Purchase'\n   \t\t heightType = 'auto'\n   \t\t heightValue = '700'\n   \t\t iszreport = 'true'\n   \t\t title = 'Monthly Purchase'\n\n\/>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"50%\"\n   \t>\n\t<report    \t\t appLinkName = 'thisapp'\n   \t\t linkName = 'Contact_Stats'\n   \t\t heightType = 'auto'\n   \t\t heightValue = '700'\n   \t\t iszreport = 'true'\n   \t\t title = 'Contact Stats'\n\n\/>\n<\/column><column\n   \t\t width=\"50%\"\n   \t>\n\t<report    \t\t appLinkName = 'thisapp'\n   \t\t linkName = 'Account_Stats'\n   \t\t heightType = 'auto'\n   \t\t heightValue = '700'\n   \t\t iszreport = 'true'\n   \t\t title = 'Accountwise Transaction Details'\n\n\/>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
	}
	section Suppliers
	{
		icon = "users-multiple-11"
		form Add_Supplier
		{
			displayname = "Add Supplier"
			success message = "Supplier Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Name
			(
    			type = name
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			Phone_Number
			(
    			type = phonenumber
				displayname = "Phone Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Supplier_Email
			(
    			type = email
				displayname = "Supplier Email"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Company_Name
			(
    			type = text
				displayname = "Company Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Company_Address
			(
    			type = address
				displayname = "Company Address"
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_12
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_22
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city2
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province2
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code2
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country2
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude2
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude2
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			Products_Supply
			(
				type = list
				displayname = "Products Supply"
				values  = Add_Product.ID
    			bidirectional = Supplier_Name
    			displayformat = [Product_Name]
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "food-hob"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		custom Suppliers_Details
		{
			displayName = "Suppliers Details"
			show all rows from Add_Supplier    
			(
				Phone_Number as "Phone Number"
				Company_Name as "Company Name"
				Supplier_Email as "Supplier Email"
				Name 
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				Company_Address  as "Company Address"
	 			(
	      			displayformat = [address_line_12+""+address_line_22+""+district_city2+""+state_province2+""+postal_Code2+""+country2]
	      			enable = Show_As_Text
	 			)
			)
			options
			(
				icon = "users-2-contacts-44"
	 		)
			quickview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = 4
		     			title = "Overview"
						fields
						(
							Name
							Company_Address as "Company Address"
							Phone_Number as "Phone Number"
							Supplier_Email as "Supplier Email"
							Company_Name as "Company Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Name
							Phone_Number as "Phone Number"
							Supplier_Email as "Supplier Email"
							Company_Name as "Company Name"
							Company_Address as "Company Address"
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "Products Supply"
		     			related field =  Products_Supply
						fields
						(
							Product_Image as "Product Image"
							Product_Code as "Product Code"
							Product_Name as "Product Name"
							Category
							Model
							Size
							Product_Description as "Product Description"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Purchase_Orders
	{
		displayname= "Purchase Orders"
		icon = "shopping-cart-modern"
		form Add_Invoice
		{
			displayname = "Add Invoice"
			success message = "Purchase Invoice Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Company_Name
			(
				type = picklist
				displayname = "Company Name"
				values  = Company_Details.ID
    			displayformat = [Company_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Invoice_Number
			(
    			type = text
				displayname = "Purchased Invoice Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have PO_copy
			(
    			type = upload file
				displayname = "Invoice copy"
				browse = local_drive
	 			row = 1
	 			column = 1   
				width = medium
			)
			Purchase_Date
			(
    			type = date
				displayname = "Purchase Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Supplier_Name
			(
				type = picklist
				displayname = "Supplier"
				values  = Add_Supplier.ID
    			displayformat = [" " + Company_Name + " - " + Name.first_name + " " + Name.last_name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have List_Item
			(
				type = grid
				displayname = "List Item"
				defaultrow = 1
	    
				must have Product_Code
				(
					type = picklist
					displayname = "Product Code"
					values  = Add_Product.ID
    				displayformat = [Product_Code + " - " + Product_Name]
					searchable = true
					sortorder = ascending
					width = medium
				)
				must have Quantity
				(
					type = number
					initial value = 1
					width = medium
				)
				must have Unit_Price
				(
					displayname = "Unit Price"
					type = USD
					width = medium
				)
				must have Subtotal
				(
					type = USD
					width = medium
				)
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Purchased_Amount
			(
				displayname = "Purchased Amount"
				type = USD
				maxchar = 15
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Shipping_and_Handling_Charges
			(
				displayname = "Shipping and Handling Charges"
				type = USD
				maxchar = 15
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Tax
			(
    			type = percentage
	 			row = 1
	 			column = 1   
				width = medium
			)
			Tax_Amount
			(
				displayname = "Tax Amount"
				type = USD
				maxchar = 15
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Total_Amount
			(
				displayname = "Total Amount"
				type = USD
				maxchar = 15
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Existing_Balance
			(
				displayname = "Existing Balance"
				type = USD
				initial value = 0.00
				maxchar = 15
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Amount_Paid
			(
				displayname = "Amount Paid"
				type = USD
				maxchar = 15
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "shopping-receipt-list-42"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		print template
			{
				Purchase_Orders_Summary
				{
						displayname = "Purchase Orders Summary"
						content = {"layout":"1","pageNumberOption":null,"orientation":"landscape","isFooterEnabled":false,"mainLayout":[{"elements":[{"type":"columns","element":{"split":"100","id":"elem_15da36d01e71","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"elem_15da1d8e67a","fields":[],"content":"<div><div style=\"border-bottom: 1px solid rgb(237, 237, 237); font-size: 18px; text-align: right; color: rgb(156, 146, 146); padding: 5px 15px; margin: 15px\">Purchase Order<\/div><\/div>"}},{"type":"columns","element":{"split":"100","id":"elem_15da1d8e6791","elemStyle":"","collayouts":[{"colElements":[{"type":"columns","element":{"split":"50,50","id":"elem_15da1dc18981","elemStyle":"margin:0 15px;height:50px;","collayouts":[{"colElements":[{"type":"text","element":{"Fields":[{"Label_Name":"Invoice_Number"}],"content":"<div style=\"\"><div style=\"line-height: 50px; font-size: 16px; padding: 0 15px\">#${Invoice_Number}<\/div><\/div>"}}]},{"colElements":[{"type":"text","element":{"Fields":[{"Label_Name":"Purchase_Date"}],"content":"<div style=\"\"><div style=\"line-height: 50px; font-size: 16px; text-align: right; padding: 0 15px\">${Purchase_Date}<\/div><\/div>"}}]}]}}]}]}},{"type":"columns","element":{"split":"100","id":"elem_15e0eb5ff7f1","elemStyle":"margin:0 15px;","collayouts":[{"colElements":[{"id":"elem_1647e5599f4","type":"lookupfields","element":{"valueStyle":"width: 50%;","valueTextStyle":"text-align:center;","fieldLayoutType":"1","related_Form":"ZC_SUBFORM_691","labelText":"List Item","wrapperStyle":"margin:0 15px;","labelStyle":"width: 50%; display: none;","Label_Name":"List_Item","refFields":[{"valueStyle":"height:30px;","fieldLayoutType":"2","labelText":"Product Code","labelStyle":"height:50px;width: 20%;","Label_Name":"Product_Code"},{"valueStyle":"height:30px;","fieldLayoutType":"2","labelText":"Quantity","labelStyle":"height:50px;width: 20%;","Label_Name":"Quantity"},{"valueStyle":"height:30px;","fieldLayoutType":"2","labelText":"Unit Price","labelStyle":"height:50px;width: 20%;","Label_Name":"Unit_Price"},{"valueStyle":"height:30px;","fieldLayoutType":"2","labelText":"Subtotal","labelStyle":"height:50px;width: 20%;","Label_Name":"Subtotal"}],"labelTextStyle":""}},{"type":"text","element":{"Fields":[{"Label_Name":"Purchased_Amount"}],"content":"<div style=\"\"><div style=\"text-align: right; font-size: 14px\">   <table style=\"width: 100%; height: 35px\">     <tbody>       <tr>         <th style=\"text-align: right; width: 20%; color: black; font-size: 13px; float: right; height: 100%; padding: 15px 5px\">           Purchased Amount<\/th>         <td style=\"padding: 5px; width: 20%; text-align: center\"><span><span>${Purchased_Amount}<\/span><\/span>         <\/td>       <\/tr>     <\/tbody>   <\/table> <\/div><\/div>"}},{"type":"text","element":{"Fields":[{"Label_Name":"Shipping_and_Handling_Charges"}],"content":"<div style=\"\"><div style=\"text-align: right; font-size: 14px\">   <table style=\"width: 100%; height: 35px\">     <tbody>       <tr>         <th style=\"text-align: right; width: 20%; color: black; font-size: 13px; float: right; height: 100%; padding: 15px 5px\">           Shipping and Handling Charges <\/th>         <td style=\"padding: 5px; width: 20%; text-align: center\">           <span><span><span>${Shipping_and_Handling_Charges}<\/span><\/span><\/span>         <\/td>       <\/tr>     <\/tbody>   <\/table> <\/div><\/div>"}},{"type":"text","element":{"Fields":[{"Label_Name":"Tax"}],"content":"<div style=\"\"><div style=\"text-align: right; font-size: 14px\">   <table style=\"width: 100%; height: 35px\">     <tbody>       <tr>         <th style=\"text-align: right; width: 20%; color: black; font-size: 13px; float: right; height: 100%; padding: 15px 5px\">           Tax Percent<\/th>         <td style=\"padding: 5px; width: 20%; text-align: center\">    ${Tax}    <\/td>       <\/tr>     <\/tbody>   <\/table> <\/div><\/div>"}},{"type":"text","element":{"Fields":[{"Label_Name":"Tax_Amount"}],"content":"<div style=\"\"><div style=\"text-align: right; font-size: 14px\">   <table style=\"width: 100%; height: 35px\">     <tbody>       <tr>         <th style=\"text-align: right; width: 20%; color: black; font-size: 13px; float: right; height: 100%; padding: 15px 5px\">           Tax Amount<\/th>         <td style=\"padding: 5px; width: 20%; text-align: center\">           <span>${Tax_Amount}<\/span>         <\/td>       <\/tr>     <\/tbody>   <\/table> <\/div><\/div>"}},{"type":"text","element":{"Fields":[{"Label_Name":"Total_Amount"}],"content":"<div style=\"\"><div style=\"text-align: right; font-size: 14px\">   <table style=\"width: 100%; height: 35px\">     <tbody>       <tr>         <th style=\"text-align: right; width: 20%; color: black; font-size: 13px; float: right; height: 100%; padding: 15px 5px\">           Total Amount<\/th>         <td style=\"padding: 5px; width: 20%; text-align: center\">    <span>${Total_Amount}<\/span>     <\/td>       <\/tr>     <\/tbody>   <\/table> <\/div><\/div>"}},{"type":"text","element":{"Fields":[{"Label_Name":"Amount_Paid"}],"content":"<div style=\"\"><div style=\"text-align: right; font-size: 14px\">   <table style=\"width: 100%; height: 50px\">     <tbody>       <tr>         <th style=\"text-align: right; width: 20%; color: black; font-size: 13px; float: right; height: 100%; padding: 15px 5px\">           Amount Paid<\/th>         <td style=\"padding: 5px; width: 20%; text-align: center; background: rgb(237, 237, 237)\">           <span>${Amount_Paid}<\/span>         <\/td>       <\/tr>     <\/tbody>   <\/table> <\/div><\/div>"}}]}]}},{"type":"columns","element":{"split":"50,50","id":"elem_15da6fd79231","elemStyle":"margin:0 15px;","collayouts":[{"colElements":[{"type":"text","element":{"id":"elem_15dcaec5ebb","fields":[],"content":"<div style=\"\"><div style=\"border-bottom: 1px solid rgb(237, 237, 237); font-size: 18px; text-align: left; color: rgb(156, 146, 146); padding: 5px 15px; margin: 15px\">   <div>Supplier Address:<\/div> <\/div><\/div>"}},{"type":"text","element":{"Fields":[{"Related_Fields":["Company_Address"],"Label_Name":"Supplier_Name"},{"Related_Fields":["Company_Name"],"Label_Name":"Supplier_Name"},{"Related_Fields":["Name"],"Label_Name":"Supplier_Name"},{"Related_Fields":["Phone_Number"],"Label_Name":"Supplier_Name"}],"content":"<div style=\"\"><div style=\"margin: 0 25px\"> <p style=\"color: rgb(107, 97, 97); font-size: 14px\">      <span>${Supplier_Name.Company_Name}<\/span> <\/p><p style=\"color: rgb(107, 97, 97); font-size: 14px\"><span><span><span>${Supplier_Name.Company_Address}<\/span><\/span><br /><\/span><\/p><p style=\"color: rgb(107, 97, 97); font-size: 14px\"><span><span><span><span><span>${Supplier_Name.Name}<\/span><\/span><\/span><\/span><\/span><\/p><p style=\"color: rgb(107, 97, 97); font-size: 14px\"><span><span><span><span><span>${Supplier_Name.Phone_Number}<\/span><\/span><br /><\/span><\/span><\/span><\/p> <p style=\"color: rgb(137, 128, 128)\">  <span><\/span> <\/p> <\/div><\/div>"}}]},{"colElements":[{"type":"text","element":{"id":"elem_15dcaf1ca3a","fields":[],"content":"<div><div style=\"border-bottom: 1px solid rgb(237, 237, 237); font-size: 18px; text-align: left; color: rgb(156, 146, 146); padding: 5px 15px; margin: 15px\">   <div>Shipping Address:<\/div> <\/div><\/div>"}},{"type":"text","element":{"Fields":[{"Related_Fields":["Company_Address"],"Label_Name":"Company_Name"},{"Related_Fields":["Company_Name"],"Label_Name":"Company_Name"},{"Related_Fields":["Head_Distributor_Name"],"Label_Name":"Company_Name"},{"Related_Fields":["Mobile_Number"],"Label_Name":"Company_Name"}],"content":"<div style=\"\"><div style=\"margin: 0 25px\">   <p style=\"color: rgb(107, 97, 97); font-size: 14px\">      <span>${Company_Name.Company_Name}<\/span>   <\/p><p style=\"color: rgb(107, 97, 97); font-size: 14px\"><span><span><span>${Company_Name.Company_Address}<\/span><\/span><br /><\/span><\/p><p style=\"color: rgb(107, 97, 97); font-size: 14px\"><span><span><span><span><span>${Company_Name.Head_Distributor_Name}<\/span><\/span><\/span><\/span><\/span><\/p><p style=\"color: rgb(107, 97, 97); font-size: 14px\"><span><span><span><span><span>${Company_Name.Mobile_Number}<\/span><\/span><br /><\/span><\/span><\/span><\/p>   <p style=\"color: rgb(137, 128, 128)\">     <span><\/span>   <\/p> <\/div><\/div>"}}]}]}}]}]}}],"id":1}],"resize":"default","templateStyle":"text-align: left; width: 100%; margin: 0px; border: 2px solid rgb(219, 219, 219); padding: 0px;","isHeaderEnabled":false}
				}
			}
		}
		list Vendor_Purchase_Invoice
		{
			displayName = "Vendor Purchase Invoice"
			template = Purchase_Orders_Summary
			print template = Purchase_Orders_Summary
			show all rows from Add_Invoice    
			(
				Tax as "Tax Percent"
				Shipping_and_Handling_Charges as "Shipping and Handling Charges"
				Purchased_Amount as "Purchased Amount"
				Supplier_Name as "Supplier"
				Purchase_Date as "Purchase Date"
				PO_copy as "Invoice copy"
				Invoice_Number as "Purchased Invoice Number"
				Added_Time as "Added Time"
				Amount_Paid as "Amount Paid"
				Tax_Amount as "Tax Amount"
				Existing_Balance as "Existing Balance"
				Total_Amount as "Total Amount"
			)
			options
			(
				icon = "shopping-receipt-list-42"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Added_Time as "Added Time"
							Invoice_Number as "Purchased Invoice Number"
							PO_copy as "Invoice copy"
							Purchase_Date as "Purchase Date"
							Supplier_Name as "Supplier"
							Purchased_Amount as "Purchased Amount"
							Shipping_and_Handling_Charges as "Shipping and Handling Charges"
							Tax as "Tax Percent"
							Tax_Amount as "Tax Amount"
							Total_Amount as "Total Amount"
							Amount_Paid as "Amount Paid"
							Existing_Balance as "Existing Balance"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Added_Time as "Added Time"
							Invoice_Number as "Purchased Invoice Number"
							PO_copy as "Invoice copy"
							Purchase_Date as "Purchase Date"
							Supplier_Name as "Supplier"
							Purchased_Amount as "Purchased Amount"
							Shipping_and_Handling_Charges as "Shipping and Handling Charges"
							Tax as "Tax Percent"
							Tax_Amount as "Tax Amount"
							Total_Amount as "Total Amount"
							Amount_Paid as "Amount Paid"
							Existing_Balance as "Existing Balance"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Main_Inventory
	{
		displayname= "Main Inventory"
		icon = "design-app"
		list Inventory_Details
		{
			displayName = "Inventory Details"
			show all rows from Inventory_stateform    
			(
				Qty_Inhand as "Qty. Inhand"
				Qty_Distributed as "Qty. Distributed"
				custom action "Add to Warehouse Stock"
				(
	  			workflow = Add_to_Warehouse_Stock
				show action in view header = true
				show action in edit record menu = true
				column header = "Add to Warehouse Stock"
				success message = ""
				condition = (Qty_Inhand > 0)
				)
				Product_Code as "Product Code"
			)
			options
			(
				icon = "shopping-stock"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Product_Code as "Product Code"
							Qty_Inhand as "Qty. Inhand"
							Qty_Distributed as "Qty. Distributed"
				"Add to Warehouse Stock"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
								"Add to Warehouse Stock"
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
								"Add to Warehouse Stock"
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Product_Code as "Product Code"
							Qty_Inhand as "Qty. Inhand"
							Qty_Distributed as "Qty. Distributed"
				"Add to Warehouse Stock"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Inventory
		{
			store data in zc = false
			success message = ""
			field alignment = left
			feature property = 32
			must have Product_Code
			(
				type = picklist
				displayname = "Product Code"
				values  = Add_Product.ID
    			displayformat = [Product_Code]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Qty_Inhand
			(
				type = number
				displayname = "Qty. Inhand"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Qty_Distributed
			(
				type = number
				displayname = "Qty. Distributed"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Stocks
			(
				type = list
				values  = Add_Stock.ID
    			displayformat = [Stock_Inflow]
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "shopping-stock"
			)
			actions
			{
				Submit
				(
   					type = submit
   					displayname = "Submit"
				)
				Reset
				(
   					type = reset
   					displayname = "Reset"
				)
			}
		}
	}
	section Warehouse
	{
		icon = "business-building"
		form Stock
		{
			displayname = "Add Stock"
			store data in zc = false
			success message = ""
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Inventory
			(
				type = picklist
				values  = Inventory_stateform.ID
    			displayformat = [ID]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Product_Code
			(
				type = picklist
				displayname = "Product Code"
				values  = Add_Product.ID
    			displayformat = [Product_Code]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Warehouse_Code
			(
				type = list
				displayname = "Warehouse Code"
				values  = Add_Warehouse.ID
    			displayformat = [Warehouse_Code]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Qty
			(
				type = number
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Availability
			(
				type = picklist
				values = {"In Stock", "Out of Stock"}
				initial value = "In Stock"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "shopping-stock"
			)
			actions
			{
				Submit
				(
   					type = submit
   					displayname = "Submit"
				)
				Reset
				(
   					type = reset
   					displayname = "Reset"
				)
			}
		}
		list Warehouse_Details
		{
			displayName = "Warehouse Details"
			show all rows from Add_Warehouse    
			(
				Warehouse_Address  as "Warehouse Address"
	 			(
	      			displayformat = [address_line_12+""+address_line_22+""+district_city2+""+state_province2+""+postal_Code2+""+country2]
	      			enable = Link_to_Map,Show_As_Text
	 			)
				Company_Name as "Company Name"
				Warehouse_Name as "Warehouse Name"
				Warehouse_Code as "Warehouse Code"
			)
			group by
			(
				Company_Name ascending
			)
			options
			(
				icon = "shopping-shop-location"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Warehouse_Code as "Warehouse Code"
							Warehouse_Name as "Warehouse Name"
							Company_Name as "Company Name"
							Warehouse_Address as "Warehouse Address"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Warehouse_Code as "Warehouse Code"
							Warehouse_Name as "Warehouse Name"
							Company_Name as "Company Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Stocks_Detials
		{
			displayName = "Stocks Details"
			show all rows from Add_Stock    
			(
				Product_Code.Product_Image as "Product Image"
				Stock_Inflow as "Stock Inflow"
				Stock_Outflow as "Stock Outflow"
				Availability
				Warehouse_Code as "Warehouse Code"
				Product_Code as "Product Code"
			)
			group by
			(
				Warehouse_Code ascending
			)
			sort by
			(
				Product_Code ascending
			)
			options
			(
				icon = "business-stock"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Warehouse_Code as "Warehouse Code"
							Product_Code as "Product Code"
							Stock_Inflow as "Stock Inflow"
							Stock_Outflow as "Stock Outflow"
							Availability
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Warehouse_Code as "Warehouse Code"
							Product_Code as "Product Code"
							Stock_Inflow as "Stock Inflow"
							Stock_Outflow as "Stock Outflow"
							Availability
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		map Countries_Map
		{
			displayName = "Countries Map"
			show all rows from Add_Warehouse    
			(
				Company_Name as "Company Name"
				Warehouse_Code as "Warehouse Code"
				Warehouse_Name as "Warehouse Name"
				Warehouse_Address  as "Warehouse Address"
	 			(
	      			displayformat = [address_line_12+""+address_line_22+""+district_city2+""+state_province2+""+postal_Code2+""+country2]
	      			enable = Show_As_Text
	 			)
			)
			options
			(
	 			display field = Warehouse_Address
	 	 		radius = 100 Miles
		 		icon = "users-2-pin"
	 		)
			quickview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = 1
		     			title = "Overview"
						fields
						(
							Company_Name as "Company Name"
							Warehouse_Code as "Warehouse Code"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Company_Name as "Company Name"
							Warehouse_Code as "Warehouse Code"
							Warehouse_Name as "Warehouse Name"
							Warehouse_Address as "Warehouse Address"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		pivotchart Stock_Availability
		{ 
			displayname = "Stock Availability"
			based on Autoview_1503468935932_Add_Stock
							icon = "shopping-stock"				show all rows from Add_Stock
				(
 					Availability 
 					Inventory 
 					Product_Code  as "Product Code"
 					Warehouse_Code  as "Warehouse Code"
 					Stock_Outflow  as "Stock Outflow"
 					Stock_Inflow  as "Stock Inflow"
				)
		}
	}
	section page
	{
		displayname= "Order Management"
		icon = "ui-1-check-square-11"
		form New_Order_Request
		{
			displayname = "New Order Request"
			success message = "Sales Request Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Company_Name
			(
				type = picklist
				displayname = "Company Name"
				values  = Company_Details.ID
    			displayformat = [Company_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Order_ID
			(
    			type = autonumber
				displayname = "Order ID"
				start index = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Ordered_Date
			(
    			type = date
				displayname = "Ordered Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Retailer
			(
				type = picklist
				values  = Add_Contact.ID
    			displayformat = [Name.first_name + Name.last_name + " - " + Email]
				allow new entries = true
				[
					displayname = "Add New Retailer"
				]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Expected_Delivery_Date
			(
    			type = date
				displayname = "Expected Delivery Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have List_Item
			(
				type = grid
				displayname = "List Item"
				defaultrow = 1
	    
				must have Product_Code
				(
					type = picklist
					displayname = "Product Code"
					values  = Add_Product.ID
    				displayformat = [Product_Code + " - " + Product_Name]
					searchable = true
					sortorder = ascending
					width = medium
				)
				must have Quantity
				(
					type = number
					initial value = 1
					width = medium
				)
	 			row = 1
	 			column = 1   
				width = medium
			)
			Status
			(
				type = picklist
				values = {"Requested", "Approved", "Delivered", "Declined"}
				initial value = "Requested"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Handled_By
			(
				type = picklist
				displayname = "Handled By"
				values  = Add_Distributor_Details.ID
    			displayformat = [Distributor_Email]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Comments
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			Sales_Invoice
			(
				type = picklist
				displayname = "Sales Invoice"
				values  = Add_Sales.ID
    			bidirectional = Order_ID
    			displayformat = [Invoice_ID]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "shopping-basket-edit"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Orders
		{
			displayName = "Orders"
			show all rows from New_Order_Request    
			(
				Comments
				List_Item.Product_Code as "List Item"
				(
					isLinkEnabled = true
				)
				List_Item.Quantity as "List Item.Quantity"
				Company_Name as "Company Name"
				Handled_By as "Handled By"
				Expected_Delivery_Date as "Expected Delivery Date"
				Status
				Retailer
				Order_ID as "Order ID"
				Ordered_Date as "Ordered Date"
			)
			group by
			(
				Status ascending
			)
			options
			(
				icon = "shopping-list"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Ordered_Date as "Ordered Date"
							Company_Name as "Company Name"
							Order_ID as "Order ID"
							Retailer
							Status
							Expected_Delivery_Date as "Expected Delivery Date"
							Handled_By as "Handled By"
							Comments
							List_Item.Product_Code as "List Item"
							List_Item.Quantity as "List Item.Quantity"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Ordered_Date as "Ordered Date"
							Company_Name as "Company Name"
							Order_ID as "Order ID"
							Retailer
							Status
							Expected_Delivery_Date as "Expected Delivery Date"
							Handled_By as "Handled By"
							Comments
							List_Item.Product_Code as "List Item"
							List_Item.Quantity as "List Item.Quantity"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Pending_Orders
		{
			displayName = "Pending Orders"
			show all rows from New_Order_Request  [Status == "Requested"]  
			(
				List_Item.Product_Code as "List Item"
				List_Item.Quantity as "List Item.Quantity"
				Retailer
				custom action "Approve"
				(
	  			workflow = Approve
				show action in view header = true
				column header = "Approve"
				success message = ""
				condition = (Status == "Requested" && Status != "Declined")
				)
				Expected_Delivery_Date as "Expected Delivery Date"
				Status
				Handled_By as "Handled By"
				custom action "Decline"
				(
	  			workflow = Decline
				show action in view header = true
				column header = "Decline"
				success message = ""
				condition = (Status == "Requested" && Status != "Approved")
				)
				Comments
				Ordered_Date as "Ordered Date"
				Order_ID as "Order ID"
			)
			options
			(
				icon = "ui-2-hourglass"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
				"Approve"
				"Decline"
							Order_ID as "Order ID"
							Ordered_Date as "Ordered Date"
							List_Item.Product_Code as "List Item"
							List_Item.Quantity as "List Item.Quantity"
							Retailer
							Expected_Delivery_Date as "Expected Delivery Date"
							Status
							Handled_By as "Handled By"
							Comments
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Order_ID as "Order ID"
							Ordered_Date as "Ordered Date"
							Expected_Delivery_Date as "Expected Delivery Date"
							Retailer
							Status
							Handled_By as "Handled By"
							Comments
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "List Item"
		     			related field =  List_Item[Status == "Requested"]
						fields
						(
							Product_Code as "Product Code"
							Quantity
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
			 			"Approve"
			 			"Decline"
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Approved_Orders
		{
			displayName = "Approved Orders"
			show all rows from New_Order_Request  [Status == "Approved"]  
			(
				Retailer
				custom action "Deliver"
				(
	  			workflow = Deliver
				show action in view header = true
				column header = "Deliver"
				success message = ""
				condition = (Status == "Approved")
				)
				Expected_Delivery_Date as "Expected Delivery Date"
				Status
				Handled_By as "Handled By"
				List_Item.Product_Code as "List Item"
				Order_ID as "Order ID"
				Ordered_Date as "Ordered Date"
			)
			options
			(
				icon = "shopping-list"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
				"Deliver"
							Order_ID as "Order ID"
							Ordered_Date as "Ordered Date"
							Retailer
							Expected_Delivery_Date as "Expected Delivery Date"
							Status
							Handled_By as "Handled By"
							List_Item.Product_Code as "List Item"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Order_ID as "Order ID"
							Ordered_Date as "Ordered Date"
							Retailer
							Expected_Delivery_Date as "Expected Delivery Date"
							Status
							Handled_By as "Handled By"
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "List Item"
		     			related field =  List_Item[Status == "Approved"]
						fields
						(
							Product_Code as "Product Code"
							Quantity
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
			 			"Deliver"
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Delivered_Orders
		{
			displayName = "Delivered Orders"
			show all rows from New_Order_Request  [Status == "Delivered"]  
			(
				Retailer
				Status
				Company_Name as "Company Name"
				Order_ID as "Order ID"
				Ordered_Date as "Ordered Date"
				Expected_Delivery_Date as "Expected Delivery Date"
				Handled_By as "Handled By"
				Sales_Invoice.Invoice_Amount as "Invoice Amount"
			)
			options
			(
				icon = "shopping-list"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Company_Name as "Company Name"
							Order_ID as "Order ID"
							Ordered_Date as "Ordered Date"
							Retailer
							Expected_Delivery_Date as "Expected Delivery Date"
							Sales_Invoice.Invoice_Amount as "Invoice Amount"
							Handled_By as "Handled By"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Company_Name as "Company Name"
							Order_ID as "Order ID"
							Ordered_Date as "Ordered Date"
							Retailer
							Expected_Delivery_Date as "Expected Delivery Date"
							Status
							Handled_By as "Handled By"
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "List Item"
		     			related field =  List_Item[Status == "Delivered"]
						fields
						(
							Product_Code as "Product Code"
							Quantity
						)
					)
					datablock3
					(
			 			layout type = -2
		     			title = "Sales Details"
		     			related field =  Sales_Invoice[Status == "Delivered"]
						fields
						(
							Invoice_ID as "Invoice ID"
							Sales_Date as "Sales Date"
							Retailer_Name as "Retailer Name"
							Retailer_Email as "Retailer Email"
							Total_Sales as "Total Sales"
							Shipping_and_Handling_Charges as "Shipping and Handling Charges"
							Tax_Percent as "Tax Percent"
							Tax_Amount as "Tax Amount"
							Invoice_Amount as "Invoice Amount"
							Existing_Balance as "Existing Balance"
							Amount_Received as "Amount Received"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Declined_Orders
		{
			displayName = "Declined Orders"
			show all rows from New_Order_Request  [Status == "Declined"]  
			(
				Company_Name as "Company Name"
				Retailer
				Expected_Delivery_Date as "Expected Delivery Date"
				Status
				Handled_By as "Handled By"
				Comments
				List_Item.Product_Code as "List Item"
				Order_ID as "Order ID"
				Ordered_Date as "Ordered Date"
			)
			options
			(
				icon = "shopping-list"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Company_Name as "Company Name"
							Order_ID as "Order ID"
							Ordered_Date as "Ordered Date"
							Retailer
							Expected_Delivery_Date as "Expected Delivery Date"
							Status
							Handled_By as "Handled By"
							Comments
							List_Item.Product_Code as "List Item"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Company_Name as "Company Name"
							Order_ID as "Order ID"
							Ordered_Date as "Ordered Date"
							Retailer
							Expected_Delivery_Date as "Expected Delivery Date"
							Status
							Handled_By as "Handled By"
							Comments
							List_Item.Product_Code as "List Item"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list My_Orders
		{
			displayName = "My Orders"
			show all rows from New_Order_Request  [Retailer.Email == zoho.loginuserid]  
			(
				Comments
				Order_ID as "Order ID"
				Ordered_Date as "Ordered Date"
				Retailer
				Expected_Delivery_Date as "Expected Delivery Date"
				Status
				Handled_By as "Handled By"
				Company_Name as "Company Name"
			)
			group by
			(
				Status ascending
			)
			options
			(
				icon = "shopping-list"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Company_Name as "Company Name"
							Order_ID as "Order ID"
							Ordered_Date as "Ordered Date"
							Retailer
							Expected_Delivery_Date as "Expected Delivery Date"
							Status
							Handled_By as "Handled By"
							Comments
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Company_Name as "Company Name"
							Order_ID as "Order ID"
							Ordered_Date as "Ordered Date"
							Retailer
							Expected_Delivery_Date as "Expected Delivery Date"
							Status
							Handled_By as "Handled By"
							Comments
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Sales
	{
		icon = "business-businessman-03"
		list My_Sales_Invoice
		{
			displayName = "My Sales Invoice"
			template = Invoice
			print template = Invoice
			show all rows from Add_Sales  [Retailer_Email.Email == zoho.loginuserid]  
			(
				Order_ID as "Order ID"
				(
					view = My_Orders
				)
				Total_Sales as "Total Sales"
				Shipping_and_Handling_Charges as "Shipping and Handling Charges"
				Tax_Percent as "Tax Percent"
				Tax_Amount as "Tax Amount"
				Invoice_Amount as "Invoice Amount"
				Amount_Received as "Amount Received"
				Returned_Date as "Returned Date"
				Sales_Date as "Sales Date"
				Invoice_ID as "Invoice ID"
			)
			options
			(
				icon = "shopping-receipt-list-42"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Sales_Date as "Sales Date"
							Order_ID as "Order ID"
							Total_Sales as "Total Sales"
							Shipping_and_Handling_Charges as "Shipping and Handling Charges"
							Tax_Percent as "Tax Percent"
							Tax_Amount as "Tax Amount"
							Invoice_Amount as "Invoice Amount"
							Amount_Received as "Amount Received"
							Returned_Date as "Returned Date"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Sales_Date as "Sales Date"
							Order_ID as "Order ID"
							Total_Sales as "Total Sales"
							Shipping_and_Handling_Charges as "Shipping and Handling Charges"
							Tax_Percent as "Tax Percent"
							Tax_Amount as "Tax Amount"
							Invoice_Amount as "Invoice Amount"
							Amount_Received as "Amount Received"
							Returned_Date as "Returned Date"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Sales_Details
		{
			displayName = "Sales Details"
			template = Invoice
			print template = Invoice
			show all rows from Add_Sales    
			(
				Invoice_ID as "Invoice ID"
				custom action "Return Sales"
				(
	  			workflow = Return_Sales
				column header = "Return Sales"
				success message = ""
				)
				Sales_Date as "Sales Date"
				Order_ID as "Order ID"
				(
					view = Orders
				)
				Returned_Date as "Returned Details"
				(
					view = Return_Details
				)
				Retailer_Email as "Retailer Email"
				(
					view = Contacts
				)
				Invoice_Amount as "Invoice Amount"
				Amount_Received as "Amount Received"
				Existing_Balance as "Existing Balance"
				Retailer_Name as "Retailer Name"
			)
			options
			(
				icon = "business-businessman-03"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
				"Return Sales"
							Invoice_ID as "Invoice ID"
							Sales_Date as "Sales Date"
							Order_ID as "Order ID"
							Returned_Date as "Returned Details"
							Retailer_Email as "Retailer Email"
							Invoice_Amount as "Invoice Amount"
							Amount_Received as "Amount Received"
							Existing_Balance as "Existing Balance"
							Retailer_Name as "Retailer Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
				"Return Sales"
							Invoice_ID as "Invoice ID"
							Sales_Date as "Sales Date"
							Order_ID as "Order ID"
							Returned_Date as "Returned Details"
							Retailer_Email as "Retailer Email"
							Invoice_Amount as "Invoice Amount"
							Amount_Received as "Amount Received"
							Existing_Balance as "Existing Balance"
							Retailer_Name as "Retailer Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list My_Return_Details
		{
			displayName = "My Return Details"
			show all rows from Return_Product  [Returned_By.Email == zoho.loginuserid]  
			(
				Invoice_ID.Order_ID as "Order ID"
				Reason
				Returned_By as "Returned By"
				Qty_Returned as "Qty Returned"
				Invoice_ID as "Invoice ID"
				Warehouse_Code as "Warehouse Code"
				Returned_Date as "Returned Date"
				Product_Code as "Product Code"
			)
			options
			(
				icon = "users-2-contacts-44"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Invoice_ID.Order_ID as "Order ID"
							Invoice_ID as "Invoice ID"
							Returned_By as "Returned By"
							Warehouse_Code as "Warehouse Code"
							Product_Code as "Product Code"
							Returned_Date as "Returned Date"
							Qty_Returned as "Qty Returned"
							Reason
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Invoice_ID.Order_ID as "Order ID"
							Invoice_ID as "Invoice ID"
							Returned_By as "Returned By"
							Warehouse_Code as "Warehouse Code"
							Product_Code as "Product Code"
							Returned_Date as "Returned Date"
							Qty_Returned as "Qty Returned"
							Reason
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Return_Details
		{
			displayName = "Return Details"
			show all rows from Return_Product    
			(
				Warehouse_Code as "Warehouse Code"
				Reason
				Qty_Returned as "Qty Returned"
				Invoice_ID as "Invoice ID"
				Returned_Date as "Returned Date"
				Returned_By as "Returned By"
				Product_Code as "Product Code"
			)
			options
			(
				icon = "education-book-bookmark"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Invoice_ID as "Invoice ID"
							Product_Code as "Product Code"
							Warehouse_Code as "Warehouse Code"
							Returned_Date as "Returned Date"
							Qty_Returned as "Qty Returned"
							Reason
							Returned_By as "Returned By"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Invoice_ID as "Invoice ID"
							Product_Code as "Product Code"
							Warehouse_Code as "Warehouse Code"
							Returned_Date as "Returned Date"
							Qty_Returned as "Qty Returned"
							Reason
							Returned_By as "Returned By"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Return_Product
		{
			displayname = "Return Product"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Invoice_ID
			(
				type = picklist
				displayname = "Invoice ID"
				values  = Add_Sales.ID
    			bidirectional = Returned_Date
    			displayformat = [Invoice_ID]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Returned_By
			(
				type = picklist
				displayname = "Returned By"
				values  = Add_Contact.ID
    			displayformat = [Email]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Product_Code
			(
				type = picklist
				displayname = "Product Code"
				values  = Add_Product.ID
    			displayformat = [Product_Code + " - " + Product_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Warehouse_Code
			(
				type = picklist
				displayname = "Warehouse Code"
				values  = Add_Warehouse.ID
    			displayformat = [Warehouse_Code]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Returned_Date
			(
    			type = date
				displayname = "Returned Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Qty_Returned
			(
				type = number
				displayname = "Qty Returned"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Reason
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "social-1-logo-product-hunt"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section CRM
	{
		icon = "users-multiple-11"
		list Accounts_Details
		{
			displayName = "Accounts Details"
			show all rows from Add_Accounts    
			(
				Contact_Number as "Contact Number"
				Amount_Transaction as "Amount Transaction"
				Website
				Email
				Firm_Name as "Firm Name"
				Address 
	 			(
	      			displayformat = [address_line_12+""+address_line_22+""+district_city2+""+state_province2+""+postal_Code2+""+country2]
	      			enable = Show_As_Text
	 			)
				Phone_Number as "Phone Number"
			)
			options
			(
				icon = "users-2-contacts-44"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Firm_Name as "Firm Name"
							Email
							Address
							Phone_Number as "Phone Number"
							Contact_Number as "Contact Number"
							Website
							Amount_Transaction as "Amount Transaction"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Firm_Name as "Firm Name"
							Email
							Contact_Number as "Contact Number"
							Website
							Amount_Transaction as "Amount Transaction"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		custom Contacts
		{
			displayName = "Contacts"
			show all rows from Add_Contact    
			(
				Account
				Account.Email
				Email
				Name 
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				Phone_Number as "Phone Number"
				Address 
	 			(
	      			displayformat = [address_line_12+""+address_line_22+""+district_city2+""+state_province2+""+postal_Code2+""+country2]
	      			enable = Show_As_Text
	 			)
			)
			options
			(
				icon = "users-2-wc"
	 		)
			quickview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = 4
		     			title = "Overview"
						fields
						(
							Email
							Address
							Phone_Number as "Phone Number"
							Account
							Account.Email as "Email"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Name
							Phone_Number as "Phone Number"
							Email
							Address
							Account
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		pivotchart Contact_Stats
		{ 
			displayname = "Contact Stats"
			based on Autoview_1521889519686_Add_Contact
							icon = "business-chart-bar-32"				show all rows from Add_Contact
				(
 					Name.prefix  as "Name.Prefix"
 					Added_Time  as "Added Time"
 					Address.address_line_22  as "Address.Address Line 2"
 					Address.district_city2  as "Address.City / District"
 					Phone_Number  as "Phone Number"
 					Address.address_line_12  as "Address"
 					Address.country2  as "Address.Country"
 					Address.latitude2  as "Address.latitude"
 					Address.state_province2  as "Address.State / Province"
 					Address.postal_Code2  as "Address.Postal Code"
 					Name.last_name  as "Name.Last Name"
 					Account 
 					Name.first_name  as "Name"
 					Address.longitude2  as "Address.longitude"
 					Name.suffix  as "Name.Suffix"
 					Email 
				)
		}
	}
	section Ledger
	{
		icon = "files-book-07"
		list All_Accounting_Details
		{
			displayName = "All Accounting Details"
			show all rows from Accounting    
			(
				Existing_Balance as "Existing Balance"
				Amount_Paid as "Amount Paid"
				Credits
				Purchase_Orders as "Purchase Orders"
				Retailer_Name as "Retailer Name"
				Sales_Orders as "Sales Orders"
				Supplier_Name as "Supplier Name"
				User
				Status
				Bill_Amount as "Bill Amount"
				Bill_Date as "Bill Date"
			)
			group by
			(
				Bill_Date ascending
			)
			options
			(
				icon = "users-2-contacts-44"
	 		)
			conditional formatting
			(
				"Creditminus"
				{
				condition = (Credits < 0.0)
				fields = [Credits]
				format = "color:#2f8a4c;"
				}
				"Creditsplus"
				{
				condition = (Credits > 0.0)
				fields = [Credits]
				format = "color:#de2c6e;"
				}
				"credits_close"
				{
				condition = (Status == "Added to Next Bill")
				fields = [Credits]
				format = "text-decoration:line-through;"
				}
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Bill_Date as "Bill Date"
							Bill_Amount as "Bill Amount"
							Existing_Balance as "Existing Balance"
							Amount_Paid as "Amount Paid"
							Credits
							Status
							Supplier_Name as "Supplier Name"
							Purchase_Orders as "Purchase Orders"
							Retailer_Name as "Retailer Name"
							Sales_Orders as "Sales Orders"
							User
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Bill_Date as "Bill Date"
							Bill_Amount as "Bill Amount"
							Existing_Balance as "Existing Balance"
							Amount_Paid as "Amount Paid"
							Credits
							Status
							Supplier_Name as "Supplier Name"
							Purchase_Orders as "Purchase Orders"
							Retailer_Name as "Retailer Name"
							Sales_Orders as "Sales Orders"
							User
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Receivables
		{
			displayName = "Receivables"
			show all rows from Accounting  [Status == "Receivables"]  
			(
				User
				Supplier_Name as "Supplier Name"
				Purchase_Orders as "Purchase Orders"
				Retailer_Name as "Retailer Name"
				Sales_Orders as "Sales Orders"
				Bill_Date as "Bill Date"
				Existing_Balance as "Existing Balance"
				Bill_Amount as "Bill Amount"
				(
					display = total	
				)
				Amount_Paid as "Amount Paid"
				(
					display = total	
				)
				Credits
				Added_Time as "Added Time"
			)
			sort by
			(
				Added_Time descending
			)
			options
			(
				icon = "business-round-yen"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							User
							Supplier_Name as "Supplier Name"
							Purchase_Orders as "Purchase Orders"
							Retailer_Name as "Retailer Name"
							Sales_Orders as "Sales Orders"
							Bill_Date as "Bill Date"
							Existing_Balance as "Existing Balance"
							Bill_Amount as "Bill Amount"
							Amount_Paid as "Amount Paid"
							Credits
							Added_Time as "Added Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							User
							Supplier_Name as "Supplier Name"
							Purchase_Orders as "Purchase Orders"
							Retailer_Name as "Retailer Name"
							Sales_Orders as "Sales Orders"
							Bill_Date as "Bill Date"
							Existing_Balance as "Existing Balance"
							Bill_Amount as "Bill Amount"
							Amount_Paid as "Amount Paid"
							Credits
							Added_Time as "Added Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Payables
		{
			displayName = "Payables"
			show all rows from Accounting  [Status == "Payables"]  
			(
				Bill_Date as "Bill Date"
				User
				Sales_Orders as "Sales Orders"
				Retailer_Name as "Retailer Name"
				Supplier_Name as "Supplier Name"
				Purchase_Orders as "Purchase Orders"
				(
					view = Vendor_Purchase_Invoice
				)
				Existing_Balance as "Existing Balance"
				Bill_Amount as "Bill Amount"
				(
					display = total	
				)
				Amount_Paid as "Amount Paid"
				(
					display = total	
				)
				Credits
				Added_Time as "Added Time"
			)
			sort by
			(
				Added_Time descending
			)
			options
			(
				icon = "shopping-receipt-list-42"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Bill_Date as "Bill Date"
							User
							Sales_Orders as "Sales Orders"
							Retailer_Name as "Retailer Name"
							Supplier_Name as "Supplier Name"
							Purchase_Orders as "Purchase Orders"
							Existing_Balance as "Existing Balance"
							Bill_Amount as "Bill Amount"
							Amount_Paid as "Amount Paid"
							Credits
							Added_Time as "Added Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Bill_Date as "Bill Date"
							User
							Sales_Orders as "Sales Orders"
							Retailer_Name as "Retailer Name"
							Supplier_Name as "Supplier Name"
							Purchase_Orders as "Purchase Orders"
							Existing_Balance as "Existing Balance"
							Bill_Amount as "Bill Amount"
							Amount_Paid as "Amount Paid"
							Credits
							Added_Time as "Added Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list My_Accounting_Details
		{
			displayName = "My Accounting Details"
			show all rows from Accounting  [Retailer_Name.Email == zoho.loginuserid]  
			(
				Bill_Date as "Bill Date"
				Retailer_Name as "Retailer Name"
				Sales_Orders as "Sales Orders"
				Existing_Balance as "Existing Balance"
				Bill_Amount as "Bill Amount"
				Amount_Paid as "Amount Paid"
				Credits
			)
			group by
			(
				Bill_Date descending
			)
			options
			(
				icon = "users-2-contacts-44"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Bill_Date as "Bill Date"
							Retailer_Name as "Retailer Name"
							Sales_Orders as "Sales Orders"
							Existing_Balance as "Existing Balance"
							Bill_Amount as "Bill Amount"
							Amount_Paid as "Amount Paid"
							Credits
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Bill_Date as "Bill Date"
							Retailer_Name as "Retailer Name"
							Sales_Orders as "Sales Orders"
							Existing_Balance as "Existing Balance"
							Bill_Amount as "Bill Amount"
							Amount_Paid as "Amount Paid"
							Credits
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		pivottable Ledger_Book
		{ 
			displayname = "Ledger Book"
			based on Autoview_1503410872960_Accounting
							icon = "education-book-open"				show all rows from Accounting
				(
 					Retailer_Name  as "Retailer Name"
 					Supplier_Name  as "Supplier Name"
 					User 
 					Credits 
 					Amount_Paid  as "Amount Paid"
 					Bill_Amount  as "Bill Amount"
 					Existing_Balance  as "Existing Balance"
 					Bill_Date  as "Bill Date"
 					Status 
				)
		}
	}
	section Products
	{
		icon = "ui-2-archive"
		form Add_Product
		{
			displayname = "Add Product"
			success message = "Product Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have unique Product_Code
			(
    			type = text
				displayname = "Product Code"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Product_Name
			(
    			type = text
				displayname = "Product Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Supplier_Name
			(
				type = picklist
				displayname = "Supplier Name"
				values  = Add_Supplier.ID
    			bidirectional = Products_Supply
    			displayformat = [Name.first_name + " " + Name.last_name]
				allow new entries = true
				[
					displayname = "Add New Supplier"
				]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Category
			(
				type = picklist
				values  = Add_Category.ID
    			displayformat = [Category]
				allow new entries = true
				[
					displayname = "Add New Category"
				]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Model
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = medium
			)
			Size
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Product_Image
			(
    			type = image
				displayname = "Product Image"
				source  = file
				aspect ratio = original
				camera = primary
				show gallery = true
				switch camera = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Product_Description
			(
    			type = textarea
				displayname = "Product Description"
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "design-2-3d-29"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		print template
			{
				Prod_Desc
				{
						content = {"layout":"1","pageNumberOption":null,"orientation":"null","isFooterEnabled":false,"mainLayout":[{"elements":[{"type":"columns","element":{"split":"100","id":"elem_15df651aedb1","elemStyle":"margin:15px;border:1px solid #ececec","collayouts":[{"colElements":[{"type":"text","element":{"Fields":[{"Label_Name":"Product_Code"},{"Label_Name":"Product_Name"}],"content":"<div style=\"\"><div style=\"margin-left: 15px; font-size: 22px; padding: 15px; border-bottom: 1px double rgb(220, 220, 220)\">   <span style=\"color: rgb(37, 39, 62)\">${Product_Code}&nbsp;<\/span>-   <span>${Product_Name}<\/span> <\/div><\/div>"}},{"type":"image","element":{"size":"L","src":"/appbuilder/edit/templates/images/urlprofilebg.png","captionMargin":"0px auto","alt":"","caption":"","Label_Name":"Product_Image","id":"elem_162fba63e36","align":"center","formCompID":4012400000000281220,"elemStyle":"border: 0px solid rgb(169, 169, 169); margin-right: 0px; margin-left: 0px; width: 600px; padding: 10px;"}},{"type":"columns","element":{"split":"100","id":"elem_15df69ef2f51","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"elem_15df69ef2f6","fields":[],"content":"<div style=\"\"><div style=\"border-bottom: 1px solid rgb(220, 220, 220); margin: 15px\"> <\/div><\/div>"}}]}]}},{"type":"text","element":{"Fields":[{"Label_Name":"Category"},{"Label_Name":"Model"},{"Label_Name":"Product_Description"},{"Label_Name":"Supplier_Name"}],"content":"<div style=\"\"><table cellpadding=\"5\" cellspacing=\"5\" style=\"margin: auto; width: 80%; border-collapse: collapse; text-align: center\">   <tbody>     <tr style=\"height: 50px\">       <th width=\"50%\">Description<\/th>       <td width=\"50%\" style=\"text-align: left\">${Product_Description}<\/td>     <\/tr>     <tr style=\"height: 50px\">       <th> Category<\/th>       <td style=\"text-align: left\">${Category}<\/td>     <\/tr>     <tr style=\"height: 50px\">       <th> Model <\/th>       <td style=\"text-align: left\">${Model} <\/td>     <\/tr>     <tr style=\"height: 50px\">       <th> Supplier<\/th>       <td style=\"text-align: left\">${Supplier_Name} <\/td>     <\/tr>     <tr style=\"height: 50px\">       <th> <\/th>       <td style=\"text-align: left\"> <\/td>     <\/tr>   <\/tbody> <\/table><\/div>"}}]}]}}],"id":1}],"resize":"default","templateStyle":"text-align: left; width: 100%; margin: 0 auto;","isHeaderEnabled":false}
				}
			}
		}
		list Product_Details
		{
			displayName = "Product Details"
			template = Prod_Desc
			print template = Prod_Desc
			show all rows from Add_Product    
			(
				Size
				Product_Name as "Product Name"
				Product_Code as "Product Code"
				Supplier_Name as "Supplier Name"
				Category
				Model
				Product_Image as "Product Image"
				Product_Description as "Product Description"
			)
			options
			(
				icon = "users-2-contacts-44"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Product_Name as "Product Name"
							Product_Code as "Product Code"
							Supplier_Name as "Supplier Name"
							Category
							Model
							Product_Image as "Product Image"
							Product_Description as "Product Description"
							Size
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Product_Name as "Product Name"
							Product_Code as "Product Code"
							Supplier_Name as "Supplier Name"
							Category
							Model
							Product_Image as "Product Image"
							Product_Description as "Product Description"
							Size
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Settings
	{
		icon = "ui-1-settings-gear-64"
		form Company_Details
		{
			displayname = "Company Details"
			success message = "Company Details Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Company_Name
			(
    			type = text
				displayname = "Company Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Company_Address
			(
    			type = address
				displayname = "Company Address"
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_12
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_22
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city2
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province2
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code2
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country2
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude2
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude2
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Contact_Number
			(
				type = number
				displayname = "Contact Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Mobile_Number
			(
    			type = phonenumber
				displayname = "Mobile Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Company_Email
			(
    			type = email
				displayname = "Company Email"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Logo
			(
    			type = image
				source  = file
				aspect ratio = original
				camera = primary
				show gallery = true
				switch camera = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			Website
			(
    			type = url
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Head_Distributor_Name
			(
				type = picklist
				displayname = "Head Distributor Name"
				values  = Add_Distributor_Details.ID
    			displayformat = [Distributor_Name.first_name + " " + Distributor_Name.last_name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Warehouse_Details
			(
				type = grid
				displayname = "Warehouse Details"
				values  = Add_Warehouse.ID
    			bidirectional = Company_Name
	 			row = 1
	 			column = 1   
				width = medium
			)
			Distributors
			(
				type = list
				values  = Add_Distributor_Details[Distributor_Email != zoho.adminuserid].ID
    			bidirectional = Company_Name
    			displayformat = [Distributor_Name.first_name + " " + Distributor_Name.last_name]
				allow new entries = true
				[
					displayname = "Add New Distributor"
				]
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "social-1-logo-creative-market"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		properties
		{
			total entries
			{
				allowed count = 1
			}
		}
		}
		summary Company_Information
		{
			displayName = "Company Information"
			show all rows from Company_Details    
			(
				Company_Name as "Company Name"
				Warehouse_Details.Warehouse_Code as "Warehouse Details"
				(
					view = Warehouse_Details
				)
				Head_Distributor_Name as "Head Distributor Name"
				Warehouse_Details.Warehouse_Name as "Warehouse Details.Warehouse_Name"
				Distributors as "Other Distributors"
				Contact_Number as "Contact Number"
				Company_Email as "Company Email"
				Website
				Logo
			)
			options
			(
				display rows = 1
				display records per row = 2
				icon = "travel-info"
			)
			quickview
			(
				layout
				(
		 			type = -2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Company_Name as "Company Name"
							Warehouse_Details.Warehouse_Code as "Warehouse Details"
							Head_Distributor_Name as "Head Distributor Name"
							Warehouse_Details.Warehouse_Name as "Warehouse Details.Warehouse_Name"
							Distributors as "Other Distributors"
							Contact_Number as "Contact Number"
							Company_Email as "Company Email"
							Website
							Logo
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Company_Name as "Company Name"
							Warehouse_Details.Warehouse_Code as "Warehouse Details"
							Head_Distributor_Name as "Head Distributor Name"
							Warehouse_Details.Warehouse_Name as "Warehouse Details.Warehouse_Name"
							Distributors as "Other Distributors"
							Contact_Number as "Contact Number"
							Company_Email as "Company Email"
							Website
							Logo
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Distributors_Details
		{
			displayName = "Distributor Details"
			show all rows from Add_Distributor_Details    
			(
				Distributor_Email as "Distributor Email"
				Company_Name as "Company Name"
			)
			options
			(
				icon = "users-2-contacts-44"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Distributor_Email as "Distributor Email"
							Company_Name as "Company Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Distributor_Email as "Distributor Email"
							Company_Name as "Company Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Categories
		{
			displayName = "Categories"
			show all rows from Add_Category    
			(
				Category
			)
			options
			(
				icon = "design-2-layers"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Category
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Category
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section List_Items
	{
		displayname= "List Items"
		icon = "shopping-receipt-list-43"
		form Add_Sales_List_Items
		{
			displayname = "Add Sales List Items"
			success message = "List Item Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Invoice_ID
			(
				type = picklist
				displayname = "Invoice ID"
				values  = Add_Sales.ID
    			bidirectional = List_Items_Add
    			displayformat = [Invoice_ID]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Warehouse_Code
			(
				type = picklist
				displayname = "Warehouse Code"
				values  = Add_Warehouse.ID
    			displayformat = [Warehouse_Code]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Product_Code
			(
				type = picklist
				displayname = "Product Code"
				values  = Add_Product.ID
    			displayformat = [Product_Code + " - " + Product_Name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Ordered_Quantity
			(
				type = number
				displayname = "Ordered Quantity"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Quantity
			(
				type = number
				displayname = "Delivered Quantity"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Unit_Price
			(
				displayname = "Selling Unit Price"
				type = USD
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Sub_total
			(
				displayname = "Sub total"
				type = USD
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "design-2-selection"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Add"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list All_List_Items
		{
			displayName = "All List Items"
   			hide = true
			show all rows from Add_Sales_List_Items    
			(
				Warehouse_Code as "Warehouse Code"
				Product_Code as "Product Code"
				Ordered_Quantity as "Ordered Quantity"
				Quantity as "Delivered Quantity"
				Unit_Price as "Selling Unit Price"
				Sub_total as "Sub total"
				Invoice_ID as "Invoice ID"
			)
			options
			(
				icon = "design-2-selection"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Warehouse_Code as "Warehouse Code"
							Product_Code as "Product Code"
							Ordered_Quantity as "Ordered Quantity"
							Quantity as "Delivered Quantity"
							Unit_Price as "Selling Unit Price"
							Sub_total as "Sub total"
							Invoice_ID as "Invoice ID"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Warehouse_Code as "Warehouse Code"
							Product_Code as "Product Code"
							Ordered_Quantity as "Ordered Quantity"
							Quantity as "Delivered Quantity"
							Unit_Price as "Selling Unit Price"
							Sub_total as "Sub total"
							Invoice_ID as "Invoice ID"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	functions
	{
 			void Unsharing.toDistributor(string distributorEmail)
			{
				thisapp.permissions.deleteuser(distributorEmail);
			}
 			void Unsharing.toRetailer(string contactEmail)
			{
				thisapp.permissions.deleteuser(contactEmail);
			}
 			int Page.getAccountsCount()
			{
				return Add_Accounts[ID != 0].count();
			}
 			int Page.getContactCount()
			{
				return Add_Contact[ID != 0].count();
			}
 			int Page.getSuppliersCount()
			{
				return Add_Supplier[ID != 0].count();
			}
 			string Page.getWarehousetable()
			{
				/* 	str = "<style>.warehouse_table{width:95%;font-size:15px;margin:0.5% 2.5%;border-collapse: collapse;position:relative;background:white;} .warehouse_table tbody{width:100%;} .warehouse_table td{text-align:center;height:29px;font-size:13px;}.warehouse_table tr{border-bottom:1px solid #ededed;height:30px;}.warehouse_table th{width:25%;height:40px;}</style><table class='warehouse_table'><tbody><tr><th>Warehouse Code</th><th>Warehouse Name</th><th>Warehouse Address</th><th>City</th>";
																						if(Add_Warehouse[ID != 0].count() != 0)
																						{
																							getCountryList = Add_Country[ID is not null].Country.getAll().sort();
																							for each  eachIndex in getCountryList
																							{
																								getCountry = Add_Country[Country == eachIndex];
																								warehouseList = Add_Warehouse[ID != 0 && Country == getCountry.ID] range from 0 to 10;
																								if(warehouseList.count() != 0)
																								{
																									str = str + "<tr><th colspan='4' style='text-align:left;background:#faf9f9;padding:0;padding-left:2%;height:30px;'> " + eachIndex + "</th></tr>";
																									for each  eachRec in warehouseList
																									{
																										str = str + "<tr><td>" + warehouseList.Warehouse_Code + "</td><td>" + warehouseList.Warehouse_Name + "</td><td>" + warehouseList.Warehouse_Address + "</td><td>" + warehouseList.City + "</td></tr>";
																									}
																								}
																							}
																							str = str + "</tbody></table><div style='width:95%;margin:0.5% 2.5%;float:right;background:white;position:absolute;bottom:0;height:20px;z-index:3'><a style='float:left;' href='#Report:Warehouse_Details' target='_blank'> View All </a> <a style='float:right;' target='_blank'> Total: " + Add_Warehouse[ID != 0].count() + "</a> </div>";
																							return str;
																						}
																						else
																						{
																							return "<table class='warehouse_table'><tbody><tr><th colspan='4'><p style='font-size: 20px;position: absolute;top: 35%;left: 45%; font-weight: bold;font-style: normal;color: rgb(255, 0, 0);'> No Data Available </p></th></tr></tbody></table>";
																						} */
				return "";
			}
 			int Page.getwarehouseCount()
			{
				return Add_Warehouse[ID != 0].count();
			}
 			float Page.todayPurchaseAmnt()
			{
				amnt = 0.0;
				for each  eachrec in Add_Invoice[Added_Time == today]
				{
					amnt = amnt + eachrec.Total_Amount;
				}
				return amnt;
			}
 			int Page.todayPurchaseQty()
			{
				qty = 0;
				for each  eachrec in Add_Invoice[Added_Time == today]
				{
					for each  eachrow in eachrec.List_Item
					{
						qty = qty + eachrow.Quantity;
					}
				}
				return qty;
			}
 			float Page.todaySalesAmount()
			{
				amnt = 0.0;
				for each  eachrec in Add_Sales[Added_Time == today]
				{
					amnt = amnt + eachrec.Invoice_Amount;
				}
				return amnt;
			}
 			int Page.todaySalesQty()
			{
				qty = Add_Sales_List_Items[Added_Time == today].sum(Quantity);
				return qty;
			}
 			void Custom_actions.addToStock(int recID)
			{
				openUrl("#Form:Stock?Inventory=" + recID,"popup window");
			}
 			void Custom_actions.orderDecline(int salesRecID)
			{
				openUrl("#Form:Decline_Form?Order_ID=" + salesRecID,"popup window");
			}
 			void Custom_actions.orderDelivery(New_Order_Request salesReqObj)
			{
				openUrl("#Form:Add_Sales?Order_ID=" + salesReqObj.ID,"popup window");
			}
 			void Custom_actions.returnSales(int recID)
			{
				openUrl("#Form:Return_Product?Invoice_ID=" + recID,"popup window");
			}
 			void Custom_actions.approveRequest(New_Order_Request salesReqObj)
			{
				salesReqObj.Status="Approved";
				getCompanyDet = Company_Details[ID == salesReqObj.Company_Name];
				if(salesReqObj.Handled_By == null)
				{
					salesReqObj.Handled_By=Add_Distributor_Details[Distributor_Email == zoho.loginuserid].ID;
				}
				getDistributorDetails = Add_Distributor_Details[ID == salesReqObj.Handled_By];
				getRetailerDetails = Add_Contact[ID == salesReqObj.Retailer];
				sendmail
				[
					from :zoho.loginuserid
					to :getRetailerDetails.Email
					subject :"Your Sales Request against Order ID: " + salesReqObj.Order_ID + " is approved."
					message :(("<div style='line-height:2'><div>Dear " + getRetailerDetails.Name) + ", </div><br> <div>Greetings from " + getCompanyDet.Company_Name + ".<br> </div><div>Your Order ID: <b>" + salesReqObj.Order_ID + "</b> is Approved. And you will shortly receive your requested packages.</div> <div> Thanks & regards,</div><div>" + getDistributorDetails.Distributor_Name) + "</div></div>"
				]
			}
 			string Util.getCreditStatus(float amnt_to_be_paid, float amnt_paid, string User)
			{
				Status = "";
				Credits = amnt_to_be_paid - amnt_paid;
				if(input.amnt_to_be_paid == input.amnt_paid)
				{
					if(input.User == "Supplier")
					{
						Status = "Paid";
					}
					else
					{
						Status = "Received";
					}
				}
				else if(input.amnt_to_be_paid > input.amnt_paid)
				{
					if(input.User == "Supplier")
					{
						Status = "Payables";
					}
					else if(input.User == "Retailer")
					{
						Status = "Receivables";
					}
				}
				else
				{
					if(input.User == "Supplier")
					{
						Status = "Receivables";
					}
					else if(input.User == "Retailer")
					{
						Status = "Payables";
					}
				}
				return Status;
			}
 			void Sharing.toDistributor(string distributorEmail)
			{
				thisapp.permissions.assignUserInProfile(distributorEmail,"Distributor");
				appname = zoho.appname;
				sendmail
				[
					from :zoho.adminuserid
					to :distributorEmail
					subject :"Invitation to access '" + zoho.appname + "' "
					message :"<div style='width:100%;display:inline-block;box-sizing:border-box;border:1px solid #ddd;'><div style='padding:2%;text-align:center;'>You've been invited to use an application built on Zoho Creator by \"" + zoho.adminuserid + "\".</div><div style='background: #efefef; padding: 20.0px;margin: 20.0px 0 10.0px;text-align:center;'><h2>" + appname.toUpperCase() + "</h2><div style='margin: 20.0px 0 10.0px;'><a style='padding:10px;background-color: rgb(62,149,205);text-decoration: none;color: rgb(255,255,255);font-size: 14.0px;' href='https://creator.zoho.com" + zoho.appuri + "' target='_blank'> Go to application </a></div></div></div>"
				]
			}
 			void Sharing.toRetailer(string contactEmail)
			{
				thisapp.permissions.assignUserInProfile(contactEmail,"Retailer");
				// 	sendmail notification to Retailer
				appname = zoho.appname;
				sendmail
				[
					from :zoho.adminuserid
					to :contactEmail
					subject :"Invitation to access '" + zoho.appname + "' "
					message :"<div style='width:100%;display:inline-block;box-sizing:border-box;border:1px solid #ddd;'><div style='padding:2%;text-align:center;'>You've been invited to use an application built on Zoho Creator by \"" + zoho.adminuserid + "\".</div><div style='background: #efefef; padding: 20.0px;margin: 20.0px 0 10.0px;text-align:center;'><h2>" + appname.toUpperCase() + "</h2><div style='margin: 20.0px 0 10.0px;'><a style='padding:10px;background-color: rgb(62,149,205);text-decoration: none;color: rgb(255,255,255);font-size: 14.0px;' href='https://creator.zoho.com" + zoho.appuri + "' target='_blank'> Go to application </a></div></div></div>"
				]
			}
	}



	workflow
	{
		form
		{
			Run_Scripts_On_button_Cli as "Run Scripts - On button Click"
			{
				type =  form
				form = Decline_Form
				button = Submit
				on click
				{
					actions 
					{
					on click
					(
						if(input.Order_ID != null)
										{
											getOrderDet = New_Order_Request[ID == input.Order_ID];
											getOrderDet.Status="Declined";
											getOrderDet.Comments=input.Comments;
											getCompanyDet = Company_Details[ID == getOrderDet.Company_Name];
											if(getOrderDet.Handled_By == null)
											{
												getOrderDet.Handled_By=Add_Distributor_Details[Distributor_Email == zoho.loginuserid].ID;
											}
											getDistributorDetails = Add_Distributor_Details[ID == getOrderDet.Handled_By];
											getRetailerDetails = Add_Contact[ID == getOrderDet.Retailer];
											sendmail
											[
												from :zoho.loginuserid
												to :getRetailerDetails.Email
												subject :"Your Sales Request against Order ID: " + getOrderDet.Order_ID + " is Declined."
												message :(("<di>Dear " + getRetailerDetails.Name) + ", </div> <div>Greetings from " + getCompanyDet.Company_Name + ". </div><div>We Regret to Inform that your Order ID: <b>" + getOrderDet.Order_ID + "</b> is Declined due to Following Reasons, </div><div>" + getOrderDet.Comments + "</div><div> And you will shortly received your requested packages.</div> <div> Thanks & regards,</div><div>" + getDistributorDetails.Distributor_Name) + "</div>"
											]
										}
					)
					}
				}
			}
			Run_Scripts_On_Button_Cli as "Run Scripts - On Button Click"
			{
				type =  form
				form = Inventory
				button = Submit
				on click
				{
					actions 
					{
					on click
					(
						getCount = Inventory_stateform[Product_Code == input.Product_Code];
										if(getCount.count() == 0)
										{
											insert into Inventory_stateform
											[
												Added_User=zoho.loginuser
												Product_Code=input.Product_Code
												Qty_Inhand=input.Qty_Inhand
												Qty_Distributed=0
											]
										}
										else
										{
											getCount.Qty_Inhand=getCount.Qty_Inhand + input.Qty_Inhand;
										}
										reload;
					)
					}
				}
			}
			Run_Scripts_On_Button_Cli1 as "Run Scripts - On Button Click"
			{
				type =  form
				form = Stock
				button = Submit
				on click
				{
					actions 
					{
					on click
					(
						InventoryDetails = Inventory_stateform[ID == input.Inventory];
										distributionQty = input.Warehouse_Code.size() * input.Qty;
										if(InventoryDetails.Qty_Inhand - distributionQty < 0)
										{
											alert "Distribution Limit Exceeds the Stock in Qty.";
										}
										else
										{
											for each  eachWarehouse in input.Warehouse_Code
											{
												getStockDetails = Add_Stock[Product_Code == input.Product_Code && Warehouse_Code == eachWarehouse];
												if(getStockDetails.count() == 0)
												{
													recID = insert into Add_Stock
										[
											Added_User=zoho.loginuser
											Product_Code=input.Product_Code
											Warehouse_Code=eachWarehouse
											Stock_Inflow=input.Qty
											Stock_Outflow=0
											Availability=input.Availability
											Inventory=input.Inventory
										];
													getStockDetails = Add_Stock[ID == recID];
												}
												else
												{
													//updating in Add_Stock Form
													getStockDetails.Stock_Inflow=getStockDetails.Stock_Inflow + input.Qty;
												}
												//updating in Inventory Form
												oldVal = ifnull(InventoryDetails.Qty_Distributed,0);
												InventoryDetails.Qty_Distributed=oldVal + input.Qty;
												InventoryDetails.Qty_Inhand=InventoryDetails.Qty_Inhand - input.Qty;
											}
										}
										info "Stock Added to Warehouse Successfully!";
										openUrl("#Report:Inventory_Details","same window");
					)
					}
				}
			}
			Run_Scripts_While_Adding_16 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Stock
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											openUrl("#Form:Stock","same window");
										hide Stock_Outflow;
										hide Inventory;
										disable Inventory;
										hide Availability;
										input.Product_Code = Inventory_stateform[ID == input.Inventory].Product_Code;
										if(input.Product_Code != null)
										{
											disable Product_Code;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_17 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Stock
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											InventoryDetails = Inventory_stateform[Product_Code == input.Product_Code];
										oldVal = ifnull(InventoryDetails.Qty_Distributed,0);
										InventoryDetails.Qty_Distributed=oldVal + input.Stock_Inflow;
										InventoryDetails.Qty_Inhand=InventoryDetails.Qty_Inhand - input.Stock_Inflow;
										openUrl("#Script:dialog.close","same window");
						)
					}
	}

			}
			Run_Scripts_While_Adding_18 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Warehouse
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											getCompanyDetails = Company_Details[ID is not null];
										input.Company_Name = getCompanyDetails.ID;
										disable Company_Name;
						)
					}
	}

			}
			Run_Scripts_While_Adding_19 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Distributor_Details
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											input.Company_Name = Company_Details[ID != 0].ID;
										disable Company_Name;
										hide Company_Name;
						)
					}
	}

			}
			Run_Scripts_While_Adding_20 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Distributor_Details
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											thisapp.Sharing.toDistributor(input.Distributor_Email);
						)
					}
	}

			}
			Run_Scripts_While_Editing7 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Distributor_Details
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(input.Distributor_Email != old.Distributor_Email)
										{
											thisapp.Unsharing.toDistributor(old.Distributor_Email);
											thisapp.Sharing.toDistributor(input.Distributor_Email);
										}
						)
					}
	}

			}
			Run_Scripts_While_Deletin5 as "Run Scripts - While Deleting a Record"
			{
				type =  form
				form = Add_Distributor_Details
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											getRec = Company_Details[Head_Distributor_Name == input.ID];
										if(getRec.count() != 0)
										{
											alert "Sorry! Please Change the Head Distributor and try Deleting";
											cancel delete;
										}
										else
										{
											thisapp.Unsharing.toDistributor(input.Distributor_Email);
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_21 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Inventory_stateform
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											openUrl("#Form:Inventory","same window");
										hide Qty_Distributed;
										hide Stocks;
						)
					}
	}

			}
			Run_Scripts_While_Deletin6 as "Run Scripts - While Deleting a Record"
			{
				type =  form
				form = Inventory_stateform
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											delete from Add_Stock[Inventory == input.ID];
						)
					}
	}

			}
			Run_Scripts_While_Adding_22 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Accounting
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Purchase_Orders;
										hide Retailer_Name;
										hide Supplier_Name;
										hide Sales_Orders;
										disable Credits;
										disable Existing_Balance;
										input.Bill_Date = zoho.currentdate;
										clear Purchase_Orders;
										clear Sales_Orders;
						)
					}
	}

			}
			Run_Scripts_While_Adding_23 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Accounting
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											// should know to whom we are accounting with, so having null check regarding with user.
										if(input.User == "Retailer" && input.Retailer_Name == null)
										{
											alert "Please Enter Retailer Name ";
											cancel submit;
										}
										else if(input.User == "Supplier" && input.Supplier_Name == null)
										{
											alert "Please Enter Supplier Name";
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_24 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Accounting
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											// getting the status of this transaction
										if((input.User == "Supplier" && input.Status == "Receivables") || (input.User == "Retailer" && input.Status == "Payables"))
										{
											existingBal = input.Existing_Balance * -1;
										}
										else
										{
											existingBal = ifnull(input.Existing_Balance,0.0);
										}
										amnt_to_be_recieved = input.Bill_Amount + existingBal;
										amnt_paid = input.Amount_Paid;
										res_status = thisapp.Util.getCreditStatus(amnt_to_be_recieved,amnt_paid,input.User);
										input.Status = res_status;
						)
					}
	}

			}
			Run_Scripts_While_Editing8 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Accounting
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Purchase_Orders;
										hide Retailer_Name;
										hide Supplier_Name;
										hide Sales_Orders;
										disable Credits;
										disable Existing_Balance;
										input.Bill_Date = zoho.currentdate;
										disable Retailer_Name;
										disable Supplier_Name;
						)
					}
	}

			}
			Run_Scripts_While_Editing9 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Accounting
				record event = on edit

	on success
	{
					actions 
					{
						custom deluge script
						(
											// getting the status of this transaction
										amnt_to_be_recieved = input.Bill_Amount + input.Existing_Balance;
										amnt_paid = input.Amount_Paid;
										res_status = thisapp.Util.getCreditStatus(amnt_to_be_recieved,amnt_paid,input.User);
										input.Status = res_status;
						)
					}
	}

			}
			Run_Scripts_On_Always5 as "Run Scripts - On Always"
			{
				type =  form
				form = Accounting
				record event = on add or edit

	on user input of Amount_Paid
	{
					actions 
					{
						custom deluge script
						(
											existingBal = ifnull(input.Existing_Balance,0.0);
										amntPaid = ifnull(input.Amount_Paid,0.0);
										billAmnt = ifnull(input.Bill_Amount,0.0);
										input.Credits = existingBal + billAmnt - amntPaid;
						)
					}
	}

			}
			Run_Scripts_On_Always6 as "Run Scripts - On Always"
			{
				type =  form
				form = Accounting
				record event = on add or edit

	on user input of Bill_Amount
	{
					actions 
					{
						custom deluge script
						(
											existingBal = ifnull(input.Existing_Balance,0.0);
										amntPaid = ifnull(input.Amount_Paid,0.0);
										billAmnt = ifnull(input.Bill_Amount,0.0);
										input.Credits = existingBal + billAmnt - amntPaid;
						)
					}
	}

			}
			Run_Scripts_On_Always7 as "Run Scripts - On Always"
			{
				type =  form
				form = Accounting
				record event = on add or edit

	on user input of Supplier_Name
	{
					actions 
					{
						custom deluge script
						(
											if(input.User == "Supplier" && input.Supplier_Name != null)
										{
											getPurchaseOrders = Accounting[Supplier_Name == input.Supplier_Name && Status == "Payables" || Status == "Receivables"].Purchase_Orders.getAll();
											input.Purchase_Orders:ui.add(getPurchaseOrders);
											// getting the credit of last transaction from this supplier.
											var = Accounting[Supplier_Name == input.Supplier_Name].Credits sort by Added_Time desc;
											disable Existing_Balance;
											input.Existing_Balance = ifnull(var,0.0);
										}
										else
										{
											input.Existing_Balance = 0.0;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always8 as "Run Scripts - On Always"
			{
				type =  form
				form = Accounting
				record event = on add or edit

	on user input of User
	{
					actions 
					{
						custom deluge script
						(
											hide Supplier_Name;
										hide Retailer_Name;
										hide Sales_Orders;
										hide Purchase_Orders;
										input.Supplier_Name = null;
										input.Retailer_Name = null;
										input.Purchase_Orders = null;
										input.Purchase_Orders = null;
										if(input.User == "Retailer")
										{
											show Retailer_Name;
											show Sales_Orders;
											input.Supplier_Name = null;
										}
										else if(input.User == "Supplier")
										{
											show Supplier_Name;
											show Purchase_Orders;
											input.Retailer_Name = null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always9 as "Run Scripts - On Always"
			{
				type =  form
				form = Accounting
				record event = on add or edit

	on user input of Retailer_Name
	{
					actions 
					{
						custom deluge script
						(
											if(input.User == "Retailer" && input.Retailer_Name != null)
										{
											getSalesOrders = Accounting[Retailer_Name == input.Retailer_Name && Status == "Payables" || Status == "Receivables"].Sales_Orders.getAll();
											input.Sales_Orders:ui.add(getSalesOrders);
											// getting the credit of last transaction from this retailer.
											var = Accounting[Retailer_Name == input.Retailer_Name].Credits sort by Added_Time desc;
											disable Existing_Balance;
											input.Existing_Balance = ifnull(var,0.0);
										}
										else
										{
											input.Existing_Balance = 0.0;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_25 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Decline_Form
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Status;
						)
					}
	}

			}
			Run_Scripts_While_Adding_26 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Sales
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											input.Sales_Date = today;
										disable List_Items_Add.Sub_total;
										disable Total_Sales;
										disable Invoice_Amount;
										disable List_Items_Add.Ordered_Quantity;
										input.Company_Name = Company_Details[ID != 0].ID;
										disable Company_Name;
										hide Returned_Date;
										disable Retailer_Email;
										hide Existing_Balance;
										disable Existing_Balance;
										disable Retailer_Name;
										if(input.Order_ID != null)
										{
											disable Order_ID;
											getRetaileDetails = New_Order_Request[ID == input.Order_ID];
											input.Retailer_Email = getRetaileDetails.Retailer;
											getAccountingDetails = Accounting[Retailer_Name == input.Retailer_Email] sort by Added_Time desc;
											if(getAccountingDetails.count() != 0)
											{
												if(getAccountingDetails.Credits != 0)
												{
													show Existing_Balance;
													input.Existing_Balance = getAccountingDetails.Credits;
												}
												else
												{
													input.Existing_Balance = 0.0;
												}
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_27 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Sales
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(input.Sales_Date > today)
										{
											alert "Please Check the Date";
											cancel submit;
										}
										// updating in stocks
										for each  eachrow in List_Items_Add
										{
											if(eachrow.Quantity <= 0)
											{
												alert "Please Enter atleast 1 quantity";
												cancel submit;
											}
											getStocks = Add_Stock[Warehouse_Code == eachrow.Warehouse_Code && Product_Code == eachrow.Product_Code];
											getProdDetails = Add_Product[ID == eachrow.Product_Code];
											if(getStocks.count() != 0)
											{
												if(getStocks.Availability == "In Stock")
												{
													getStocks.Stock_Inflow=getStocks.Stock_Inflow - eachrow.Quantity;
													getStocks.Stock_Outflow=getStocks.Stock_Outflow + eachrow.Quantity;
												}
												else
												{
													openUrl("#Form:Add_Purchased_Invoice","new window");
													alert " The " + getProdDetails.Product_Name + " is Out of Stock, Please Purchase from the supplier";
													cancel submit;
												}
											}
											else
											{
												openUrl("#Form:Add_Purchased_Invoice","new window");
												alert " The Product " + getProdDetails.Product_Name + " is not Available in the Stocks, Please Purchase from the supplier";
												cancel submit;
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_28 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Sales
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											amnt_to_be_Paid = input.Invoice_Amount + input.Existing_Balance;
										amnt_received = input.Amount_Received;
										curCredit = amnt_to_be_Paid - amnt_received;
										Status_Str = thisapp.Util.getCreditStatus(amnt_to_be_Paid,amnt_received,"Retailer");
										if(Status_Str == "Received")
										{
											for each  eachRec in Accounting[Retailer_Name == input.Retailer_Email && Status == "Receivables"]
											{
												eachRec.Status="Added to Next Bill";
											}
										}
										insert into Accounting
										[
											Credits=curCredit
											Bill_Amount=input.Invoice_Amount
											User="Retailer"
											Amount_Paid=input.Amount_Received
											Added_User=zoho.loginuser
											Retailer_Name=input.Retailer_Email
											Sales_Orders={input.ID}
											Bill_Date=input.Sales_Date
											Existing_Balance=input.Existing_Balance
											Status=Status_Str
										]
										getRetailerDet = Add_Contact[ID == input.Retailer_Email];
										getAccountDetails = Add_Accounts[ID == getRetailerDet.Account];
										getAccountDetails.Amount_Transaction=getAccountDetails.Amount_Transaction + input.Invoice_Amount;
										getOrderDetails = New_Order_Request[ID == input.Order_ID];
										getOrderDetails.Status="Delivered";
										sendmail
										[
											from :zoho.adminuserid
											to :getRetailerDet.Email
											bcc :zoho.adminuserid
											subject :"Invoice for Order - " + getOrderDetails.Order_ID + " is generated - #" + input.Invoice_ID
											message :(("<div style='line-height:2;'><div>Dear " + getRetailerDet.Name) + ", Your Package is Delivered  to you for the <b> Order ID : " + getOrderDetails.Order_ID + "</b> Ordered on " + getOrderDetails.Ordered_Date + ".</div><div> Your Order is Delivered to the Address,<div><br><div>" + getRetailerDet.Address) + "</div><br><div> If you find, any damage or defect in our product, click this <a href='https://app.zohocreator.com" + zoho.appuri + "#Form:Return_Product?Invoice_ID=" + input.ID + "'>link</a> to return the product</div><br> Your Invoice For the Sales Order <b>#" + input.Invoice_ID + "</b> has been generated and attached with this email. please find the attachment. </div><div>Thanks and regards,<br>" + zoho.adminuser + "</div></div>"
											Attachments :template:Invoice as PDF
										]
										openUrl("#Report:Approved_Orders","same window");
						)
					}
	}

			}
			Run_Scripts_While_Editing10 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Sales
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											disable Retailer_Name;
										disable List_Items_Add.Sub_total;
										disable Total_Sales;
										disable Invoice_Amount;
										hide Returned_Date;
										disable Retailer_Email;
										disable Existing_Balance;
										disable Order_ID;
										disable Retailer_Name;
										disable Company_Name;
										input.Retailer_Name = Add_Contact[ID == input.Retailer_Email].Name;
										disable List_Items_Add.Product_Code;
						)
					}
	}

			}
			Run_Scripts_While_Editing11 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Sales
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(input.Sales_Date > today)
										{
											alert "Please Check the Date";
											cancel submit;
										}
										for each  eachrow in List_Items_Add
										{
											getStocks = Add_Stock[Warehouse_Code == eachrow.Warehouse_Code && Product_Code == eachrow.Product_Code];
											getProdDetails = Add_Product[ID == eachrow.Product_Code];
											if(getStocks.count() != 0)
											{
												if(getStocks.Availability == "In Stock")
												{
													getStocks.Stock_Inflow=getStocks.Stock_Inflow - eachrow.Quantity;
													getStocks.Stock_Outflow=getStocks.Stock_Outflow + eachrow.Quantity;
												}
												else
												{
													openUrl("#Form:Add_Purchased_Invoice","new window");
													alert " The " + getProdDetails.Product_Name + " is Out of Stock, Please Purchase from the supplier";
													cancel submit;
												}
											}
											else
											{
												openUrl("#Form:Add_Purchased_Invoice","new window");
												alert " The Product " + getProdDetails.Product_Name + " is not Available in the Stocks, Please Purchase from the supplier";
												cancel submit;
											}
										}
										getRetailerDet = Add_Contact[ID == input.Retailer_Email];
										getAccountDetails = Add_Accounts[ID == getRetailerDet.Account];
										getAccountDetails.Amount_Transaction=getAccountDetails.Amount_Transaction - old.Invoice_Amount + input.Invoice_Amount;
										getOrderDetails = New_Order_Request[ID == input.Order_ID];
										getOrderDetails.Status="Delivered";
						)
					}
	}

			}
			Run_Scripts_While_Deletin7 as "Run Scripts - While Deleting a Record"
			{
				type =  form
				form = Add_Sales
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											delete from Return_Product[Invoice_ID == input.ID];
										for each  eachrec in input.List_Items_Add
										{
											getStocks = Add_Stock[Warehouse_Code == eachrec.Warehouse_Code && Product_Code == eachrec.Product_Code];
											getStocks.Stock_Inflow=getStocks.Stock_Inflow + eachrec.Quantity;
											getStocks.Stock_Outflow=getStocks.Stock_Outflow - eachrec.Quantity;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always10 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Sales
				record event = on add or edit

	on user input of Sales_Date
	{
					actions 
					{
						custom deluge script
						(
											if(input.Sales_Date > zoho.currentdate)
										{
											alert "Sorry, Future Dates are not allowed";
											input.Sales_Date = null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always11 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Sales
				record event = on add or edit

	on user input of List_Items_Add.Warehouse_Code
	{
					actions 
					{
						custom deluge script
						(
											if(row.Warehouse_Code != null)
										{
											prod_inStock = List();
											getOrderDetails = New_Order_Request[ID == input.Order_ID];
											for each  eachItem in getOrderDetails.List_Item
											{
												if(Add_Stock[Warehouse_Code == row.Warehouse_Code && Availability == "In Stock" && Product_Code == eachItem.Product_Code && Stock_Inflow >= eachItem.Quantity].count() != 0)
												{
													prod_inStock.add(eachItem.Product_Code);
												}
											}
											// 	prod_inStock = Add_Stock[Warehouse_Code == row.Warehouse_Code && Availability == "In Stock"].Product_Code.getAll();
											for each  eachRow in input.List_Items_Add
											{
												prod_inStock.removeElement(eachRow.Product_Code);
											}
											row.Product_Code:ui.add(prod_inStock);
										}
										else
										{
											row.Product_Code=null;
											row.Ordered_Quantity=null;
											row.Quantity=null;
											row.Unit_Price=null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always12 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Sales
				record event = on add or edit

	on user input of List_Items_Add.Product_Code
	{
					actions 
					{
						custom deluge script
						(
											if(row.Product_Code != null)
										{
											orderRequest = New_Order_Request[ID == input.Order_ID];
											for each  eachRow in orderRequest.List_Item
											{
												if(row.Product_Code == eachRow.Product_Code)
												{
													row.Ordered_Quantity=eachRow.Quantity.toLong();
												}
											}
										}
										else
										{
											row.Ordered_Quantity=null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always13 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Sales
				record event = on add or edit

	on user input of Tax_Percent
	{
					actions 
					{
						custom deluge script
						(
											shCharge = ifnull(input.Shipping_and_Handling_Charges,0.0);
										salesAmountVar = ifnull(input.Total_Sales,0.0);
										sum = shCharge + salesAmountVar;
										if(input.Tax_Percent != null && input.Tax_Percent > 0 && sum != null && sum > 0)
										{
											input.Tax_Amount = sum * input.Tax_Percent / 100;
											input.Invoice_Amount = sum + input.Tax_Amount;
											disable Tax_Amount;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always14 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Sales
				record event = on add or edit

	on user input of Shipping_and_Handling_Charges
	{
					actions 
					{
						custom deluge script
						(
											shCharge = ifnull(input.Shipping_and_Handling_Charges,0.0);
										salesAmountVar = ifnull(input.Total_Sales,0.0);
										sum = shCharge + salesAmountVar;
										taxAmnt = 0.0;
										if(sum != null && sum > 0 && input.Tax_Percent != null && input.Tax_Percent > 0)
										{
											taxAmnt = sum * input.Tax_Percent / 100;
										}
										input.Tax_Amount = taxAmnt;
										input.Invoice_Amount = sum + taxAmnt;
						)
					}
	}

			}
			Run_Scripts_On_Always15 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Sales
				record event = on add or edit

	on user input of List_Items_Add.Quantity
	{
					actions 
					{
						custom deluge script
						(
											if(row.Product_Code != null)
										{
											getQty = Add_Stock[Warehouse_Code == row.Warehouse_Code && Product_Code == row.Product_Code];
											if(getQty.Stock_Inflow >= row.Ordered_Quantity)
											{
												if(getQty.Stock_Inflow < row.Quantity)
												{
													alert "Entered Qty. Limit Exceeds the Stocks Available";
													row.Quantity=null;
												}
												else if(row.Quantity > row.Ordered_Quantity)
												{
													alert "Entered Quantity exceeds Ordered Quantity";
													row.Quantity=null;
												}
												else if(row.Unit_Price != null && row.Quantity != null)
												{
													row.Sub_total=row.Unit_Price * row.Quantity;
													sum = 0.0;
													for each  eachrow in List_Items_Add
													{
														if(eachrow.Sub_total != null)
														{
															sum = sum + eachrow.Sub_total;
														}
													}
													input.Total_Sales = sum;
													shCharge = ifnull(input.Shipping_and_Handling_Charges,0.0);
													salesAmountVar = ifnull(input.Total_Sales,0.0);
													amnt_to_be_paid = shCharge + salesAmountVar;
													taxAmnt = 0.0;
													if(amnt_to_be_paid != null && amnt_to_be_paid > 0 && input.Tax_Percent != null && input.Tax_Percent > 0)
													{
														taxAmnt = amnt_to_be_paid * input.Tax_Percent / 100;
													}
													input.Tax_Amount = taxAmnt;
													input.Invoice_Amount = amnt_to_be_paid + taxAmnt;
												}
											}
											else
											{
												alert "Ordered Qty. Exceeds the Stocks Available";
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always16 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Sales
				record event = on add or edit

	on user input of Retailer_Email
	{
					actions 
					{
						custom deluge script
						(
											input.Retailer_Name = Add_Contact[ID == input.Retailer_Email].Name;
										getAccountingDetails = Accounting[Retailer_Name == input.Retailer_Email] sort by Added_Time desc;
										if(getAccountingDetails.count() != 0)
										{
											if(getAccountingDetails.Credits != 0)
											{
												show Existing_Balance;
												if(getAccountingDetails.Status == "Receivables")
												{
													input.Existing_Balance = getAccountingDetails.Credits;
												}
												else if(getAccountingDetails.Status == "Payables")
												{
													input.Existing_Balance = getAccountingDetails.Credits * -1;
												}
											}
											else
											{
												input.Existing_Balance = 0.0;
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always17 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Sales
				record event = on add or edit

	on user input of List_Items_Add.Unit_Price
	{
					actions 
					{
						custom deluge script
						(
											if(row.Unit_Price != null && row.Quantity != null)
										{
											row.Sub_total=row.Unit_Price * row.Quantity;
											sum = 0.0;
											for each  eachrow in List_Items_Add
											{
												if(eachrow.Sub_total != null)
												{
													sum = sum + eachrow.Sub_total;
												}
											}
											input.Total_Sales = sum;
											shCharge = ifnull(input.Shipping_and_Handling_Charges,0.0);
											salesAmountVar = ifnull(input.Total_Sales,0.0);
											amnt_to_be_paid = shCharge + salesAmountVar;
											taxAmnt = 0.0;
											if(amnt_to_be_paid != null && amnt_to_be_paid > 0 && input.Tax_Percent != null && input.Tax_Percent > 0)
											{
												taxAmnt = amnt_to_be_paid * input.Tax_Percent / 100;
											}
											input.Tax_Amount = taxAmnt;
											input.Invoice_Amount = amnt_to_be_paid + taxAmnt;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always18 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Sales
				record event = on add or edit

	on user input of Order_ID
	{
					actions 
					{
						custom deluge script
						(
											if(input.Order_ID != null)
										{
											getSalesReqDet = New_Order_Request[ID == input.Order_ID];
											input.Retailer_Email = getSalesReqDet.Retailer;
											getAccountingDetails = Accounting[Retailer_Name == input.Retailer_Email] sort by Added_Time desc;
											if(getAccountingDetails.count() != 0)
											{
												if(getAccountingDetails.Credits != 0)
												{
													show Existing_Balance;
													input.Existing_Balance = getAccountingDetails.Credits;
												}
												else
												{
													input.Existing_Balance = 0.0;
												}
											}
										}
										else
										{
											input.Existing_Balance = 0.0;
											input.Retailer_Email = null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always19 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Sales
				record event = on add or edit

	on add row of List_Items_Add
	{
					actions 
					{
						custom deluge script
						(
											/* trying to show only the warehouse contains the ordered products */
										getOrderDet = New_Order_Request[ID == input.Order_ID];
										tempWarehouseList = List();
										str = "";
										orderedProducts = List();
										for each  eachItem in getOrderDet.List_Item
										{
											orderedProducts.add(eachItem.Product_Code);
										}
										for each  eachRow in List_Items_Add
										{
											if(orderedProducts.contains(eachRow.Product_Code))
											{
												orderedProducts.removeElement(eachRow.Product_Code);
											}
										}
										for each  eachItem in getOrderDet.List_Item
										{
											if(orderedProducts.contains(eachItem.Product_Code))
											{
												var = Add_Stock[Product_Code == eachItem.Product_Code && Stock_Inflow >= eachItem.Quantity].Warehouse_Code.getAll();
												if(var.size() != 0)
												{
													str = var.toString() + "," + str;
												}
											}
										}
										tempWarehouseList = str.removeLastOccurence(",").toList();
										tempWarehouseList = tempWarehouseList.distinct();
										row.Warehouse_Code:ui.add(tempWarehouseList);
										clear row.Product_Code;
						)
					}
	}

			}
			Run_Scripts_On_Always20 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Sales
				record event = on add or edit

	on delete row of List_Items_Add
	{
					actions 
					{
						custom deluge script
						(
											if(row.Sub_total != null)
										{
											input.Total_Sales = input.Total_Sales - row.Sub_total;
											taxAmnt = 0.0;
											if(input.Tax_Percent != null && input.Tax_Percent > 0 && input.Total_Sales > 0)
											{
												taxAmnt = input.Total_Sales * input.Tax_Percent / 100;
											}
											input.Invoice_Amount = input.Total_Sales + taxAmnt;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_29 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Contact
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(Name.first_name.isEmpty())
										{
											alert "Please Enter First Name";
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_30 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Contact
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											thisapp.Sharing.toRetailer(input.Email);
						)
					}
	}

			}
			Run_Scripts_While_Editing12 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Contact
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(old.Email != input.Email)
										{
											thisapp.Unsharing.toRetailer(input.Email);
											thisapp.Sharing.toRetailer(input.Email);
										}
						)
					}
	}

			}
			Run_Scripts_While_Deletin8 as "Run Scripts - While Deleting a Record"
			{
				type =  form
				form = Add_Contact
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											thisapp.Unsharing.toRetailer(input.Email);
						)
					}
	}

			}
			Run_Scripts_While_Adding_31 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Accounts
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Contacts;
										hide Amount_Transaction;
						)
					}
	}

			}
			Run_Scripts_While_Editing13 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Accounts
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											disable Amount_Transaction;
										disable Contacts;
						)
					}
	}

			}
			Run_Scripts_While_Adding_32 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Supplier
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Products_Supply;
						)
					}
	}

			}
			Run_Scripts_While_Adding_33 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Supplier
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(Name.first_name.isEmpty())
										{
											alert "Please Enter your first name";
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_34 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Invoice
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											input.Purchase_Date = zoho.currenttime;
										disable Purchased_Amount;
										disable List_Item.Subtotal;
										getCompany = Company_Details[ID != 0];
										input.Company_Name = getCompany.ID;
										disable Company_Name;
										disable Tax_Amount;
										disable Total_Amount;
										disable Existing_Balance;
										hide Existing_Balance;
						)
					}
	}

			}
			Run_Scripts_While_Adding_35 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Invoice
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(input.Purchase_Date > today)
										{
											alert "Please Check the Date";
											cancel submit;
										}
										for each  eachRow in List_Item
										{
											if(eachRow.Quantity == 0)
											{
												alert " please enter minimum 1 Qty";
												cancel submit;
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_36 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Invoice
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											for each  eachrecord in input.List_Item
										{
											getStockDetails = Inventory_stateform[Product_Code == eachrecord.Product_Code];
											if(getStockDetails.count() == 0)
											{
												insert into Inventory_stateform
												[
													Qty_Inhand=eachrecord.Quantity
													Qty_Distributed=0
													Product_Code=eachrecord.Product_Code
													Added_User=zoho.loginuser
												]
											}
											else
											{
												getStockDetails.Qty_Inhand=getStockDetails.Qty_Inhand + eachrecord.Quantity;
											}
										}
										amnt_to_be_Paid = input.Total_Amount + input.Existing_Balance;
										amnt_paid = input.Amount_Paid;
										curCredit = amnt_to_be_Paid - amnt_paid;
										Status_Str = thisapp.Util.getCreditStatus(amnt_to_be_Paid,amnt_paid,"Supplier");
										getAccountDetails = Accounting[Supplier_Name == input.Supplier_Name];
										if(Status_Str == "Paid")
										{
											for each  eachRec in Accounting[Supplier_Name == input.Supplier_Name && Status == "Payables"]
											{
												eachRec.Status="Added to Next Bill";
											}
										}
										insert into Accounting
										[
											Amount_Paid=input.Amount_Paid
											Credits=curCredit
											Bill_Amount=input.Total_Amount
											User="Supplier"
											Added_User=zoho.loginuser
											Supplier_Name=input.Supplier_Name
											Purchase_Orders={input.ID}
											Existing_Balance=input.Existing_Balance
											Bill_Date=input.Purchase_Date
											Status=Status_Str
										]
						)
					}
	}

			}
			Run_Scripts_While_Editing14 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Invoice
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											disable Purchased_Amount;
										disable List_Item.Subtotal;
										disable Company_Name;
										disable Tax_Amount;
										disable Total_Amount;
										disable Existing_Balance;
										hide Existing_Balance;
						)
					}
	}

			}
			Run_Scripts_While_Editing15 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Invoice
				record event = on edit

	on success
	{
					actions 
					{
						custom deluge script
						(
											for each  eachrecord in input.List_Item
										{
											getStockDetails = Inventory_stateform[Product_Code == eachrecord.Product_Code];
											if(getStockDetails.count() == 0)
											{
												insert into Inventory_stateform
												[
													Qty_Inhand=eachrecord.Quantity
													Qty_Distributed=0
													Product_Code=eachrecord.Product_Code
													Added_User=zoho.loginuser
												]
											}
											else
											{
												getStockDetails.Qty_Inhand=getStockDetails.Qty_Inhand + eachrecord.Quantity;
											}
										}
										balCredit = 0.0;
										if(input.Total_Amount != input.Amount_Paid)
										{
											balCredit = input.Total_Amount - input.Amount_Paid;
										}
										getAccountDetails = Accounting[Supplier_Name == input.Supplier_Name];
										if(getAccountDetails.count() != 0)
										{
											if(!getAccountDetails.Purchase_Orders.contains(input.ID))
											{
												temp = getAccountDetails.Purchase_Orders;
												temp.add(input.ID);
												getAccountDetails.Purchase_Orders=temp;
												getAccountDetails.Amount_Paid=getAccountDetails.Amount_Paid + input.Amount_Paid;
												getAccountDetails.Credits=getAccountDetails.Credits + balCredit;
												getAccountDetails.Bill_Amount=getAccountDetails.Bill_Amount + input.Total_Amount;
											}
										}
										else
										{
											insert into Accounting
											[
												Amount_Paid=input.Amount_Paid
												Credits=balCredit
												Bill_Amount=input.Total_Amount
												Status="Payables"
												User="Supplier"
												Added_User=zoho.loginuser
												Supplier_Name=input.Supplier_Name
												Purchase_Orders={input.ID}
											]
										}
						)
					}
	}

			}
			Run_Scripts_On_Always21 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Invoice
				record event = on add or edit

	on user input of Purchase_Date
	{
					actions 
					{
						custom deluge script
						(
											if(input.Purchase_Date > zoho.currentdate)
										{
											alert "Sorry, Future Dates are not allowed";
											input.Purchase_Date = null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always22 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Invoice
				record event = on add or edit

	on user input of Tax
	{
					actions 
					{
						custom deluge script
						(
											shCharge = ifnull(input.Shipping_and_Handling_Charges,0.0);
										purchasedAmountVar = ifnull(input.Purchased_Amount,0.0);
										sum = shCharge + purchasedAmountVar;
										taxAmnt = 0.0;
										if(input.Tax != null && input.Tax > 0)
										{
											taxAmnt = sum * input.Tax / 100;
										}
										input.Tax_Amount = taxAmnt;
										input.Total_Amount = sum + taxAmnt;
						)
					}
	}

			}
			Run_Scripts_On_Always23 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Invoice
				record event = on add or edit

	on user input of Shipping_and_Handling_Charges
	{
					actions 
					{
						custom deluge script
						(
											shCharge = ifnull(input.Shipping_and_Handling_Charges,0.0);
										purchasedAmountVar = ifnull(input.Purchased_Amount,0.0);
										sum = shCharge + purchasedAmountVar;
										taxAmnt = 0.0;
										if(input.Tax != null && input.Tax > 0)
										{
											taxAmnt = sum * input.Tax / 100;
										}
										input.Tax_Amount = taxAmnt;
										input.Total_Amount = sum + taxAmnt;
						)
					}
	}

			}
			Run_Scripts_On_Always24 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Invoice
				record event = on add or edit

	on user input of Supplier_Name
	{
					actions 
					{
						custom deluge script
						(
											hide Existing_Balance;
										getSupplierProducts = Add_Product[Supplier_Name == input.Supplier_Name].ID.getAll();
										getAccountingDetails = Accounting[Supplier_Name == input.Supplier_Name] sort by Added_Time desc;
										if(getAccountingDetails.count() != 0)
										{
											if(getAccountingDetails.Credits != 0)
											{
												show Existing_Balance;
												if(getAccountingDetails.Status == "Receivables")
												{
													input.Existing_Balance = getAccountingDetails.Credits * -1;
												}
												else if(getAccountingDetails.Status == "Payables")
												{
													input.Existing_Balance = getAccountingDetails.Credits;
												}
											}
											else
											{
												input.Existing_Balance = 0.0;
											}
										}
										if(input.Supplier_Name != null)
										{
											for each  rec in List_Item
											{
												rec.Product_Code:ui.add(getSupplierProducts);
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always25 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Invoice
				record event = on add or edit

	on user input of List_Item.Unit_Price
	{
					actions 
					{
						custom deluge script
						(
											if(row.Unit_Price != null && row.Quantity != null)
										{
											row.Subtotal=row.Unit_Price * row.Quantity;
											sum = 0.0;
											for each  eachrow in List_Item
											{
												if(eachrow.Subtotal != null)
												{
													sum = sum + eachrow.Subtotal;
												}
											}
											input.Purchased_Amount = sum;
											/* 	to calculate total charges */
											shCharge = ifnull(input.Shipping_and_Handling_Charges,0.0);
											purchasedAmountVar = ifnull(input.Purchased_Amount,0.0);
											sum = shCharge + purchasedAmountVar;
											taxAmnt = 0.0;
											if(input.Tax != null && input.Tax > 0)
											{
												taxAmnt = sum * input.Tax / 100;
											}
											input.Tax_Amount = taxAmnt;
											input.Total_Amount = sum + taxAmnt;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always26 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Invoice
				record event = on add or edit

	on user input of List_Item.Quantity
	{
					actions 
					{
						custom deluge script
						(
											if(row.Unit_Price != null && row.Quantity != null)
										{
											row.Subtotal=row.Unit_Price * row.Quantity;
											sum = 0.0;
											for each  eachrow in List_Item
											{
												if(eachrow.Subtotal != null)
												{
													sum = sum + eachrow.Subtotal;
												}
											}
											input.Purchased_Amount = sum;
											/* 	to calculate total charges */
											shCharge = ifnull(input.Shipping_and_Handling_Charges,0.0);
											purchasedAmountVar = ifnull(input.Purchased_Amount,0.0);
											sum = shCharge + purchasedAmountVar;
											taxAmnt = 0.0;
											if(input.Tax != null && input.Tax > 0)
											{
												taxAmnt = sum * input.Tax / 100;
											}
											input.Tax_Amount = taxAmnt;
											input.Total_Amount = sum + taxAmnt;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always27 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Invoice
				record event = on add or edit

	on add row of List_Item
	{
					actions 
					{
						custom deluge script
						(
											if(input.Supplier_Name != null)
										{
											getSupplierProducts = Add_Product[Supplier_Name == input.Supplier_Name].ID.getAll();
											tempList = List:Int();
											for each  rec in List_Item
											{
												if(rec.Product_Code != null)
												{
													tempList.add(rec.Product_Code);
													tempList = tempList.distinct();
												}
											}
											getSupplierProducts.removeall(tempList);
											row.Product_Code:ui.add(getSupplierProducts);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always28 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Invoice
				record event = on add or edit

	on delete row of List_Item
	{
					actions 
					{
						custom deluge script
						(
											if(row.Subtotal != null)
										{
											input.Purchased_Amount = input.Purchased_Amount - row.Subtotal;
											shCharge = ifnull(input.Shipping_and_Handling_Charges,0.0);
											purchasedAmountVar = ifnull(input.Purchased_Amount,0.0);
											sum = shCharge + purchasedAmountVar;
											taxAmnt = 0.0;
											if(input.Tax != null && input.Tax > 0)
											{
												taxAmnt = sum * input.Tax / 100;
											}
											input.Total_Amount = sum + taxAmnt;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_37 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Inventory
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Qty_Distributed;
										hide Stocks;
						)
					}
	}

			}
			Run_Scripts_while_Adding_1 as "Run Scripts - while Adding a Record"
			{
				type =  form
				form = Stock
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Availability;
										if(input.Inventory != null)
										{
											hide Inventory;
											disable Inventory;
											input.Product_Code = Inventory_stateform[ID == input.Inventory].Product_Code;
											if(input.Product_Code != null)
											{
												disable Product_Code;
											}
										}
										else
										{
											hide Inventory;
											disable Inventory;
											getProducts = Inventory_stateform[ID != 0 && Qty_Inhand != 0].Product_Code.getAll();
											input.Product_Code:ui.add(getProducts);
										}
						)
					}
	}

			}
			Run_Scripts_while_Adding_2 as "Run Scripts - while Adding a Record"
			{
				type =  form
				form = Stock
				record event = on add

	on user input of Product_Code
	{
					actions 
					{
						custom deluge script
						(
											if(input.Inventory == null)
										{
											getInventoryID = Inventory_stateform[Product_Code == input.Product_Code].ID;
											input.Inventory = getInventoryID;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_38 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = New_Order_Request
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											input.Ordered_Date = zoho.currenttime;
										getCompany = Company_Details[ID != 0];
										input.Company_Name = getCompany.ID;
										hide Comments;
										disable Company_Name;
										hide Handled_By;
										hide Status;
										if(zoho.loginuserid != zoho.adminuserid)
										{
											getRetailerDet = Add_Contact[Email == zoho.loginuserid];
											if(getRetailerDet.count() != 0)
											{
												input.Retailer = getRetailerDet.ID;
												disable Retailer;
											}
											else
											{
												distributor = Add_Distributor_Details[Distributor_Email == zoho.loginuserid];
												if(distributor.count() != 0)
												{
													input.Handled_By = distributor.ID;
												}
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_39 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = New_Order_Request
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											for each  eachRec in List_Item
										{
											if(eachRec.Quantity <= 0)
											{
												alert "Please enter atleast 1 quantity";
												cancel submit;
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_40 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = New_Order_Request
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											success message "Your Sales Request Number is " + input.Order_ID;
										getRetailerDetails = Add_Contact[ID == input.Retailer];
										getCompanyDet = Company_Details[ID == input.Company_Name];
										getDistributorDetails = Add_Distributor_Details[ID == input.Handled_By];
										sendmail
										[
											from :zoho.loginuserid
											to :getRetailerDetails.Email
											subject :"Your Order ID :" + input.Order_ID + " is taken."
											message :(("<di>Dear " + getRetailerDetails.Name) + ", </div> <div>Greetings from " + getCompanyDet.Company_Name + ". Thanks for chosing our service. </div><div>Your Order ID: <b>" + input.Order_ID + "</b> is taken and is yet to Approve. Approval of your request is based on the stock avilability is subjected to change at any time.</div> <div> Click this <a href='https://app.zohocreator.com" + zoho.appuri + "#Report:My_Orders'>link</a> to see your request. </div><div> Thanks & regards,</div><div>" + getDistributorDetails.Distributor_Name) + "</div>"
										]
										sendmail
										[
											from :getRetailerDetails.Email
											to :zoho.adminuserid
											subject :"New Order Request " + input.Order_ID
											message :("<div> Dear Admin,</div> <div> You have received a new orer request from " + getRetailerDetails.Name) + "</div> against Order ID: " + input.Order_ID + " </div> <div> Click this <a href='https://app.zohocreator.com" + zoho.appuri + "#Report:Pending_Orders'>link</a> to view the New Request</div>"
										]
						)
					}
	}

			}
			Run_Scripts_While_Editing16 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = New_Order_Request
				record event = on edit

	on success
	{
					actions 
					{
						custom deluge script
						(
											/* for each eachrecord in input.List_Item
																																								{
																																								  getStockDetails  =  Inventory_stateform  [Product_Code == eachrecord.Product_Code];
																																								   if (getStockDetails.count()  ==  0)
																																									{
																																									   insert into Inventory_stateform
																																									   [
																																									      Qty_Inhand = eachrecord.Quantity
																																									       Qty_Distributed = 0
																																									       Product_Code = eachrecord.Product_Code
																																									       Added_User = zoho.loginuser
																																									   ]
																																									}
																																									else
																																								   {
																																								       getStockDetails.Qty_Inhand = (getStockDetails.Qty_Inhand  +  eachrecord.Quantity);
																																								   }
																																								}
																																								balCredit = 0.0;
																																								if (input.Total_Amount  !=  input.Amount_Paid)
																																								{
																																								   balCredit = (input.Total_Amount  -  input.Amount_Paid);
																																								}
																																								getAccountDetails  =  Accounting  [Supplier_Name == input.Supplier_Name];
																																								if (getAccountDetails.count()  !=  0)
																																								{
																																								if (!getAccountDetails.Purchase_Orders.contains(input.ID))
																																									{
																																									temp = getAccountDetails.Purchase_Orders;
																																									temp.add(input.ID);
																																									getAccountDetails.Purchase_Orders = temp;
																																									getAccountDetails.Amount_Paid = (getAccountDetails.Amount_Paid  +  input.Amount_Paid);
																																									getAccountDetails.Credits = (getAccountDetails.Credits  +  balCredit);
																																								getAccountDetails.Bill_Amount = (getAccountDetails.Bill_Amount  +  input.Total_Amount);																																						 
																																								}																																							
																																								}																																						
																																								else																																							
																																								{																																						 
																																								insert into Accounting
																																									[
																																									Credits = balCredit
																																									Bill_Amount = input.Total_Amount
																																									Type = "Payable"
																																									Added_User = zoho.loginuser
																																									Supplier_Name = input.Supplier_Name
																																									Purchase_Orders = {input.ID}																																						    ]																																							}																																							 */
						)
					}
	}

			}
			Run_Scripts_On_Always29 as "Run Scripts - On Always"
			{
				type =  form
				form = New_Order_Request
				record event = on add or edit

	field rules
	{
					actions 
					{
						hide Sales_Invoice;
					}
	}

			}
			Run_Scripts_On_Always30 as "Run Scripts - On Always"
			{
				type =  form
				form = New_Order_Request
				record event = on add or edit

	on user input of List_Item.Quantity
	{
					actions 
					{
						custom deluge script
						(
											/* if ((row.Unit_Price  !=  null)  &&  (row.Quantity  !=  null))
																																								{
																																								   row.Subtotal = (row.Unit_Price  *  row.Quantity);
																																								   sum = 0.0;
																																								   for each eachrow in List_Item
																																								   {
																																								       if (eachrow.Subtotal  !=  null)
																																								       {
																																								           sum = (sum  +  eachrow.Subtotal);
																																								       }
																																								   }
																																								   input.Purchased_Amount = sum;
																																								}
																																								*/
						)
					}
	}

			}
			Run_Scripts_On_Always31 as "Run Scripts - On Always"
			{
				type =  form
				form = New_Order_Request
				record event = on add or edit

	on user input of Ordered_Date
	{
					actions 
					{
						custom deluge script
						(
											if(input.Ordered_Date > zoho.currentdate)
										{
											alert "Sorry, Future Dates are not allowed";
											input.Ordered_Date = null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always32 as "Run Scripts - On Always"
			{
				type =  form
				form = New_Order_Request
				record event = on add or edit

	on user input of Expected_Delivery_Date
	{
					actions 
					{
						custom deluge script
						(
											if(input.Expected_Delivery_Date < zoho.currentdate)
										{
											alert "Sorry, Past Dates are not allowed";
											input.Expected_Delivery_Date = null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always33 as "Run Scripts - On Always"
			{
				type =  form
				form = New_Order_Request
				record event = on add or edit

	on user input of List_Item.Product_Code
	{
					actions 
					{
						custom deluge script
						(
											getProd = Add_Product[ID == row.Product_Code];
										if(getProd.count() != 0)
										{
											cnt = 0;
											for each  eachrec in List_Item
											{
												if(eachrec.Product_Code == row.Product_Code)
												{
													cnt = cnt + 1;
												}
											}
											if(cnt > 1)
											{
												alert "This Product is already exist in the list";
												row.Product_Code=null;
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always34 as "Run Scripts - On Always"
			{
				type =  form
				form = New_Order_Request
				record event = on add or edit

	on add row of List_Item
	{
					actions 
					{
						custom deluge script
						(
											getSupplierProducts = Add_Product[ID != 0].ID.getAll();
										tempList = List:Int();
										for each  rec in List_Item
										{
											if(rec.Product_Code != null)
											{
												tempList.add(rec.Product_Code);
												tempList = tempList.distinct();
											}
										}
										getSupplierProducts.removeall(tempList);
										row.Product_Code:ui.add(getSupplierProducts);
						)
					}
	}

			}
			Run_Scripts_While_Adding_41 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Return_Product
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(input.Invoice_ID != null)
										{
											disable Invoice_ID;
											getSalesDetails = Add_Sales[ID == input.Invoice_ID];
											productList = List();
											for each  eachRow in getSalesDetails.List_Items_Add
											{
												getReturnDetails = Return_Product[Invoice_ID == input.Invoice_ID && Product_Code == eachRow.Product_Code].sum(Qty_Returned);
												if(getReturnDetails < eachRow.Quantity)
												{
													productList.add(eachRow.Product_Code);
												}
											}
											input.Product_Code:ui.add(productList);
											input.Returned_By = Add_Contact[ID == getSalesDetails.Retailer_Email].ID;
											disable Returned_By;
											if(productList.size() == 0)
											{
												alert "There is no Available Qty. for this Invoice ID";
											}
										}
										hide Warehouse_Code;
										input.Returned_Date = zoho.currenttime;
						)
					}
	}

			}
			Run_Scripts_While_Adding_42 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Return_Product
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											getProductSales = Add_Sales_List_Items[Invoice_ID == input.Invoice_ID && Product_Code == input.Product_Code];
										input.Warehouse_Code = getProductSales.Warehouse_Code;
										if(input.Qty_Returned <= 0)
										{
											alert "Enter atleast 1 Quantity";
											cancel submit;
										}
										gettotalQty = Add_Sales[ID == input.Invoice_ID];
										for each  eachrow in gettotalQty.List_Items_Add
										{
											if(eachrow.Product_Code == input.Product_Code)
											{
												totalReturnedQty = if(Return_Product[Invoice_ID == input.Invoice_ID && Product_Code == input.Product_Code && Warehouse_Code == Warehouse_Code].sum(Qty_Returned) == 0,0,Return_Product[Invoice_ID == input.Invoice_ID && Product_Code == input.Product_Code && Warehouse_Code == Warehouse_Code].sum(Qty_Returned));
												if(input.Qty_Returned + totalReturnedQty > eachrow.Quantity)
												{
													alert "Quantity you entered exceeds the delivered quantity! ";
													cancel submit;
												}
												else
												{
													getStockDetails = Add_Stock[Warehouse_Code == input.Warehouse_Code && Product_Code == input.Product_Code];
													getStockDetails.Stock_Inflow=getStockDetails.Stock_Inflow + input.Qty_Returned;
													getStockDetails.Stock_Outflow=getStockDetails.Stock_Outflow - input.Qty_Returned;
													if(getStockDetails.Availability == "Out of Stock")
													{
														getStockDetails.Availability="In Stock";
													}
												}
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_43 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Return_Product
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											getLoginuserDet = Add_Contact[Email == zoho.loginuserid];
										if(getLoginuserDet.count() != 0)
										{
											openUrl("#Report:My_Sales_Invoice","same window");
										}
										else
										{
											openUrl("#Report:Sales_Details","same window");
										}
						)
					}
	}

			}
			Run_Scripts_On_Always35 as "Run Scripts - On Always"
			{
				type =  form
				form = Return_Product
				record event = on add or edit

	on user input of Invoice_ID
	{
					actions 
					{
						custom deluge script
						(
											if(input.Invoice_ID != null)
										{
											getSalesDetails = Add_Sales[ID == input.Invoice_ID];
											productList = List();
											for each  eachRow in getSalesDetails.List_Items_Add
											{
												qtyReturned = ifnull(Return_Product[Invoice_ID == input.Invoice_ID && Product_Code == eachRow.Product_Code].sum(Qty_Returned),0);
												if(eachRow.Quantity > qtyReturned)
												{
													productList.add(eachRow.Product_Code);
												}
											}
											input.Returned_By = Add_Contact[ID == getSalesDetails.Retailer_Email].ID;
											disable Returned_By;
											if(productList.size() == 0)
											{
												alert "There is no Available Qty. for this Invoice ID";
											}
											input.Product_Code:ui.add(productList);
										}
										input.Returned_Date = zoho.currenttime;
						)
					}
	}

			}
			Run_Scripts_While_Adding_44 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Product
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											companyDet = Company_Details[ID != 0];
										getAdminDet = Add_Distributor_Details[Distributor_Email == zoho.adminuserid];
										for each  eachRetailer in Add_Contact[ID != 0]
										{
											sendmail
											[
												from :zoho.adminuserid
												to :eachRetailer.Email
												subject :"A New Produt to the Market "
												message :(("<div style='line-height:1.2;'><div> Dear " + eachRetailer.Name) + ",</div><br><div> Greetings From " + companyDet.Company_Name + ", We gives our best to our Customers best always.</div><br><div>Now, we are glad to bring you our new Product to this list, <b>" + input.Product_Name + "</b> to the service.</div> <br> Thanks and Regards<br> " + getAdminDet.Distributor_Name) + "</div>"
												Attachments :template:Prod_Desc as INLINE
											]
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_45 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Company_Details
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											// setting the Head Distributor as admin
										getHeadDistributor = Add_Distributor_Details[Distributor_Email == zoho.adminuserid];
										if(getHeadDistributor.count() == 0)
										{
											var = insert into Add_Distributor_Details
										[
											Distributor_Email=zoho.adminuserid
											Distributor_Name.first_name=zoho.adminuser
											Added_User=zoho.loginuser
										];
											input.Head_Distributor_Name = var;
											disable Head_Distributor_Name;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_46 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Company_Details
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											getHeadDistributorRec = Add_Distributor_Details[ID == input.Head_Distributor_Name];
										getHeadDistributorRec.Company_Name=input.ID;
										openUrl("#Form:Add_Product","same window");
						)
					}
	}

			}
			Run_Scripts_While_Deletin9 as "Run Scripts - While Deleting a Record"
			{
				type =  form
				form = Company_Details
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											// when company details are deleted all records in this applications will be deleted
										alert " All Details in this application will be deleted";
										delete from Add_Product[ID != 0];
										delete from Add_Warehouse[ID != 0];
										delete from Accounting[ID != 0];
										delete from Add_Sales[ID != 0];
										delete from Add_Stock[ID != 0];
										delete from Return_Product[ID != 0];
										delete from Add_Supplier[ID != 0];
										delete from Add_Distributor_Details[ID != 0];
										delete from Add_Contact[ID != 0];
										delete from Add_Accounts[ID != 0];
										delete from Add_Invoice[ID != 0];
										delete from Inventory_stateform[ID != 0];
										delete from Add_Category[ID != 0];
										delete from New_Order_Request[ID != 0];
						)
					}
	}

			}
		}
		functions
		{
			Add_to_Warehouse_Stock as "Add to Warehouse Stock"
			{
				type =  functions
				form = Inventory_stateform
				on start
				{
					actions 
					{
					Custom_actions.addToStock(ID);
					}
				}
			}
			Approve as "Approve"
			{
				type =  functions
				form = New_Order_Request
				on start
				{
					actions 
					{
					Custom_actions.approveRequest(New_Order_Request);
					}
				}
			}
			Decline as "Decline"
			{
				type =  functions
				form = New_Order_Request
				on start
				{
					actions 
					{
					Custom_actions.orderDecline(ID);
					}
				}
			}
			Deliver as "Deliver"
			{
				type =  functions
				form = New_Order_Request
				on start
				{
					actions 
					{
					Custom_actions.orderDelivery(New_Order_Request);
					}
				}
			}
			Return_Sales as "Return Sales"
			{
				type =  functions
				form = Add_Sales
				on start
				{
					actions 
					{
					Custom_actions.returnSales(ID);
					}
				}
			}
		}
	}
	share_settings
	{
			"Retailer"
			{
				name = "Retailer"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false}
				description = "This profile will have retailer access.\n"
				ModulePermissions
				{
					Decline_Form
					{
						FieldPermissions
						{
							Order_ID{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Comments{visibility:true,readonly:false}
						}
					}
					Add_Product
					{
						enabled= Viewall,Export 
						ReportPermissions
						{
							Product_Details={"View"}
						}
						FieldPermissions
						{
							Product_Image{visibility:true,readonly:false}
							Product_Description{visibility:true,readonly:false}
							Product_Code{visibility:true,readonly:false}
							Category{visibility:true,readonly:false}
							Size{visibility:true,readonly:false}
							Model{visibility:true,readonly:false}
							Product_Name{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Supplier_Name{visibility:true,readonly:false}
						}
					}
					Add_Warehouse
					{
						FieldPermissions
						{
							Warehouse_Address{visibility:false,readonly:false}
							Company_Name{visibility:true,readonly:false}
							Warehouse_Name{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Warehouse_Code{visibility:true,readonly:false}
						}
					}
					Accounting
					{
						enabled= Viewall,Import,Export 
						ReportPermissions
						{
							My_Accounting_Details={"View"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Bill_Date{visibility:true,readonly:false}
							User{visibility:true,readonly:false}
							Retailer_Name{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Supplier_Name{visibility:true,readonly:false}
							Sales_Orders{visibility:true,readonly:false}
							Bill_Amount{visibility:true,readonly:false}
							Credits{visibility:true,readonly:false}
							Existing_Balance{visibility:true,readonly:false}
							Purchase_Orders{visibility:true,readonly:false}
							Amount_Paid{visibility:true,readonly:false}
						}
					}
					Add_Sales_List_Items
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Ordered_Quantity{visibility:false,readonly:false}
							Quantity{visibility:false,readonly:false}
							Sub_total{visibility:false,readonly:false}
							Invoice_ID{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Warehouse_Code{visibility:false,readonly:false}
							Product_Code{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Unit_Price{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Company_Details
					{
						FieldPermissions
						{
							Head_Distributor_Name{visibility:true,readonly:false}
							Mobile_Number{visibility:false,readonly:false}
							Website{visibility:true,readonly:false}
							Company_Name{visibility:true,readonly:false}
							Company_Address{visibility:false,readonly:false}
							Contact_Number{visibility:true,readonly:false}
							Company_Email{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Warehouse_Details{visibility:true,readonly:false}
							Logo{visibility:true,readonly:false}
							Distributors{visibility:true,readonly:false}
						}
					}
					Add_Sales
					{
						enabled= Viewall,Import,Export 
						ReportPermissions
						{
							My_Sales_Invoice={"View"}
						}
						FieldPermissions
						{
							Order_ID{visibility:true,readonly:false}
							Total_Sales{visibility:true,readonly:false}
							List_Items_Add{visibility:false,readonly:false}
							Invoice_ID{visibility:true,readonly:false}
							Sales_Date{visibility:true,readonly:false}
							Retailer_Name{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Returned_Date{visibility:true,readonly:false}
							Tax_Percent{visibility:true,readonly:false}
							Retailer_Email{visibility:true,readonly:false}
							Amount_Received{visibility:true,readonly:false}
							Shipping_and_Handling_Charges{visibility:true,readonly:false}
							Section1{visibility:false,readonly:false}
							Invoice_Amount{visibility:true,readonly:false}
							Company_Name{visibility:true,readonly:false}
							Existing_Balance{visibility:true,readonly:false}
						}
					}
					Inventory_stateform
					{
						FieldPermissions
						{
							Qty_Inhand{visibility:true,readonly:false}
							Qty_Distributed{visibility:true,readonly:false}
							Product_Code{visibility:true,readonly:false}
							Stocks{visibility:true,readonly:false}
						}
					}
					Add_Stock
					{
						FieldPermissions
						{
							Availability{visibility:true,readonly:false}
							Product_Code{visibility:true,readonly:false}
							Stock_Outflow{visibility:true,readonly:false}
							Stock_Inflow{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Warehouse_Code{visibility:true,readonly:false}
							Inventory{visibility:true,readonly:false}
						}
					}
					Return_Product
					{
						enabled= Create,Viewall,Export,Tab 
						ReportPermissions
						{
							My_Return_Details={"View"}
						}
						FieldPermissions
						{
							Returned_Date{visibility:true,readonly:false}
							Product_Code{visibility:true,readonly:false}
							Returned_By{visibility:true,readonly:false}
							Qty_Returned{visibility:true,readonly:false}
							Invoice_ID{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Warehouse_Code{visibility:true,readonly:false}
							Reason{visibility:true,readonly:false}
						}
					}
					Add_Invoice
					{
						FieldPermissions
						{
							Total_Amount{visibility:true,readonly:false}
							Invoice_Number{visibility:true,readonly:false}
							Tax{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Purchase_Date{visibility:true,readonly:false}
							Supplier_Name{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Purchased_Amount{visibility:true,readonly:false}
							Shipping_and_Handling_Charges{visibility:true,readonly:false}
							Company_Name{visibility:true,readonly:false}
							Existing_Balance{visibility:true,readonly:false}
							List_Item{visibility:true,readonly:false}
							PO_copy{visibility:true,readonly:false}
							Amount_Paid{visibility:true,readonly:false}
						}
					}
					Add_Supplier
					{
						FieldPermissions
						{
							Phone_Number{visibility:false,readonly:false}
							Company_Name{visibility:true,readonly:false}
							Company_Address{visibility:false,readonly:false}
							Products_Supply{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Name{visibility:false,readonly:false}
							Supplier_Email{visibility:true,readonly:false}
						}
					}
					Add_Distributor_Details
					{
						FieldPermissions
						{
							Distributor_Email{visibility:true,readonly:false}
							Company_Name{visibility:true,readonly:false}
							Distributor_Name{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
						}
					}
					Add_Accounts
					{
						FieldPermissions
						{
							Amount_Transaction{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Firm_Name{visibility:true,readonly:false}
							Address{visibility:false,readonly:false}
							Contacts{visibility:true,readonly:false}
							Website{visibility:true,readonly:false}
							Contact_Number{visibility:true,readonly:false}
							Phone_Number{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
						}
					}
					New_Order_Request
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							My_Orders={"View"}
						}
						FieldPermissions
						{
							Order_ID{visibility:true,readonly:false}
							Retailer{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Ordered_Date{visibility:true,readonly:false}
							Handled_By{visibility:true,readonly:false}
							Expected_Delivery_Date{visibility:true,readonly:false}
							Comments{visibility:true,readonly:false}
							Sales_Invoice{visibility:false,readonly:false}
							Company_Name{visibility:true,readonly:false}
							List_Item{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
						}
					}
					Add_Contact
					{
						FieldPermissions
						{
							Account{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Address{visibility:false,readonly:false}
							Phone_Number{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Name{visibility:false,readonly:false}
						}
					}
					Inventory
					{
						FieldPermissions
						{
							Qty_Inhand{visibility:true,readonly:false}
							Qty_Distributed{visibility:true,readonly:false}
							Product_Code{visibility:true,readonly:false}
							Stocks{visibility:true,readonly:false}
						}
					}
					Stock
					{
						FieldPermissions
						{
							Availability{visibility:true,readonly:false}
							Product_Code{visibility:true,readonly:false}
							Qty{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Inventory{visibility:true,readonly:false}
							Warehouse_Code{visibility:true,readonly:false}
						}
					}
					Add_Category
					{
						FieldPermissions
						{
							Section{visibility:false,readonly:false}
							Category{visibility:true,readonly:false}
						}
					}
				}
			}
			"Administrator"
			{
				name = "Administrator"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true}
				description = "This profile will have all the permissions.\n"
			}
			"Distributor"
			{
				name = "Distributor"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false}
				description = "This profile will have all the permissions.\n"
				ModulePermissions
				{
					Decline_Form
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Order_ID{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Comments{visibility:true,readonly:false}
						}
					}
					Add_Product
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Product_Details={"View"}
						}
						FieldPermissions
						{
							Product_Image{visibility:true,readonly:false}
							Product_Description{visibility:true,readonly:false}
							Product_Code{visibility:true,readonly:false}
							Category{visibility:true,readonly:false}
							Size{visibility:true,readonly:false}
							Model{visibility:true,readonly:false}
							Product_Name{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Supplier_Name{visibility:true,readonly:false}
						}
					}
					Add_Warehouse
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Warehouse_Details={"View","Edit"}
							Countries_Map={"View"}
						}
						FieldPermissions
						{
							Warehouse_Address{visibility:false,readonly:false}
							Company_Name{visibility:true,readonly:false}
							Warehouse_Name{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Warehouse_Code{visibility:true,readonly:false}
						}
					}
					Accounting
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Receivables={"View","Edit"}
							All_Accounting_Details={"View","Edit"}
							Ledger_Book={"View"}
							Weekly_Sales={"View"}
							Payables={"View","Edit"}
							Monthly_Sales={"View"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Bill_Date{visibility:true,readonly:false}
							User{visibility:true,readonly:false}
							Retailer_Name{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Supplier_Name{visibility:true,readonly:false}
							Sales_Orders{visibility:true,readonly:false}
							Bill_Amount{visibility:true,readonly:false}
							Credits{visibility:true,readonly:false}
							Existing_Balance{visibility:true,readonly:false}
							Purchase_Orders{visibility:true,readonly:false}
							Amount_Paid{visibility:true,readonly:false}
						}
					}
					Add_Sales_List_Items
					{
						FieldPermissions
						{
							Product_Code{visibility:true,readonly:false}
							Ordered_Quantity{visibility:true,readonly:false}
							Quantity{visibility:true,readonly:false}
							Sub_total{visibility:true,readonly:false}
							Invoice_ID{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Warehouse_Code{visibility:true,readonly:false}
							Unit_Price{visibility:true,readonly:false}
						}
					}
					Company_Details
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Company_Information={"View"}
						}
						FieldPermissions
						{
							Head_Distributor_Name{visibility:true,readonly:false}
							Mobile_Number{visibility:false,readonly:false}
							Website{visibility:true,readonly:false}
							Company_Name{visibility:true,readonly:false}
							Company_Address{visibility:false,readonly:false}
							Contact_Number{visibility:true,readonly:false}
							Company_Email{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Warehouse_Details{visibility:true,readonly:false}
							Logo{visibility:true,readonly:false}
							Distributors{visibility:true,readonly:false}
						}
					}
					Add_Sales
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Sales_Details={"View","Edit"}
							Sales_by_Customer={"View"}
						}
						FieldPermissions
						{
							Order_ID{visibility:true,readonly:false}
							Total_Sales{visibility:true,readonly:false}
							List_Items_Add{visibility:false,readonly:false}
							Invoice_ID{visibility:true,readonly:false}
							Sales_Date{visibility:true,readonly:false}
							Retailer_Name{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Returned_Date{visibility:true,readonly:false}
							Tax_Percent{visibility:true,readonly:false}
							Retailer_Email{visibility:true,readonly:false}
							Amount_Received{visibility:true,readonly:false}
							Shipping_and_Handling_Charges{visibility:true,readonly:false}
							Section1{visibility:false,readonly:false}
							Invoice_Amount{visibility:true,readonly:false}
							Company_Name{visibility:true,readonly:false}
							Existing_Balance{visibility:true,readonly:false}
						}
					}
					Inventory_stateform
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Inventory_Details={"View","Edit"}
						}
						FieldPermissions
						{
							Qty_Inhand{visibility:true,readonly:false}
							Qty_Distributed{visibility:true,readonly:false}
							Product_Code{visibility:true,readonly:false}
							Stocks{visibility:true,readonly:false}
						}
					}
					Add_Stock
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Stocks_Detials={"View","Edit"}
							Stock_Availability={"View"}
						}
						FieldPermissions
						{
							Availability{visibility:true,readonly:false}
							Product_Code{visibility:true,readonly:false}
							Stock_Outflow{visibility:true,readonly:false}
							Stock_Inflow{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Warehouse_Code{visibility:true,readonly:false}
							Inventory{visibility:true,readonly:false}
						}
					}
					Return_Product
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Return_Details={"View","Edit"}
						}
						FieldPermissions
						{
							Returned_Date{visibility:true,readonly:false}
							Product_Code{visibility:true,readonly:false}
							Returned_By{visibility:true,readonly:false}
							Qty_Returned{visibility:true,readonly:false}
							Invoice_ID{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Warehouse_Code{visibility:true,readonly:false}
							Reason{visibility:true,readonly:false}
						}
					}
					Add_Invoice
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Weekly_Purchase={"View"}
							Monthly_Purchase={"View"}
							Vendor_Purchase_Invoice={"View","Edit"}
						}
						FieldPermissions
						{
							Total_Amount{visibility:true,readonly:false}
							Invoice_Number{visibility:true,readonly:false}
							Tax{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Purchase_Date{visibility:true,readonly:false}
							Supplier_Name{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Purchased_Amount{visibility:true,readonly:false}
							Shipping_and_Handling_Charges{visibility:true,readonly:false}
							Company_Name{visibility:true,readonly:false}
							Existing_Balance{visibility:true,readonly:false}
							List_Item{visibility:true,readonly:false}
							PO_copy{visibility:true,readonly:false}
							Amount_Paid{visibility:true,readonly:false}
						}
					}
					Add_Supplier
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Suppliers_Details={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Phone_Number{visibility:false,readonly:false}
							Company_Name{visibility:true,readonly:false}
							Company_Address{visibility:false,readonly:false}
							Products_Supply{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Name{visibility:false,readonly:false}
							Supplier_Email{visibility:true,readonly:false}
						}
					}
					Add_Distributor_Details
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Distributors_Details={"View","Edit"}
						}
						FieldPermissions
						{
							Distributor_Email{visibility:true,readonly:false}
							Company_Name{visibility:true,readonly:false}
							Distributor_Name{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
						}
					}
					Add_Accounts
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Account_Stats={"View"}
							Accounts_Details={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Amount_Transaction{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Firm_Name{visibility:true,readonly:false}
							Address{visibility:false,readonly:false}
							Contacts{visibility:true,readonly:false}
							Website{visibility:true,readonly:false}
							Contact_Number{visibility:true,readonly:false}
							Phone_Number{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
						}
					}
					New_Order_Request
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Orders={"View"}
							Delivered_Orders={"View"}
							Pending_Orders={"View"}
							Approved_Orders={"View"}
							Declined_Orders={"View"}
						}
						FieldPermissions
						{
							Order_ID{visibility:true,readonly:false}
							Retailer{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Ordered_Date{visibility:true,readonly:false}
							Handled_By{visibility:true,readonly:false}
							Expected_Delivery_Date{visibility:true,readonly:false}
							Comments{visibility:true,readonly:false}
							Sales_Invoice{visibility:false,readonly:false}
							Company_Name{visibility:true,readonly:false}
							List_Item{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
						}
					}
					Add_Contact
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Contacts={"View","Edit","Delete"}
							Contact_Stats={"View"}
						}
						FieldPermissions
						{
							Account{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Address{visibility:false,readonly:false}
							Phone_Number{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Name{visibility:false,readonly:false}
						}
					}
					Inventory
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Qty_Inhand{visibility:true,readonly:false}
							Qty_Distributed{visibility:true,readonly:false}
							Product_Code{visibility:true,readonly:false}
							Stocks{visibility:true,readonly:false}
						}
					}
					Stock
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Availability{visibility:true,readonly:false}
							Product_Code{visibility:true,readonly:false}
							Qty{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Inventory{visibility:true,readonly:false}
							Warehouse_Code{visibility:true,readonly:false}
						}
					}
					Add_Category
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Categories={"View"}
						}
						FieldPermissions
						{
							Section{visibility:false,readonly:false}
							Category{visibility:true,readonly:false}
						}
					}
					Dashboard
					{
						enabled = tab
					}
				}
			}
			roles
			{
				"CEO"
				{
					description = "User belonging to this role can access data of all other users.\n"
				}
			}
	}

	customize
	{
		
		layout = "tab"
		color = "black"
		base theme = "professional"
		new theme = 4
		new theme color = 4
		icons = true
    	icon type = 1
    	icon name = "zc-ab-finance7"
    	icon theme = "yellow"
		icons style = solid
	}

	phone
	{
		section  hidden
		{
			hide = true
			icon = "holidays-dead-hand"
			form  Add_Stock
			{
				layout = left
				icon = "ui-1-bold-add"
				hide = true
			}
			form  Add_Warehouse
			{
				layout = left
				icon = "ui-1-bold-add"
				hide = true
			}
			form  Add_Category
			{
				layout = auto
				icon = "ui-1-bold-add"
				hide = true
			}
			form  Add_Distributor_Details
			{
				layout = auto
				icon = "ui-2-square-add-11"
				hide = true
			}
			form  Inventory_stateform
			{
				layout = auto
				icon = "ui-2-square-add-11"
				hide = true
			}
			form  Accounting
			{
				layout = auto
				icon = "ui-1-bold-add"
				hide = true
			}
			form  Decline_Form
			{
				layout = auto
				icon = "arrows-1-simple-down"
				hide = true
			}
			form  Add_Sales
			{
				layout = auto
				icon = "ui-2-square-add-11"
				hide = true
			}
			form  Add_Contact
			{
				layout = auto
				icon = "ui-2-square-add-11"
				hide = true
			}
			form  Add_Accounts
			{
				layout = auto
				icon = "ui-2-square-add-11"
				hide = true
			}
		}
		section  Charts
		{
			icon = "shopping-chart"
			pivotchart Monthly_Purchase
			{
				icon = "shopping-tag-sale"
				hide = true
			}
			pivotchart Sales_by_Warehouse
			{
				icon = "social-1-logo-shopify"
				hide = true
			}
			pivotchart Account_Stats
			{
				icon = "business-chart-bar-32"
				hide = true
			}
			pivotchart Weekly_Sales
			{
				icon = "objects-diamond"
				hide = true
			}
			pivotchart Monthly_Sales
			{
				icon = "objects-diamond"
				hide = true
			}
			pivotchart Weekly_Purchase
			{
				icon = "business-progress"
				hide = true
			}
			pivotchart Sales_by_Customer
			{
				icon = "shopping-discount"
				hide = true
			}
		}
		section  Dashboard
		{
			icon = "ui-1-dashboard-half"
			page Dashboard
			{
			}
		}
		section  Suppliers
		{
			icon = "social-1-logo-creative-market"
			form  Add_Supplier
			{
				layout = auto
				icon = "users-2-a-add"
			}
			custom Suppliers_Details
			{
				icon = "users-2-contacts-44"
			}
		}
		section  Purchase_Orders
		{
			displayname= "Purchase Orders"
			icon = "shopping-list"
			form  Add_Invoice
			{
				layout = left
				icon = "ui-2-square-add-11"
			}
			list Vendor_Purchase_Invoice
			{
				icon = "shopping-receipt"
			}
		}
		section  Main_Inventory
		{
			displayname= "Main Inventory"
			icon = "shopping-stock"
			form  Inventory
			{
				layout = auto
				icon = "ui-2-square-add-11"
			}
			list Inventory_Details
			{
				icon = "shopping-stock"
			}
		}
		section  Warehouse
		{
			icon = "social-1-logo-shopify"
			form  Stock
			{
				layout = left
				icon = "ui-2-square-add-11"
			}
			list Warehouse_Details
			{
				icon = "shopping-shop-location"
			}
			list Stocks_Detials
			{
				icon = "shopping-stock"
			}
			map Countries_Map
			{
				icon = "location-worl-marker"
			}
			pivotchart Stock_Availability
			{
				icon = "ui-3-chart-bars"
			}
		}
		section  page
		{
			displayname= "Order Management"
			icon = "social-1-logo-evernote"
			form  New_Order_Request
			{
				layout = left
				icon = "ui-2-square-add-11"
			}
			list Orders
			{
				icon = "shopping-list"
			}
			list Pending_Orders
			{
				icon = "ui-2-hourglass"
			}
			list Approved_Orders
			{
				icon = "design-todo"
			}
			list Delivered_Orders
			{
				icon = "shopping-delivery-fast"
			}
			list Declined_Orders
			{
				icon = "files-remove"
			}
			list My_Orders
			{
				icon = "files-single-content-03"
			}
		}
		section  Sales
		{
			icon = "business-businessman-03"
			list My_Sales_Invoice
			{
				icon = "files-user"
			}
			list Sales_Details
			{
				icon = "business-chart-bar-33"
			}
			list My_Return_Details
			{
				icon = "shopping-cart-modern-remove"
			}
			list Return_Details
			{
				icon = "arrows-1-curved-previous"
			}
			form  Return_Product
			{
				layout = left
				icon = "arrows-1-share-91"
			}
		}
		section  CRM
		{
			icon = "ui-1-analytics-88"
			list Accounts_Details
			{
				icon = "users-circle-08"
			}
			custom Contacts
			{
				icon = "users-circle-10"
			}
			pivotchart Contact_Stats
			{
				icon = "ui-3-chart-bars"
			}
		}
		section  Ledger
		{
			icon = "business-cheque"
			list All_Accounting_Details
			{
				icon = "design-paper-design"
			}
			list Receivables
			{
				icon = "business-money-coins"
			}
			list Payables
			{
				icon = "shopping-credit-card-in"
			}
			list My_Accounting_Details
			{
				icon = "education-books-46"
			}
			pivottable Ledger_Book
			{
				icon = "education-book-open"
			}
		}
		section  Products
		{
			icon = "shopping-gift"
			form  Add_Product
			{
				layout = auto
				icon = "ui-2-square-add-11"
			}
			list Product_Details
			{
				icon = "design-window-paragraph"
			}
		}
		section  Settings
		{
			icon = "tech-2-p-settings"
			summary Company_Information
			{
				icon = "business-building"
			}
			list Distributors_Details
			{
				icon = "users-2-contacts-44"
			}
			list Categories
			{
				icon = "design-2-layers"
			}
			form  Company_Details
			{
				layout = auto
				icon = "ui-2-square-add-11"
			}
		}
		section  List_Items
		{
			displayname= "List Items"
			icon = "shopping-receipt-list-43"
			form  Add_Sales_List_Items
			{
				layout = auto
				icon = "design-2-selection"
				hide = true
			}
			list All_List_Items
			{
				icon = "design-2-selection"
				hide = true
			}
		}
		customize
		{
			colour = blue
        	layout = onecolumn
		 	icons style = outline
		}
	}
	tablet
	{
		section  hidden
		{
			hide = true
			icon = "ui-1-eye-ban-20"
			form  Add_Stock
			{
				layout = left
				icon = "ui-1-bold-add"
				hide = true
			}
			form  Add_Warehouse
			{
				layout = left
				icon = "ui-1-bold-add"
				hide = true
			}
			form  Add_Category
			{
				layout = auto
				icon = "ui-1-bold-add"
				hide = true
			}
			form  Add_Distributor_Details
			{
				layout = auto
				icon = "ui-2-square-add-11"
				hide = true
			}
			form  Inventory_stateform
			{
				layout = auto
				icon = "ui-2-square-add-11"
				hide = true
			}
			form  Accounting
			{
				layout = auto
				icon = "ui-1-bold-add"
				hide = true
			}
			form  Decline_Form
			{
				layout = auto
				icon = "arrows-1-simple-down"
				hide = true
			}
			form  Add_Sales
			{
				layout = auto
				icon = "ui-2-square-add-11"
				hide = true
			}
			form  Add_Contact
			{
				layout = auto
				icon = "ui-2-square-add-11"
				hide = true
			}
			form  Add_Accounts
			{
				layout = auto
				icon = "ui-2-square-add-11"
				hide = true
			}
		}
		section  Charts
		{
			icon = "shopping-chart"
			pivotchart Monthly_Purchase
			{
				icon = "shopping-tag-sale"
				hide = true
			}
			pivotchart Sales_by_Warehouse
			{
				icon = "social-1-logo-shopify"
				hide = true
			}
			pivotchart Account_Stats
			{
				icon = "business-chart-bar-32"
				hide = true
			}
			pivotchart Weekly_Sales
			{
				icon = "objects-diamond"
				hide = true
			}
			pivotchart Monthly_Sales
			{
				icon = "objects-diamond"
				hide = true
			}
			pivotchart Weekly_Purchase
			{
				icon = "business-progress"
				hide = true
			}
			pivotchart Sales_by_Customer
			{
				icon = "shopping-discount"
				hide = true
			}
		}
		section  Dashboard
		{
			icon = "ui-1-dashboard-half"
			page Dashboard
			{
			}
		}
		section  Suppliers
		{
			icon = "users-single-04"
			form  Add_Supplier
			{
				layout = auto
				icon = "users-2-a-add"
			}
			custom Suppliers_Details
			{
				icon = "users-2-contacts-44"
			}
		}
		section  Purchase_Orders
		{
			displayname= "Purchase Orders"
			icon = "shopping-cart-modern"
			form  Add_Invoice
			{
				layout = left
				icon = "ui-2-square-add-11"
			}
			list Vendor_Purchase_Invoice
			{
				icon = "shopping-receipt"
			}
		}
		section  Main_Inventory
		{
			displayname= "Main Inventory"
			icon = "design-app"
			form  Inventory
			{
				layout = auto
				icon = "ui-2-square-add-11"
			}
			list Inventory_Details
			{
				icon = "shopping-stock"
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
			 				layout type = -1
		     				title = "Overview"
							fields
							(
								Product_Code as "Product Code"
								Qty_Inhand as "Qty. Inhand"
								Qty_Distributed as "Qty. Distributed"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    		 				Add 
    		 				Print 
    		 				Import 
    		 				Export 
    	 				)
									record
									(
										Edit   	   
										Duplicate   	   
										Print   	   
										Delete   	   
    								)
    				)
    				action
    				(
									on tap
									(
										View Record   	   
    								)
									on long press
									(
										Edit   	   
										Delete   	   
										Duplicate   	   
										Print   	   
										View Record   	   
    								)
									on left swipe
									(
										"Add to Warehouse Stock"
    								)
									on right swipe
									(
										Edit   	   
										Delete   	   
    								)
     				)
				)
				detailview
				(
					layout
					(
		 				type = 2
						datablock1
						(
			 				layout type = -2
		     				title = "Overview"
							fields
							(
								Product_Code as "Product Code"
								Qty_Inhand as "Qty. Inhand"
								Qty_Distributed as "Qty. Distributed"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Print 
    		 				Delete 
			 				"Add to Warehouse Stock"
    	 				)
    				)
				)
			}
		}
		section  Warehouse
		{
			icon = "business-building"
			form  Stock
			{
				layout = left
				icon = "ui-2-square-add-11"
			}
			list Warehouse_Details
			{
				icon = "shopping-shop-location"
			}
			list Stocks_Detials
			{
				icon = "shopping-stock"
			}
			map Countries_Map
			{
				icon = "location-worl-marker"
			}
			pivotchart Stock_Availability
			{
				icon = "ui-3-chart-bars"
			}
		}
		section  page
		{
			displayname= "Order Management"
			icon = "business-notes"
			form  New_Order_Request
			{
				layout = left
				icon = "ui-2-square-add-11"
			}
			list Orders
			{
				icon = "shopping-list"
			}
			list Pending_Orders
			{
				icon = "ui-2-hourglass"
			}
			list Approved_Orders
			{
				icon = "design-todo"
				quickview
				(
					layout
					(
		 				type = -1
						datablock1
						(
			 				layout type = -1
		     				title = "Overview"
							fields
							(
				"Deliver"
								Order_ID as "Order ID"
								Ordered_Date as "Ordered Date"
								Retailer
								Expected_Delivery_Date as "Expected Delivery Date"
								Status
								Handled_By as "Handled By"
								List_Item.Product_Code as "List Item"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    		 				Add 
    		 				Print 
    		 				Import 
    		 				Export 
    	 				)
									record
									(
										Edit   	   
										Duplicate   	   
										Print   	   
										Delete   	   
    								)
    				)
    				action
    				(
									on tap
									(
										View Record   	   
    								)
									on long press
									(
										Edit   	   
										Delete   	   
										Duplicate   	   
										Print   	   
										View Record   	   
    								)
     				)
				)
				detailview
				(
					layout
					(
		 				type = 2
						datablock1
						(
			 				layout type = -2
		     				title = "Overview"
							fields
							(
								Order_ID as "Order ID"
								Ordered_Date as "Ordered Date"
								Retailer
								Expected_Delivery_Date as "Expected Delivery Date"
								Status
								Handled_By as "Handled By"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
			 				"Deliver"
    		 				Edit 
    		 				Duplicate 
    		 				Print 
    		 				Delete 
    	 				)
    				)
				)
			}
			list Delivered_Orders
			{
				icon = "shopping-delivery-fast"
			}
			list Declined_Orders
			{
				icon = "files-remove"
			}
			list My_Orders
			{
				icon = "files-single-content-03"
			}
		}
		section  Sales
		{
			icon = "business-chart-bar-33"
			list My_Sales_Invoice
			{
				icon = "files-user"
			}
			list Sales_Details
			{
				icon = "business-chart-bar-33"
			}
			list My_Return_Details
			{
				icon = "shopping-cart-modern-remove"
			}
			list Return_Details
			{
				icon = "arrows-1-curved-previous"
			}
			form  Return_Product
			{
				layout = left
				icon = "arrows-1-share-91"
			}
		}
		section  CRM
		{
			icon = "users-multiple-11"
			list Accounts_Details
			{
				icon = "users-circle-08"
			}
			custom Contacts
			{
				icon = "users-circle-10"
			}
			pivotchart Contact_Stats
			{
				icon = "ui-3-chart-bars"
			}
		}
		section  Ledger
		{
			icon = "files-book-07"
			list All_Accounting_Details
			{
				icon = "design-paper-design"
			}
			list Receivables
			{
				icon = "business-money-coins"
			}
			list Payables
			{
				icon = "shopping-credit-card-in"
			}
			list My_Accounting_Details
			{
				icon = "education-books-46"
			}
			pivottable Ledger_Book
			{
				icon = "education-book-open"
			}
		}
		section  Products
		{
			icon = "ui-2-archive"
			form  Add_Product
			{
				layout = auto
				icon = "ui-2-square-add-11"
			}
			list Product_Details
			{
				icon = "design-window-paragraph"
			}
		}
		section  Settings
		{
			icon = "ui-1-settings-gear-64"
			summary Company_Information
			{
				icon = "business-building"
			}
			list Distributors_Details
			{
				icon = "users-2-contacts-44"
			}
			list Categories
			{
				icon = "design-2-layers"
			}
			form  Company_Details
			{
				layout = auto
				icon = "ui-2-square-add-11"
			}
		}
		section  List_Items
		{
			displayname= "List Items"
			icon = "shopping-receipt-list-43"
			form  Add_Sales_List_Items
			{
				layout = auto
				icon = "design-2-selection"
				hide = true
			}
			list All_List_Items
			{
				icon = "design-2-selection"
				hide = true
			}
		}
		customize
		{
			colour = blue
        	layout = onecolumn
		 	icons style = outline
		}
	}
	translation
{
"{\"Language_Settings\" : {\"LANGAGUE_WITH_LOGIN\":\"user\"},}"
}
	reports configuration
	{
	
		Version = 1251000165802709
		Key     = "WThjOuCPrUSus6gmbK691D2hRH2BzAHCk2TBf2ZZ8g4PyXSC2VvTjCavUpEb6VThrttG5E8Q7Qy5tWyWD5Svj7n1rGtxnt9UC6Bx"
	}
}