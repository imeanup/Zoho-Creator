/*
 * Author       : app.zohocreator
 * Generated on : 06-May-2020 22:27:50
 * Version      : 1.0
 */
 application "Sales Management"
 {
 	date format = "dd-MMM-yyyy"
 	time zone = "America/Los_Angeles"
 	time format = "24-hr"
	section Dashboard
	{
		icon = "tachometer"
				 page Dashboard 
	 	 { 
 	 	 displayname = "Dashboard" 

 	 	 icon = "" 
	 	 Content="<zml \n\t\t\tisPdfEnabled='false'\n\t\t\n\t\t\tisPrintEnabled='false'\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n>\n\t<dsp id='Dashboard'>\n\t<![CDATA[htmlpage Dashboard()\ncontent\n&lt;%{\n\tif(zoho.adminuser == &quot;appuser&quot;)\n\t{\n\t\t%&gt;\n&lt;div style=&quot;border: 2px solid #F3F3F3;background-color: white;border-radius:5px;width: 32%;text-align: center;margin: 17px auto;height: 60px;padding: 14px 0px 0px 0px;&quot;&gt;\n\t\t\t\t\t\t\t\t\t&lt;font style=&quot;color: #A3A3A3;font-size: 15px;ont-weight: bold;position: relative;top: 12px;&quot;&gt;Dashboard is not available for DEMO version&lt;\/font&gt;\n\t\t\t\t\t\t\t\t&lt;\/div&gt;\n&lt;%\n\t}\n\telse\n\t{\n\t\tadminAccess = false;\n\t\tif(zoho.adminuserid == zoho.loginuserid)\n\t\t{\n\t\t\tadminAccess = true;\n\t\t}\n\t\tmyPendingQuotes = Orders[Status == &quot;Pending&quot; &amp;&amp; Sale_Order_Owner.Email == zoho.loginuserid].count();\n\t\tmyPendingOrders = Orders[Status == &quot;Approved&quot; &amp;&amp; Sale_Order_Owner.Email == zoho.loginuserid].count();\n\t\tmyTodaySales = Orders[Date_On_Delivery == zoho.currentdate &amp;&amp; Status == &quot;Delivered&quot; &amp;&amp; Sale_Order_Owner.Email == zoho.loginuserid].sum(Grand_Total);\n\t\tmyThisMonthSales = Orders[Date_On_Delivery in this month &amp;&amp; Status == &quot;Delivered&quot; &amp;&amp; Sale_Order_Owner.Email == zoho.loginuserid].sum(Grand_Total);\n\t\tmyTodaySales = thisapp.checkNullVal(myTodaySales);\n\t\tmyThisMonthSales = thisapp.checkNullVal(myThisMonthSales);\n\t\tmyOrders = Orders[Sale_Order_Owner.Email == zoho.loginuserid].count();\n\t\tempRow = Sales_Reps[Email == zoho.loginuserid];\n\t\tempName = &quot;&quot;;\n\t\tif(empRow.ID != null)\n\t\t{\n\t\t\tempName = empRow.First_Name + &quot; &quot; + empRow.Last_Name;\n\t\t}\n\t\t%&gt;\n&lt;style&gt;\n\t\t\t\t\t\t                  \/\/.divSpace\n\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t  border: 2px solid #E9E9E9;\n\t\t\t\t\t\t\t\t\t\t\t  margin: 0px 5px 5px 0px;\n\t\t\t\t\t\t\t\t\t\t\t  background-color: #F8F8F8;\n\t\t\t\t\t\t\t\t\t\t\t  width: 49%;\n\t\t\t\t\t\t\t\t\t\t\t  height: 420px;\n\t\t\t\t\t\t\t\t\t\t\t  float: left;\n\t\t\t\t\t\t        \t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t.divSpace .frameSize .row\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tmargin-left: 0px;\n\t\t\t\t\t\t    \t\t\t\t\tmargin-right: 0px;  \n\t\t\t\t\t\t\t\t\t\t  \t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t.divSpace\n\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t  \/\/border: 2px solid #E9E9E9;\n\t\t\t\t\t\t\t\t\t\t\t  margin: 0px 0px 20px 0px;\n\t\t\t\t\t\t\t\t\t\t\t  \/\/background-color: #fff;\n\t\t\t\t\t\t\t\t\t\t\t  width: 50%;\n\t\t\t\t\t\t\t\t\t\t\t  max-height:50%;\n\t\t\t\t\t\t\t\t\t\t\t  height: 308px;\n\t\t\t\t\t\t\t\t\t\t\t  float: left;\n\t\t\t\t\t\t\t\t\t\t\t  \tbox-sizing:border-box;\n\t\t\t\t\t\t\t\t\t\t\t\t-moz-box-sizing:border-box;\n\t\t\t\t\t\t\t\t\t\t\t\t-webkit-box-sizing:border-box;\n\t\t\t\t\t\t\t\t\t\t\t  \/\/box-shadow: 1px 1px 2px #d1d1d1;\n\t\t\t\t\t\t\t\t\t\t  \t\t}\n\t\t\t\t\t\t        .heading\n\t\t\t\t\t\t        {\n\t\t\t\t\t\t                color: #2B2B2B;\n\t\t\t\t\t\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\t\t\t\t\t\tline-height: 20px;\n\t\t\t\t\t\t\t\t\t\tfont-weight: normal;\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t        .frameSize{\n\t\t\t\t\t\t                width:100%;\n\t\t\t\t\t\t                min-height:275px;\n\t\t\t\t\t\t\t\t\t\t\/\/height:280px;\n\t\t\t\t\t\t\t\t\t\tmax-height:100%;\n\t\t\t\t\t\t\t\t\t\tmargin-top:12px;\n\t\t\t\t\t\t\t\t\t\tpadding: 0 1px;\n\t\t\t\t\t\t\t\t\t\tbox-sizing:border-box;\n\t\t\t\t\t\t\t\t\t\t-moz-box-sizing:border-box;\n\t\t\t\t\t\t\t\t\t\t-webkit-box-sizing:border-box;\n\t\t\t\t\t\t                border: 1px solid #E8E8E8;\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t        \/\/.orders{\n\t\t\t\t\t\t                border: 2px solid #F0F0F0;\n\t\t\t\t\t\t                                width: 134px;\n\t\t\t\t\t\t                                height: 108px;\n\t\t\t\t\t\t                                float: left;\n\t\t\t\t\t\t                                margin-right: 14px;\n\t\t\t\t\t\t                                border-radius: 5px;\n\t\t\t\t\t\t                                background-color: white;\n\t\t\t\t\t\t                                                                margin-top:10px;\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t\t\t\/\/.orders .pane_nav\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t  background: #3c3c47;\n\t\t\t\t\t\t\t\t\t\t\t  width: auto;\n\t\t\t\t\t\t\t\t\t\t\t  margin: auto;\n\t\t\t\t\t\t\t\t\t\t\t  position: relative;\n\t\t\t\t\t\t\t\t\t\t\t  top: 0;\n\t\t\t\t\t\t\t\t\t\t\t  color:#fff;\n\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t.orders .pane_nav_menu\n\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t.orders\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t  width: 100%;\n\t\t\t\t\t\t    \t\t\t\tmin-width: 121px;\n\t\t\t\t\t\t                height: 60px;\n\t\t\t\t\t\t                \/\/float: left;\n\t\t\t\t\t\t                margin-right: 15px;\n\t\t\t\t\t\t                border-radius: 0px;\n\t\t\t\t\t\t                background-color: white;\n\t\t\t\t\t\t\t\t\t\tmargin:auto;\n\t\t\t\t\t\t\t\t\t\tborder: 1px solid #eee;\n\t\t\t\t\t\t\t\t\t\tbox-sizing:border-box;\n\t\t\t\t\t\t\t\t\t\t-moz-box-sizing:border-box;\n\t\t\t\t\t\t\t\t\t\t-webkit-box-sizing:border-box;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t        .orderHead{\n\t\t\t\t\t\t                border-bottom: 1px solid #F0F0F0;\n\t\t\t\t\t\t                background-color: #f6f6f6;\n\t\t\t\t\t\t\t\t\t\tcolor: #333;\n\t\t\t\t\t\t                padding: 3px 10px 4px 8px;\n\t\t\t\t\t\t                font-size: 13px;\n\t\t\t\t\t\t                font-weight: bold;\n\t\t\t\t\t\t                text-align: center;\n\t\t\t\t\t\t                }\n\t\t\t\t\t\t        .orderCount{\n\t\t\t\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t\t\t\tmargin: 0px 2px 0px 0px;\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t                .headFont{\n\t\t\t\t\t\t                margin:5 auto;\n\t\t\t\t\t\t                }\n\t\t\t\t\t\t                .subDiv{                                \n\t\t\t\t\t\t                        float: left;\n\t\t\t\t\t\t                        width: 47%;\n\t\t\t\t\t\t                        height: 42px;\n\t\t\t\t\t\t                        border-radius: 4px;\n\t\t\t\t\t\t                        background-color: white;\n\t\t\t\t\t\t                        border: 2px solid #F0F0F0;\n\t\t\t\t\t\t                }\n\t\t\t\t\t\t                .key\n\t\t\t\t\t\t                {\n\t\t\t\t\t\t                        float: left;\n\t\t\t\t\t\t                        width: 53%;\n\t\t\t\t\t\t                        height: 100%;\n\t\t\t\t\t\t                        background-color: #F0F0F0;\n\t\t\t\t\t\t                        border-right: 1px solid #EBEBEB;\n\t\t\t\t\t\t                        font-size: 15px;\n\t\t\t\t\t\t                        ont-weight: bold;\n\t\t\t\t\t\t                        color: #575757;\n\t\t\t\t\t\t                        text-align: center;\n\t\t\t\t\t\t                }\n\t\t\t\t\t\t                .val\n\t\t\t\t\t\t                {\n\t\t\t\t\t\t                        font-weight: bold;\n\t\t\t\t\t\t                        font-size: 29px;\n\t\t\t\t\t\t                        text-align: center;\n\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t\t.zc-salesmang\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t  padding:0px 15px;\n\t\t\t\t\t\t\t\t\t\t\t  box-sizing:border-box;\n\t\t\t\t\t\t\t\t\t\t\t  -moz-box-sizing:border-box;\n\t\t\t\t\t\t\t\t\t\t\t  -webkit-box-sizing:border-box;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t.zc-salesmang-space\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t  padding-right: 15px;\n\t\t\t\t\t\t\t\t\t\t\t  box-sizing:border-box;\n\t\t\t\t\t\t\t\t\t\t\t  -moz-box-sizing:border-box;\n\t\t\t\t\t\t\t\t\t\t\t  -webkit-box-sizing:border-box;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t.zc-salesmang-dashboard\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t  padding-right:15px;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t.zc-component .divSpace\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t  background:transparent;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t.zc-component .divSpace .frameSize\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t  border:none;\n\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t.zc-component .divSpace\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t  height:auto;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t.inner .page_content_wrapper table[elname=&quot;zc-maincontent&quot;]\t\n\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t  background:#fff;\n\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t          &lt;\/style&gt;\n\t\t\t\t\t\t\t\t\t\t\t  &lt;div class=&quot;zc-salesmang&quot;style=&apos;width:100%;margin:20px auto 4px;&apos;&gt;\n&lt;%\n\t\tif(adminAccess)\n\t\t{\n\t\t\t%&gt;\n&lt;div class=&apos;divSpace zc-salesmang-dashboard&apos; style=&apos;float:left;&apos;&gt;\n\t\t\t\t\t\t                        &lt;div class=&quot;heading&quot;&gt;Sales [By Employee]&lt;\/div&gt;\n\t\t\t\t\t\t                        &lt;iframe seemless class=&apos;frameSize&apos; frameborder=&apos;0&apos; scrolling=&apos;auto&apos; src=&apos;&lt;%=zoho.appuri%&gt;report-embed\/Sales_By_All_Employee\/zc_Header=false&amp;zc_BdrClr=transparent&apos;&gt;&lt;\/iframe&gt;\n\t\t\t\t\t\t                &lt;\/div&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\t%&gt;\n&lt;div class=&apos;divSpace&apos; style=&apos;float:left;&apos;&gt;\n\t\t\t\t\t\t                        &lt;div class=&quot;heading&quot;&gt;Sales [By Employee]&lt;\/div&gt;\n\t\t\t\t\t\t                        &lt;iframe seemless class=&apos;frameSize&apos; frameborder=&apos;0&apos; scrolling=&apos;auto&apos; src=&apos;&lt;%=zoho.appuri%&gt;report-embed\/Sales_by_employee\/zc_Header=false&amp;zc_BdrClr=transparent&apos;&gt;&lt;\/iframe&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;div class=&apos;divSpace&apos; style=&quot;float:right&quot;&gt;\n\t\t\t\t\t\t                &lt;div style=&apos;margin-top: 5px;  margin-left: 12px;&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t  &lt;font style=&apos;color:#535353;font-size:15px;ont-weight:bold;float:right;&apos;&gt;&amp;nbsp;&amp;nbsp;&lt;%=empName%&gt;&lt;\/font&gt; \n\t\t\t\t\t\t\t\t\t\t\t  &lt;font style=&apos;color:#B1B1B1;font-size:16px;ont-weight:bold;float:right;&apos;&gt;Welcome&lt;\/font&gt;\n\t\t\t\t\t\t\t\t\t\t\t                                         \n\t\t\t\t\t\t                &lt;\/div&gt;\n\t\t\t\t\t\t                &lt;div style=&apos;width:100%;margin: 30px auto;&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t  &lt;div class=&quot;zc-salesmang-space&quot; style=&quot;float:left;width:50%;margin-top: 18px;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t  &lt;div class=&apos;orders&apos; style=&apos;float:left;&apos;&gt;\n\t\t\t\t\t\t                                        &lt;div class=&apos;orderHead &apos; style=&apos;&apos;&gt;My This Month&apos;s Sales&lt;\/div&gt;\n\t\t\t\t\t\t                                        &lt;div class=&apos;orderCount&apos; style=&apos;color:#A0A0A0&apos;;&gt;&lt;%=myThisMonthSales%&gt;&lt;\/div&gt;\n\t\t\t\t\t\t                                &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t  &lt;div style=&quot;float: right;width: 50%;margin-top: 18px;&quot;&gt;\n\t\t\t\t\t\t                                &lt;div class=&apos;orders&apos; style=&apos;float:right;&apos;&gt;\n\t\t\t\t\t\t                                        &lt;div class=&apos;orderHead&apos; style=&apos;&apos;&gt;My Today&apos;s Sales&lt;\/div&gt;\n\t\t\t\t\t\t                                        &lt;div class=&apos;orderCount&apos; style=&apos;color:#A0A0A0&apos;;&gt;&lt;%=myTodaySales%&gt;&lt;\/div&gt;\n\t\t\t\t\t\t                                &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t                                &lt;div sytle=&quot;clear:both&quot;&gt;&lt;\/div&gt;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t  &lt;div class=&quot;zc-salesmang-space&quot; style=&quot;width:33.3%;float:left;margin-top:50px;&quot;&gt;\n\t\t\t\t\t\t                        &lt;a href=&apos;#View:My_Orders&apos; target=&apos;_blank&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t  &lt;div class=&apos;orders&apos; style=&quot;float:left;&quot;&gt;\n\t\t\t\t\t\t                                        &lt;div class=&apos;orderHead &apos;&gt;My Orders&lt;\/div&gt;\n\t\t\t\t\t\t                                        &lt;div class=&apos;orderCount&apos; style=&apos;color:#A0A0A0&apos;;&gt;&lt;%=myOrders%&gt;&lt;\/div&gt;\n\t\t\t\t\t\t                                &lt;\/div&gt;\n\t\t\t\t\t\t                        &lt;\/a&gt; \n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;div class=&quot;zc-salesmang-space&quot; style=&quot;width:33.3%;float:left;margin-top:50px;&quot;&gt;\n\t\t\t\t\t\t                        &lt;a href=&apos;#View:My_Pending_Quotes&apos; target=&apos;_blank&apos;&gt;\n\t\t\t\t\t\t                                &lt;div class=&apos;orders&apos;&gt;\n\t\t\t\t\t\t                                        &lt;div class=&apos;orderHead &apos;&gt;Pending Quotes&lt;\/div&gt;\n\t\t\t\t\t\t                                        &lt;div class=&apos;orderCount&apos; style=&apos;color:#A0A0A0&apos;;&gt;&lt;%=myPendingQuotes%&gt;&lt;\/div&gt;\n\t\t\t\t\t\t                                &lt;\/div&gt;\n\t\t\t\t\t\t                        &lt;\/a&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;div style=&quot;width:33.3%;float:left;margin-top:50px;&quot;&gt;\n\t\t\t\t\t\t                        &lt;a href=&apos;#View:My_Pending_Sale_Orders&apos; target=&apos;_blank&apos;&gt;\n\t\t\t\t\t\t                                &lt;div class=&apos;orders&apos; style=&apos;margin-right:0px;&apos;&gt;\n\t\t\t\t\t\t                                        &lt;div class=&apos;orderHead &apos;&gt;Pending Orders&lt;\/div&gt;\n\t\t\t\t\t\t                                        &lt;div class=&apos;orderCount&apos; style=&apos;color:#A0A0A0&apos;;&gt;&lt;%=myPendingOrders%&gt;&lt;\/div&gt;\n\t\t\t\t\t\t                                &lt;\/div&gt;\n\t\t\t\t\t\t                        &lt;\/a&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t                        &lt;div style=&quot;clear:both&quot;&gt;&lt;\/div&gt;\n\t\t\t\t\t\t                &lt;\/div&gt;\n\t\t\t\t\t\t        &lt;\/div&gt;\n\t\t\t\t\t\t        &lt;div style=&quot;clear:both&quot;&gt;&lt;\/div&gt;\n&lt;%\n\t\tif(adminAccess)\n\t\t{\n\t\t\t%&gt;\n&lt;div class=&apos;divSpace zc-salesmang-dashboard&apos; style=&quot;float:left&quot;&gt;\n\t\t\t\t\t\t                        &lt;div class=&quot;heading&quot;&gt;Sales [By Region]&lt;\/div&gt;\n\t\t\t\t\t\t                        &lt;iframe seemless class=&apos;frameSize&apos; frameborder=&apos;0&apos; scrolling=&apos;auto&apos; src=&apos;&lt;%=zoho.appuri%&gt;report-embed\/Sales_By_Region\/zc_Header=false&amp;zc_BdrClr=transparent&apos;&gt;&lt;\/iframe&gt;\n\t\t\t\t\t\t                \t\t&lt;\/div&gt;\n\t\t\t\t\t\t                &lt;div class=&apos;divSpace&apos; style=&quot;float:left&quot;&gt;\n\t\t\t\t\t\t                        &lt;div class=&quot;heading&quot;&gt;Sales [By Product]&lt;\/div&gt;\n\t\t\t\t\t\t                        &lt;iframe seemless class=&apos;frameSize&apos; frameborder=&apos;0&apos; scrolling=&apos;auto&apos; src=&apos;&lt;%=zoho.appuri%&gt;report-embed\/Sales_Report_By_Product\/zc_Header=false&amp;zc_BdrClr=transparent&apos;&gt;&lt;\/iframe&gt;\n\t\t\t\t\t\t                &lt;\/div&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;div style=&quot;clear:both&quot;&gt;&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n&lt;%\n\t}\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
	}
	section Feeds
	{
		icon = "rss-square"
				 page Feeds 
	 	 { 
 	 	 displayname = "Feeds" 

 	 	 icon = "" 
	 	 Content="<zml \n\t\t\tisPdfEnabled='false'\n\t\t\n\t\t\tisPrintEnabled='false'\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n>\n\t<dsp id='Feeds'>\n\t<![CDATA[htmlpage Feeds()\ncontent\n&lt;%{\n\t%&gt;\n&lt;style&gt;\n\t\t\t\t\t\t                .mainDiv {\n\t\t\t\t\t\t    width: 1300px;\n\t\t\t\t\t\t    background: #FAFAFA;\n\t\t\t\t\t\t    box-shadow: 0 0 2px #AAA;\n\t\t\t\t\t\t    margin: 0 auto;\n\t\t\t\t\t\t    margin-top: 15px;\n\t\t\t\t\t\t    margin-bottom: 15px;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t         .showDiv {\n\t\t\t\t\t\t            overflow:auto;\n\t\t\t\t\t\t            max-height:200px;\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t        .viewDiv{          \n\t\t\t\t\t\t                    padding-left: 18px;\n\t\t\t\t\t\t                    padding-right: 18px;\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t        .heading{\n\t\t\t\t\t\t                        text-align:left;\n\t\t\t\t\t\t                        padding-top:18px;\n\t\t\t\t\t\t                        padding-bottom:15px;\n\t\t\t\t\t\t                        font-size:15px;\n\t\t\t\t\t\t                        font-weight:bold;\n\t\t\t\t\t\t                        color:#474747\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t&lt;\/style&gt;\n\t\t\t\t\t\t&lt;%=thisapp.feeds.getFeeds()%&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
	}
	section Leads
	{
		icon = "line-chart"
		form Leads
		{
			displayname = "New Lead"
			success message = "New Lead is  Added Successfully"
			field alignment = left
			feature property = 32
			Lead_Owner
			(
				type = picklist
				displayname = "Lead Owner"
				values  = Sales_Reps.ID
    			displayformat = [First_Name + " - " + Last_Name]
				allow new entries = true
				[
					displayname = ""
				]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Account
			(
				type = picklist
				values  = Accounts.ID
    			bidirectional = Lead
    			displayformat = [Account_Name]
				searchable = true
    			description
    			[
    				type = tooltip
    			 	message = "Web application"
    			]
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have unique Company_Name
			(
    			type = text
				displayname = "Company Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Website
			(
    			type = url
	 			row = 1
	 			column = 1   
				width = 200px
			)
			First_Name
			(
    			type = text
				displayname = "First Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Last_Name
			(
    			type = text
				displayname = "Last Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Gender
			(
				type = radiobuttons
				values = {"Male", "Female"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Email
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Phone
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Street
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			City
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			State
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Zip
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Country
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Add_Contact
			(
				type = grid
				displayname = "Add Contact"
				values  = Contacts.ID
    			bidirectional = Lead
	 			row = 1
	 			column = 1   
				width = medium
			)
			Followers
			(
				type = list
				values  = Sales_Reps.ID
    			displayformat = [Email]
				height = 60px
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Description
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = 200px
			)
	
			customize
			(
				icon = "plus-square-o"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list My_Leads
		{
			displayName = "My Leads"
			show all rows from Leads  [Lead_Owner.Email == zoho.loginuserid && Account is null]  
			(
				Lead_Owner as "Lead Owner"
				custom action "View"
				(
	  			workflow = View
				column header = "View"
				success message = ""
				)
				Account
				Company_Name as "Company Name"
				Website
				First_Name as "First Name"
				Last_Name as "Last Name"
				Add_Contact.Email as "Contacts"
				Description
				ID
				custom action "Convert"
				(
	  			workflow = Convert
				column header = "Convert"
				success message = ""
				)
			)
			filters
			(
				Lead_Owner
				Account
			)
			options
			(
				icon = "table"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Lead_Owner as "Lead Owner"
				"View"
							Account
							Company_Name as "Company Name"
							Website
							First_Name as "First Name"
							Last_Name as "Last Name"
							Add_Contact.Email as "Contacts"
							Description
							ID
				"Convert"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Lead_Owner as "Lead Owner"
				"View"
							Account
							Company_Name as "Company Name"
							Website
							First_Name as "First Name"
							Last_Name as "Last Name"
							Add_Contact.Email as "Contacts"
							Description
							ID
				"Convert"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Following_Leads
		{
			displayName = "Following Leads"
			show all rows from Leads  [Followers.Email.contains(zoho.loginuserid) && Account is null]  
			(
				Lead_Owner as "Lead Owner"
				custom action "Unfollow"
				(
	  			workflow = Unfollow
				column header = "Unfollow"
				success message = ""
				)
				Account
				custom action "View"
				(
	  			workflow = View1
				column header = "View"
				success message = ""
				)
				Company_Name as "Company Name"
				Website
				First_Name as "First Name"
				Last_Name as "Last Name"
				Add_Contact.Email as "Contacts"
				Description
			)
			options
			(
				icon = "table"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Lead_Owner as "Lead Owner"
				"Unfollow"
							Account
				"View"
							Company_Name as "Company Name"
							Website
							First_Name as "First Name"
							Last_Name as "Last Name"
							Add_Contact.Email as "Contacts"
							Description
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Lead_Owner as "Lead Owner"
				"Unfollow"
							Account
				"View"
							Company_Name as "Company Name"
							Website
							First_Name as "First Name"
							Last_Name as "Last Name"
							Add_Contact.Email as "Contacts"
							Description
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Leads
		{
			displayName = "All Leads"
			show all rows from Leads    
			(
				custom action "Follow"
				(
	  			workflow = Follow
				column header = "Follow"
				success message = ""
				)
				Lead_Owner as "Lead Owner"
				Account
				custom action "View"
				(
	  			workflow = View2
				column header = "View"
				success message = ""
				)
				Company_Name as "Company Name"
				Website
				First_Name as "First Name"
				Last_Name as "Last Name"
				Add_Contact.Email as "Contacts"
				Description
				ID
			)
			filters
			(
				Lead_Owner
				Account
			)
			options
			(
				icon = "table"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
				"Follow"
							Lead_Owner as "Lead Owner"
							Account
				"View"
							Company_Name as "Company Name"
							Website
							First_Name as "First Name"
							Last_Name as "Last Name"
							Add_Contact.Email as "Contacts"
							Description
							ID
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
				"Follow"
							Lead_Owner as "Lead Owner"
							Account
				"View"
							Company_Name as "Company Name"
							Website
							First_Name as "First Name"
							Last_Name as "Last Name"
							Add_Contact.Email as "Contacts"
							Description
							ID
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Contacts
	{
		hide = true
		icon = "bars"
		form Contacts
		{
			displayname = "New Contact"
			success message = "New Contact is Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Lead
			(
				type = picklist
				values  = Leads.ID
    			bidirectional = Add_Contact
    			displayformat = [Company_Name]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Account
			(
				type = picklist
				values  = Accounts.ID
    			bidirectional = Add_Contact
    			displayformat = [Account_Name]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Primary_Contact
			(
    			type = checkbox
				displayname = "Primary Contact?"
				initial value = false
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have First_Name
			(
    			type = text
				displayname = "First Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Last_Name
			(
    			type = text
				displayname = "Last Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have unique Email
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Gender
			(
				type = radiobuttons
				values = {"Male", "Female"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			Phone
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Street
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			City
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			State
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Zip
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Country
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Description
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = 200px
			)
	
			customize
			(
				icon = "plus-square"
			)
			actions
			{
				on add
				{
					Submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					Update
					(
   						type = submit
   						displayname = "Update"
					)
					Cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Account_Contacts
		{
			displayName = "Account Contacts"
   			hide = true
			show all rows from Contacts    
			(
				Account
				First_Name as "First Name"
				Last_Name as "Last Name"
				Email
				Phone
				Description
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Account
							First_Name as "First Name"
							Last_Name as "Last Name"
							Email
							Phone
							Description
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Account
							First_Name as "First Name"
							Last_Name as "Last Name"
							Email
							Phone
							Description
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Contacts
		{
			displayName = "All Contacts"
   			hide = true
			show all rows from Contacts    
			(
				First_Name as "First Name"
				Last_Name as "Last Name"
				Description
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							First_Name as "First Name"
							Last_Name as "Last Name"
							Description
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							First_Name as "First Name"
							Last_Name as "Last Name"
							Description
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Lead_Contacts
		{
			displayName = "Lead Contacts"
   			hide = true
			show all rows from Contacts    
			(
				Lead
				First_Name as "First Name"
				Last_Name as "Last Name"
				Email
				Phone
				Description
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Lead
							First_Name as "First Name"
							Last_Name as "Last Name"
							Email
							Phone
							Description
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Lead
							First_Name as "First Name"
							Last_Name as "Last Name"
							Email
							Phone
							Description
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Accounts
	{
		icon = "tasks"
		form Accounts
		{
			displayname = "New Account"
			success message = "New Account is Created Successfully"
			field alignment = left
			feature property = 32
			Account_Owner
			(
				type = picklist
				displayname = "Account Owner"
				values  = Sales_Reps.ID
    			displayformat = [Email]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Followers
			(
				type = list
				values  = Sales_Reps.ID
    			displayformat = [Email]
				searchable = true
				height = 60px
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Lead
			(
				type = picklist
				values  = Leads.ID
    			bidirectional = Account
    			displayformat = [Company_Name]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have unique Account_Name
			(
    			type = text
				displayname = "Account Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			First_Name
			(
    			type = text
				displayname = "First Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Last_Name
			(
    			type = text
				displayname = "Last Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Email
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Phone
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Gender
			(
				type = radiobuttons
				values = {"Male", "Female"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			Add_Contact
			(
				type = grid
				displayname = "Add Contact"
				values  = Contacts.ID
    			bidirectional = Account
	 			row = 1
	 			column = 1   
				width = medium
			)
			Description
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Billing_Address_Text
			(
    			type = plaintext
				value = "<b><font face=\"Arial, Helvetica, sans-serif\" size=\"3\">Billing Address</font></b>"
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Billing_Street
			(
    			type = text
				displayname = "Billing Street"
	 			row = 1
	 			column = 2   
				width = 200px
			)
			must have Billing_City
			(
    			type = text
				displayname = "Billing City"
	 			row = 1
	 			column = 2   
				width = 200px
			)
			must have Billing_State
			(
    			type = text
				displayname = "Billing State"
	 			row = 1
	 			column = 2   
				width = 200px
			)
			must have Billing_Zip
			(
    			type = text
				displayname = "Billing Zip"
	 			row = 1
	 			column = 2   
				width = 200px
			)
			must have Billing_Country
			(
    			type = text
				displayname = "Billing Country"
	 			row = 1
	 			column = 2   
				width = 200px
			)
			Shipping_Address_Text
			(
    			type = plaintext
				value = "<b><font size=\"3\">Shipping Address</font></b>"
	 			row = 1
	 			column = 2   
				width = medium
			)
			Shipping_Street
			(
    			type = text
				displayname = "Shipping Street"
	 			row = 1
	 			column = 2   
				width = 200px
			)
			Shipping_City
			(
    			type = text
				displayname = "Shipping City"
	 			row = 1
	 			column = 2   
				width = 200px
			)
			Shipping_State
			(
    			type = text
				displayname = "Shipping State"
	 			row = 1
	 			column = 2   
				width = 200px
			)
			Shipping_Zip
			(
    			type = text
				displayname = "Shipping Zip"
	 			row = 1
	 			column = 2   
				width = 200px
			)
			Shipping_Country
			(
    			type = text
				displayname = "Shipping Country"
	 			row = 1
	 			column = 2   
				width = 200px
			)
	
			customize
			(
				icon = "plus-square"
			)
			actions
			{
				on add
				{
					Submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					Update
					(
   						type = submit
   						displayname = "Update"
					)
					Cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list My_Accounts
		{
			displayName = "My Accounts"
			show all rows from Accounts  [Account_Owner.Email == zoho.loginuserid]  
			(
				custom action "View"
				(
	  			workflow = View3
				column header = "View"
				success message = ""
				)
				Account_Owner as "Account Owner"
				Lead
				Account_Name as "Account Name"
				First_Name as "First Name"
				Last_Name as "Last Name"
				Add_Contact.Email as "Contacts"
				Description
			)
			options
			(
				icon = "male"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
				"View"
							Account_Owner as "Account Owner"
							Lead
							Account_Name as "Account Name"
							First_Name as "First Name"
							Last_Name as "Last Name"
							Add_Contact.Email as "Contacts"
							Description
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
				"View"
							Account_Owner as "Account Owner"
							Lead
							Account_Name as "Account Name"
							First_Name as "First Name"
							Last_Name as "Last Name"
							Add_Contact.Email as "Contacts"
							Description
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Following_Accounts
		{
			displayName = "Following Accounts"
			show all rows from Accounts  [Followers.Email.contains(zoho.loginuserid)]  
			(
				Account_Owner as "Account Owner"
				custom action "Unfollow"
				(
	  			workflow = Unfollow1
				column header = "Unfollow"
				success message = "This account has been unfollowed successfully!"
				)
				Account_Name as "Account Name"
				custom action "View"
				(
	  			workflow = View4
				column header = "View"
				success message = ""
				)
				First_Name as "First Name"
				Last_Name as "Last Name"
				Add_Contact.Email as "Contacts"
				Description
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Account_Owner as "Account Owner"
				"Unfollow"
							Account_Name as "Account Name"
				"View"
							First_Name as "First Name"
							Last_Name as "Last Name"
							Add_Contact.Email as "Contacts"
							Description
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Account_Owner as "Account Owner"
				"Unfollow"
							Account_Name as "Account Name"
				"View"
							First_Name as "First Name"
							Last_Name as "Last Name"
							Add_Contact.Email as "Contacts"
							Description
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Accounts
		{
			displayName = "All Accounts"
			show all rows from Accounts    
			(
				Account_Owner as "Account Owner"
				custom action "View"
				(
	  			workflow = View5
				column header = "View"
				success message = ""
				)
				Lead
				custom action "Follow"
				(
	  			workflow = Follow1
				column header = "Follow"
				success message = ""
				)
				Account_Name as "Account Name"
				First_Name as "First Name"
				Last_Name as "Last Name"
				Billing_City as "City"
				Add_Contact.Email as "Contacts"
				Description
			)
			options
			(
				icon = "users"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Account_Owner as "Account Owner"
				"View"
							Lead
				"Follow"
							Account_Name as "Account Name"
							First_Name as "First Name"
							Last_Name as "Last Name"
							Billing_City as "City"
							Add_Contact.Email as "Contacts"
							Description
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Account_Owner as "Account Owner"
				"View"
							Lead
				"Follow"
							Account_Name as "Account Name"
							First_Name as "First Name"
							Last_Name as "Last Name"
							Billing_City as "City"
							Add_Contact.Email as "Contacts"
							Description
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Accounts_and_Leads_Backhand
	{
		displayname= "Accounts and Leads Backhand"
		hide = true
		icon = "bars"
		form Tasks
		{
			displayname = "New Task"
			success message = "New Task is Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Task_Owner
			(
				type = picklist
				displayname = "Task Owner"
				values  = Sales_Reps.ID
    			displayformat = [First_Name + " " + Last_Name]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Account
			(
				type = picklist
				values  = Accounts.Account_Name
    			displayformat = [Account_Name]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Lead
			(
				type = picklist
				values  = Leads.ID
    			displayformat = [Company_Name]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Task_Name
			(
    			type = text
				displayname = "Task Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Description
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Due_Date
			(
    			type = datetime
				displayname = "Due Date"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 130px
			)
			Status
			(
				type = picklist
				values = {"Pending", "Canceled", "Closed"}
				initial value = "Pending"
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Followers
			(
				type = list
				values  = Sales_Reps.ID
    			displayformat = [Email]
				searchable = true
				height = 60px
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "plus-square"
			)
			actions
			{
				on add
				{
					Submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					Update
					(
   						type = submit
   						displayname = "Update"
					)
					Cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Accounts_View_Details
		{
			displayName = "Accounts View Details"
   			hide = true
			show all rows from Accounts    
			(
				custom action "Follow"
				(
	  			workflow = Follow2
				column header = "Follow"
				success message = ""
				)
				Account_Owner as "Account Owner"
				Account_Name as "Account Name"
				Lead
				First_Name as "First Name"
				Last_Name as "Last Name"
				Description
				ID
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
				"Follow"
							Account_Owner as "Account Owner"
							Account_Name as "Account Name"
							Lead
							First_Name as "First Name"
							Last_Name as "Last Name"
							Description
							ID
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
				"Follow"
							Account_Owner as "Account Owner"
							Account_Name as "Account Name"
							Lead
							First_Name as "First Name"
							Last_Name as "Last Name"
							Description
							ID
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Leads_View_Details
		{
			displayName = "Leads View Details"
   			hide = true
			show all rows from Leads    
			(
				Lead_Owner as "Lead Owner"
				custom action "Follow"
				(
	  			workflow = Follow3
				column header = "Follow"
				success message = ""
				)
				Company_Name as "Company Name"
				Account
				Website
				First_Name as "First Name"
				Last_Name as "Last Name"
				Street
				City
				State
				Zip
				Country
				Description
				ID
			)
			filters
			(
				Lead_Owner
				Account
			)
			options
			(
				icon = "table"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Lead_Owner as "Lead Owner"
				"Follow"
							Company_Name as "Company Name"
							Account
							Website
							First_Name as "First Name"
							Last_Name as "Last Name"
							Street
							City
							State
							Zip
							Country
							Description
							ID
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Lead_Owner as "Lead Owner"
				"Follow"
							Company_Name as "Company Name"
							Account
							Website
							First_Name as "First Name"
							Last_Name as "Last Name"
							Street
							City
							State
							Zip
							Country
							Description
							ID
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Alert_Message
		{
			displayname = "Alert Message"
			store data in zc = false
			success message = ""
			field alignment = left
			feature property = 32
					hide = true
			Type
			(
				type = picklist
				values = {"Follow", "Sales_Reps", "Account_Convert"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Alert_Msg
			(
    			type = plaintext
				value = "Following Already!"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "plus"
			)
		}
	}
	section Tasks
	{
		icon = "bars"
		list Pending_Tasks
		{
			displayName = "Pending Tasks"
			show all rows from Tasks  [Status == "Pending" && Task_Owner.Email == zoho.loginuserid]  
			(
				Task_Owner as "Task Owner"
				custom action "Cancel"
				(
	  			workflow = Cancel
				column header = "Cancel"
				success message = ""
				)
				Task_Name as "Task Name"
				custom action "Close"
				(
	  			workflow = Close
				column header = "Close"
				success message = ""
				)
				Description
				custom action "Follow"
				(
	  			workflow = Follow4
				column header = "Follow"
				success message = ""
				)
				Status
				Due_Date as "Due Date"
				Lead
				Account
			)
			options
			(
				icon = "calendar-minus-o"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Task_Owner as "Task Owner"
				"Cancel"
							Task_Name as "Task Name"
				"Close"
							Description
				"Follow"
							Status
							Due_Date as "Due Date"
							Lead
							Account
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Task_Owner as "Task Owner"
				"Cancel"
							Task_Name as "Task Name"
				"Close"
							Description
				"Follow"
							Status
							Due_Date as "Due Date"
							Lead
							Account
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Following_Tasks
		{
			displayName = "Following Tasks"
			show all rows from Tasks  [Followers.Email.contains(zoho.loginuserid)]  
			(
				custom action "Unfollow"
				(
	  			workflow = Unfollow2
				column header = "Unfollow"
				success message = ""
				)
				Task_Owner as "Task Owner"
				Task_Name as "Task Name"
				Description
				Status
				Due_Date as "Due Date"
				Lead
				Account
			)
			options
			(
				icon = "calendar-plus-o"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
				"Unfollow"
							Task_Owner as "Task Owner"
							Task_Name as "Task Name"
							Description
							Status
							Due_Date as "Due Date"
							Lead
							Account
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
				"Unfollow"
							Task_Owner as "Task Owner"
							Task_Name as "Task Name"
							Description
							Status
							Due_Date as "Due Date"
							Lead
							Account
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		calendar All_Tasks_Cal
		{
			displayName = "All Tasks Calender"
			show all rows from Tasks    
			(
				Task_Owner as "Task Owner"
				custom action "Follow"
				(
	  			workflow = Follow5
				column header = "Follow"
				success message = ""
				)
				Task_Name as "Task Name"
				Description
				Status
				Due_Date as "Due Date"
				Lead
				Account
				Added_Time as "Added Time"
			)
			filters
			(
				Status
			)
			options
			(
				display type = month
				week start day = sunday
				display field = Task_Name
				start date = Added_Time
				default date 
				(
	    			day   = Today
	    			month = Currentmonth
	    			year  = Currentyear
				)
				icon = "calendar"
			)
			quickview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = 1
		     			title = "Overview"
						fields
						(
							Task_Owner as "Task Owner"
				"Follow"
							Task_Name as "Task Name"
							Description
							Status
							Due_Date as "Due Date"
							Lead
							Account
							Added_Time as "Added Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Task_Owner as "Task Owner"
				"Follow"
							Task_Name as "Task Name"
							Description
							Status
							Due_Date as "Due Date"
							Lead
							Account
							Added_Time as "Added Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Tasks_View
		{
			displayName = "All Tasks"
			show all rows from Tasks    
			(
				Task_Owner as "Task Owner"
				Task_Name as "Task Name"
				Description
				Status
				Due_Date as "Due Date"
				Lead
				Account
			)
			options
			(
				icon = "tasks"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Task_Owner as "Task Owner"
							Task_Name as "Task Name"
							Description
							Status
							Due_Date as "Due Date"
							Lead
							Account
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Task_Owner as "Task Owner"
							Task_Name as "Task Name"
							Description
							Status
							Due_Date as "Due Date"
							Lead
							Account
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Cases
	{
		icon = "briefcase"
		form New_Case
		{
			displayname = "New Case"
			success message = "New Case is Added Successfully"
			field alignment = left
			feature property = 32
			must have Account
			(
				type = picklist
				values  = Accounts.ID
    			displayformat = [Account_Name]
				allow new entries = true
				[
					displayname = ""
				]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Type
			(
				type = picklist
				values = {"Problem", "Question", "Feature Request"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Subject_field
			(
    			type = text
				displayname = "Subject"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Description
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Case_Owner
			(
				type = picklist
				displayname = "Case Owner"
				values  = Sales_Reps.ID
    			displayformat = [Email]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Due_Date
			(
    			type = datetime
				displayname = "Due Date"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 130px
			)
			must have Status
			(
				type = picklist
				values = {"Pending", "Canceled", "Closed"}
				initial value = "Pending"
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Followers
			(
				type = list
				values  = Sales_Reps.ID
    			displayformat = [Email]
				searchable = true
				height = 60px
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "plus-square-o"
			)
			actions
			{
				on add
				{
					Submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					Update
					(
   						type = submit
   						displayname = "Update"
					)
					Cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Pending_Cases
		{
			displayName = "Pending Cases"
			show all rows from New_Case  [Status == "Pending"]  
			(
				Case_Owner as "Case Owner"
				custom action "Cancel"
				(
	  			workflow = Cancel1
				column header = "Cancel"
				success message = ""
				)
				Account as "Account Name"
				custom action "Close"
				(
	  			workflow = Close1
				column header = "Close"
				success message = ""
				)
				Type
				custom action "Follow"
				(
	  			workflow = Follow6
				column header = "Follow"
				success message = ""
				)
				Subject_field as "Subject"
				Description
				Due_Date as "Due Date"
				Status
			)
			filters
			(
				Status
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Case_Owner as "Case Owner"
				"Cancel"
							Account as "Account Name"
				"Close"
							Type
				"Follow"
							Subject_field as "Subject"
							Description
							Due_Date as "Due Date"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Case_Owner as "Case Owner"
				"Cancel"
							Account as "Account Name"
				"Close"
							Type
				"Follow"
							Subject_field as "Subject"
							Description
							Due_Date as "Due Date"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Following_Cases
		{
			displayName = "Following Cases"
			show all rows from New_Case  [Followers.Email.contains(zoho.loginuserid)]  
			(
				Case_Owner as "Case Owner"
				custom action "Unfollow"
				(
	  			workflow = Unfollow3
				column header = "Unfollow"
				success message = ""
				)
				Account as "Account Name"
				Type
				Subject_field as "Subject"
				Description
				Due_Date as "Due Date"
				Status
			)
			filters
			(
				Status
				Type
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Case_Owner as "Case Owner"
				"Unfollow"
							Account as "Account Name"
							Type
							Subject_field as "Subject"
							Description
							Due_Date as "Due Date"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Case_Owner as "Case Owner"
				"Unfollow"
							Account as "Account Name"
							Type
							Subject_field as "Subject"
							Description
							Due_Date as "Due Date"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Cases_View
		{
			displayName = "All Cases"
			show all rows from New_Case    
			(
				Case_Owner as "Case Owner"
				Account as "Account Name"
				Type
				Subject_field as "Subject"
				Description
				Due_Date as "Due Date"
				Status
			)
			filters
			(
				Status
			)
			options
			(
				icon = "briefcase"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Case_Owner as "Case Owner"
							Account as "Account Name"
							Type
							Subject_field as "Subject"
							Description
							Due_Date as "Due Date"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Case_Owner as "Case Owner"
							Account as "Account Name"
							Type
							Subject_field as "Subject"
							Description
							Due_Date as "Due Date"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Task_and_Cases_Backhand
	{
		displayname= "Task and Cases Backhand"
		hide = true
		icon = "bars"
		list All_Tasks
		{
			displayName = "All Tasks Filter"
   			hide = true
			show all rows from Tasks    
			(
				Task_Owner as "Task Owner"
				custom action "Follow"
				(
	  			workflow = Follow7
				column header = "Follow"
				success message = ""
				)
				Task_Name as "Task Name"
				Description
				Due_Date as "Due Date"
				Status
				Account
				Lead
			)
			filters
			(
				Status
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Task_Owner as "Task Owner"
				"Follow"
							Task_Name as "Task Name"
							Description
							Due_Date as "Due Date"
							Status
							Account
							Lead
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Task_Owner as "Task Owner"
				"Follow"
							Task_Name as "Task Name"
							Description
							Due_Date as "Due Date"
							Status
							Account
							Lead
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Cases
		{
			displayName = "All Cases Filter"
   			hide = true
			show all rows from New_Case    
			(
				Case_Owner as "Case Owner"
				custom action "Follow"
				(
	  			workflow = Follow8
				column header = "Follow"
				success message = ""
				)
				Account as "Account Name"
				Type
				Subject_field as "Subject"
				Description
				Due_Date as "Due Date"
				Status
			)
			options
			(
				icon = "table"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Case_Owner as "Case Owner"
				"Follow"
							Account as "Account Name"
							Type
							Subject_field as "Subject"
							Description
							Due_Date as "Due Date"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Case_Owner as "Case Owner"
				"Follow"
							Account as "Account Name"
							Type
							Subject_field as "Subject"
							Description
							Due_Date as "Due Date"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Forecast
	{
		icon = "line-chart"
		form Add_Brief_Forecast
		{
			displayname = "Add Brief Forecast"
			success message = "Brief Forecast Datas are Added Succesfully"
			field alignment = left
			feature property = 32
			Team
			(
				type = picklist
				values  = Team.ID
    			displayformat = [Team_Name]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Agent
			(
				type = picklist
				values  = Sales_Reps.ID
    			displayformat = [Email]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Forecast_Id
			(
    			type = autonumber
				displayname = "Forecast Id"
				start index = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			Forecast_ID1
			(
    			type = text
				displayname = "Forecast ID"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Period_Type
			(
				type = picklist
				displayname = "Period Type"
				values = {"Week", "Month", "Quarter", "Year"}
				initial value = "Year"
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Year
			(
				type = picklist
				values = {"2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Quarter
			(
				type = picklist
				values = {"1", "2", "3", "4"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Month
			(
				type = picklist
				values = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Week
			(
				type = picklist
				values = {"1", "2", "3", "4", "5"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Quarter_Font
			(
    			type = plaintext
				value = "<font style=\"font-size: large; color: blue\">Quarter1</font>"
	 			row = 1
	 			column = 2   
				width = medium
			)
			Targets
			(
				type = grid
				values  = Brief_Targets.ID
    			bidirectional = Forecast_Id
				defaultrow = 1
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Brief_Total
			(
				displayname = "Brief Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			must have Brief_Achieved_Total
			(
				displayname = "Brief Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
	
			customize
			(
				icon = "plus"
			)
			actions
			{
				on add
				{
					Submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					Update
					(
   						type = submit
   						displayname = "Update"
					)
					Cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Brief_Forecasts
		{
			displayName = "Brief Forecasts"
			show all rows from Brief_Targets    
			(
				Forecast_Id as "Forecast Id"
				Year
				Quarter
				Month
				Week
				Date_field as "Date"
				Day
				Committed_Amount as "Committed Amount"
				Achieved_Amount as "Achieved Amount"
			)
			filters
			(
				Quarter
				Month
				Week
				Day
				Date_field
				Year
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Forecast_Id as "Forecast Id"
							Year
							Quarter
							Month
							Week
							Date_field as "Date"
							Day
							Committed_Amount as "Committed Amount"
							Achieved_Amount as "Achieved Amount"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Forecast_Id as "Forecast Id"
							Year
							Quarter
							Month
							Week
							Date_field as "Date"
							Day
							Committed_Amount as "Committed Amount"
							Achieved_Amount as "Achieved Amount"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Add_Detailed_Forecast
		{
			displayname = "Add Detailed Forecast"
			success message = "Detailed Forecast is Added Successfully"
			field alignment = left
			feature property = 32
			Team
			(
				type = picklist
				values  = Team.ID
    			displayformat = [Team_Name]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Agent
			(
				type = picklist
				values  = Sales_Reps.ID
    			displayformat = [Email]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Forecast_Id
			(
    			type = autonumber
				displayname = "Forecast Id"
				start index = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Period_Type
			(
				type = picklist
				displayname = "Period Type"
				values = {"Week", "Month", "Quarter", "Year"}
				initial value = "Year"
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Year
			(
				type = picklist
				values = {"2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Quarter
			(
				type = picklist
				values = {"1", "2", "3", "4"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Month
			(
				type = picklist
				values = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Week
			(
				type = picklist
				values = {"1", "2", "3", "4", "5"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Monday_Target
			(
				type = grid
				displayname = "Monday Target"
				values  = Detailed_Targets.ID
    			bidirectional = Monday_Target
	 			row = 1
	 			column = 2   
				width = 600px
			)
			Monday_Total
			(
				displayname = "Monday Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Monday_Achieved_Total
			(
				displayname = "Monday Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Tuesday_Target
			(
				type = grid
				displayname = "Tuesday Target"
				values  = Detailed_Targets.ID
    			bidirectional = Tuesday_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			Tuesday_Total
			(
				displayname = "Tuesday Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Tuesday_Achieved_Total
			(
				displayname = "Tuesday Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Wednesday_Target
			(
				type = grid
				displayname = "Wednesday Target"
				values  = Detailed_Targets.ID
    			bidirectional = Wednesday_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			Wednesday_Total
			(
				displayname = "Wednesday Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Wednesday_Achieved_Total
			(
				displayname = "Wednesday Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Thursday_Target
			(
				type = grid
				displayname = "Thursday Target"
				values  = Detailed_Targets.ID
    			bidirectional = Thursday_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			Thursday_Total
			(
				displayname = "Thursday Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Thursday_Achieved_Total
			(
				displayname = "Thursday Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Friday_Target
			(
				type = grid
				displayname = "Friday Target"
				values  = Detailed_Targets.ID
    			bidirectional = Friday_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			Friday_Total
			(
				displayname = "Friday Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Friday_Achieved_Total
			(
				displayname = "Friday Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Saturday_Target
			(
				type = grid
				displayname = "Saturday Target"
				values  = Detailed_Targets.ID
    			bidirectional = Saturday_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			Saturday_Total
			(
				displayname = "Saturday Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Saturday_Achieved_Total
			(
				displayname = "Saturday Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Sunday_Target
			(
				type = grid
				displayname = "Sunday Target"
				values  = Detailed_Targets.ID
    			bidirectional = Sunday_Target
	 			row = 1
	 			column = 2   
				width = 600px
			)
			Sunday_Total
			(
				displayname = "Sunday Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Sunday_Achieved_Total
			(
				displayname = "Sunday Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Week1_Target
			(
				type = grid
				displayname = "Week1 Target"
				values  = Detailed_Targets.ID
    			bidirectional = Week1_Target
	 			row = 1
	 			column = 2   
				width = 600px
			)
			Week1_Total
			(
				displayname = "Week1 Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Week1_Achieved_Total
			(
				displayname = "Week1 Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Week2_Target
			(
				type = grid
				displayname = "Week2 Target"
				values  = Detailed_Targets.ID
    			bidirectional = Week2_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			Week2_Total
			(
				displayname = "Week2 Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Week2_Achieved_Total
			(
				displayname = "Week2 Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Week3_Target
			(
				type = grid
				displayname = "Week3 Target"
				values  = Detailed_Targets.ID
    			bidirectional = Week3_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			Week3_Total
			(
				displayname = "Week3 Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Week3_Achieved_Total
			(
				displayname = "Week3 Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Week4_Target
			(
				type = grid
				displayname = "Week4 Target"
				values  = Detailed_Targets.ID
    			bidirectional = Week4_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			Week4_Total
			(
				displayname = "Week4 Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Week4_Achieved_Total
			(
				displayname = "Week4 Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Week5_Target
			(
				type = grid
				displayname = "Week5 Target"
				values  = Detailed_Targets.ID
    			bidirectional = Week5_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			Week5_Total
			(
				displayname = "Week5 Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			Week5_Achieved_Total
			(
				displayname = "Week5 Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			January_Target
			(
				type = grid
				displayname = "January Target"
				values  = Detailed_Targets.ID
    			bidirectional = January_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			January_Total
			(
				displayname = "January Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			January_Achieved_Total
			(
				displayname = "January Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			February_Target
			(
				type = grid
				displayname = "February Target"
				values  = Detailed_Targets.ID
    			bidirectional = February_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			February_Total
			(
				displayname = "February Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			February_Achieved_Total
			(
				displayname = "February Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			March_Target
			(
				type = grid
				displayname = "March Target"
				values  = Detailed_Targets.ID
    			bidirectional = March_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			March_Total
			(
				displayname = "March Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			March_Achieved_Total
			(
				displayname = "March Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			April_Target
			(
				type = grid
				displayname = "April Target"
				values  = Detailed_Targets.ID
    			bidirectional = April_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			April_Total
			(
				displayname = "April Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			April_Achieved_Total
			(
				displayname = "April Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			May_Target
			(
				type = grid
				displayname = "May Target"
				values  = Detailed_Targets.ID
    			bidirectional = May_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			May_Total
			(
				displayname = "May Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			May_Achieved_Total
			(
				displayname = "May Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			June_Target
			(
				type = grid
				displayname = "June Target"
				values  = Detailed_Targets.ID
    			bidirectional = June_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			June_Total
			(
				displayname = "June Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			June_Achieved_Total
			(
				displayname = "June Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			July_Target
			(
				type = grid
				displayname = "July Target"
				values  = Detailed_Targets.ID
    			bidirectional = July_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			July_Total
			(
				displayname = "July Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			July_Achieved_Total
			(
				displayname = "July Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			August_Target
			(
				type = grid
				displayname = "August Target"
				values  = Detailed_Targets.ID
    			bidirectional = August_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			August_Total
			(
				displayname = "August Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			August_Achieved_Total
			(
				displayname = "August Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			September_Target
			(
				type = grid
				displayname = "September Target"
				values  = Detailed_Targets.ID
    			bidirectional = September_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			September_Total
			(
				displayname = "September Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			September_Achieved_Total
			(
				displayname = "September Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			October_Target
			(
				type = grid
				displayname = "October Target"
				values  = Detailed_Targets.ID
    			bidirectional = October_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			October_Total
			(
				displayname = "October Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			October_Achieved_Total
			(
				displayname = "October Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			November_Target
			(
				type = grid
				displayname = "November Target"
				values  = Detailed_Targets.ID
    			bidirectional = November_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			November_Total
			(
				displayname = "November Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			November_Achieved_Total
			(
				displayname = "November Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			December_Target
			(
				type = grid
				displayname = "December Target"
				values  = Detailed_Targets.ID
    			bidirectional = December_Target
	 			row = 1
	 			column = 2   
				width = large
			)
			December_Total
			(
				displayname = "December Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
			December_Achieved_Total
			(
				displayname = "December Achieved Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 2   
				width = 100px
			)
	
			customize
			(
				icon = "plus"
			)
			actions
			{
				on add
				{
					Submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					Update
					(
   						type = submit
   						displayname = "Update"
					)
					Cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Detailed_Forecasts
		{
			displayName = "Detailed Forecasts"
			show all rows from Detailed_Targets    
			(
				Date_field as "Date"
				Product
				Committed_Amount as "Committed Amount"
				Achieved_Amount as "Achieved Amount"
			)
			filters
			(
				Date_field
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Date_field as "Date"
							Product
							Committed_Amount as "Committed Amount"
							Achieved_Amount as "Achieved Amount"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Date_field as "Date"
							Product
							Committed_Amount as "Committed Amount"
							Achieved_Amount as "Achieved Amount"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		pivotchart Forecast_vs_Actual_Chart
		{ 
			displayname = "Forecast vs Actual Chart"
			based on Autoview_1390374182711_Brief_Targets
							icon = "area-chart"				show all rows from Brief_Targets
				(
 					Day 
 					Week 
 					Committed_Amount  as "Committed Amount"
 					Month 
 					Quarter 
 					Forecast_Id  as "Forecast Id"
 					Achieved_Amount  as "Achieved Amount"
 					Date_field  as "Date"
 					Year 
				)
		}
	}
	section Forecast_Backhand
	{
		displayname= "Forecast Backhand"
		hide = true
		icon = "bars"
		form Detailed_Targets
		{
			displayname = "Detailed Targets"
			success message = "Detailed Targets are  Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Date_field
			(
    			type = date
				displayname = "Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 130px
			)
			must have Product
			(
				type = picklist
				values  = Products.ID
    			displayformat = [Product_Name]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Committed_Amount
			(
				displayname = "Committed Amount"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = 100px
			)
			Achieved_Amount
			(
				displayname = "Achieved Amount"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = 100px
			)
			Sunday_Target
			(
				type = picklist
				displayname = "Sunday Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = Sunday_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Monday_Target
			(
				type = picklist
				displayname = "Monday Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = Monday_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Tuesday_Target
			(
				type = picklist
				displayname = "Tuesday Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = Tuesday_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Wednesday_Target
			(
				type = picklist
				displayname = "Wednesday Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = Wednesday_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Thursday_Target
			(
				type = picklist
				displayname = "Thursday Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = Thursday_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Friday_Target
			(
				type = picklist
				displayname = "Friday Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = Friday_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Saturday_Target
			(
				type = picklist
				displayname = "Saturday Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = Saturday_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Week1_Target
			(
				type = picklist
				displayname = "Week1 Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = Week1_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Week2_Target
			(
				type = picklist
				displayname = "Week2 Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = Week2_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Week3_Target
			(
				type = picklist
				displayname = "Week3 Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = Week3_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Week4_Target
			(
				type = picklist
				displayname = "Week4 Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = Week4_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Week5_Target
			(
				type = picklist
				displayname = "Week5 Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = Week5_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			January_Target
			(
				type = picklist
				displayname = "January Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = January_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			February_Target
			(
				type = picklist
				displayname = "February Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = February_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			March_Target
			(
				type = picklist
				displayname = "March Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = March_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			April_Target
			(
				type = picklist
				displayname = "April Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = April_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			May_Target
			(
				type = picklist
				displayname = "May Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = May_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			June_Target
			(
				type = picklist
				displayname = "June Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = June_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			July_Target
			(
				type = picklist
				displayname = "July Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = July_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			August_Target
			(
				type = picklist
				displayname = "August Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = August_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			September_Target
			(
				type = picklist
				displayname = "September Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = September_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			October_Target
			(
				type = picklist
				displayname = "October Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = October_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			November_Target
			(
				type = picklist
				displayname = "November Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = November_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
			December_Target
			(
				type = picklist
				displayname = "December Target"
				values  = Add_Detailed_Forecast.ID
    			bidirectional = December_Target
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "plus"
			)
			actions
			{
				on add
				{
					Submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					Update
					(
   						type = submit
   						displayname = "Update"
					)
					Cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Brief_Targets
		{
			displayname = "Brief Targets"
			success message = "Brief Targets are Added SuccessFully"
			field alignment = left
			feature property = 32
					hide = true
			Forecast_Id
			(
				type = picklist
				displayname = "Forecast Id"
				values  = Add_Brief_Forecast.ID
    			bidirectional = Targets
    			displayformat = [Forecast_ID1]
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Year
			(
				type = picklist
				values = {"2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Quarter
			(
				type = picklist
				values = {"1", "2", "3", "4"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Month
			(
				type = picklist
				values = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "June", "August", "October", "November", "December"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Week
			(
				type = picklist
				values = {"Week1", "Week2", "Week3", "Week4", "Week5"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Day
			(
				type = picklist
				values = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Date_field
			(
    			type = date
				displayname = "Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 130px
			)
			Committed_Amount
			(
				displayname = "Committed Amount"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = 100px
			)
			Achieved_Amount
			(
				displayname = "Achieved Amount"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = 100px
			)
	
			customize
			(
				icon = "plus"
			)
			actions
			{
				on add
				{
					Submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					Update
					(
   						type = submit
   						displayname = "Update"
					)
					Cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Sales_Order
	{
		displayname= "Sales Order"
		icon = "line-chart"
		form Orders
		{
			displayname = "New Order"
			success message = "New Order is Added Successfully"
			field alignment = left
			feature property = 32
			Sale_Order_Owner
			(
				type = picklist
				displayname = "Sale Order Owner"
				values  = Sales_Reps.ID
    			displayformat = [Email]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Order_ID
			(
    			type = autonumber
				displayname = "Order ID"
				start index = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Account_Name1
			(
				type = picklist
				displayname = "Account Name"
				values  = Accounts.ID
    			displayformat = [Account_Name]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Ordered_Date
			(
    			type = date
				displayname = "Ordered Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 130px
			)
			must have Date_On_Delivery
			(
    			type = date
				displayname = "Delivery Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 130px
			)
			Add_Product
			(
				type = grid
				displayname = "Add Product"
				values  = Sales_Product.ID
    			bidirectional = Order_Id
	 			row = 1
	 			column = 1   
				width = medium
			)
			Sub_Total
			(
				displayname = "Sub Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = 100px
			)
			Discount
			(
    			type = percentage
				initial value = 0%
	 			row = 1
	 			column = 1   
				width = 100px
			)
			Vat
			(
    			type = percentage
				initial value = 0%
	 			row = 1
	 			column = 1   
				width = 100px
			)
			Additional_Fees
			(
				displayname = "Additional Fees"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = 100px
			)
			Grand_Total
			(
				displayname = "Grand Total"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = 100px
			)
			Status
			(
				type = picklist
				values = {"Pending", "Delivery Pending", "Approved", "Rejected", "Delivered"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "plus-square-o"
			)
			actions
			{
				on add
				{
					Submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					Update
					(
   						type = submit
   						displayname = "Update"
					)
					Cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list All_Quotes
		{
			displayName = "All Quotes"
			show all rows from Orders  [Status == "Pending" || Status == "Rejected"]  
			(
				Ordered_Date as "Ordered Date"
				Date_On_Delivery as "Delivery Date"
				Sub_Total as "Sub Total"
				Discount
				Vat
				Grand_Total as "Grand Total"
				Account_Name1 as "Account Name"
				Additional_Fees as "Additional Fees"
				Sale_Order_Owner as "Sale Order Owner"
				Status
			)
			filters
			(
				Ordered_Date
				Date_On_Delivery
				Status
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Grand_Total as "Grand Total"
							Account_Name1 as "Account Name"
							Additional_Fees as "Additional Fees"
							Sale_Order_Owner as "Sale Order Owner"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Grand_Total as "Grand Total"
							Account_Name1 as "Account Name"
							Additional_Fees as "Additional Fees"
							Sale_Order_Owner as "Sale Order Owner"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Orders
		{
			displayName = "All Orders"
			show all rows from Orders    
			(
				Sale_Order_Owner as "Sale Order Owner"
				Account_Name1 as "Account Name"
				Ordered_Date as "Ordered Date"
				Date_On_Delivery as "Delivery Date"
				Add_Product.Qty as "Products"
				Add_Product.Product as "Products"
				Sub_Total as "Sub Total"
				Discount
				Vat
				Additional_Fees as "Additional Fees"
				Grand_Total as "Grand Total"
				Status
			)
			filters
			(
				Ordered_Date
				Date_On_Delivery
				Status
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Sale_Order_Owner as "Sale Order Owner"
							Account_Name1 as "Account Name"
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Add_Product.Qty as "Products"
							Add_Product.Product as "Products"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Additional_Fees as "Additional Fees"
							Grand_Total as "Grand Total"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Sale_Order_Owner as "Sale Order Owner"
							Account_Name1 as "Account Name"
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Add_Product.Qty as "Products"
							Add_Product.Product as "Products"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Additional_Fees as "Additional Fees"
							Grand_Total as "Grand Total"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		pivotchart Sales_By_All_Employee
		{ 
			displayname = "Sales By All Employee"
			based on Autoview_1464949789710_Orders
				show all rows from Orders
				(
 					Sale_Order_Owner.State  as "State"
 					Sale_Order_Owner  as "Sale Order Owner"
 					Additional_Fees  as "Additional Fees"
 					Ordered_Date  as "Ordered Date"
 					Discount 
 					Order_ID  as "Order ID"
 					Sub_Total  as "Sub Total"
 					Date_On_Delivery  as "Delivery Date"
 					Status 
 					Grand_Total  as "Grand Total"
 					Vat 
 					Account_Name1  as "Account Name"
				)
		}
		pivotchart Sales_by_employee
		{ 
			displayname = "Sales by Employee"
			based on Autoview_1464949789710_Orders
				show all rows from Orders
				(
 					Sale_Order_Owner.State  as "State"
 					Sale_Order_Owner  as "Sale Order Owner"
 					Additional_Fees  as "Additional Fees"
 					Ordered_Date  as "Ordered Date"
 					Discount 
 					Order_ID  as "Order ID"
 					Sub_Total  as "Sub Total"
 					Date_On_Delivery  as "Delivery Date"
 					Status 
 					Grand_Total  as "Grand Total"
 					Vat 
 					Account_Name1  as "Account Name"
				)
		}
		pivotchart Sales_By_Region
		{ 
			displayname = "Sales By Region"
			based on Autoview_1464949789710_Orders
				show all rows from Orders
				(
 					Sale_Order_Owner.State  as "State"
 					Sale_Order_Owner  as "Sale Order Owner"
 					Additional_Fees  as "Additional Fees"
 					Ordered_Date  as "Ordered Date"
 					Discount 
 					Order_ID  as "Order ID"
 					Sub_Total  as "Sub Total"
 					Date_On_Delivery  as "Delivery Date"
 					Status 
 					Grand_Total  as "Grand Total"
 					Vat 
 					Account_Name1  as "Account Name"
				)
		}
	}
	section Sales_Order_Backhands
	{
		displayname= "Sales Order Backhands"
		hide = true
		icon = "bars"
		list All_Completed_Orders
		{
			displayName = "All Completed Orders"
   			hide = true
			show all rows from Orders  [Status == "Delivered"]  
			(
				Ordered_Date as "Ordered Date"
				Date_On_Delivery as "Delivery Date"
				Sub_Total as "Sub Total"
				Discount
				Vat
				Grand_Total as "Grand Total"
				Account_Name1 as "Account Name"
				Additional_Fees as "Additional Fees"
				Sale_Order_Owner as "Owner"
				Status
			)
			filters
			(
				Ordered_Date
				Date_On_Delivery
				Status
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Grand_Total as "Grand Total"
							Account_Name1 as "Account Name"
							Additional_Fees as "Additional Fees"
							Sale_Order_Owner as "Owner"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Grand_Total as "Grand Total"
							Account_Name1 as "Account Name"
							Additional_Fees as "Additional Fees"
							Sale_Order_Owner as "Owner"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Sales_Product
		{
			displayname = "Sales Product"
			success message = "Product is Sold Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Order_Id
			(
				type = picklist
				displayname = "Order Id"
				values  = Orders.ID
    			bidirectional = Add_Product
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Product
			(
				type = picklist
				values  = Products.ID
    			displayformat = [Product_Name]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Unit_Price
			(
				displayname = "Unit Price"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = 100px
			)
			must have Qty
			(
				type = decimal
				initial value = 0
	 			row = 1
	 			column = 1   
				width = 100px
			)
			must have Total
			(
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = 100px
			)
	
			customize
			(
				icon = "plus"
			)
			actions
			{
				on add
				{
					Submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					Update
					(
   						type = submit
   						displayname = "Update"
					)
					Cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Sales_Product_View
		{
			displayName = "Sales Product View"
   			hide = true
			show all rows from Sales_Product    
			(
				ID
				Product
				Unit_Price as "Unit Price"
				Qty
				Total
				Order_Id as "Order Id"
				Order_Id.Sale_Order_Owner as "Sale Order Owner"
				Order_Id.Account_Name1 as "Account Name"
				Order_Id.Ordered_Date as "Ordered Date"
				Order_Id.Date_On_Delivery as "Delivery Date"
				Order_Id.Add_Product as "Add Product"
				Order_Id.Sub_Total as "Sub Total"
				Order_Id.Discount
				Order_Id.Vat
				Product.Business_Group as "Business Group"
				Product.Product_Group as "Product Group"
				Product.Product_Name as "Product Name"
				Product.Product_Code as "Product Code"
			)
			options
			(
				icon = "table"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							ID
							Product
							Unit_Price as "Unit Price"
							Qty
							Total
							Order_Id as "Order Id"
							Order_Id.Sale_Order_Owner as "Sale Order Owner"
							Order_Id.Account_Name1 as "Account Name"
							Order_Id.Ordered_Date as "Ordered Date"
							Order_Id.Date_On_Delivery as "Delivery Date"
							Order_Id.Add_Product as "Add Product"
							Order_Id.Sub_Total as "Sub Total"
							Order_Id.Discount as "Discount"
							Order_Id.Vat as "Vat"
							Product.Business_Group as "Business Group"
							Product.Product_Group as "Product Group"
							Product.Product_Name as "Product Name"
							Product.Product_Code as "Product Code"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							ID
							Product
							Unit_Price as "Unit Price"
							Qty
							Total
							Order_Id as "Order Id"
							Order_Id.Sale_Order_Owner as "Sale Order Owner"
							Order_Id.Account_Name1 as "Account Name"
							Order_Id.Ordered_Date as "Ordered Date"
							Order_Id.Date_On_Delivery as "Delivery Date"
							Order_Id.Add_Product as "Add Product"
							Order_Id.Sub_Total as "Sub Total"
							Order_Id.Discount as "Discount"
							Order_Id.Vat as "Vat"
							Product.Business_Group as "Business Group"
							Product.Product_Group as "Product Group"
							Product.Product_Name as "Product Name"
							Product.Product_Code as "Product Code"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list My_Pending_Quotes
		{
			displayName = "My Pending Quotes"
   			hide = true
			show all rows from Orders  [Status == "Pending" && Sale_Order_Owner.Email == zoho.loginuserid]  
			(
				Sale_Order_Owner as "Sale Order Owner"
				Account_Name1 as "Account Name"
				Ordered_Date as "Ordered Date"
				Date_On_Delivery as "Delivery Date"
				Add_Product.Qty as "Products"
				Add_Product.Product as "Products"
				Sub_Total as "Sub Total"
				Discount
				Vat
				Additional_Fees as "Additional Fees"
				Grand_Total as "Grand Total"
				Status
				custom action "Approve"
				(
	  			workflow = Approve
				column header = "Approve"
				success message = ""
				)
				custom action "Reject"
				(
	  			workflow = Reject
				column header = "Reject"
				success message = ""
				)
			)
			filters
			(
				Ordered_Date
				Date_On_Delivery
			)
			options
			(
				icon = "table"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Sale_Order_Owner as "Sale Order Owner"
							Account_Name1 as "Account Name"
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Add_Product.Qty as "Products"
							Add_Product.Product as "Products"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Additional_Fees as "Additional Fees"
							Grand_Total as "Grand Total"
							Status
				"Approve"
				"Reject"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Sale_Order_Owner as "Sale Order Owner"
							Account_Name1 as "Account Name"
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Add_Product.Qty as "Products"
							Add_Product.Product as "Products"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Additional_Fees as "Additional Fees"
							Grand_Total as "Grand Total"
							Status
				"Approve"
				"Reject"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list My_Pending_Sale_Orders
		{
			displayName = "My Pending Sale Orders"
   			hide = true
			show all rows from Orders  [Status == "Approved" && Sale_Order_Owner.Email == zoho.loginuserid]  
			(
				Sale_Order_Owner as "Sale Order Owner"
				Account_Name1 as "Account Name"
				Ordered_Date as "Ordered Date"
				Date_On_Delivery as "Delivery Date"
				Add_Product.Product as "Products"
				Add_Product.Unit_Price as "Products"
				Sub_Total as "Sub Total"
				Discount
				Vat
				Additional_Fees as "Additional Fees"
				Grand_Total as "Grand Total"
				Status
				custom action "View"
				(
	  			workflow = View6
				column header = "View"
				success message = ""
				)
				custom action "Send"
				(
	  			workflow = Send
				column header = "Send"
				success message = ""
				)
			)
			filters
			(
				Ordered_Date
				Date_On_Delivery
			)
			options
			(
				icon = "table"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Sale_Order_Owner as "Sale Order Owner"
							Account_Name1 as "Account Name"
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Add_Product.Product as "Products"
							Add_Product.Unit_Price as "Products"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Additional_Fees as "Additional Fees"
							Grand_Total as "Grand Total"
							Status
				"View"
				"Send"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Sale_Order_Owner as "Sale Order Owner"
							Account_Name1 as "Account Name"
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Add_Product.Product as "Products"
							Add_Product.Unit_Price as "Products"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Additional_Fees as "Additional Fees"
							Grand_Total as "Grand Total"
							Status
				"View"
				"Send"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list My_Orders
		{
			displayName = "My Orders"
   			hide = true
			show all rows from Orders  [Sale_Order_Owner.Email == zoho.loginuserid]  
			(
				Ordered_Date as "Ordered Date"
				Date_On_Delivery as "Delivery Date"
				Sub_Total as "Sub Total"
				Discount
				Vat
				Grand_Total as "Grand Total"
				Account_Name1 as "Account Name"
				Additional_Fees as "Additional Fees"
				Sale_Order_Owner as "Sale Order Owner"
				Status
			)
			filters
			(
				Ordered_Date
				Date_On_Delivery
				Status
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Grand_Total as "Grand Total"
							Account_Name1 as "Account Name"
							Additional_Fees as "Additional Fees"
							Sale_Order_Owner as "Sale Order Owner"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Grand_Total as "Grand Total"
							Account_Name1 as "Account Name"
							Additional_Fees as "Additional Fees"
							Sale_Order_Owner as "Sale Order Owner"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Completed_Sale_Orders
		{
			displayName = "Completed Sale Orders"
   			hide = true
			show all rows from Orders  [Status == "Delivered" && Sale_Order_Owner.Email == zoho.loginuserid]  
			(
				Sale_Order_Owner as "Owner"
				Account_Name1 as "Account Name"
				Ordered_Date as "Ordered Date"
				Date_On_Delivery as "Delivery Date"
				Add_Product.Product as "Products"
				Sub_Total as "Sub Total"
				Discount
				Vat
				Additional_Fees as "Additional Fees"
				Grand_Total as "Grand Total"
				Status
			)
			filters
			(
				Ordered_Date
				Date_On_Delivery
				Status
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Sale_Order_Owner as "Owner"
							Account_Name1 as "Account Name"
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Add_Product.Product as "Products"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Additional_Fees as "Additional Fees"
							Grand_Total as "Grand Total"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Sale_Order_Owner as "Owner"
							Account_Name1 as "Account Name"
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Add_Product.Product as "Products"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Additional_Fees as "Additional Fees"
							Grand_Total as "Grand Total"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Sales_Report_View
		{
			displayName = "Sales Report View"
   			hide = true
			show all rows from Orders    
			(
				Ordered_Date as "Ordered Date"
				Date_On_Delivery as "Delivery Date"
				Sub_Total as "Sub Total"
				Discount
				Vat
				Grand_Total as "Grand Total"
				Account_Name1 as "Account Name"
				Additional_Fees as "Additional Fees"
				Sale_Order_Owner as "Sale Order Owner"
				Status
				Add_Product.Product as "Add Product"
				Sale_Order_Owner.First_Name as "First Name"
				Sale_Order_Owner.Last_Name as "Last Name"
				Sale_Order_Owner.Email
				Sale_Order_Owner.Street
				Sale_Order_Owner.City
				Sale_Order_Owner.State
				Sale_Order_Owner.Zip_Code as "Zip Code"
				Sale_Order_Owner.Country
			)
			filters
			(
				Ordered_Date
				Date_On_Delivery
				Status
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Grand_Total as "Grand Total"
							Account_Name1 as "Account Name"
							Additional_Fees as "Additional Fees"
							Sale_Order_Owner as "Sale Order Owner"
							Status
							Add_Product.Product as "Add Product"
							Sale_Order_Owner.First_Name as "First Name"
							Sale_Order_Owner.Last_Name as "Last Name"
							Sale_Order_Owner.Email as "Email"
							Sale_Order_Owner.Street as "Street"
							Sale_Order_Owner.City as "City"
							Sale_Order_Owner.State as "State"
							Sale_Order_Owner.Zip_Code as "Zip Code"
							Sale_Order_Owner.Country as "Country"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Grand_Total as "Grand Total"
							Account_Name1 as "Account Name"
							Additional_Fees as "Additional Fees"
							Sale_Order_Owner as "Sale Order Owner"
							Status
							Add_Product.Product as "Add Product"
							Sale_Order_Owner.First_Name as "First Name"
							Sale_Order_Owner.Last_Name as "Last Name"
							Sale_Order_Owner.Email as "Email"
							Sale_Order_Owner.Street as "Street"
							Sale_Order_Owner.City as "City"
							Sale_Order_Owner.State as "State"
							Sale_Order_Owner.Zip_Code as "Zip Code"
							Sale_Order_Owner.Country as "Country"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Pending_Quotes
		{
			displayName = "All Pending Quotes"
   			hide = true
			show all rows from Orders  [Status == "Pending"]  
			(
				Ordered_Date as "Ordered Date"
				Date_On_Delivery as "Delivery Date"
				Sub_Total as "Sub Total"
				Discount
				Vat
				Grand_Total as "Grand Total"
				Account_Name1 as "Account Name"
				Additional_Fees as "Additional Fees"
				Sale_Order_Owner as "Sale Order Owner"
				Status
			)
			filters
			(
				Ordered_Date
				Date_On_Delivery
				Status
			)
			options
			(
				icon = "table"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Grand_Total as "Grand Total"
							Account_Name1 as "Account Name"
							Additional_Fees as "Additional Fees"
							Sale_Order_Owner as "Sale Order Owner"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Grand_Total as "Grand Total"
							Account_Name1 as "Account Name"
							Additional_Fees as "Additional Fees"
							Sale_Order_Owner as "Sale Order Owner"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Pending_Orders
		{
			displayName = "All Pending Orders"
   			hide = true
			show all rows from Orders  [Status == "Approved"]  
			(
				Ordered_Date as "Ordered Date"
				Date_On_Delivery as "Delivery Date"
				Sub_Total as "Sub Total"
				Discount
				Vat
				Grand_Total as "Grand Total"
				Account_Name1 as "Account Name"
				Additional_Fees as "Additional Fees"
				Sale_Order_Owner as "Sale Order Owner"
				Status
			)
			filters
			(
				Ordered_Date
				Date_On_Delivery
				Status
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Grand_Total as "Grand Total"
							Account_Name1 as "Account Name"
							Additional_Fees as "Additional Fees"
							Sale_Order_Owner as "Sale Order Owner"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Ordered_Date as "Ordered Date"
							Date_On_Delivery as "Delivery Date"
							Sub_Total as "Sub Total"
							Discount
							Vat
							Grand_Total as "Grand Total"
							Account_Name1 as "Account Name"
							Additional_Fees as "Additional Fees"
							Sale_Order_Owner as "Sale Order Owner"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		pivotchart Sales_Report_By_Product
		{ 
			displayname = "Sales Report By Product"
			based on Autoview_1464952516623_Sales_Product
					hide = true
				show all rows from Sales_Product
				(
 					Qty 
 					Order_Id.Date_On_Delivery  as "Delivery Date"
 					Product 
 					Total 
 					Order_Id  as "Order Id"
 					Unit_Price  as "Unit Price"
 					Product.Product_Name  as "Product Name"
				)
		}
	}
	section Products
	{
		icon = "shopping-cart"
		form Products
		{
			displayname = "New Product"
			success message = "New Product is Added Successfully"
			field alignment = left
			feature property = 32
			Business_Group
			(
				type = picklist
				displayname = "Business Group"
				values  = Business_Group.ID
    			bidirectional = MyLabel
    			displayformat = [Business_Group]
				allow new entries = true
				[
					displayname = ""
				]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Product_Group
			(
				type = picklist
				displayname = "Product Group"
				values  = Product_Group[Business_Group == input.Business_Group].ID
    			displayformat = [Product_Group]
				allow new entries = true
				[
					displayname = ""
				]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have unique Product_Name
			(
    			type = text
				displayname = "Product Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Product_Code
			(
    			type = text
				displayname = "Product Code"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Product_Active
			(
    			type = checkbox
				displayname = "Product Active"
				initial value = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			Unit_Price
			(
				displayname = "Unit Price"
				type = USD
	 			row = 1
	 			column = 1   
				width = 100px
			)
			Description1
			(
    			type = textarea
				displayname = "Description"
				height = 100px
	 			row = 1
	 			column = 1   
				width = 200px
			)
	
			customize
			(
				icon = "cart-plus"
			)
			actions
			{
				on add
				{
					Submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					Update
					(
   						type = submit
   						displayname = "Update"
					)
					Cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Product_View
		{
			displayName = "Product View"
			show all rows from Products    
			(
				Business_Group as "Business Group"
				Product_Group as "Product Group"
				Product_Name as "Product Name"
				Product_Code as "Product Code"
				Product_Active as "Product Active"
				Description1 as "Description"
				Unit_Price as "Unit Price"
			)
			filters
			(
				Business_Group
				Product_Group
			)
			options
			(
				icon = "database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Business_Group as "Business Group"
							Product_Group as "Product Group"
							Product_Name as "Product Name"
							Product_Code as "Product Code"
							Product_Active as "Product Active"
							Description1 as "Description"
							Unit_Price as "Unit Price"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Business_Group as "Business Group"
							Product_Group as "Product Group"
							Product_Name as "Product Name"
							Product_Code as "Product Code"
							Product_Active as "Product Active"
							Description1 as "Description"
							Unit_Price as "Unit Price"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Product_Backhands
	{
		displayname= "Product Backhands"
		hide = true
		icon = "bars"
		form Business_Group
		{
			displayname = "Business Group"
			success message = "Business Group Added SuccessFully"
			field alignment = left
			feature property = 32
					hide = true
			must have unique Business_Group
			(
    			type = text
				displayname = "Business Group"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			MyLabel
			(
				type = picklist
				displayname = "DisplayName"
				values  = Products.ID
    			bidirectional = Business_Group
    			displayformat = [ID]
    			description
    			[
    				type = tooltip
    			 	message = "Web application"
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "plus-square-o"
			)
			actions
			{
				on add
				{
					Submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					Update
					(
   						type = submit
   						displayname = "Update"
					)
					Cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Business_Group_View
		{
			displayName = "Business Group View"
   			hide = true
			show all rows from Business_Group    
			(
				Business_Group as "Business Group"
			)
			options
			(
				icon = "table"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Business_Group as "Business Group"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Business_Group as "Business Group"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Product_Group
		{
			displayname = "Product Group"
			success message = "Product Group is Added SuccessFully"
			field alignment = left
			feature property = 32
					hide = true
			must have Business_Group
			(
				type = picklist
				displayname = "Business Group"
				values  = Business_Group.ID
    			displayformat = [Business_Group]
				allow new entries = true
				[
					displayname = ""
				]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have unique Product_Group
			(
    			type = text
				displayname = "Product Group"
	 			row = 1
	 			column = 1   
				width = 200px
			)
	
			customize
			(
				icon = "plus-square-o"
			)
			actions
			{
				on add
				{
					Submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					Update
					(
   						type = submit
   						displayname = "Update"
					)
					Cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Product_Group_View
		{
			displayName = "Product Group View"
   			hide = true
			show all rows from Product_Group    
			(
				Business_Group as "Product Group"
				Product_Group as "Product Group"
			)
			options
			(
				icon = "table"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Business_Group as "Product Group"
							Product_Group as "Product Group"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Business_Group as "Product Group"
							Product_Group as "Product Group"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Sales_Reps
	{
		displayname= "Sales Reps"
		icon = "user"
		form Sales_Reps
		{
			displayname = "Sales Reps"
			success message = "Sales Rep is Added Successfully"
			field alignment = left
			feature property = 32
			must have First_Name
			(
    			type = text
				displayname = "First Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Last_Name
			(
    			type = text
				displayname = "Last Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have unique Email
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Telephone
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Gender
			(
				type = radiobuttons
				values = {"Male", "Female"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			Team_Name
			(
				type = picklist
				displayname = "Team Name"
				values  = Team.ID
    			displayformat = [Team_Name]
				allow new entries = true
				[
					displayname = ""
				]
				searchable = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Street
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			City
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			State
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Zip_Code
			(
    			type = text
				displayname = "Zip Code"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Country
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
	
			customize
			(
				icon = "user-plus"
			)
			actions
			{
				on add
				{
					Submit
					(
   						type = submit
   						displayname = "Submit"
					)
					Reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					Update
					(
   						type = submit
   						displayname = "Update"
					)
					Cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list All_Reps
		{
			displayName = "All Reps"
			show all rows from Sales_Reps    
			(
				First_Name as "First Name"
				Last_Name as "Last Name"
				Email
				Telephone
				Gender
				Street
				City
				State
				Zip_Code as "Zip Code"
				Country
			)
			options
			(
				icon = "users"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							First_Name as "First Name"
							Last_Name as "Last Name"
							Email
							Telephone
							Gender
							Street
							City
							State
							Zip_Code as "Zip Code"
							Country
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							First_Name as "First Name"
							Last_Name as "Last Name"
							Email
							Telephone
							Gender
							Street
							City
							State
							Zip_Code as "Zip Code"
							Country
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Employee_Backhand
	{
		displayname= "Employee Backhand"
		hide = true
		icon = "bars"
		form Team
		{
			success message = "Team Name is Added SuccessFully"
			field alignment = left
			feature property = 32
					hide = true
			Team_Name
			(
    			type = text
				displayname = "Team Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
	
			customize
			(
				icon = "plus-square-o"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Team_View
		{
			displayName = "Team View"
   			hide = true
			show all rows from Team    
			(
				Team_Name as "Team Name"
			)
			options
			(
				icon = "table"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Team_Name as "Team Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Team_Name as "Team Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section View_Details
	{
		displayname= "View Details"
		hide = true
		icon = "bars"
				 page View_Details(Type,RecId) 
	 	 { 
 	 	 displayname = "View Details" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \n\t\t\tisPdfEnabled='false'\n\t\t\n\t\t\tisPrintEnabled='false'\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n>\n\t<dsp id='View_Details'>\n\t<![CDATA[htmlpage View_Details(Type,RecId)\ndisplayname = &quot;View Details&quot;\ncontent\n&lt;%{\n\tpageContent = &quot;&quot;;\n\tif(input.RecId != null &amp;&amp; input.RecId != &quot;&quot;)\n\t{\n\t\tnewRecId = RecId.toLong();\n\t\tif(input.Type == &quot;Leads&quot;)\n\t\t{\n\t\t\tpageContent = thisapp.get_results.getLeadResults(newRecId);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpageContent = thisapp.get_results.getAccountResults(newRecId);\n\t\t}\n\t}\n\telse\n\t{\n\t\tpageContent = thisapp.get_results.getInvalidResults();\n\t}\n\t%&gt;\n&lt;style&gt;\n\t\t\t\t\t\t\t\t.zc-viewrow td {\n\t\t\t\t\t\tborder-left: none;\n\t\t\t\t\t\tborder-bottom: 1px solid #f3f3f3;\n\t\t\t\t\t\tborder-right: none;\n\t\t\t\t\t\tvertical-align: top;\n\t\t\t\t\t\tfont-size: 12px;\n\t\t\t\t\t\tpadding: 7px 4px 4px;\n\t\t\t\t\t\tcolor: #262626;\n\t\t\t\t\t\tborder-top: solid 1px transparent;\n\t\t\t\t\t\twhite-space: normal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t                \n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t.mainDiv{\n\t\t\t\t\t\t                        width: 1300px;\n\t\t\t\t\t\t    background: #FAFAFA;\n\t\t\t\t\t\t    box-shadow: 0 0 2px #ddd;\n\t\t\t\t\t\t    margin: 0 auto;\n\t\t\t\t\t\t    margin-top: 15px;\n\t\t\t\t\t\t    margin-bottom: 15px;\n\t\t\t\t\t\t                }\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t                .showDiv {\n\t\t\t\t\t\t                overflow:auto;\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t        .viewDiv{          \n\t\t\t\t\t\t                    padding-left: 18px;\n\t\t\t\t\t\t                    padding-right: 18px;\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t        .heading{\n\t\t\t\t\t\t                        text-align:left;\n\t\t\t\t\t\t                        padding-top:18px;\n\t\t\t\t\t\t                        padding-bottom:15px;\n\t\t\t\t\t\t                        font-size:15px;\n\t\t\t\t\t\t                        font-weight:bold;\n\t\t\t\t\t\t                        color:#474747\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t        .addNew{\n\t\t\t\t\t\t                        font-size: 12px;\n\t\t\t\t\t\t                        height:30px;\n\t\t\t\t\t\t                                                width:100px;\n\t\t\t\t\t\t                        float:right\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t        &lt;\/style&gt;\n\t\t\t\t\t\t    &lt;%=pageContent%&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
	}
	section Generate_Invoice
	{
		displayname= "Generate Invoice"
		hide = true
		icon = "bars"
				 page Generate_Invoice(orderRecId) 
	 	 { 
 	 	 displayname = "Generate Invoice" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \n\t\t\tisPdfEnabled='true'\n\t\t\n\t\t\tisPrintEnabled='true'\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n>\n\t<dsp id='Generate_Invoice'>\n\t<![CDATA[htmlpage Generate_Invoice(orderRecId)\ndisplayname = &quot;Generate Invoice&quot;\nprint = true\npdf = true\ncontent\n&lt;%{\n\t%&gt;\n&lt;style&gt;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .invDiv td\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t  padding:5px;\n\t\t\t\t\t\t  box-sizing:border-box;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  \n\t\t\t\t\t\t  \n\t\t\t\t\t\t  \n\t\t\t\t\t\t  \n\t\t\t\t\t\t  \/*OLD CODE .invDiv{\n\t\t\t\t\t\t          width:700px;\n\t\t\t\t\t\t          border:2px solid #EEE;\n\t\t\t\t\t\t          background-color:white;\n\t\t\t\t\t\t          border-radius:5px;\n\t\t\t\t\t\t          margin: 10px auto;\n\t\t\t\t\t\t          box-shadow: 0px 0px 12px #E9E2E2;\n\t\t\t\t\t\t  }*\/\n\t\t\t\t\t\t  .invDiv {\n\t\t\t\t\t\t    width: 700px;\n\t\t\t\t\t\t    border: 1px solid #EEE;\n\t\t\t\t\t\t    background-color: white;\n\t\t\t\t\t\t    \/\/border-radius: 5px;\n\t\t\t\t\t\t    margin: 10px auto;\n\t\t\t\t\t\t    box-shadow: 1px 0px 2px #E9E2E2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t  .tableSize{\n\t\t\t\t\t\t          width: 80%;\n\t\t\t\t\t\t          margin: 0px auto;\n\t\t\t\t\t\t          margin-top: 32px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  #shippingAdd td{\n\t\t\t\t\t\t  \ttext-align:left;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  #billingAdd td{\n\t\t\t\t\t\t  text-align:left;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \/*.invHead{\n\t\t\t\t\t\t          text-align: center;\n\t\t\t\t\t\t                  background-color: #B1B1B1;\n\t\t\t\t\t\t                  padding: 8px 0px 8px 0px;\n\t\t\t\t\t\t                  font-size: 14px;\n\t\t\t\t\t\t                  font-weight: bold;\n\t\t\t\t\t\t                  color: #5C5353;\n\t\t\t\t\t\t                  text-shadow: 0px 0px 2px #E7E7E7;\n\t\t\t\t\t\t  }*\/\n\t\t\t\t\t\t  .invHead {\n\t\t\t\t\t\t    text-align: center;\n\t\t\t\t\t\t    background-color: #eaeaea;\n\t\t\t\t\t\t    padding: 8px 0px 8px 0px;\n\t\t\t\t\t\t    font-size: 14px;\n\t\t\t\t\t\t    font-weight: bold;\n\t\t\t\t\t\t    color: #5C5353;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t  .rowHead{\n\t\t\t\t\t\t  color: #6F6F6F;\n\t\t\t\t\t\t  font-size: 13px;\n\t\t\t\t\t\t  font-weight: bold;\n\t\t\t\t\t\t  text-align: center;\n\t\t\t\t\t\t  height: 30px;\n\t\t\t\t\t\t  background-color: #f3f3f3;\n\t\t\t\t\t\t    border-left: 1px solid #ccc;\n\t\t\t\t\t\t    border-right: 1px solid #ccc;\n\t\t\t\t\t\t    border-bottom: 1px solid #ccc;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .rowVal{\n\t\t\t\t\t\t  color: #999999;\n\t\t\t\t\t\tfont-family: Arial;\n\t\t\t\t\t\t  font-size: 13px;\n\t\t\t\t\t\t  text-align: center;\n\t\t\t\t\t\t  height: 36px;\n\t\t\t\t\t\t  border-right: 1px solid #ccc;\n\t\t\t\t\t\t    border-bottom: 1px solid #ccc;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .keyCol{\n\t\t\t\t\t\t  color: #868585;\n\t\t\t\t\t\t  border: none;\n\t\t\t\t\t\t  text-align: right;\n\t\t\t\t\t\t  font-weight:bold;\n\t\t\t\t\t\t  font-family: Arial;\n\t\t\t\t\t\t  font-size: 14px;\n\t\t\t\t\t\t  height:36px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .valCol{\n\t\t\t\t\t\t  color: #999999;\n\t\t\t\t\t\tfont-family: Arial;\n\t\t\t\t\t\tfont-size: 13px;\n\t\t\t\t\t\ttext-align: right;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .invalidReq{\n\t\t\t\t\t\t    padding: 20px 0px 20px 0px;\n\t\t\t\t\t\t    background-color: white;\n\t\t\t\t\t\t    border: 2px solid #EEE;\n\t\t\t\t\t\t    width: 200px;\n\t\t\t\t\t\t    text-align: center;\n\t\t\t\t\t\t    border-radius: 5px;\n\t\t\t\t\t\t    color: rgb(173, 173, 173);\n\t\t\t\t\t\t    margin: 0px auto;\n\t\t\t\t\t\t    font-size: 14px;\n\t\t\t\t\t\t    font-weight: bold;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t          &lt;\/style&gt;\n\t\t\t\t\t\t          &lt;%=thisapp.invoice.generateInvoice(orderRecId)%&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
	}
	functions
	{
 			void tasks.closeTask(Tasks taskRow)
			{
				taskRow.Status="Closed";
				recID = Sales_Reps[Email == zoho.loginuserid].ID;
				if(recID != null)
				{
					taskRow.Task_Owner=recID;
				}
				taskRow.Due_Date=zoho.currenttime;
			}
 			void tasks.cancelTask(Tasks taskRow)
			{
				taskRow.Status="Canceled";
				recID = Sales_Reps[Email == zoho.loginuserid].ID;
				if(recID != null)
				{
					taskRow.Task_Owner=recID;
				}
				taskRow.Due_Date=zoho.currenttime;
			}
 			string get_results.getInvalidResults()
			{
				output = "<div style='background:#FAFAFA;box-shadow:0 0 5px #AAA;border-radius:4px;margin:15 auto;width:300px;height:50px;color:gray;font-size:19px;text-align:center;'>";
				output = output + "<font style='position:relative;top:10px;'>Invalid request found!</font>";
				output = output + "</div>";
				return output;
			}
 			void tasks.addTask(int recID)
			{
				openUrl("#Form:Tasks?zc_Header=false&zc_BdrClr=transparent&zc_LoadIn=dialog&Contact_Name=" + recID,"Same Window");
			}
 			void invoice.sendInvoice(Orders orderRow)
			{
				contactRow = Contacts[Account == orderRow.Account_Name1 && Primary_Contact];
				if(contactRow.ID != null)
				{
					invoiceUrl = "https://creator.zoho.com" + zoho.appuri + "#View:Generate_Invoice?orderRecId=" + orderRow.ID;
					sendmail
					[
						from :zoho.adminuserid
						to :contactRow.Email
						subject :"Your Invoice for Order Id(" + orderRow.Order_ID + ")"
						message :"Hi,<br>\n<br>\nYou can view your Invoice by access this <a href='" + invoiceUrl + "'>Invoice link.</a><br>\n<br>\nThanks!"
					]
				}
				else
				{
					info "There is no primary contact in this account!";
				}
			}
 			void follow_and_unfollow.unFollowAccounts(Accounts accountRow)
			{
				empRow = Sales_Reps[Email == zoho.loginuserid];
				if(empRow.ID != null)
				{
					followerList = accountRow.Followers.getall();
					if(followerList.contains(empRow.ID))
					{
						followerList.removeelement(empRow.ID);
						accountRow.Followers=followerList;
					}
				}
				else
				{
					info "Your Email Id is not registered in Employees Form!";
				}
			}
 			void follow_and_unfollow.unFollowCases(New_Case caseRow)
			{
				empRow = Sales_Reps[Email == zoho.loginuserid];
				if(empRow.ID != null)
				{
					followerList = caseRow.Followers.getall();
					if(followerList.contains(empRow.ID))
					{
						followerList.removeelement(empRow.ID);
						caseRow.Followers=followerList;
					}
				}
				else
				{
					info "Your Email Id is not registered in Employees Form!";
				}
			}
 			void follow_and_unfollow.unFollowLeads(Leads leadRow)
			{
				empRow = Sales_Reps[Email == zoho.loginuserid];
				if(empRow.ID != null)
				{
					followerList = leadRow.Followers.getall();
					if(followerList.contains(empRow.ID))
					{
						followerList.removeelement(empRow.ID);
						leadRow.Followers=followerList;
					}
				}
				else
				{
					info "Your Email Id is not registered in Employees Form!";
				}
			}
 			void follow_and_unfollow.unFollowTasks(Tasks taskRow)
			{
				empRow = Sales_Reps[Email == zoho.loginuserid];
				if(empRow.ID != null)
				{
					followerList = taskRow.Followers.getall();
					if(followerList.contains(empRow.ID))
					{
						followerList.removeelement(empRow.ID);
						taskRow.Followers=followerList;
					}
				}
				else
				{
					info "Your Email Id is not registered in Employees Form!";
				}
			}
 			void Cases.cancelCase(New_Case caseRow)
			{
				caseRow.Status="Canceled";
				caseRow.Due_Date=zoho.currenttime;
			}
 			void Cases.closeCase(New_Case caseRow)
			{
				caseRow.Status="Closed";
				caseRow.Due_Date=zoho.currenttime;
			}
 			void follow_and_unfollow.followLeads(Leads leadRow)
			{
				empRow = Sales_Reps[Email == zoho.loginuserid];
				if(empRow.ID != null)
				{
					followerList = leadRow.Followers.getall();
					if(!followerList.contains(empRow.ID))
					{
						followerList.add(empRow.ID);
						leadRow.Followers=followerList;
					}
					else
					{
						openUrl("#Form:Alert_Message?zc_LoadIn=dialog&zc_Header=false&zc_BdrClr=transparent","Pupup Window");
					}
				}
				else
				{
					openUrl("#Form:Alert_Message?zc_LoadIn=dialog&zc_Header=false&zc_BdrClr=transparent&Type=Sales_Reps","Pupup Window");
				}
			}
 			void follow_and_unfollow.followTasks(Tasks taskRow)
			{
				empRow = Sales_Reps[Email == zoho.loginuserid];
				if(empRow.ID != null)
				{
					followerList = taskRow.Followers.getall();
					if(!followerList.contains(empRow.ID))
					{
						followerList.add(empRow.ID);
						taskRow.Followers=followerList;
					}
					else
					{
						openUrl("#Form:Alert_Message?zc_LoadIn=dialog&zc_Header=false&zc_BdrClr=transparent","Pupup Window");
					}
				}
				else
				{
					openUrl("#Form:Alert_Message?zc_LoadIn=dialog&zc_Header=false&zc_BdrClr=transparent&Type=Sales_Reps","Pupup Window");
				}
			}
 			void follow_and_unfollow.followAccounts(Accounts accountRow)
			{
				empRow = Sales_Reps[Email == zoho.loginuserid];
				if(empRow.ID != null)
				{
					followerList = accountRow.Followers.getall();
					if(!followerList.contains(empRow.ID))
					{
						followerList.add(empRow.ID);
						accountRow.Followers=followerList;
					}
					else
					{
						openUrl("#Form:Alert_Message?zc_LoadIn=dialog&zc_Header=false&zc_BdrClr=transparent","Pupup Window");
					}
				}
				else
				{
					openUrl("#Form:Alert_Message?zc_LoadIn=dialog&zc_Header=false&zc_BdrClr=transparent&Type=Sales_Reps","Pupup Window");
				}
			}
 			void lead.convertAccount(Leads leadRow)
			{
				if(leadRow.Account == null)
				{
					openUrl("#Form:Accounts?zc_Header=false&zc_BdrClr=transparent&Lead=" + leadRow.ID,"Popup Window");
				}
				else
				{
					openUrl("#Form:Alert_Message?zc_Header=false&zc_BdrClr=transparent&Type=Account_Convert","Popup Window");
				}
			}
 			void follow_and_unfollow.followCases(New_Case caseRow)
			{
				empRow = Sales_Reps[Email == zoho.loginuserid];
				if(empRow.ID != null)
				{
					followerList = caseRow.Followers.getall();
					if(!followerList.contains(empRow.ID))
					{
						followerList.add(empRow.ID);
						caseRow.Followers=followerList;
					}
					else
					{
						openUrl("#Form:Alert_Message?zc_LoadIn=dialog&zc_Header=false&zc_BdrClr=transparent","Pupup Window");
					}
				}
				else
				{
					openUrl("#Form:Alert_Message?zc_LoadIn=dialog&zc_Header=false&zc_BdrClr=transparent&Type=Sales_Reps","Pupup Window");
				}
			}
 			float checkNullVal(float inputVal)
			{
				if(input.inputVal == null)
				{
					inputVal = 0;
				}
				return inputVal;
			}
 			void quotes.approveQuotes(Orders orderRow)
			{
				orderRow.Status="Approved";
			}
 			void quotes.rejectQuotes(Orders orderRow)
			{
				orderRow.Status="Rejected";
			}
 			string invoice.generateInvoice(string recId)
			{
				output = "";
				if(input.recId != null && input.recId != "")
				{
					orderRow = Orders[ID == input.recId.toLong()];
					accountRow = Accounts[ID == orderRow.Account_Name1];
					output = output + "<div class='invDiv'>";
					output = output + "<div class='invHead'>Invoice</div>";
					output = output + "<table class='tableSize' align='center'>";
					output = output + "<tr><td colspan='2' align='right'><span class='keyCol'>Date: </span><span class='valCol'>" + zoho.currentdate + "</span></td></tr>";
					output = output + "<tr>";
					output = output + "<td>";
					output = output + "<table  align='left' cellspacing='0' style='border-color:#EEE;width:95%;margin:12px 0px 0px 0px' id='billingAdd'>";
					output = output + "<tr align='left'><td class='rowHead' style='width:40%;border-top: 1px solid #ccc;'>Billing Street</td><td class='rowVal' style='width:60%;border-top: 1px solid #ccc;'>&nbsp;" + accountRow.Billing_Street + "</td></tr>";
					output = output + "<tr align='left'><td class='rowHead'>Billing City</td><td class='rowVal'>&nbsp;" + accountRow.Billing_City + "</td></tr>";
					output = output + "<tr align='left'><td class='rowHead'>Billing State</td><td class='rowVal'>&nbsp;" + accountRow.Billing_State + "</td></tr>";
					output = output + "<tr align='left'><td class='rowHead'>Billing Zip</td><td class='rowVal'>&nbsp;" + accountRow.Billing_Zip + "</td></tr>";
					output = output + "<tr align='left'><td class='rowHead'>Billing Country</td><td class='rowVal'>&nbsp;" + accountRow.Billing_Country + "</td></tr>";
					output = output + "</table>";
					output = output + "</td>";
					output = output + "<td>";
					output = output + "<table  cellspacing='0' align='right' style='border-color:#EEE;width:95%;margin:12px 0px 0px 0px;' id='shippingAdd'>";
					output = output + "<tr align='left'><td class='rowHead' style='width:40%;text-align:left;border-top: 1px solid #ccc;'>Shipping Street</td><td class='rowVal' style='width:60%;border-top: 1px solid #ccc;'>&nbsp;" + accountRow.Shipping_Street + "</td></tr>";
					output = output + "<tr align='left'><td class='rowHead'>Shipping City</td><td class='rowVal'>&nbsp;" + accountRow.Shipping_City + "</td></tr>";
					output = output + "<tr align='left'><td class='rowHead'>Shipping State</td><td class='rowVal'>&nbsp;" + accountRow.Shipping_State + "</td></tr>";
					output = output + "<tr align='left'><td class='rowHead'>Shipping Zip</td><td class='rowVal'>&nbsp;" + accountRow.Shipping_Zip + "</td></tr>";
					output = output + "<tr align='left'><td class='rowHead'>Shipping Country</td><td class='rowVal'>&nbsp;" + accountRow.Shipping_Country + "</td></tr>";
					output = output + "</table>";
					output = output + "</td>";
					output = output + "</tr></table>";
					output = output + "<table class='tableSize'  cellspacing='0' style='border: 1px solid #ccc;'>";
					output = output + "<tr class='rowHead'><td  style='border-right: 1px solid #ccc;border-bottom: 1px solid #ccc;'  >Account Name</td><td style='border-right: 1px solid #ccc;border-bottom: 1px solid #ccc;' >Order Id</td><td   style='border-right: 1px solid #ccc;border-bottom: 1px solid #ccc;' >Ordered Date</td><td style='border-bottom: 1px solid #ccc;'>Delivery Date</td></tr>";
					output = output + "<tr class='rowVal'><td style='border-right: 1px solid #ccc;' >" + accountRow.Account_Name + "</td><td style='border-right: 1px solid #ccc;' >" + orderRow.Order_ID + "</td><td style='border-right: 1px solid #ccc;' >" + orderRow.Ordered_Date + "</td><td>" + orderRow.Date_On_Delivery + "</td></tr>";
					output = output + "</table>";
					output = output + "<table class='tableSize'  cellspacing='0' style='border: 1px solid #ccc;margin-bottom:30px;'>";
					output = output + "<tr class='rowHead'><td style='border-right: 1px solid #ccc;border-bottom: 1px solid #ccc;'>Product</td><td style='border-right: 1px solid #ccc;border-bottom: 1px solid #ccc;' >Price</td><td style='border-right: 1px solid #ccc;border-bottom: 1px solid #ccc;' >Quantity</td><td  style='border-bottom: 1px solid #ccc;' >Amount</td></tr>";
					for each  productRow in orderRow.Add_Product
					{
						productName = Products[ID == productRow.Product].Product_Name;
						output = output + "<tr class='rowVal'><td style='border-right: 1px solid #ccc;border-bottom: 1px solid #ccc;' >" + productName + "</td><td style='text-align:right;border-right: 1px solid #ccc;border-bottom: 1px solid #ccc;'>" + productRow.Unit_Price + "</td><td style='text-align:right;border-right: 1px solid #ccc;border-bottom: 1px solid #ccc;'>" + productRow.Qty + "</td><td style='text-align:right;border-bottom: 1px solid #ccc;'>" + productRow.Total + "</td></tr>";
					}
					output = output + "<tr><td  style='border-right: 1px solid #ccc;border-bottom: 1px solid #ccc;' colspan='3' class='keyCol'>Sub Total:</td><td class='valCol'  style='text-align:right;border-bottom: 1px solid #ccc;'>" + orderRow.Sub_Total + "</td></tr>";
					output = output + "<tr><td  style='border-right: 1px solid #ccc;border-bottom: 1px solid #ccc;' colspan='3' class='keyCol'>Discount:</td><td class='valCol'  style='text-align:right;border-bottom: 1px solid #ccc;' >" + orderRow.Discount + "</td></tr>";
					output = output + "<tr><td  style='border-right: 1px solid #ccc;border-bottom: 1px solid #ccc;' colspan='3' class='keyCol'>Vat:</td><td class='valCol' style='text-align:right;border-bottom: 1px solid #ccc;' >" + orderRow.Vat + "</td></tr>";
					output = output + "<tr><td  style='border-right: 1px solid #ccc;border-bottom: 1px solid #ccc;' colspan='3' class='keyCol'>Additional Fees:</td><td class='valCol'  style='text-align:right;border-bottom: 1px solid #ccc;' >" + orderRow.Additional_Fees + "</td></tr>";
					output = output + "<tr><td  style='border-right: 1px solid #ccc;' colspan='3' class='keyCol'>Grand Total:</td><td class='valCol'>" + orderRow.Grand_Total + "</td></tr>";
					output = output + "</table>";
					output = output + "<div style='text-align:right;width: 86%;margin: 0px auto;margin-bottom: 30px;'><img src='/platform/images/logo.png' id='zohocreator_logo'></div>";
					output = output + "</div>";
				}
				else
				{
					output = output + "<div class='invalidReq'>";
					output = output + "<span>Invalid Request!</span>";
					output = output + "</div>";
				}
				return output;
			}
 			void view_info.accountInfo(int RecId)
			{
				openUrl("#Page:View_Details?Type=Accounts&RecId=" + RecId,"same window");
			}
 			void invoice.viewInvoice(int recId)
			{
				openUrl("#Page:Generate_Invoice?orderRecId=" + recId + "&zc_Header=false","Popup Window");
			}
 			void view_info.leadInfo(int RecId)
			{
				openUrl("#Page:View_Details?Type=Leads&RecId=" + RecId,"same window");
			}
 			string feeds.getNoneFeeds()
			{
				output = "<div style='background: #FAFAFA;box-shadow: 0 0 2px #AAA;margin: 0 auto;width: 400px;height: 50px;color: gray;font-size: 15px;text-align: center;padding: 10px 0px 0px 0px;margin-top: 20%;'>";
				output = output + "<font style='position:relative;top:10px;'>No feeds found!</font>";
				output = output + "</div>";
				return output;
			}
 			string feeds.getFeeds()
			{
				output = "";
				noFeeds = "";
				viewParams = "zc_SecHeader=false&zc_Header=false&zc_Summary=false&zc_Footer=false";
				empRow = Sales_Reps[Email == zoho.loginuserid];
				if(empRow.ID != null)
				{
					if(Leads[Followers == empRow.ID].count() > 0)
					{
						noFeeds = "";
						output = output + "<div class='heading'>Following Leads</div>";
						output = output + "<div class='showDiv' elName='zc-component' viewLinkName='Following_Leads' params='" + viewParams + "'>Loading View...</div>";
					}
					if(Accounts[Followers == empRow.ID].count() > 0)
					{
						output = output + "<div class='heading'>Following Accounts</div>";
						output = output + "<div class='showDiv' elName='zc-component' viewLinkName='Following_Accounts' params='" + viewParams + "'>Loading View...</div>";
					}
					if(Tasks[Followers == empRow.ID].count() > 0)
					{
						output = output + "<div class='heading'>Following Tasks</div>";
						output = output + "<div class='showDiv' elName='zc-component' viewLinkName='Following_Tasks' params='" + viewParams + "'>Loading View...</div>";
					}
					if(New_Case[Followers == empRow.ID].count() > 0)
					{
						output = output + "<div class='heading'>Following Case</div>";
						output = output + "<div class='showDiv' elName='zc-component' viewLinkName='Following_Cases' params='" + viewParams + "'>Loading View...</div>";
					}
					if(output == "" || output == null)
					{
						output = thisapp.feeds.getNoneFeeds();
					}
					else
					{
						startDiv = "<div class='mainDiv'>";
						startDiv = startDiv + "<div style='padding-left:18px;padding-right:18px;padding-top:15px;padding-bottom:20px;'>";
						startDiv = startDiv + "<div style='text-align:center;font-size:18px;font-weight:bold;color:#474747;'>" + empRow.First_Name + " " + empRow.Last_Name + "'s Feeds</div>";
						output = startDiv + output + "</div></div>";
					}
				}
				else
				{
					output = output + "<div style='background: #FAFAFA;box-shadow: 0 0 2px #AAA;margin: 0 auto;width: 400px;height: 50px;color: gray;font-size: 15px;text-align: center;padding: 10px 0px 0px 0px;margin-top: 20%;'>";
					output = output + "<font style='position:relative;top:10px;'>Sorry, your Email Id is not registered to access!</font>";
				}
				return output;
			}
 			string get_results.getAccountResults(int recId)
			{
				//Need to print Lead Name! and 
				output = "";
				accountRow = Accounts[ID == input.recId];
				if(accountRow.ID != null)
				{
					viewParams = "zc_SecHeader=false&zc_Header=false&zc_Summary=false&zc_Footer=false";
					formParams = "zc_LoadIn=dialog&zc_BdrClr=transparent&zc_Header=false";
					output = output + "<div class='mainDiv'>";
					output = output + "<div style='text-align:center;font-size:18px;font-weight:bold;color:#474747;padding-top:15px;'>" + accountRow.Account_Name + "'s Account</div>";
					//Account Row
					output = output + "<div class='viewDiv'>";
					output = output + "<div class='heading'>";
					output = output + "Account";
					output = output + "</div>";
					output = output + thisapp.get_results.getAccountSummary(accountRow);
					//output = ((((output + "<div class='showDiv' elName='zc-component' viewLinkName='Accounts_View_Details' params='") + viewParams) + "&ID=") + input.recId) + "'>Loading View...</div>";
					output = output + "</div>";
					//Contacts
					output = output + "<div class='viewDiv'>";
					output = output + "<div class='heading'>";
					output = output + "Contacts";
					output = output + "<a href='#Form:Contacts?" + formParams + "&Account=" + recId + "'><input type='button' class='addNew zc-formbutton' value='New Contact'></a>";
					output = output + "</div>";
					output = output + "<div class='showDiv' elName='zc-component' viewLinkName='Account_Contacts' params='" + viewParams + "&Account=" + accountRow.Account_Name + "'>Loading View...</div>";
					output = output + "</div>";
					//Cases
					output = output + "<div class='viewDiv'>";
					output = output + "<div class='heading'>";
					output = output + "Cases";
					output = output + "<a href='#Form:New_Case?" + formParams + "&Account=" + recId + "'><input type='button' class='addNew zc-formbutton' value='New Case'></a>";
					output = output + "</div>";
					output = output + "<div class='showDiv' elName='zc-component' viewLinkName='All_Cases' params='" + viewParams + "&Account=" + accountRow.Account_Name + "'>Loading View...</div>";
					output = output + "</div>";
					//Tasks
					output = output + "<div class='viewDiv' style='padding-bottom:30px;'>";
					output = output + "<div class='heading'>";
					output = output + "Tasks";
					output = output + "<a href='#Form:Tasks?" + formParams + "&Account=" + accountRow.Account_Name + "'><input type='button' class='addNew zc-formbutton' value='New Task'></a>";
					output = output + "</div>";
					output = output + "<div class='showDiv' elName='zc-component' viewLinkName='All_Tasks' params='" + viewParams + "'>Loading View...</div>";
					output = output + "</div>";
					output = output + "</div>";
				}
				else
				{
					output = output + thisapp.get_results.getInvalidResults();
				}
				return output;
			}
 			string get_results.getAccountSummary(Accounts accountRow)
			{
				output = "";
				output = output + "<table style='width:100%;'>";
				//Account View with Custom Action
				output = output + "<tr><td colspan='2'><div class='showDiv' elName='zc-component' viewLinkName='Accounts_View_Details' params='zc_SecHeader=false&zc_Header=false&zc_Summary=false&zc_Footer=false&ID=" + accountRow.ID + "'>Loading View...</div></td></tr>";
				//Billing And Shipping Address
				output = output + "<tr>";
				output = output + "<td style='vertical-align:top;'>";
				output = output + "<table cellspacing='0' cellpadding='3' class='zc-viewtable dataTable'> <tr class='zc-row-header'>";
				output = output + "<th class='zc-viewrowheader'>Billing Street</th>";
				output = output + "<th class='zc-viewrowheader'>Billing City</th>";
				output = output + "<th class='zc-viewrowheader'>Billing State</th>";
				output = output + "<th class='zc-viewrowheader'>Billing Zip</th>";
				output = output + "<th class='zc-viewrowheader'>Billing Country</th>";
				output = output + "<th class='zc-viewrowheader'>Shipping Street</th>";
				output = output + "<th class='zc-viewrowheader'>Shipping City</th>";
				output = output + "<th class='zc-viewrowheader'>Shipping State</th>";
				output = output + "<th class='zc-viewrowheader'>Shipping Zip</th>";
				output = output + "<th class='zc-viewrowheader'>Shipping Country</th>";
				output = output + "</tr>";
				output = output + "<tr class='zc-viewrow zc-row-1'>";
				output = output + "<td>" + accountRow.Billing_Street + "</td>";
				output = output + "<td>" + accountRow.Billing_City + "</td>";
				output = output + "<td>" + accountRow.Billing_State + "</td>";
				output = output + "<td>" + accountRow.Billing_Zip + "</td>";
				output = output + "<td>" + accountRow.Billing_Country + "</td>";
				output = output + "<td>" + accountRow.Shipping_Street + "</td>";
				output = output + "<td>" + accountRow.Shipping_City + "</td>";
				output = output + "<td>" + accountRow.Shipping_State + "</td>";
				output = output + "<td>" + accountRow.Shipping_Zip + "</td>";
				output = output + "<td>" + accountRow.Shipping_Country + "</td>";
				output = output + "</tr>";
				output = output + "</table>";
				output = output + "</td></tr></table>";
				return output;
			}
 			string get_results.getLeadResults(int recId)
			{
				output = "";
				leadRow = Leads[ID == input.recId];
				if(leadRow.ID != null)
				{
					viewParams = "zc_SecHeader=false&zc_Header=false&zc_Summary=false&zc_Footer=false";
					formParams = "zc_LoadIn=dialog&zc_BdrClr=transparent&zc_Header=false";
					output = output + "<div class='mainDiv'>";
					//Contacts
					output = output + "<div style='text-align:center;font-size:18px;font-weight:bold;color:#474747;padding-top:15px;'>" + leadRow.Company_Name + "'s Lead</div>";
					//Lead Row
					output = output + "<div class='viewDiv'>";
					output = output + "<div class='heading'>";
					output = output + "Lead";
					output = output + "</div>";
					output = output + "<div class='showDiv' elName='zc-component' viewLinkName='Leads_View_Details' params='" + viewParams + "&ID=" + recId + "'>Loading View...</div>";
					output = output + "</div>";
					//Contacts
					leadName = Leads[ID == input.recId].Company_Name;
					output = output + "<div class='viewDiv'>";
					output = output + "<div class='heading'>";
					output = output + "Contacts";
					output = output + "<a href='#Form:Contacts?" + formParams + "&Lead=" + recId + "'><input type='button' class='addNew zc-formbutton' value='New Contact'></a>";
					output = output + "</div>";
					output = output + "<div class='showDiv' elName='zc-component' viewLinkName='Lead_Contacts' params='" + viewParams + "&Lead=" + leadName + "'>Loading View...</div>";
					output = output + "</div>";
					//All Tasks
					output = output + "<div class='viewDiv' style='padding-bottom:25px;'>";
					output = output + "<div class='heading'>";
					output = output + "Tasks";
					output = output + "<a href='#Form:Tasks?" + formParams + "&Lead=" + recId + "'><input type='button' class='addNew zc-formbutton' value='New Task'></a>";
					output = output + "</div>";
					output = output + "<div class='showDiv' elName='zc-component' viewLinkName='All_Tasks' params='" + viewParams + "&Lead=" + leadName + "'>Loading View...</div>";
					output = output + "</div>";
				}
				else
				{
					output = output + thisapp.get_results.getInvalidResults();
				}
				return output;
			}
	}



	workflow
	{
		form
		{
			Create_record_scripts9 as "Create record scripts"
			{
				type =  form
				form = Leads
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Add_Contact;
										hide Account;
										hide Followers;
										empRow = Sales_Reps[Email == zoho.loginuserid];
										if(empRow.ID != null)
										{
											input.Lead_Owner = empRow.ID;
										}
						)
					}
	}

			}
			Create_record_scripts10 as "Create record scripts"
			{
				type =  form
				form = Leads
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											if(input.Email != "" && input.Email != null)
										{
											insert into Contacts
											[
												Lead=input.ID
												Primary_Contact=true
												First_Name=input.First_Name
												Last_Name=input.Last_Name
												Email=input.Email
												Gender=input.Gender
												Phone=input.Phone
												Street=input.Street
												City=input.City
												State=input.State
												Zip=input.Zip
												Country=input.Country
												Description=input.Description
												Added_User=zoho.loginuser
											]
										}
						)
					}
	}

			}
			Edit_record_scripts3 as "Edit record scripts"
			{
				type =  form
				form = Leads
				record event = on edit

	on success
	{
					actions 
					{
						custom deluge script
						(
											for each  contactRow in Contacts[Lead == input.ID]
										{
											contactRow.Primary_Contact=false;
										}
										contactRow = Contacts[Lead == input.ID && Email == input.Email];
										if(contactRow.ID != null)
										{
											contactRow.Primary_Contact=true;
											contactRow.First_Name=input.First_Name;
											contactRow.Last_Name=input.Last_Name;
											contactRow.Email=input.Email;
											contactRow.Gender=input.Gender;
											contactRow.Phone=input.Phone;
											contactRow.Street=input.Street;
											contactRow.City=input.City;
											contactRow.State=input.State;
											contactRow.Zip=input.Zip;
											contactRow.Country=input.Country;
										}
										else
										{
											insert into Contacts
											[
												Lead=input.ID
												Primary_Contact=true
												First_Name=input.First_Name
												Last_Name=input.Last_Name
												Email=input.Email
												Gender=input.Gender
												Phone=input.Phone
												Street=input.Street
												City=input.City
												State=input.State
												Zip=input.Zip
												Country=input.Country
												Description=input.Description
												Added_User=zoho.loginuser
											]
										}
						)
					}
	}

			}
			Create_record_scripts11 as "Create record scripts"
			{
				type =  form
				form = Contacts
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Account;
										hide Lead;
										if(input.Lead != null)
										{
											show Lead;
											disable Lead;
										}
										else if(input.Account != null)
										{
											show Account;
											disable Account;
										}
						)
					}
	}

			}
			Create_record_scripts12 as "Create record scripts"
			{
				type =  form
				form = Contacts
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											if(input.Lead != null)
										{
											openUrl("#Page:View_Details?Type=Leads&RecId=" + input.Lead,"Same Window");
										}
										if(input.Account != null)
										{
											openUrl("#Page:View_Details?Type=Accounts&RecId=" + input.Account,"Same Window");
										}
						)
					}
	}

			}
			Create_record_scripts13 as "Create record scripts"
			{
				type =  form
				form = Accounts
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Followers;
										hide Add_Contact;
										empRow = Sales_Reps[Email == zoho.loginuserid];
										if(empRow.ID != null)
										{
											input.Account_Owner = empRow.ID;
										}
										if(input.Lead != null)
										{
											disable Lead;
											leadRow = Leads[ID == input.Lead];
											input.First_Name = leadRow.First_Name;
											input.Last_Name = leadRow.Last_Name;
											input.Email = leadRow.Email;
											input.Phone = leadRow.Phone;
											input.Gender = leadRow.Gender;
											input.Billing_Street = leadRow.Street;
											input.Billing_City = leadRow.City;
											input.Billing_State = leadRow.State;
											input.Billing_Zip = leadRow.Zip;
											input.Billing_Country = leadRow.Country;
											input.Description = leadRow.Description;
										}
						)
					}
	}

			}
			Create_record_scripts14 as "Create record scripts"
			{
				type =  form
				form = Accounts
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											if(input.Lead != null)
										{
											for each  contactRow in Contacts[Lead == input.Lead]
											{
												contactRow.Account=input.ID;
												contactRow.Primary_Contact=false;
											}
										}
										insert into Contacts
										[
											Account=input.ID
											Added_User=zoho.loginuser
											City=input.Billing_City
											Country=input.Billing_Country
											Description=input.Description
											Email=input.Email
											First_Name=input.First_Name
											Gender=input.Gender
											Last_Name=input.Last_Name
											Phone=input.Phone
											Primary_Contact=true
											State=input.Billing_State
											Street=input.Billing_Street
											Zip=input.Billing_Zip
										]
						)
					}
	}

			}
			Edit_record_scripts4 as "Edit record scripts"
			{
				type =  form
				form = Accounts
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Followers;
										hide Add_Contact.Lead;
						)
					}
	}

			}
			Edit_record_scripts5 as "Edit record scripts"
			{
				type =  form
				form = Accounts
				record event = on edit

	on success
	{
					actions 
					{
						custom deluge script
						(
											for each  contactRow in Contacts[Lead == input.Lead]
										{
											contactRow.Account=input.ID;
											contactRow.Primary_Contact=false;
										}
										contactRow = Contacts[Lead == input.ID && Email == input.Email];
										if(contactRow.ID != null)
										{
											contactRow.Primary_Contact=true;
											contactRow.First_Name=input.First_Name;
											contactRow.Last_Name=input.Last_Name;
											contactRow.Email=input.Email;
											contactRow.Gender=input.Gender;
											contactRow.Phone=input.Phone;
											contactRow.Street=input.Billing_Street;
											contactRow.City=input.Billing_City;
											contactRow.State=input.Billing_State;
											contactRow.Zip=input.Billing_Zip;
											contactRow.Country=input.Billing_Country;
										}
										else
										{
											insert into Contacts
											[
												Account=input.ID
												Primary_Contact=true
												First_Name=input.First_Name
												Last_Name=input.Last_Name
												Email=input.Email
												Gender=input.Gender
												Phone=input.Phone
												Street=input.Billing_Street
												City=input.Billing_City
												State=input.Billing_State
												Zip=input.Billing_Zip
												Country=input.Billing_Country
												Description=input.Description
												Added_User=zoho.loginuser
											]
										}
						)
					}
	}

			}
			Field_scripts4 as "Field scripts"
			{
				type =  form
				form = Accounts
				record event = on add or edit

	on user input of Lead
	{
					actions 
					{
						custom deluge script
						(
											if(input.Lead != null)
										{
											leadRow = Leads[ID == input.Lead];
											input.First_Name = leadRow.First_Name;
											input.Last_Name = leadRow.Last_Name;
											input.Email = leadRow.Email;
											input.Phone = leadRow.Phone;
											input.Gender = leadRow.Gender;
											input.Billing_Street = leadRow.Street;
											input.Billing_City = leadRow.City;
											input.Billing_State = leadRow.State;
											input.Billing_Zip = leadRow.Zip;
											input.Billing_Country = leadRow.Country;
											input.Description = leadRow.Description;
										}
						)
					}
	}

			}
			Create_record_scripts15 as "Create record scripts"
			{
				type =  form
				form = Tasks
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Followers;
										hide Due_Date;
										if(input.Lead != null)
										{
											hide Account;
											show Lead;
											disable Lead;
										}
										if(input.Account != null && input.Account != "-Select-" && input.Account != "")
										{
											hide Lead;
											show Account;
											disable Account;
										}
										input.Due_Date = zoho.currenttime;
										input.Task_Owner = Sales_Reps[Email == zoho.loginuserid].ID;
						)
					}
	}

			}
			Create_record_scripts16 as "Create record scripts"
			{
				type =  form
				form = Tasks
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											if(input.Lead != null)
										{
											openUrl("#Page:View_Details?Type=Leads&RecId=" + input.Lead,"Same Window");
										}
										if(input.Account != null && input.Account != "-Select-")
										{
											openUrl("#Page:View_Details?Type=Accounts&RecId=" + input.Account.ID,"Same Window");
										}
						)
					}
	}

			}
			Create_record_scripts17 as "Create record scripts"
			{
				type =  form
				form = Alert_Message
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Type;
										if(input.Type == "Sales_Reps")
										{
											input.Alert_Msg = "Your Email Id is not registered in Sales Reps Form!";
										}
										else if(input.Type == "Account_Convert")
										{
											input.Alert_Msg = "Lead already converted as Account!";
										}
						)
					}
	}

			}
			Create_record_scripts18 as "Create record scripts"
			{
				type =  form
				form = New_Case
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Followers;
										hide Due_Date;
										if(input.Account != null)
										{
											disable Account;
										}
										input.Due_Date = zoho.currenttime;
										input.Case_Owner = Sales_Reps[Email == zoho.loginuserid].ID;
						)
					}
	}

			}
			Create_record_scripts19 as "Create record scripts"
			{
				type =  form
				form = New_Case
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											openUrl("#Page:View_Details?Type=Accounts&RecId=" + input.Account,"Same Window");
						)
					}
	}

			}
			Create_record_scripts20 as "Create record scripts"
			{
				type =  form
				form = Add_Brief_Forecast
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											disable Brief_Total;
										disable Brief_Achieved_Total;
										hide Forecast_ID1;
										//Berif Targets
										hide Targets.Year;
										hide Targets.Quarter;
										hide Targets.Week;
										hide Targets.Day;
										hide Targets.Date_field;
										//Periods
										hide Quarter;
										hide Quarter_Font;
										hide Month;
										hide Week;
										input.Year = zoho.currentdate.getYear().toString();
						)
					}
	}

			}
			Create_record_scripts21 as "Create record scripts"
			{
				type =  form
				form = Add_Brief_Forecast
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											isProceed = true;
										if(input.Period_Type == "Week" && input.Month == null || input.Week == null)
										{
											isProceed = false;
										}
										else if(input.Period_Type == "Month" && input.Month == null)
										{
											isProceed = false;
										}
										else if(input.Period_Type == "Week" && input.Quarter == null)
										{
											isProceed = false;
										}
										if(!isProceed)
										{
											alert "Please fill your period details with out fail!";
											cancel submit;
										}
						)
					}
	}

			}
			Create_record_scripts22 as "Create record scripts"
			{
				type =  form
				form = Add_Brief_Forecast
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											if(input.Period_Type == "Month" || input.Period_Type == "Week")
										{
											dateVal = "1-" + input.Month + "-" + input.Year;
											for each  targetRow in input.Targets
											{
												targetRow.Date_field=dateVal.toDate();
											}
										}
										else if(input.Period_Type == "Quarter" || input.Period_Type == "Year")
										{
											for each  targetRow in input.Targets
											{
												dateVal = "1-" + targetRow.Month + "-" + input.Year;
												targetRow.Date_field=dateVal.toDate();
											}
										}
										input.Forecast_ID1 = "BF" + input.Forecast_Id;
						)
					}
	}

			}
			Field_scripts5 as "Field scripts"
			{
				type =  form
				form = Add_Brief_Forecast
				record event = on add or edit

	on user input of Quarter
	{
					actions 
					{
						custom deluge script
						(
											if(input.Quarter == "1")
										{
											input.Quarter_Font = "<font style='font-size:large;color:blue'>Quarter1</font>";
										}
										else if(input.Quarter == "2")
										{
											input.Quarter_Font = "<font style='font-size:large;color:blue'>Quarter2</font>";
										}
										else if(input.Quarter == "3")
										{
											input.Quarter_Font = "<font style='font-size:large;color:blue'>Quarter3</font>";
										}
										else if(input.Quarter == "4")
										{
											input.Quarter_Font = "<font style='font-size:large;color:blue'>Quarter4</font>";
										}
						)
					}
	}

			}
			Field_scripts6 as "Field scripts"
			{
				type =  form
				form = Add_Brief_Forecast
				record event = on add or edit

	on user input of Targets.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.Targets
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.Brief_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts7 as "Field scripts"
			{
				type =  form
				form = Add_Brief_Forecast
				record event = on add or edit

	on user input of Targets.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											achievedTotal = 0.0;
										for each  targetRow in input.Targets
										{
											if(targetRow.Achieved_Amount != null)
											{
												achievedTotal = achievedTotal + targetRow.Achieved_Amount;
											}
										}
										input.Brief_Achieved_Total = achievedTotal;
						)
					}
	}

			}
			Field_scripts8 as "Field scripts"
			{
				type =  form
				form = Add_Brief_Forecast
				record event = on add or edit

	on user input of Period_Type
	{
					actions 
					{
						custom deluge script
						(
											if(input.Period_Type != "" && input.Period_Type != null)
										{
											//Berif Targets
											hide Targets.Year;
											hide Targets.Quarter;
											hide Targets.Month;
											hide Targets.Week;
											hide Targets.Day;
											hide Targets.Date_field;
											//Periods
											hide Quarter;
											hide Quarter_Font;
											hide Month;
											hide Week;
											input.Year = zoho.currentdate.getYear().toString();
											if(input.Period_Type == "Week")
											{
												show Month;
												show Week;
												show Targets.Date_field;
												show Targets.Day;
											}
											else if(input.Period_Type == "Month")
											{
												show Month;
												show Targets.Week;
											}
											else if(input.Period_Type == "Quarter")
											{
												show Quarter;
												show Targets.Month;
												show Quarter_Font;
												input.Quarter = "1";
											}
											else
											{
												show Targets.Month;
											}
										}
						)
					}
	}

			}
			Create_record_scripts23 as "Create record scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											//Forecast Period
										hide Week;
										hide Month;
										hide Quarter;
										//Sunday Targets
										hide Sunday_Target;
										hide Sunday_Total;
										hide Sunday_Achieved_Total;
										//Monday Targets
										hide Monday_Target;
										hide Monday_Total;
										hide Monday_Achieved_Total;
										//Tuesday Targets
										hide Tuesday_Target;
										hide Tuesday_Total;
										hide Tuesday_Achieved_Total;
										//Wednesday Targets
										hide Wednesday_Target;
										hide Wednesday_Total;
										hide Wednesday_Achieved_Total;
										//Thursday Targets
										hide Thursday_Target;
										hide Thursday_Total;
										hide Thursday_Achieved_Total;
										//Friday Targets
										hide Friday_Target;
										hide Friday_Total;
										hide Friday_Achieved_Total;
										//Saturday Targets
										hide Saturday_Target;
										hide Saturday_Total;
										hide Saturday_Achieved_Total;
										//Week1 Targets
										hide Week1_Target;
										hide Week1_Total;
										hide Week1_Achieved_Total;
										//Week2 Targets
										hide Week2_Target;
										hide Week2_Total;
										hide Week2_Achieved_Total;
										//Week3 Targets
										hide Week3_Target;
										hide Week3_Total;
										hide Week3_Achieved_Total;
										//Week4 Targets
										hide Week4_Target;
										hide Week4_Total;
										hide Week4_Achieved_Total;
										//Week5 Targets
										hide Week5_Target;
										hide Week5_Total;
										hide Week5_Achieved_Total;
										//Month Totals
										disable January_Total;
										disable January_Achieved_Total;
										disable February_Total;
										disable February_Achieved_Total;
										disable March_Total;
										disable March_Achieved_Total;
										disable April_Total;
										disable April_Achieved_Total;
										disable May_Total;
										disable May_Achieved_Total;
										disable June_Total;
										disable June_Achieved_Total;
										disable July_Total;
										disable July_Achieved_Total;
										disable August_Total;
										disable August_Achieved_Total;
										disable September_Total;
										disable September_Achieved_Total;
										disable October_Total;
										disable October_Achieved_Total;
										disable November_Total;
										disable November_Achieved_Total;
										disable December_Total;
										disable December_Achieved_Total;
										//Date Field for months
										hide January_Target.Date_field;
										hide February_Target.Date_field;
										hide March_Target.Date_field;
										hide April_Target.Date_field;
										hide May_Target.Date_field;
										hide June_Target.Date_field;
										hide July_Target.Date_field;
										hide August_Target.Date_field;
										hide September_Target.Date_field;
										hide October_Target.Date_field;
										hide November_Target.Date_field;
										hide December_Target.Date_field;
										input.Year = (zoho.currentdate.getYear() + 1).toString();
						)
					}
	}

			}
			Create_record_scripts24 as "Create record scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											isProceed = true;
										if(input.Period_Type == "Week" && input.Month == null || input.Week == null)
										{
											isProceed = false;
										}
										else if(input.Period_Type == "Month" && input.Month == null)
										{
											isProceed = false;
										}
										else if(input.Period_Type == "Quarter" && input.Quarter == null)
										{
											isProceed = false;
										}
										if(!isProceed)
										{
											alert "Please fill your period details with out fail!";
											cancel submit;
										}
						)
					}
	}

			}
			Create_record_scripts25 as "Create record scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											if(input.Period_Type == "Week")
										{
											dateVal = "1-" + input.Month + "-" + input.Year;
											recId = insert into Add_Brief_Forecast
										[
											Added_User=zoho.loginuser
											Agent=input.Agent
											Forecast_ID1="DT" + input.Forecast_Id
											Month=input.Month
											Period_Type=input.Period_Type
											Team=input.Team
											Week=input.Week
											Year=input.Year
										];
											isEach1 = false;
											isEach2 = false;
											isEach3 = false;
											isEach4 = false;
											isEach5 = false;
											isEach6 = false;
											isEach7 = false;
											for each  recRow in input.Monday_Target
											{
												isEach1 = true;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach1)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.Monday_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.Monday_Total
													Date_field=dateVal.toDate()
													Day="Monday"
													Forecast_Id=recId
												]
											}
											for each  recRow in input.Tuesday_Target
											{
												isEach2 = true;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach2)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.Tuesday_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.Tuesday_Total
													Date_field=dateVal.toDate()
													Day="Tuesday"
													Forecast_Id=recId
												]
											}
											for each  recRow in input.Wednesday_Target
											{
												isEach3 = true;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach3)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.Wednesday_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.Wednesday_Total
													Date_field=dateVal.toDate()
													Day="Wednesday"
													Forecast_Id=recId
												]
											}
											for each  recRow in input.Thursday_Target
											{
												isEach4 = true;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach4)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.Thursday_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.Thursday_Total
													Date_field=dateVal.toDate()
													Day="Thursday"
													Forecast_Id=recId
												]
											}
											for each  recRow in input.Friday_Target
											{
												isEach5 = true;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach5)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.Friday_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.Friday_Total
													Date_field=dateVal.toDate()
													Day="Friday"
													Forecast_Id=recId
												]
											}
											for each  recRow in input.Saturday_Target
											{
												isEach6 = true;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach6)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.Saturday_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.Saturday_Total
													Date_field=dateVal.toDate()
													Day="Saturday"
													Forecast_Id=recId
												]
											}
											for each  recRow in input.Sunday_Target
											{
												isEach7 = true;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach7)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.Sunday_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.Sunday_Total
													Date_field=dateVal.toDate()
													Day="Sunday"
													Forecast_Id=recId
												]
											}
										}
										else if(input.Period_Type == "Month")
										{
											recId = insert into Add_Brief_Forecast
										[
											Added_User=zoho.loginuser
											Agent=input.Agent
											Forecast_ID1="DT" + input.Forecast_Id
											Month=input.Month
											Period_Type=input.Period_Type
											Team=input.Team
											Year=input.Year
										];
											dateVal = "1-" + input.Month + "-" + input.Year;
											isEach1 = false;
											isEach2 = false;
											isEach3 = false;
											isEach4 = false;
											isEach5 = false;
											for each  recRow in input.Week1_Target
											{
												isEach1 = true;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach1)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.Week1_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.Week1_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Week="Week1"
												]
											}
											for each  recRow in input.Week2_Target
											{
												isEach2 = true;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach2)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.Week2_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.Week2_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Week="Week2"
												]
											}
											for each  recRow in input.Week3_Target
											{
												isEach3 = true;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach3)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.Week3_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.Week3_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Week="Week3"
												]
											}
											for each  recRow in input.Week4_Target
											{
												isEach4 = true;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach4)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.Week4_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.Week4_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Week="Week4"
												]
											}
											for each  recRow in input.Week5_Target
											{
												isEach5 = true;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach5)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.Week5_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.Week5_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Week="Week5"
												]
											}
										}
										else
										{
											isEach1 = false;
											isEach2 = false;
											isEach3 = false;
											isEach4 = false;
											isEach5 = false;
											isEach6 = false;
											isEach7 = false;
											isEach8 = false;
											isEach9 = false;
											isEach10 = false;
											isEach11 = false;
											isEach12 = false;
											recId = insert into Add_Brief_Forecast
										[
											Added_User=zoho.loginuser
											Agent=input.Agent
											Forecast_ID1="DT" + input.Forecast_Id
											Period_Type=input.Period_Type
											Team=input.Team
											Year=input.Year
										];
											for each  recRow in input.January_Target
											{
												isEach1 = true;
												dateVal = "1-Jan-" + input.Year;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach1)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.January_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.January_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Month="January"
												]
											}
											for each  recRow in input.February_Target
											{
												isEach2 = true;
												dateVal = "1-Feb-" + input.Year;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach2)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.February_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.February_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Month="February"
												]
											}
											for each  recRow in input.March_Target
											{
												dateVal = "1-Mar-" + input.Year;
												isEach3 = true;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach3)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.March_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.March_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Month="March"
												]
											}
											for each  recRow in input.April_Target
											{
												isEach4 = true;
												dateVal = "1-Apr-" + input.Year;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach4)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.April_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.April_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Month="April"
												]
											}
											for each  recRow in input.May_Target
											{
												isEach5 = true;
												dateVal = "1-May-" + input.Year;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach5)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.May_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.May_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Month="May"
												]
											}
											for each  recRow in input.June_Target
											{
												isEach6 = true;
												dateVal = "1-Jun-" + input.Year;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach6)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.June_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.June_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Month="June"
												]
											}
											for each  recRow in input.July_Target
											{
												isEach7 = true;
												dateVal = "1-Jul-" + input.Year;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach7)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.July_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.July_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Month="July"
												]
											}
											for each  recRow in input.August_Target
											{
												isEach8 = true;
												dateVal = "1-Aug-" + input.Year;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach8)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.August_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.August_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Month="August"
												]
											}
											for each  recRow in input.September_Target
											{
												isEach9 = true;
												dateVal = "1-Sep-" + input.Year;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach9)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.September_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.September_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Month="September"
												]
											}
											for each  recRow in input.October_Target
											{
												isEach10 = true;
												dateVal = "1-Oct-" + input.Year;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach10)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.October_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.October_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Month="October"
												]
											}
											for each  recRow in input.November_Target
											{
												isEach11 = true;
												dateVal = "1-Nov-" + input.Year;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach11)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.November_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.November_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Month="November"
												]
											}
											for each  recRow in input.December_Target
											{
												dateVal = "1-Dec-" + input.Year;
												isEach12 = true;
												recRow.Date_field=dateVal.toDate();
											}
											if(isEach12)
											{
												insert into Brief_Targets
												[
													Achieved_Amount=input.December_Achieved_Total
													Added_User=zoho.loginuser
													Committed_Amount=input.December_Total
													Date_field=dateVal.toDate()
													Forecast_Id=recId
													Month="December"
												]
											}
										}
						)
					}
	}

			}
			Field_scripts9 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Week5_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.Week5_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.Week5_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts10 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Week5_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.Week5_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.Week5_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts11 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Period_Type
	{
					actions 
					{
						custom deluge script
						(
											//Forecast Fields
										hide Week;
										hide Month;
										hide Quarter;
										//Sunday
										hide Sunday_Target;
										hide Sunday_Total;
										hide Sunday_Achieved_Total;
										//Monday
										hide Monday_Target;
										hide Monday_Total;
										hide Monday_Achieved_Total;
										//Tuesday
										hide Tuesday_Target;
										hide Tuesday_Total;
										hide Tuesday_Achieved_Total;
										//Wednesday
										hide Wednesday_Target;
										hide Wednesday_Total;
										hide Wednesday_Achieved_Total;
										//Thursday
										hide Thursday_Target;
										hide Thursday_Total;
										hide Thursday_Achieved_Total;
										//Friday
										hide Friday_Target;
										hide Friday_Total;
										hide Friday_Achieved_Total;
										//Saturday
										hide Saturday_Target;
										hide Saturday_Total;
										hide Saturday_Achieved_Total;
										//Week1
										hide Week1_Target;
										hide Week1_Total;
										hide Week1_Achieved_Total;
										//Week2
										hide Week2_Target;
										hide Week2_Total;
										hide Week2_Achieved_Total;
										//Week3
										hide Week3_Target;
										hide Week3_Total;
										hide Week3_Achieved_Total;
										//Week4
										hide Week4_Target;
										hide Week4_Total;
										hide Week4_Achieved_Total;
										//Week5
										hide Week5_Target;
										hide Week5_Total;
										hide Week5_Achieved_Total;
										//January
										hide January_Target;
										hide January_Total;
										hide January_Achieved_Total;
										//February
										hide February_Target;
										hide February_Total;
										hide February_Achieved_Total;
										//March
										hide March_Target;
										hide March_Total;
										hide March_Achieved_Total;
										//April
										hide April_Target;
										hide April_Total;
										hide April_Achieved_Total;
										//May
										hide May_Target;
										hide May_Total;
										hide May_Achieved_Total;
										//June
										hide June_Target;
										hide June_Total;
										hide June_Achieved_Total;
										//July
										hide July_Target;
										hide July_Total;
										hide July_Achieved_Total;
										//August
										hide August_Target;
										hide August_Total;
										hide August_Achieved_Total;
										//September
										hide September_Target;
										hide September_Total;
										hide September_Achieved_Total;
										//October
										hide October_Target;
										hide October_Total;
										hide October_Achieved_Total;
										//Novermber
										hide November_Target;
										hide November_Total;
										hide November_Achieved_Total;
										//December
										hide December_Target;
										hide December_Total;
										hide December_Achieved_Total;
										if(input.Period_Type != "" && input.Period_Type != null)
										{
											if(input.Period_Type == "Week")
											{
												show Month;
												show Week;
												//Sunday
												show Sunday_Target;
												hide Sunday_Target.Date_field;
												show Sunday_Total;
												show Sunday_Achieved_Total;
												disable Sunday_Total;
												disable Sunday_Achieved_Total;
												//Monday
												show Monday_Target;
												hide Monday_Target.Date_field;
												show Monday_Total;
												show Monday_Achieved_Total;
												disable Monday_Total;
												disable Monday_Achieved_Total;
												//Tuesday
												show Tuesday_Target;
												hide Tuesday_Target.Date_field;
												show Tuesday_Total;
												show Tuesday_Achieved_Total;
												disable Tuesday_Total;
												disable Tuesday_Achieved_Total;
												//Wednesday
												show Wednesday_Target;
												hide Wednesday_Target.Date_field;
												show Wednesday_Total;
												show Wednesday_Achieved_Total;
												disable Wednesday_Total;
												disable Wednesday_Achieved_Total;
												//Thursday
												show Thursday_Target;
												hide Thursday_Target.Date_field;
												show Thursday_Total;
												show Thursday_Achieved_Total;
												disable Thursday_Total;
												disable Thursday_Achieved_Total;
												//Friday
												show Friday_Target;
												hide Friday_Target.Date_field;
												show Friday_Total;
												show Friday_Achieved_Total;
												disable Friday_Total;
												disable Friday_Achieved_Total;
												//Saturday
												show Saturday_Target;
												hide Saturday_Target.Date_field;
												show Saturday_Total;
												show Saturday_Achieved_Total;
												disable Saturday_Total;
												disable Saturday_Achieved_Total;
											}
											else if(input.Period_Type == "Month")
											{
												show Month;
												//Week1
												show Week1_Target;
												hide Week1_Target.Date_field;
												show Week1_Total;
												show Week1_Achieved_Total;
												disable Week1_Total;
												disable Week1_Achieved_Total;
												//Week2
												show Week2_Target;
												hide Week2_Target.Date_field;
												show Week2_Total;
												show Week2_Achieved_Total;
												disable Week2_Total;
												disable Week2_Achieved_Total;
												//Week3
												show Week3_Target;
												hide Week3_Target.Date_field;
												show Week3_Total;
												show Week3_Achieved_Total;
												disable Week2_Total;
												disable Week2_Achieved_Total;
												//Week4
												show Week4_Target;
												hide Week4_Target.Date_field;
												show Week4_Total;
												show Week4_Achieved_Total;
												disable Week2_Total;
												disable Week2_Achieved_Total;
												//Week5
												show Week5_Target;
												hide Week5_Target.Date_field;
												show Week5_Total;
												show Week5_Achieved_Total;
												disable Week5_Total;
												disable Week5_Achieved_Total;
											}
											else
											{
												if(input.Period_Type == "Quarter")
												{
													show Quarter;
												}
												if(input.Period_Type == "Year" || input.Quarter == "1")
												{
													//January
													show January_Target;
													hide January_Target.Date_field;
													show January_Total;
													show January_Achieved_Total;
													disable January_Total;
													disable January_Achieved_Total;
													//February
													show February_Target;
													hide February_Target.Date_field;
													show February_Total;
													show February_Achieved_Total;
													disable February_Total;
													disable February_Achieved_Total;
													//March
													show March_Target;
													hide March_Target.Date_field;
													show March_Total;
													show March_Achieved_Total;
													disable March_Total;
													disable March_Achieved_Total;
												}
												if(input.Period_Type == "Year" || input.Quarter == "2")
												{
													//April
													show April_Target;
													hide April_Target.Date_field;
													show April_Total;
													show April_Achieved_Total;
													disable April_Total;
													disable April_Achieved_Total;
													//May
													show May_Target;
													hide May_Target.Date_field;
													show May_Total;
													show May_Achieved_Total;
													disable May_Total;
													disable May_Achieved_Total;
													//June
													show June_Target;
													hide June_Target.Date_field;
													show June_Total;
													show June_Achieved_Total;
													disable June_Total;
													disable June_Achieved_Total;
												}
												if(input.Period_Type == "Year" || input.Quarter == "3")
												{
													//July
													show July_Target;
													hide July_Target.Date_field;
													show July_Total;
													show July_Achieved_Total;
													disable July_Total;
													disable July_Achieved_Total;
													//August
													show August_Target;
													hide August_Target.Date_field;
													show August_Total;
													show August_Achieved_Total;
													disable August_Total;
													disable August_Achieved_Total;
													//September
													show September_Target;
													hide September_Target.Date_field;
													show September_Total;
													show September_Achieved_Total;
													disable September_Total;
													disable September_Achieved_Total;
												}
												if(input.Period_Type == "Year" || input.Quarter == "4")
												{
													//October
													show October_Target;
													hide October_Target.Date_field;
													show October_Total;
													show October_Achieved_Total;
													disable October_Total;
													disable October_Achieved_Total;
													//November
													show November_Target;
													hide November_Target.Date_field;
													show November_Total;
													show November_Achieved_Total;
													disable November_Total;
													disable November_Achieved_Total;
													//December
													show December_Target;
													hide December_Target.Date_field;
													show December_Total;
													show December_Achieved_Total;
													disable December_Total;
													disable December_Achieved_Total;
												}
											}
										}
						)
					}
	}

			}
			Field_scripts12 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of January_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.January_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.January_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts13 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Quarter
	{
					actions 
					{
						custom deluge script
						(
											//January
										hide January_Target;
										hide January_Total;
										hide January_Achieved_Total;
										//February
										hide February_Target;
										hide February_Total;
										hide February_Achieved_Total;
										//March
										hide March_Target;
										hide March_Total;
										hide March_Achieved_Total;
										//April
										hide April_Target;
										hide April_Total;
										hide April_Achieved_Total;
										//May
										hide May_Target;
										hide May_Total;
										hide May_Achieved_Total;
										//June
										hide June_Target;
										hide June_Total;
										hide June_Achieved_Total;
										//July
										hide July_Target;
										hide July_Total;
										hide July_Achieved_Total;
										//August
										hide August_Target;
										hide August_Total;
										hide August_Achieved_Total;
										//September
										hide September_Target;
										hide September_Total;
										hide September_Achieved_Total;
										//October
										hide October_Target;
										hide October_Total;
										hide October_Achieved_Total;
										//Novermber
										hide November_Target;
										hide November_Total;
										hide November_Achieved_Total;
										//December
										hide December_Target;
										hide December_Total;
										hide December_Achieved_Total;
										if(input.Quarter == "1")
										{
											//January
											show January_Target;
											show January_Total;
											show January_Achieved_Total;
											//February
											show February_Target;
											show February_Total;
											show February_Achieved_Total;
											//March
											show March_Target;
											show March_Total;
											show March_Achieved_Total;
										}
										if(input.Quarter == "2")
										{
											//April
											show April_Target;
											show April_Total;
											show April_Achieved_Total;
											//May
											show May_Target;
											show May_Total;
											show May_Achieved_Total;
											//June
											show June_Target;
											show June_Total;
											show June_Achieved_Total;
										}
										if(input.Quarter == "3")
										{
											//July
											show July_Target;
											show July_Total;
											show July_Achieved_Total;
											//August
											show August_Target;
											show August_Total;
											show August_Achieved_Total;
											//September
											show September_Target;
											show September_Total;
											show September_Achieved_Total;
										}
										if(input.Quarter == "4")
										{
											//October
											show October_Target;
											show October_Total;
											show October_Achieved_Total;
											//November
											show November_Target;
											show November_Total;
											show November_Achieved_Total;
											//December
											show December_Target;
											show December_Total;
											show December_Achieved_Total;
										}
						)
					}
	}

			}
			Field_scripts14 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of January_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.January_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.January_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts15 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Week4_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.Week4_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.Week4_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts16 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Week4_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.Week4_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.Week4_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts17 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Tuesday_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.Tuesday_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.Tuesday_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts18 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Tuesday_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.Tuesday_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.Tuesday_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts19 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Week3_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.Week3_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.Week3_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts20 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Week3_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.Week3_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.Week3_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts21 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Week2_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.Week2_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.Week2_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts22 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Week2_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.Week2_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.Week2_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts23 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of March_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.March_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.March_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts24 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of November_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.November_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.November_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts25 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of March_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.March_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.March_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts26 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of November_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.November_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.November_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts27 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Thursday_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.Thursday_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.Thursday_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts28 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Thursday_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.Thursday_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.Thursday_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts29 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Sunday_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.Sunday_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.Sunday_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts30 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Sunday_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.Sunday_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.Sunday_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts31 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Monday_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.Monday_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.Monday_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts32 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Monday_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.Monday_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.Monday_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts33 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of August_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.August_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.August_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts34 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of August_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.August_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.August_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts35 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Saturday_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.Saturday_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.Saturday_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts36 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of September_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.September_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.September_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts37 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of September_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.September_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.September_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts38 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Saturday_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.Saturday_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.Saturday_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts39 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Friday_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.Friday_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.Friday_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts40 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Friday_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.Friday_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.Friday_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts41 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of May_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.May_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.May_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts42 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of October_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.October_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.October_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts43 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of June_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.June_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.June_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts44 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of June_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.June_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.June_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts45 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of May_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.May_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.May_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts46 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Wednesday_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.Wednesday_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.Wednesday_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts47 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of April_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.April_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.April_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts48 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Wednesday_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.Wednesday_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.Wednesday_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts49 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of April_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.April_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.April_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts50 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of February_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.February_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.February_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts51 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of October_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.October_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.October_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts52 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of December_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.December_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.December_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts53 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of February_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.February_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.February_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts54 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of December_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.December_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.December_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts55 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Week1_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.Week1_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.Week1_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Field_scripts56 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of Week1_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.Week1_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.Week1_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts57 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of July_Target.Committed_Amount
	{
					actions 
					{
						custom deluge script
						(
											committedTotal = 0.0;
										for each  targetRow in input.July_Target
										{
											if(targetRow.Committed_Amount != null)
											{
												committedTotal = committedTotal + targetRow.Committed_Amount;
											}
										}
										input.July_Total = committedTotal;
						)
					}
	}

			}
			Field_scripts58 as "Field scripts"
			{
				type =  form
				form = Add_Detailed_Forecast
				record event = on add or edit

	on user input of July_Target.Achieved_Amount
	{
					actions 
					{
						custom deluge script
						(
											acheived_Total = 0.0;
										for each  targetRow in input.July_Target
										{
											if(targetRow.Achieved_Amount != null)
											{
												acheived_Total = acheived_Total + targetRow.Achieved_Amount;
											}
										}
										input.July_Achieved_Total = acheived_Total;
						)
					}
	}

			}
			Create_record_scripts26 as "Create record scripts"
			{
				type =  form
				form = Orders
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											empRow = Sales_Reps[Email == zoho.loginuserid];
										if(empRow.ID != null)
										{
											input.Sale_Order_Owner = empRow.ID;
										}
										input.Ordered_Date = zoho.currentdate;
										disable Add_Product.Unit_Price;
										disable Add_Product.Total;
										disable Sub_Total;
										disable Grand_Total;
						)
					}
	}

			}
			Edit_record_scripts6 as "Edit record scripts"
			{
				type =  form
				form = Orders
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											disable Add_Product.Unit_Price;
										disable Add_Product.Total;
										disable Sub_Total;
						)
					}
	}

			}
			Field_scripts59 as "Field scripts"
			{
				type =  form
				form = Orders
				record event = on add or edit

	on user input of Vat
	{
					actions 
					{
						custom deluge script
						(
											grandTotal = 0.0;
										for each  proRow in input.Add_Product
										{
											grandTotal = grandTotal + proRow.Total;
										}
										input.Sub_Total = grandTotal;
										totalDiscount = grandTotal * input.Discount / 100;
										totalVat = (grandTotal - totalDiscount) * input.Vat / 100;
										input.Grand_Total = grandTotal - totalDiscount + totalVat;
						)
					}
	}

			}
			Field_scripts60 as "Field scripts"
			{
				type =  form
				form = Orders
				record event = on add or edit

	on user input of Additional_Fees
	{
					actions 
					{
						custom deluge script
						(
											grandTotal = 0.0;
										for each  proRow in input.Add_Product
										{
											grandTotal = grandTotal + proRow.Total;
										}
										input.Sub_Total = grandTotal;
										totalDiscount = grandTotal * input.Discount / 100;
										totalVat = (grandTotal - totalDiscount) * input.Vat / 100;
										input.Grand_Total = grandTotal - totalDiscount + totalVat + input.Additional_Fees;
						)
					}
	}

			}
			Field_scripts61 as "Field scripts"
			{
				type =  form
				form = Orders
				record event = on add or edit

	on user input of Add_Product.Product
	{
					actions 
					{
						custom deluge script
						(
											row.Unit_Price=Products[ID == row.Product].Unit_Price;
										row.Total=row.Qty * row.Unit_Price;
										grandTotal = 0.0;
										for each  proRow in input.Add_Product
										{
											grandTotal = grandTotal + proRow.Total;
										}
										input.Sub_Total = grandTotal;
										totalDiscount = grandTotal * input.Discount / 100;
										totalVat = (grandTotal - totalDiscount) * input.Vat / 100;
										input.Grand_Total = grandTotal - totalDiscount + totalVat + input.Additional_Fees;
						)
					}
	}

			}
			Field_scripts62 as "Field scripts"
			{
				type =  form
				form = Orders
				record event = on add or edit

	on user input of Add_Product.Qty
	{
					actions 
					{
						custom deluge script
						(
											row.Total=row.Qty * row.Unit_Price;
										grandTotal = 0.0;
										for each  proRow in input.Add_Product
										{
											grandTotal = grandTotal + proRow.Total;
										}
										input.Sub_Total = grandTotal;
										totalDiscount = grandTotal * input.Discount / 100;
										totalVat = (grandTotal - totalDiscount) * input.Vat / 100;
										input.Grand_Total = grandTotal - totalDiscount + totalVat + input.Additional_Fees;
						)
					}
	}

			}
			Field_scripts63 as "Field scripts"
			{
				type =  form
				form = Orders
				record event = on add or edit

	on user input of Discount
	{
					actions 
					{
						custom deluge script
						(
											grandTotal = 0.0;
										for each  proRow in input.Add_Product
										{
											grandTotal = grandTotal + proRow.Total;
										}
										input.Sub_Total = grandTotal;
										totalDiscount = grandTotal * input.Discount / 100;
										totalVat = (grandTotal - totalDiscount) * input.Vat / 100;
										input.Grand_Total = grandTotal - totalDiscount + totalVat + input.Additional_Fees;
						)
					}
	}

			}
		}
		functions
		{
			View as "View"
			{
				type =  functions
				form = Leads
				on start
				{
					actions 
					{
					view_info.leadInfo(ID);
					}
				}
			}
			Convert as "Convert"
			{
				type =  functions
				form = Leads
				on start
				{
					actions 
					{
					lead.convertAccount(Leads);
					}
				}
			}
			Unfollow as "Unfollow"
			{
				type =  functions
				form = Leads
				on start
				{
					actions 
					{
					follow_and_unfollow.unFollowLeads(Leads);
					}
				}
			}
			View1 as "View"
			{
				type =  functions
				form = Leads
				on start
				{
					actions 
					{
					view_info.leadInfo(ID);
					}
				}
			}
			Follow as "Follow"
			{
				type =  functions
				form = Leads
				on start
				{
					actions 
					{
					follow_and_unfollow.followLeads(Leads);
					}
				}
			}
			View2 as "View"
			{
				type =  functions
				form = Leads
				on start
				{
					actions 
					{
					view_info.leadInfo(ID);
					}
				}
			}
			View3 as "View"
			{
				type =  functions
				form = Accounts
				on start
				{
					actions 
					{
					view_info.accountInfo(ID);
					}
				}
			}
			Unfollow1 as "Unfollow"
			{
				type =  functions
				form = Accounts
				on start
				{
					actions 
					{
					follow_and_unfollow.unFollowAccounts(Accounts);
					}
				}
			}
			View4 as "View"
			{
				type =  functions
				form = Accounts
				on start
				{
					actions 
					{
					view_info.accountInfo(ID);
					}
				}
			}
			View5 as "View"
			{
				type =  functions
				form = Accounts
				on start
				{
					actions 
					{
					view_info.accountInfo(ID);
					}
				}
			}
			Follow1 as "Follow"
			{
				type =  functions
				form = Accounts
				on start
				{
					actions 
					{
					follow_and_unfollow.followAccounts(Accounts);
					}
				}
			}
			Follow2 as "Follow"
			{
				type =  functions
				form = Accounts
				on start
				{
					actions 
					{
					follow_and_unfollow.followAccounts(Accounts);
					}
				}
			}
			Follow3 as "Follow"
			{
				type =  functions
				form = Leads
				on start
				{
					actions 
					{
					follow_and_unfollow.followLeads(Leads);
					}
				}
			}
			Cancel as "Cancel"
			{
				type =  functions
				form = Tasks
				on start
				{
					actions 
					{
					tasks.cancelTask(Tasks);
					}
				}
			}
			Close as "Close"
			{
				type =  functions
				form = Tasks
				on start
				{
					actions 
					{
					tasks.closeTask(Tasks);
					}
				}
			}
			Follow4 as "Follow"
			{
				type =  functions
				form = Tasks
				on start
				{
					actions 
					{
					follow_and_unfollow.followTasks(Tasks);
					}
				}
			}
			Unfollow2 as "Unfollow"
			{
				type =  functions
				form = Tasks
				on start
				{
					actions 
					{
					follow_and_unfollow.unFollowTasks(Tasks);
					}
				}
			}
			Follow5 as "Follow"
			{
				type =  functions
				form = Tasks
				on start
				{
					actions 
					{
					follow_and_unfollow.followTasks(Tasks);
					}
				}
			}
			Cancel1 as "Cancel"
			{
				type =  functions
				form = New_Case
				on start
				{
					actions 
					{
					Cases.cancelCase(New_Case);
					}
				}
			}
			Close1 as "Close"
			{
				type =  functions
				form = New_Case
				on start
				{
					actions 
					{
					Cases.closeCase(New_Case);
					}
				}
			}
			Follow6 as "Follow"
			{
				type =  functions
				form = New_Case
				on start
				{
					actions 
					{
					follow_and_unfollow.followCases(New_Case);
					}
				}
			}
			Unfollow3 as "Unfollow"
			{
				type =  functions
				form = New_Case
				on start
				{
					actions 
					{
					follow_and_unfollow.unFollowCases(New_Case);
					}
				}
			}
			Follow7 as "Follow"
			{
				type =  functions
				form = Tasks
				on start
				{
					actions 
					{
					follow_and_unfollow.followTasks(Tasks);
					}
				}
			}
			Follow8 as "Follow"
			{
				type =  functions
				form = New_Case
				on start
				{
					actions 
					{
					follow_and_unfollow.followCases(New_Case);
					}
				}
			}
			Approve as "Approve"
			{
				type =  functions
				form = Orders
				on start
				{
					actions 
					{
					quotes.approveQuotes(Orders);
					}
				}
			}
			Reject as "Reject"
			{
				type =  functions
				form = Orders
				on start
				{
					actions 
					{
					quotes.rejectQuotes(Orders);
					}
				}
			}
			View6 as "View"
			{
				type =  functions
				form = Orders
				on start
				{
					actions 
					{
					invoice.viewInvoice(ID);
					}
				}
			}
			Send as "Send"
			{
				type =  functions
				form = Orders
				on start
				{
					actions 
					{
					invoice.sendInvoice(Orders);
					}
				}
			}
		}
	}
	share_settings
	{
			"Read"
			{
				name = "Read"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true}
				description = "This profile will have read permission for all components\n"
			}
			"Write"
			{
				name = "Write"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true}
				description = "This profile will have write permission for all components\n"
			}
			"Administrator"
			{
				name = "Administrator"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true}
				description = "This profile will have all the permissions.\n"
			}
			roles
			{
				"CEO"
				{
					description = "User belonging to this role can access data of all other users."
				}
			}
	}

	customize
	{
		layout width = 1200
		layout = "drop down menu"
		color = "black"
		base theme = "professional"
		new theme = 6
		new theme color = 1
		icons = true
    	icon type = 1
    	icon name = "zc-ab-finance1"
    	icon theme = "darkgrey"
	}

	
	reports configuration
	{
	
		Version = 1251000165802117
		Key     = "tY40YjD1WpHF5apKZE6MEMZONdmBkzJq9qq9QPa6UzKmnjSrDg9nAPR88QrRSuD7PKm2YOS5VMsrFF69AwO3tKpbCBeeeC80rF6a"
	}
}