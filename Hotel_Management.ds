/*
 * Author       : app.zohocreator
 * Generated on : 07-May-2020 01:35:16
 * Version      : 1.0
 */
 application "Hotel Management"
 {
 	date format = "dd-MMM-yyyy"
 	time zone = "Asia/Kolkata"
 	time format = "24-hr"
	section Front_Desk
	{
		displayname= "Front Desk"
		icon = "travel-hotel-bell"
		form Add_Check_In
		{
			displayname = "Add Check In"
			success message = "Booking Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Reservation_Id
			(
				type = picklist
				displayname = "Reservation Id"
				values  = Reservation.ID
    			displayformat = [Reservation_Id]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Check_In
			(
    			type = date
				displayname = "Check In"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Check_Out
			(
    			type = date
				displayname = "Check Out"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Guest_Type
			(
				type = picklist
				displayname = "Guest Type"
				values = {"Corporate", "Individual"}
	 			row = 1
	 			column = 2   
				width = medium
			)
			Guest
			(
				type = picklist
				values  = Add_Guest.ID
    			displayformat = [" " + Name.first_name + " " + Name.last_name]
				allow new entries = true
				[
					displayname = "Add New Guest"
				]
				sortorder = ascending
	 			row = 1
	 			column = 2   
				width = medium
			)
			Corporate
			(
				type = picklist
				values  = Add_Corporate_Client.ID
    			displayformat = [Corporate_Name]
				allow new entries = true
				[
					displayname = "Add New Company"
				]
				sortorder = ascending
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Room_Details
			(
				type = grid
				displayname = "Room Details"
				values  = Check_In_Details_Form.ID
    			bidirectional = Check_In_Id
	 			row = 2
	 			column = 1   
				width = medium
			)
			Billing
			(
				type = section
	 			row = 3
	 			column = 0   
				width = medium
			)
			must have Room_Tariff
			(
				displayname = "Room Tariff"
				type = USD
				initial value = 0
	 			row = 3
	 			column = 1   
				width = medium
			)
			Tax_Amount
			(
				displayname = "Tax Amount"
				type = USD
				initial value = 0
	 			row = 3
	 			column = 1   
				width = medium
			)
			must have Total_Amount
			(
				displayname = "Total Amount"
				type = USD
				initial value = 0
	 			row = 3
	 			column = 1   
				width = medium
			)
			Advance_Amount
			(
				displayname = "Advance Amount"
				type = USD
				initial value = 0
	 			row = 3
	 			column = 1   
				width = medium
			)
			Corporate_Will_Pay_For
			(
				type = picklist
				displayname = "Corporate Will Pay For"
				values = {"All Charges", "Only Room Charge"}
	 			row = 3
	 			column = 1   
				width = medium
			)
			must have Status
			(
				type = picklist
				values = {"Checked In", "Checked Out"}
				initial value = "Checked In"
				sortorder = ascending
	 			row = 3
	 			column = 2   
				width = medium
			)
			must have Payment_Status
			(
				type = picklist
				displayname = "Payment Status"
				values = {"Pending", "Done"}
				initial value = "Pending"
	 			row = 3
	 			column = 2   
				width = medium
			)
			Check_In_Id
			(
    			type = autonumber
				displayname = "Check In Id"
				start index = 1
	 			row = 3
	 			column = 2   
				width = medium
			)
			Refund_Amount
			(
				displayname = "Refund Amount"
				type = USD
				initial value = 0
	 			row = 3
	 			column = 2   
				width = medium
			)
	
			customize
			(
				icon = "design-2-3d-29"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Add"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Check_Ins
		{
			displayName = "Check Ins"
   			hide = true
			show all rows from Add_Check_In    
			(
				Check_In_Id as "Check In Id"
				Check_In as "Check In"
				Check_Out as "Check Out"
				Guest as "Booking By"
				Room_Tariff as "Room Tariff"
				Guest_Type as "Guest Type"
				Corporate
				Status
				Guest.Name  as "Guest"
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				Advance_Amount as "Advance Amount"
			)
			options
			(
				icon = "travel-world"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Check_In_Id as "Check In Id"
							Check_In as "Check In"
							Check_Out as "Check Out"
							Guest as "Booking By"
							Room_Tariff as "Room Tariff"
							Status
							Advance_Amount as "Advance Amount"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Guest as "Booking By"
							Check_In as "Check In"
							Check_Out as "Check Out"
							Guest as "Booking By"
							Guest_Type as "Guest Type"
							Guest.Name as "Guest"
							Corporate
							Status
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "Room Details"
		     			related field =  Room_Details
						fields
						(
							Guest
							Room_Type as "Room Type"
							Room_Number as "Room Number"
							Number_Of_Adult as "Number Of Adult"
							Number_Of_Child as "Number Of Child"
							Rate
							Amount as "Room Tariff"
							Status
							Check_In_Time as "Actual Check In Time"
							Check_Out_Time as "Actual Check Out Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list On_Payment_Invoices
		{
			displayName = "On Payment Invoices"
   			hide = true
			show all rows from Check_In_Details_Form    
			(
				Check_In_Id as "Check In Id"
				Guest
				Room_Type as "Room Type"
				Room_Number as "Room Number"
				Number_Of_Adult as "Number Of Adult"
				Number_Of_Child as "Number Of Child"
				Rate
				Amount as "Room Tariff"
				Tax_Amount as "Tax Amount"
				Check_In_Time as "Check In Time"
				Check_Out_Time as "Check Out Time"
				Payment_Mode as "Payment Mode"
				Payment_Status as "Payment Status"
				Status
				Total_Amount as "Total Amount"
				Invoice_No as "Invoice No"
				custom action "Invoice 1"
				(
	  			workflow = Invoice_3
				show action in edit record menu = true
				column header = "Invoice 1"
				)
				custom action "Invoice 2"
				(
	  			workflow = Invoice_4
				show action in edit record menu = true
				column header = "Invoice 2"
				)
			)
			options
			(
				icon = "shopping-receipt"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Check_In_Id as "Check In Id"
							Guest
							Room_Type as "Room Type"
							Room_Number as "Room Number"
							Number_Of_Adult as "Number Of Adult"
							Number_Of_Child as "Number Of Child"
							Rate
							Total_Amount as "Total Amount"
							Invoice_No as "Invoice No"
				"Invoice 1"
				"Invoice 2"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Check_In_Id as "Check In Id"
							Guest
							Room_Type as "Room Type"
							Room_Number as "Room Number"
							Number_Of_Adult as "Number Of Adult"
							Number_Of_Child as "Number Of Child"
							Rate
							Amount as "Room Tariff"
							Tax_Amount as "Tax Amount"
							Total_Amount as "Total Amount"
							Check_In_Time as "Check In Time"
							Check_Out_Time as "Check Out Time"
							Payment_Mode as "Payment Mode"
							Payment_Status as "Payment Status"
							Status
							Invoice_No as "Invoice No"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		timeline Timeline_View
		{
			displayName = "Timeline View"
			show all rows from Reservation    
			(
				Check_In as "Check In"
				Guest
				Corporate
				Number_Of_Adults as "Number Of Adults"
				Number_Of_Child as "Number Of Child"
				Select_Rate as "Select Rate"
				Room_Tariff as "Room Tariff"
				Tax_Amount as "Tax Amount"
				Total_Amount as "Total Amount"
				Advance_Amount as "Advance Amount"
				Check_Out as "Check Out"
				Room_Type as "Room Type"
				Status
				Reservation_Id as "Reservation Id"
				Guest_Type as "Guest Type"
				Choose_Rooms as "Choose Rooms"
			)
			options
			(
				display type = week
				week start day = sunday
				display field = Reservation_Id
				start date = Check_In
				end date = Check_Out
				default date 
				(
	    			day   = Today
	    			month = Currentmonth
	    			year  = Currentyear
				)
				icon = "tech-tv-old"
			)
			custom actions
			(
				"Cancel"
				(
	  			workflow = Cancel1
				show action in view header = true
				show action in edit record menu = true
				condition = (Status == "Awaiting For Confirmation" || Status == "Reserved")
				)
				"Confirm"
				(
	  			workflow = Confirm
				show action in view header = true
				show action in edit record menu = true
				condition = (Status == "Awaiting For Confirmation")
				)
				"Check In"
				(
	  			workflow = Check_In1
				show action in view header = true
				show action in edit record menu = true
				condition = (Status == "Reserved")
				)
			)
			conditional formatting
			(
				"Waiting"
				{
				condition = (Status == "Awaiting For Confirmation")
				fields = [Status]
				format = "color:#333;background-color:#f1c40f;"
				}
				"Reserved"
				{
				condition = (Status == "Reserved")
				fields = [Status]
				format = "color:#000000;background-color:#aaaaaa;"
				}
				"Cancelled"
				{
				condition = (Status == "Cancelled")
				fields = [Status]
				format = "text-decoration:line-through;color:#ffffff;background-color:#e84c3d;"
				}
				"Checked In"
				{
				condition = (Status == "Converted Check In")
				fields = [Status]
				format = "color:#000000;background-color:#1bbc9b;"
				}
				"Waiting"
				{
				condition = (Status == "Awaiting For Confirmation")
				format = "color:#333;background-color:#f1c40f;"
				}
				"Reserved"
				{
				condition = (Status == "Reserved")
				format = "color:#ffffff;background-color:#818c8e;"
				}
				"Checked In"
				{
				condition = (Status == "Converted Check In")
				format = "color:#000000;background-color:#1bbc9b;"
				}
				"Cancelled"
				{
				condition = (Status == "Cancelled")
				format = "color:#ffffff;background-color:#e84c3d;"
				}
			)
			quickview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = 4
		     			title = "Overview"
						fields
						(
							Reservation_Id as "Reservation Id"
							Choose_Rooms as "Choose Rooms"
							Status
							Room_Type as "Room Type"
							Guest_Type as "Guest Type"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
								"Cancel"
								"Confirm"
								"Check In"
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
								"Cancel"
								"Confirm"
								"Check In"
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Check_In as "Check In"
							Check_Out as "Check Out"
							Guest_Type as "Guest Type"
							Guest
							Corporate
							Reservation_Id as "Reservation Id"
							Status
							Room_Type as "Room Type"
							Choose_Rooms as "Choose Rooms"
							Number_Of_Adults as "Number Of Adults"
							Number_Of_Child as "Number Of Child"
							Select_Rate as "Select Rate"
							Room_Tariff as "Room Tariff"
							Tax_Amount as "Tax Amount"
							Total_Amount as "Total Amount"
							Advance_Amount as "Advance Amount"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
			 			"Cancel"
			 			"Confirm"
			 			"Check In"
    	 			)
    			)
			)
		}
		form Reservation
		{
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			Details
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Check_In
			(
    			type = date
				displayname = "Check In"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Check_Out
			(
    			type = date
				displayname = "Check Out"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Number_Of_Rooms
			(
				type = number
				displayname = "Number Of Rooms"
				initial value = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Number_Of_Adults
			(
				type = number
				displayname = "Number Of Adults"
				initial value = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			Number_Of_Child
			(
				type = number
				displayname = "Number Of Child"
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			Confirm_Reservation
			(
    			type = checkbox
				displayname = "Confirm Reservation"
				initial value = false
	 			row = 1
	 			column = 1   
				width = medium
			)
			Room_Type
			(
				type = picklist
				displayname = "Room Type"
				values  = Add_Room_Type.ID
    			displayformat = [Type_Name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Choose_Rooms
			(
				type = list
				displayname = "Choose Rooms"
				values  = Add_Room.ID
    			displayformat = [Room_Number]
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
			Stay_Details
			(
    			type = plaintext
				value = ""
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Guest_Type
			(
				type = picklist
				displayname = "Guest Type"
				values = {"Corporate", "Individual"}
	 			row = 1
	 			column = 2   
				width = medium
			)
			Guest
			(
				type = picklist
				values  = Add_Guest.ID
    			displayformat = [" " + Name.first_name + " " + Name.last_name]
				allow new entries = true
				[
					displayname = "Add New Guest"
				]
				sortorder = ascending
	 			row = 1
	 			column = 2   
				width = medium
			)
			Corporate
			(
				type = picklist
				values  = Add_Corporate_Client.ID
    			displayformat = [Corporate_Name]
				allow new entries = true
				[
					displayname = "Add New Corporate"
				]
				sortorder = ascending
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Status
			(
				type = picklist
				values = {"Awaiting For Confirmation", "Reserved", "Cancelled", "Converted Check In"}
				initial value = "Awaiting For Confirmation"
				sortorder = ascending
	 			row = 1
	 			column = 2   
				width = medium
			)
			Reason
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 2   
				width = medium
			)
			Cancellation_Charge
			(
				displayname = "Cancellation Charge"
				type = USD
	 			row = 1
	 			column = 2   
				width = medium
			)
			Reservation_Id
			(
    			type = autonumber
				displayname = "Reservation Id"
				start index = 1
	 			row = 1
	 			column = 2   
				width = medium
			)
			Rate
			(
				type = section
				visibility = true
	 			row = 2
	 			column = 0   
				width = medium
			)
			Select_Rate
			(
				type = picklist
				displayname = "Select Rate"
				values  = Add_Rate_Type[Rooms_And_Rates.Room_Type == input.Room_Type].ID
    			displayformat = [Rate_Type]
				sortorder = ascending
	 			row = 2
	 			column = 1   
				width = medium
			)
			Room_Tariff
			(
				displayname = "Room Tariff"
				type = USD
	 			row = 2
	 			column = 1   
				width = medium
			)
			Tax_Amount
			(
				displayname = "Tax Amount"
				type = USD
				initial value = 0
	 			row = 2
	 			column = 1   
				width = medium
			)
			Total_Amount
			(
				displayname = "Total Amount"
				type = USD
	 			row = 2
	 			column = 1   
				width = medium
			)
			Advance_Amount
			(
				displayname = "Advance Amount"
				type = USD
				initial value = 0
	 			row = 2
	 			column = 1   
				width = medium
			)
			Rate_Details
			(
    			type = plaintext
				value = ""
	 			row = 2
	 			column = 2   
				width = medium
			)
	
			customize
			(
				icon = "education-board-51"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Awaiting_Confirmations
		{
			displayName = "Awaiting Confirmations"
			show all rows from Reservation  [Status == "Awaiting For Confirmation"]  
			(
				Check_In as "Check In"
				Check_Out as "Check Out"
				Guest_Type as "Guest Type"
				Guest
				Corporate
				Room_Type as "Room Type"
				Reservation_Id as "Reservation Id"
				Confirm_Reservation as "Confirm Reservation"
				Choose_Rooms as "Choose Rooms"
				Status
				Added_User as "Added User"
				Number_Of_Rooms as "Number Of Rooms"
				Number_Of_Adults as "Number Of Adults"
				Number_Of_Child as "Number Of Child"
				custom action "Confirm"
				(
	  			workflow = Confirm1
				show action in edit record menu = true
				column header = "Confirm"
				condition = (Status == "Awaiting For Confirmation")
				)
				custom action "Cancel"
				(
	  			workflow = Cancel3
				show action in edit record menu = true
				column header = "Cancel"
				condition = (Status == "Awaiting For Confirmation")
				)
			)
			options
			(
				icon = "ui-2-hourglass"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Check_In as "Check In"
							Check_Out as "Check Out"
							Guest_Type as "Guest Type"
							Number_Of_Rooms as "Number Of Rooms"
							Number_Of_Adults as "Number Of Adults"
							Number_Of_Child as "Number Of Child"
							Added_User as "Added User"
				"Confirm"
				"Cancel"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Reservation_Id as "Reservation Id"
							Check_In as "Check In"
							Check_Out as "Check Out"
							Guest_Type as "Guest Type"
							Guest
							Corporate
							Room_Type as "Room Type"
							Number_Of_Rooms as "Number Of Rooms"
							Number_Of_Adults as "Number Of Adults"
							Number_Of_Child as "Number Of Child"
							Confirm_Reservation as "Confirm Reservation"
							Choose_Rooms as "Choose Rooms"
							Status
						)
					)
					datablock2
					(
			 			layout type = -2
		     			title = "Guest"
		     			related field =  Guest[Status == "Awaiting For Confirmation"]
						fields
						(
							Name
							Phone_Number as "Phone"
							Email
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Upcoming_Check_Ins
		{
			displayName = "Upcoming Check Ins"
			show all rows from Reservation  [Status == "Reserved" && Check_In > zoho.currentdate || Check_In is today]  
			(
				Guest_Type as "Guest Type"
				Guest
				Corporate
				Check_In as "Check In"
				Check_Out as "Check Out"
				Room_Type as "Room Type"
				Status
				custom action "Check In"
				(
	  			workflow = Check_In
				show action in edit record menu = true
				column header = "Check In"
				condition = (Check_In is today || (Check_In < zoho.currentdate && Check_Out > zoho.currentdate) || Check_Out is today)
				)
				custom action "Cancel"
				(
	  			workflow = Cancel2
				show action in edit record menu = true
				column header = "Cancel"
				)
				Select_Rate as "Select Rate"
				Advance_Amount as "Advance Amount"
				Number_Of_Adults as "Number Of Adults"
				Number_Of_Child as "Number Of Child"
				Total_Amount as "Total Amount"
				Room_Tariff as "Room Tariff"
				Tax_Amount as "Tax Amount"
				Number_Of_Rooms as "Number Of Rooms"
				Confirm_Reservation as "Confirm Reservation"
				Reason
				Cancellation_Charge as "Cancellation Charge"
				Choose_Rooms as "Choose Rooms"
				Reservation_Id as "Reservation Id"
			)
			options
			(
				icon = "transportation-helicopter"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Reservation_Id as "Reservation Id"
							Guest_Type as "Guest Type"
							Check_In as "Check In"
							Check_Out as "Check Out"
							Choose_Rooms as "Choose Rooms"
							Status
				"Cancel"
				"Check In"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Guest_Type as "Guest Type"
							Guest
							Corporate
							Check_In as "Check In"
							Check_Out as "Check Out"
							Room_Type as "Room Type"
							Status
							Reservation_Id as "Reservation Id"
							Select_Rate as "Select Rate"
							Choose_Rooms as "Choose Rooms"
							Advance_Amount as "Advance Amount"
							Number_Of_Adults as "Number Of Adults"
							Number_Of_Child as "Number Of Child"
							Total_Amount as "Total Amount"
							Room_Tariff as "Room Tariff"
							Tax_Amount as "Tax Amount"
							Number_Of_Rooms as "Number Of Rooms"
							Confirm_Reservation as "Confirm Reservation"
							Reason
							Cancellation_Charge as "Cancellation Charge"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list No_Shows
		{
			displayName = "No Shows"
			show all rows from Reservation  [Status == "Reserved" && Check_In < zoho.currentdate]  
			(
				Check_In as "Check In"
				Check_Out as "Check Out"
				Number_Of_Rooms as "Number Of Rooms"
				Number_Of_Adults as "Number Of Adults"
				Number_Of_Child as "Number Of Child"
				Confirm_Reservation as "Confirm Reservation"
				Room_Type as "Room Type"
				Corporate
				Status
				Reason
				Cancellation_Charge as "Cancellation Charge"
				Select_Rate as "Select Rate"
				Room_Tariff as "Room Tariff"
				Tax_Amount as "Tax Amount"
				Total_Amount as "Total Amount"
				Advance_Amount as "Advance Amount"
				Reservation_Id as "Reservation Id"
				Guest_Type as "Guest Type"
				Choose_Rooms as "Choose Rooms"
				Guest
				custom action "Cancel"
				(
	  			workflow = Cancel5
				show action in edit record menu = true
				column header = "Cancel"
				)
			)
			options
			(
				icon = "tech-2-wifi-off"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Reservation_Id as "Reservation Id"
							Check_In as "Check In"
							Check_Out as "Check Out"
							Number_Of_Rooms as "Number Of Rooms"
							Confirm_Reservation as "Confirm Reservation"
							Room_Type as "Room Type"
							Choose_Rooms as "Choose Rooms"
							Guest_Type as "Guest Type"
				"Cancel"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Check_In as "Check In"
							Check_Out as "Check Out"
							Number_Of_Rooms as "Number Of Rooms"
							Number_Of_Adults as "Number Of Adults"
							Number_Of_Child as "Number Of Child"
							Confirm_Reservation as "Confirm Reservation"
							Room_Type as "Room Type"
							Choose_Rooms as "Choose Rooms"
							Guest_Type as "Guest Type"
							Guest
							Corporate
							Status
							Reason
							Cancellation_Charge as "Cancellation Charge"
							Reservation_Id as "Reservation Id"
							Select_Rate as "Select Rate"
							Room_Tariff as "Room Tariff"
							Tax_Amount as "Tax Amount"
							Total_Amount as "Total Amount"
							Advance_Amount as "Advance Amount"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Reservations
		{
			displayName = "All Reservations"
			show all rows from Reservation    
			(
				Check_In as "Check In"
				Check_Out as "Check Out"
				Guest_Type as "Guest Type"
				Guest
				Corporate
				Number_Of_Rooms as "Number Of Rooms"
				Number_Of_Adults as "Number Of Adults"
				Confirm_Reservation as "Confirm Reservation"
				Room_Type as "Room Type"
				Choose_Rooms as "Choose Rooms"
				Reason
				Select_Rate as "Select Rate"
				Room_Tariff as "Room Tariff"
				Tax_Amount as "Tax Amount"
				Total_Amount as "Total Amount"
				Advance_Amount as "Advance Amount"
				Status
				Number_Of_Child as "Number Of Child"
				Reservation_Id as "Reservation Id"
			)
			options
			(
				icon = "travel-world"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Reservation_Id as "Reservation Id"
							Check_In as "Check In"
							Check_Out as "Check Out"
							Guest_Type as "Guest Type"
							Number_Of_Rooms as "Number Of Rooms"
							Number_Of_Adults as "Number Of Adults"
							Number_Of_Child as "Number Of Child"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Check_In as "Check In"
							Check_Out as "Check Out"
							Guest_Type as "Guest Type"
							Guest
							Corporate
							Number_Of_Rooms as "Number Of Rooms"
							Number_Of_Adults as "Number Of Adults"
							Number_Of_Child as "Number Of Child"
							Confirm_Reservation as "Confirm Reservation"
							Room_Type as "Room Type"
							Choose_Rooms as "Choose Rooms"
							Status
							Reason
							Reservation_Id as "Reservation Id"
							Select_Rate as "Select Rate"
							Room_Tariff as "Room Tariff"
							Tax_Amount as "Tax Amount"
							Total_Amount as "Total Amount"
							Advance_Amount as "Advance Amount"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Check_In
		{
			displayname = "Check In"
			store data in zc = false
			success message = ""
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Check_In
			(
    			type = date
				displayname = "Check In"
				alloweddays = 0,1,2,3,4,5,6
    			description
    			[
    				type = help_text
    			 	message = "Check In date must be today"
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Check_Out
			(
    			type = date
				displayname = "Check Out"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			Available_Room_Count
			(
				type = number
				displayname = "Available Room Count"
	 			row = 1
	 			column = 1   
				width = medium
			)
			plain
			(
    			type = plaintext
				value = ""
	 			row = 1
	 			column = 2   
				width = medium
			)
	
			actions
			{
				Check_In1
				(
   					type = submit
   					displayname = "Check In"
				)
				Reset
				(
   					type = reset
   					displayname = "Reset"
				)
			}
		}
		list Active_Check_Ins
		{
			displayName = "Active Check Ins"
			show all rows from Check_In_Details_Form  [Status == "Checked In"]  
			(
				Check_In_Time as "Check In Time"
				custom action "Check Out"
				(
	  			workflow = Check_Out2
				show action in edit record menu = true
				column header = "Check Out"
				condition = (Status == "Checked In")
				)
				Check_In_Id.Guest_Type as "Guest Type"
				Check_In_Id.Check_Out as "Planned Check Out"
				Check_In_Id as "Check In Id"
				Number_Of_Child as "Number Of Child"
				Number_Of_Adult as "Number Of Adult"
				Room_Number as "Room Number"
				Room_Type as "Room Type"
				Guest
				Rate
				Amount as "Room Tariff"
				Tax_Amount as "Tax Amount"
				Total_Amount as "Total Amount"
			)
			options
			(
				icon = "tech-2-p-check"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Check_In_Id as "Check In Id"
							Check_In_Id.Guest_Type as "Guest Type"
							Guest
							Room_Type as "Room Type"
							Room_Number as "Room Number"
							Number_Of_Adult as "Number Of Adult"
							Number_Of_Child as "Number Of Child"
							Check_In_Time as "Check In Time"
							Check_In_Id.Check_Out as "Planned Check Out"
				"Check Out"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Check_In_Id as "Check In Id"
							Room_Type as "Room Type"
							Room_Number as "Room Number"
							Guest
							Tax_Amount as "Tax Amount"
							Tax_Amount as "Tax Amount"
							Tax_Amount as "Tax Amount"
						)
					)
					datablock2
					(
			 			layout type = -2
		     			title = "Stay Info"
		     			related field =  Check_In_Id[Status == "Checked In"]
						fields
						(
							Check_In as "Check In"
							Check_Out as "Check Out"
							Guest_Type as "Guest Type"
							Guest
							Corporate
							Corporate_Will_Pay_For as "Corporate Will Pay For"
						)
					)
					datablock3
					(
			 			layout type = -2
		     			title = "Guest Info"
		     			related field =  Guest[Status == "Checked In"]
						fields
						(
							Name
							Phone_Number as "Phone"
							Email
							Photo
							Address
							Source
							Corporate
							ID_Proof as "ID Proof"
							Employee_Id as "Employee Id"
						)
					)
					datablock4
					(
			 			layout type = -2
		     			title = "Rate"
						fields
						(
							Rate
							Amount as "Room Tariff"
							Tax_Amount as "Tax Amount"
							Total_Amount as "Total Amount"
						)
					)
					datablock5
					(
			 			layout type = -1
		     			title = "Used Services"
		     			related field =  Generate_Service_Bill.Check_In_Row_Id
						fields
						(
							Date_Time as "Date-Time"
							Choose_Service as "Choose Service"
							Usage_Details as "Usage Details"
							Charge
							Tax_Amount as "Tax Amount"
							Total
							Pre_Paid_Amount as "Pre Paid Amount"
							Payment_Status as "Payment Status"
						)
					)
					datablock6
					(
			 			layout type = -1
		     			title = "Additional Amenities"
		     			related field =  Add_Amenities_Bill.Check_In_Row_Id
						fields
						(
							Date_Time as "Date-Time"
							Select_Amenities as "Select Amenities"
							Total_Charge as "Total Charge"
							Pre_Paid_Amount as "Pre Paid Amount"
							Payment_Status as "Payment Status"
						)
					)
					datablock7
					(
			 			layout type = -1
		     			title = "Restaurant Orders"
		     			related field =  New_Order.Check_In_Row_Id
						fields
						(
							Order_Id as "Order Id"
							Select_Timing as "Select Timing"
							Date_Time as "Date-Time"
							Attendant
							Order_Status as "Order Status"
							Sub_Total as "Sub Total"
							Tax_Amount as "Tax Amount"
							Net_Total as "Net Total"
							Payment_Status as "Payment Status"
							Compliment_Food as "Compliment Food"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Check_In_History
		{
			displayName = "Check In History"
			show all rows from Check_In_Details_Form  [Status == "Checked Out"]  
			(
				Room_Number as "Room Number"
				Number_Of_Adult as "Number Of Adult"
				Number_Of_Child as "Number Of Child"
				Amount as "Room Tariff"
				Guest
				Check_In_Id as "Check In Id"
				Status
				Tax_Amount as "Tax Amount"
				Payment_Mode as "Payment Mode"
				Check_In_Time as "Check In Time"
				Check_Out_Time as "Check Out Time"
				Room_Type as "Room Type"
				Total_Amount as "Total Amount"
				Rate
				custom action "Invoice 1"
				(
	  			workflow = Invoice_1
				show action in edit record menu = true
				column header = "Invoice 1"
				condition = (Status == "Checked Out")
				)
				custom action "Invoice 2"
				(
	  			workflow = Invoice_2
				show action in edit record menu = true
				column header = "Invoice 2"
				condition = (Status == "Checked Out")
				)
				Invoice_No as "Invoice No"
			)
			options
			(
				icon = "media-2-guitar"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Check_In_Id as "Check In Id"
							Room_Type as "Room Type"
							Room_Number as "Room Number"
							Number_Of_Adult as "Number Of Adult"
							Number_Of_Child as "Number Of Child"
							Guest
							Check_In_Time as "Check In Time"
							Check_Out_Time as "Check Out Time"
							Rate
							Invoice_No as "Invoice No"
				"Invoice 1"
				"Invoice 2"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Room_Type as "Room Type"
							Room_Number as "Room Number"
							Number_Of_Adult as "Number Of Adult"
							Number_Of_Child as "Number Of Child"
							Amount as "Room Tariff"
							Guest
							Check_In_Time as "Check In Time"
							Check_Out_Time as "Check Out Time"
							Check_In_Id as "Check In Id"
							Status
							Rate
							Tax_Amount as "Tax Amount"
							Total_Amount as "Total Amount"
							Payment_Mode as "Payment Mode"
							Invoice_No as "Invoice No"
						)
					)
					datablock3
					(
			 			layout type = -2
		     			title = "Guest"
		     			related field =  Guest[Status == "Checked Out"]
						fields
						(
							Name
							Phone_Number as "Phone"
							Email
							Photo
							Address
							Source
							Corporate
							ID_Proof as "ID Proof"
							Employee_Id as "Employee Id"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Progress
	{
		icon = "loader-refresh"
				 page Invoice_1(invoice_no) 
	 	 { 
 	 	 displayname = "Invoice 1" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \n\t\t\tisPdfEnabled='true'\n\t\t\n\t\t\tisPrintEnabled='true'\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dspZml id='zml_snippet'>\n\t<![CDATA[htmlpage zml_snippet(invoice_no)\ncontent\n&lt;%{\n\tif(input.invoice_no != null)\n\t{\n\t\tdetail_map = thisapp.invoice.hotel_details();\n\t\tname = detail_map.get(&quot;name&quot;);\n\t\tlocation = detail_map.get(&quot;location&quot;).toMap();\n\t\tlocation_line1 = location.get(&quot;line 1&quot;);\n\t\tlocation_line2 = location.get(&quot;line 2&quot;);\n\t\tlocation_line3 = location.get(&quot;line 3&quot;);\n\t\tlocation_line4 = location.get(&quot;line 4&quot;);\n\t\temail = detail_map.get(&quot;email&quot;);\n\t\tcontact = detail_map.get(&quot;contact&quot;);\n\t\timage = detail_map.get(&quot;image&quot;);\n\t\tterms = detail_map.get(&quot;terms&quot;);\n\t\twebsite = detail_map.get(&quot;website&quot;);\n\t\tinvoice_id = invoice_no.toLong();\n\t\tinvoice_rec = Check_In_Details_Form[Invoice_No == invoice_id];\n\t\tguest_type = invoice_rec.Check_In_Id.Guest_Type;\n\t\troom_type = invoice_rec.Room_Type.Type_Name;\n\t\tmain_rec = Add_Check_In[ID == invoice_rec.Check_In_Id];\n\t\tif(invoice_rec.Status == &quot;Checked Out&quot;)\n\t\t{\n\t\t\tcheck_out_time = invoice_rec.Check_Out_Time.toDate();\n\t\t\tnumber_of_nights = invoice_rec.Stay_Length;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(zoho.currentdate &lt; main_rec.Check_Out)\n\t\t\t{\n\t\t\t\tcheck_out_time = zoho.currentdate;\n\t\t\t\tnumber_of_nights = days360(main_rec.Check_In,main_rec.Check_Out);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcheck_out_time = main_rec.Check_Out;\n\t\t\t\tnumber_of_nights = invoice_rec.Stay_Length;\n\t\t\t}\n\t\t}\n\t\tstay_dates = thisapp.invoice.stay_dates(invoice_rec.ID);\n\t\tstay_date_list = stay_dates.toList().sort(true);\n\t\trate_per_night = invoice_rec.Amount \/ number_of_nights;\n\t\trate_list = List();\n\t\ttax = 0.0;\n\t\tif(invoice_rec.Tax_Amount != 0)\n\t\t{\n\t\t\ttax_per_night = invoice_rec.Tax_Amount \/ number_of_nights;\n\t\t\ttax = tax_per_night * invoice_rec.Stay_Length;\n\t\t}\n\t\tbalance = 0.0;\n\t\tif(guest_type == &quot;Corporate&quot;)\n\t\t{\n\t\t\tcorporate = Add_Corporate_Client[ID == invoice_rec.Check_In_Id.Corporate];\n\t\t\tto_name = corporate.Corporate_Name;\n\t\t\tto_address = corporate.Address;\n\t\t\tto_address_line1 = corporate.Address.address_line_1;\n\t\t\tto_address_line2 = corporate.Address.district_city;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpayment_mode = invoice_rec.Payment_Mode;\n\t\t\tif(payment_mode == &quot;Group Payment&quot;)\n\t\t\t{\n\t\t\t\tguest_id = invoice_rec.Check_In_Id.Guest;\n\t\t\t}\n\t\t\telse if(payment_mode == &quot;Separate Payment&quot;)\n\t\t\t{\n\t\t\t\tguest_id = invoice_rec.Guest;\n\t\t\t}\n\t\t\tguest = Add_Guest[ID == guest_id];\n\t\t\tto_name = guest.Name;\n\t\t\tto_address_line1 = guest.Address.address_line_1;\n\t\t\tto_address_line2 = guest.Address.district_city;\n\t\t}\n\t\t%&gt;\n&lt;row&gt;\n\n\t\t\t\t\t\t&lt;column width=&apos;100%&apos;&gt;\n\t\t\t\t\t\t&lt;panel&gt;\n\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; bgColor=&apos;#FFFFFF&apos;&gt;\n\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; padding=&apos;2px&apos; bgColor=&apos;#313849&apos;&gt;\n\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; bgColor=&apos;#e1e6f6&apos;&gt;\n\t\t\t\t\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t\t\t\t\t&lt;pc width=&apos;70%&apos; height=&apos;auto&apos; hAlign=&apos;left&apos; padding=&apos;22px&apos; bgColor=&apos;#e1e6f6&apos;&gt; \n\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t&lt;text value=&apos;&lt;%=name%&gt;&apos; size=&apos;5&apos; bold=&apos;true&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t&lt;text value=&apos;&lt;%=location_line1%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t&lt;text value=&apos;&lt;%=location_line2%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t&lt;text value=&apos;&lt;%=location_line3%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t&lt;text value=&apos;&lt;%=location_line4%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t&lt;text value=&apos;&lt;%=contact%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t&lt;pr &gt;\n\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t&lt;text value=&apos;&lt;%=email%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t&lt;pc width=&apos;30%&apos; height=&apos;auto&apos; hAlign=&apos;center&apos; bgColor=&apos;#e1e6f6&apos;&gt;\n&lt;%\n\t\tif(image != &quot;&quot;)\n\t\t{\n\t\t\t%&gt;\n&lt;pr&gt;\n\t\t\t\t\t\t\t&lt;pc height=&apos;auto&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;image value=&apos;&lt;%=image%&gt;&apos; height=&apos;150px&apos; width=&apos;150px&apos; imageType=&apos;weburl&apos; \/&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; padding=&apos;1px&apos; bgColor=&apos;#313849&apos; paddingTop=&apos;0px&apos;&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;70%&apos; height=&apos;auto&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; padding=&apos;20px&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; hAlign=&apos;left&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;To:&apos; size=&apos;4&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\t\t\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; hAlign=&apos;left&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=to_name%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\t\t\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; hAlign=&apos;left&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t&lt;pc&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=to_address_line1%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\t\t\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t&lt;pc&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=to_address_line2%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\t\t\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt; \n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;30%&apos; height=&apos;auto&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&quot;# &lt;%=invoice_no%&gt;&quot; size=&apos;5&apos; bold=&apos;true&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&quot;&lt;%=check_out_time%&gt;&quot; size=&apos;2&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; padding=&apos;20px&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; paddingBottom=&apos;50px&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; bgColor=&apos;#FFFFFF&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; bgColor=&apos;#e1e6f6&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;15%&apos; height=&apos;auto&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;Date&apos; size=&apos;5&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;40%&apos; height=&apos;auto&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;Description&apos; size=&apos;5&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;15%&apos; height=&apos;auto&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;Debit&apos; size=&apos;5&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;15%&apos; height=&apos;auto&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;Credit&apos; size=&apos;5&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;15%&apos; height=&apos;auto&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;Balance&apos; size=&apos;5&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\tfor each index stay_date in stay_date_list\n\t\t{\n\t\t\tdate_value = stay_date_list.get(stay_date).toDate();\n\t\t\tcredit = 0;\n\t\t\tbalance = balance + rate_per_night;\n\t\t\t%&gt;\n&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; bgColor=&apos;#FFFFFF&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;pc width=&apos;15%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=date_value%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t&lt;pc width=&apos;40%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;text value=&apos;Room(&lt;%=room_type%&gt;)&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\torder = New_Order[Date_Time == date_value &amp;&amp; Check_In_Row_Id == invoice_id &amp;&amp; Compliment_Food == false];\n\t\t\tif(order.count() != 0)\n\t\t\t{\n\t\t\t\ttax = tax + order.Tax_Amount;\n\t\t\t\tbalance = balance + order.sum(Sub_Total);\n\t\t\t\t%&gt;\n&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Restaurant&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\t}\n\t\t\tfor each  service in Add_Service\n\t\t\t{\n\t\t\t\tservice_usage = Generate_Service_Bill[Choose_Service == service &amp;&amp; Date_Time == date_value &amp;&amp; Check_In_Row_Id == invoice_id];\n\t\t\t\tif(service_usage.count() != 0)\n\t\t\t\t{\n\t\t\t\t\trate_list.add(service_usage.sum(Charge));\n\t\t\t\t\tbalance = balance + service_usage.sum(Charge);\n\t\t\t\t\ttax = tax + service_usage.Tax_Amount;\n\t\t\t\t\tcredit = credit + service_usage.sum(Pre_Paid_Amount);\n\t\t\t\t\t%&gt;\n&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=service.Service_Name%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t}\n\t\t\textra_amenities = Add_Amenities_Bill[Date_Time == date_value &amp;&amp; Check_In_Row_Id == invoice_id];\n\t\t\tif(extra_amenities.count() != 0)\n\t\t\t{\n\t\t\t\tbalance = balance + extra_amenities.sum(Total_Charge);\n\t\t\t\tcredit = credit + extra_amenities.sum(Pre_Paid_Amount);\n\t\t\t\tbalance = balance - credit;\n\t\t\t\t%&gt;\n&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Additional Amenity&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;15%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=rate_per_night%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\tif(order.count() != 0)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=order.sum(Sub_Total)%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\t}\n\t\t\tif(rate_list != {})\n\t\t\t{\n\t\t\t\tfor each  rate in rate_list\n\t\t\t\t{\n\t\t\t\t\t%&gt;\n&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=rate%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(extra_amenities.count() != 0)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=extra_amenities.sum(Total_Charge)%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;15%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=credit%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;15%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=balance%&gt;&apos; size=&apos;3&apos; color=&apos;#313849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; padding=&apos;1px&apos; bgColor=&apos;#ebeff7&apos; paddingTop=&apos;0px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t}\n\t\ttax_percent = ((100 * tax) \/ balance).round(2);\n\t\t%&gt;\n&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; paddingTop=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;70%&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;15%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Sub Total&apos; size=&apos;4&apos; color=&apos;#323849&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;15%&apos; paddding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=balance%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; paddingTop=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;70%&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;15%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Tax(&lt;%=tax_percent%&gt;%)&apos; size=&apos;4&apos; color=&apos;#323849&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;15%&apos; paddding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=tax%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; paddingTop=&apos;15px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;70%&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;15%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Grand Total&apos; size=&apos;4&apos; color=&apos;#323849&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;15%&apos; paddding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=balance + tax%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; padding=&apos;1px&apos; bgColor=&apos;#323849&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\tif(terms != &quot;&quot;)\n\t\t{\n\t\t\t%&gt;\n&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;10px&apos; hAlign=&apos;left&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Terms and conditions&apos; size=&apos;5&apos; color=&apos;#323849&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos; white-space=&apos;normal&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=terms%&gt;&apos; size=&apos;2&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; paddingTop=&apos;50px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;10px&apos; bgColor=&apos;#323849&apos;&gt;\n&lt;%\n\t\tif(website != &quot;&quot;)\n\t\t{\n\t\t\t%&gt;\n&lt;text value=&apos;&lt;%=website%&gt;&apos; size=&apos;5&apos; color=&apos;#FFFFFF&apos;&gt;&lt;\/text&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/panel&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/column&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/row&gt;\n&lt;%\n\t}\n\telse\n\t{\n\t\t%&gt;\n&lt;panel&gt;\n  &lt;pr height=&apos;fill&apos; width=&apos;fill&apos;&gt;\n    &lt;pc width=&apos;100%&apos; bgColor=&apos;#FFFFFF&apos; padding=&apos;20px&apos; vAlign=&apos;middle&apos;&gt;\n      &lt;pr height=&apos;auto&apos; width=&apos;auto&apos;&gt;\n        &lt;pc padding=&apos;5px&apos; vAlign=&apos;middle&apos;&gt;\n          &lt;pr&gt;\n            &lt;pc&gt;\n              &lt;text type=&apos;Text&apos; value=&apos;Hi, Kindly select one record from the below view&apos; size=&apos;2&apos;&gt; &lt;\/text&gt;\n            &lt;\/pc&gt;\n          &lt;\/pr&gt;\n          &lt;pr&gt;\n            &lt;pc&gt;\n              &lt;button text=&apos;Check In History&apos; size=&apos;3&apos; color=&apos;#ffffff&apos; bgColor=&apos;#0072F4&apos; type=&apos;flat&apos; action=&apos;OpenReport&apos; target=&apos;same-window&apos; componentLinkName=&apos;Check_In_History&apos; \/&gt; &lt;\/pc&gt;\n          &lt;\/pr&gt;\n        &lt;\/pc&gt;\n      &lt;\/pr&gt;\n    &lt;\/pc&gt;\n  &lt;\/pr&gt;\n&lt;\/panel&gt;\n&lt;%\n\t}\n\n}%&gt;]]>\n<\/dspZml>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page Invoice_2(invoice_no) 
	 	 { 
 	 	 displayname = "Invoice 2" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \n\t\t\tisPdfEnabled='true'\n\t\t\n\t\t\tisPrintEnabled='true'\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dspZml id='zml_snippet'>\n\t<![CDATA[htmlpage zml_snippet(invoice_no)\ncontent\n&lt;%{\n\tif(input.invoice_no != null)\n\t{\n\t\tdetail_map = thisapp.invoice.hotel_details();\n\t\tname = detail_map.get(&quot;name&quot;);\n\t\tlocation = detail_map.get(&quot;location&quot;).toMap();\n\t\tlocation_line1 = location.get(&quot;line 1&quot;);\n\t\tlocation_line2 = location.get(&quot;line 2&quot;);\n\t\tlocation_line3 = location.get(&quot;line 3&quot;);\n\t\tlocation_line4 = location.get(&quot;line 4&quot;);\n\t\temail = detail_map.get(&quot;email&quot;);\n\t\tcontact = detail_map.get(&quot;contact&quot;);\n\t\timage = detail_map.get(&quot;image&quot;);\n\t\tterms = detail_map.get(&quot;terms&quot;);\n\t\twebsite = detail_map.get(&quot;website&quot;);\n\t\tinvoice_id = invoice_no.toLong();\n\t\tinvoice_rec = Check_In_Details_Form[Invoice_No == invoice_id];\n\t\tguest_type = invoice_rec.Check_In_Id.Guest_Type;\n\t\troom_type = invoice_rec.Room_Type.Type_Name;\n\t\tmain_rec = Add_Check_In[ID == invoice_rec.Check_In_Id];\n\t\tnumber_of_nights = 1;\n\t\tif(invoice_rec.Status == &quot;Checked Out&quot;)\n\t\t{\n\t\t\tcheck_out_time = invoice_rec.Check_Out_Time.toDate();\n\t\t\tnumber_of_nights = invoice_rec.Stay_Length;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(zoho.currentdate &lt; main_rec.Check_Out)\n\t\t\t{\n\t\t\t\tcheck_out_time = zoho.currentdate;\n\t\t\t\tnumber_of_nights = days360(main_rec.Check_In,main_rec.Check_Out);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcheck_out_time = main_rec.Check_Out;\n\t\t\t\tnumber_of_nights = invoice_rec.Stay_Length;\n\t\t\t}\n\t\t}\n\t\tstay_dates = thisapp.invoice.stay_dates(invoice_rec.ID);\n\t\tstay_date_list = stay_dates.toList().sort(true);\n\t\trate_per_night = invoice_rec.Amount \/ number_of_nights;\n\t\trate_list = List();\n\t\ttax = 0.0;\n\t\tif(invoice_rec.Tax_Amount != 0)\n\t\t{\n\t\t\ttax_per_night = invoice_rec.Tax_Amount \/ number_of_nights;\n\t\t\ttax = tax_per_night * invoice_rec.Stay_Length;\n\t\t}\n\t\tbalance = 0.0;\n\t\tif(guest_type == &quot;Corporate&quot;)\n\t\t{\n\t\t\tcorporate = Add_Corporate_Client[ID == invoice_rec.Check_In_Id.Corporate];\n\t\t\tto_name = corporate.Corporate_Name;\n\t\t\tto_address_line1 = corporate.Address.address_line_1;\n\t\t\tto_address_line2 = corporate.Address.district_city;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpayment_mode = invoice_rec.Payment_Mode;\n\t\t\tif(payment_mode == &quot;Group Payment&quot;)\n\t\t\t{\n\t\t\t\tguest_id = invoice_rec.Check_In_Id.Guest;\n\t\t\t}\n\t\t\telse if(payment_mode == &quot;Separate Payment&quot;)\n\t\t\t{\n\t\t\t\tguest_id = invoice_rec.Guest;\n\t\t\t}\n\t\t\tguest = Add_Guest[ID == guest_id];\n\t\t\tto_name = guest.Name;\n\t\t\tto_address_line1 = guest.Address.address_line_1;\n\t\t\tto_address_line2 = guest.Address.district_city;\n\t\t}\n\t\t%&gt;\n&lt;row&gt;\n\t\t\t\t\t\t&lt;column width=&apos;70%&apos;&gt;\n\t\t\t\t\t\t&lt;panel&gt;\n\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t&lt;pc width=&apos;100%&apos;&gt;\n\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;50px&apos; bgColor=&apos;#00B0B9&apos;&gt;\n\t\t\t\t\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t\t\t\t\t&lt;pc width=&apos;40%&apos; hAlign=&apos;left&apos;&gt;\n&lt;%\n\t\tif(image != &quot;&quot;)\n\t\t{\n\t\t\t%&gt;\n&lt;image value=&apos;&lt;%=image%&gt;&apos; height=&apos;140px&apos; width=&apos;140px&apos; imageType=&apos;weburl&apos; \/&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;60%&apos; hAlign=&apos;left&apos; paddingLeft=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=name%&gt;&apos; size=&apos;8&apos; bold=&apos;true&apos; color=&apos;#FFFFFF&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;INVOICE&apos; size=&apos;6&apos; color=&apos;#FFFFFF&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;90%&apos; padding=&apos;5px&apos;&gt; \n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;50%&apos; hAlign=&apos;left&apos; padding=&apos;20px&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;To:&apos; size=&apos;5&apos; bold=&apos;true&apos; color=&apos;#00B0B9&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=to_name%&gt;&apos; size=&apos;3&apos; bold=&apos;true&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t&lt;pc&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=to_address_line1%&gt;&apos; size=&apos;3&apos; bold=&apos;true&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t&lt;pc&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=to_address_line2%&gt;&apos; size=&apos;3&apos; bold=&apos;true&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t&lt;pc paddingTop=&apos;20px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;# &lt;%=invoice_no%&gt;&apos; size=&apos;5&apos; color=&apos;#00B0B9&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&quot;&lt;%=check_out_time%&gt;&quot; size=&apos;3&apos; bold=&apos;true&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;50%&apos; hAlign=&apos;left&apos; padding=&apos;20px&apos; paddingLeft=&apos;40px&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;image color=&apos;#FFFFFF&apos; bgColor=&apos;#00B0B9&apos; width=&apos;52px&apos; height=&apos;52px&apos; imageType=&apos;icon&apos; value=&apos;zc-li-solid ui-3-phone&apos; iconsize=&apos;3&apos; cornerRadius=&apos;26px&apos; unicodeValue=&apos;ee0c&apos; \/&gt; \n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=contact%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;image color=&apos;#FFFFFF&apos; bgColor=&apos;#00B0B9&apos; width=&apos;52px&apos; height=&apos;52px&apos; imageType=&apos;icon&apos; value=&apos;zc-li-solid ui-1-email-83&apos; iconsize=&apos;3&apos; cornerRadius=&apos;26px&apos; unicodeValue=&apos;ed57&apos; \/&gt; \n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=email%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;image color=&apos;#FFFFFF&apos; bgColor=&apos;#00B0B9&apos; width=&apos;52px&apos; height=&apos;52px&apos; imageType=&apos;icon&apos; value=&apos;zc-li-solid location-position-pin&apos; iconsize=&apos;3&apos; cornerRadius=&apos;26px&apos; unicodeValue=&apos;e8ab&apos; \/&gt; \t\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=location_line1%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=location_line2%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; hAlign=&apos;left&apos; paddingTop=&apos;50px&apos; paddingBottom=&apos;50px&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; bgColor=&apos;#00B0B9&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;49%&apos; hAlign=&apos;left&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;Description&apos; size=&apos;6&apos; color=&apos;#FFFFFF&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;17%&apos; hAlign=&apos;center&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;Debit&apos; size=&apos;6&apos; color=&apos;#FFFFFF&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;17%&apos; hAlign=&apos;center&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;Credit&apos; size=&apos;6&apos; color=&apos;#FFFFFF&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;17%&apos; hAlign=&apos;center&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t&lt;text value=&apos;Balance&apos; size=&apos;6&apos; color=&apos;#FFFFFF&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;10px&apos;&gt;\n&lt;%\n\t\tfor each index stay_date in stay_date_list\n\t\t{\n\t\t\tdate_value = stay_date_list.get(stay_date).toDate();\n\t\t\tcredit = 0;\n\t\t\tbalance = balance + rate_per_night;\n\t\t\t%&gt;\n&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;pc width=&apos;49%&apos; hAlign=&apos;left&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t&lt;pc padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=date_value%&gt;&apos; size=&apos;4&apos; color=&apos;#00B0B9&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;text value=&apos;Room(&lt;%=room_type%&gt;)&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\torder = New_Order[Date_Time == date_value &amp;&amp; Check_In_Row_Id == invoice_id &amp;&amp; Compliment_Food == false];\n\t\t\tif(order.count() != 0)\n\t\t\t{\n\t\t\t\ttax = tax + order.Tax_Amount;\n\t\t\t\tbalance = balance + order.sum(Sub_Total);\n\t\t\t\t%&gt;\n&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Restaurant charges&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\t}\n\t\t\tfor each  service in Add_Service\n\t\t\t{\n\t\t\t\tservice_usage = Generate_Service_Bill[Choose_Service == service &amp;&amp; Date_Time == date_value &amp;&amp; Check_In_Row_Id == invoice_id];\n\t\t\t\tif(service_usage.count() != 0)\n\t\t\t\t{\n\t\t\t\t\trate_list.add(service_usage.sum(Charge));\n\t\t\t\t\tbalance = balance + service_usage.sum(Charge);\n\t\t\t\t\ttax = tax + service_usage.Tax_Amount;\n\t\t\t\t\tcredit = credit + service_usage.sum(Pre_Paid_Amount);\n\t\t\t\t\t%&gt;\n&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=service.Service_Name%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t}\n\t\t\textra_amenities = Add_Amenities_Bill[Date_Time == date_value &amp;&amp; Check_In_Row_Id == invoice_id];\n\t\t\tif(extra_amenities.count() != 0)\n\t\t\t{\n\t\t\t\tbalance = balance + extra_amenities.sum(Total_Charge);\n\t\t\t\tcredit = credit + extra_amenities.sum(Pre_Paid_Amount);\n\t\t\t\tbalance = balance - credit;\n\t\t\t\t%&gt;\n&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Additional Amenity&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/pc&gt;\n\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;17%&apos; hAlign=&apos;center&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=rate_per_night%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\tif(order.count() != 0)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=order.sum(Sub_Total)%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\t}\n\t\t\tif(rate_list != {})\n\t\t\t{\n\t\t\t\tfor each  rate in rate_list\n\t\t\t\t{\n\t\t\t\t\t%&gt;\n&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=rate%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(extra_amenities.count() != 0)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=extra_amenities.sum(Total_Charge)%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/pc&gt;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;17%&apos; hAlign=&apos;center&apos; padding=&apos;5px&apos;&gt; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=credit%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;17%&apos; hAlign=&apos;center&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=balance%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t}\n\t\ttax_percent = ((100 * tax) \/ balance).round(2);\n\t\t%&gt;\n&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; paddingTop=&apos;10px&apos; &gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;66%&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;17%&apos; padding=&apos;5px&apos; hAlign=&apos;center&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Sub Total&apos; size=&apos;4&apos; color=&apos;#00B0B9&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;17%&apos; padding=&apos;5px&apos; hAlign=&apos;center&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=balance%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; paddingTop=&apos;10px&apos; &gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;66%&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;17%&apos; padding=&apos;5px&apos; hAlign=&apos;center&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Tax(&lt;%=tax_percent%&gt;%)&apos; size=&apos;4&apos; color=&apos;#00B0B9&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;17%&apos; padding=&apos;5px&apos; hAlign=&apos;center&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=tax%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; paddingTop=&apos;15px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;10px&apos; bgColor=&apos;#00B0B9&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;66%&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;17%&apos; padding=&apos;5px&apos; hAlign=&apos;center&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Grand Total&apos; size=&apos;4&apos; color=&apos;#FFFFFF&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;17%&apos; padding=&apos;5px&apos; hAlign=&apos;center&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=balance + tax%&gt;&apos; size=&apos;3&apos; color=&apos;#FFFFFF&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\tif(terms != &quot;&quot;)\n\t\t{\n\t\t\t%&gt;\n&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;90%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc hAlign=&apos;left&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Terms and Conditions&apos; size=&apos;5&apos; color=&apos;#00B0B9&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos; white-space=&apos;normal&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=terms%&gt;&apos; size=&apos;2&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; paddingTop=&apos;100px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;20px&apos; bgColor=&apos;#00B0B9&apos;&gt;\n&lt;%\n\t\tif(website != &quot;&quot;)\n\t\t{\n\t\t\t%&gt;\n&lt;text value=&apos;&lt;%=website%&gt;&apos; size=&apos;5&apos; color=&apos;#FFFFFF&apos;&gt;&lt;\/text&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/panel&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/column&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/row&gt;\n&lt;%\n\t}\n\telse\n\t{\n\t\t%&gt;\n&lt;panel&gt;\n  &lt;pr height=&apos;fill&apos; width=&apos;fill&apos;&gt;\n    &lt;pc width=&apos;100%&apos; bgColor=&apos;#FFFFFF&apos; padding=&apos;20px&apos; vAlign=&apos;middle&apos;&gt;\n      &lt;pr height=&apos;auto&apos; width=&apos;auto&apos;&gt;\n        &lt;pc padding=&apos;5px&apos; vAlign=&apos;middle&apos;&gt;\n          &lt;pr&gt;\n            &lt;pc&gt;\n              &lt;text type=&apos;Text&apos; value=&apos;Hi, Kindly select one record from the below view&apos; size=&apos;2&apos;&gt; &lt;\/text&gt;\n            &lt;\/pc&gt;\n          &lt;\/pr&gt;\n          &lt;pr&gt;\n            &lt;pc&gt;\n              &lt;button text=&apos;Check In History&apos; size=&apos;3&apos; color=&apos;#ffffff&apos; bgColor=&apos;#0072F4&apos; type=&apos;flat&apos; action=&apos;OpenReport&apos; target=&apos;same-window&apos; componentLinkName=&apos;Check_In_History&apos; \/&gt; &lt;\/pc&gt;\n          &lt;\/pr&gt;\n        &lt;\/pc&gt;\n      &lt;\/pr&gt;\n    &lt;\/pc&gt;\n  &lt;\/pr&gt;\n&lt;\/panel&gt;\n&lt;%\n\t}\n\n}%&gt;]]>\n<\/dspZml>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page Today_s_Page 
	 	 { 
 	 	 displayname = "Today's Page" 

 	 	 icon = "" 
	 	 Content="<zml \n\t\t\tisPdfEnabled='false'\n\t\t\n\t\t\tisPrintEnabled='false'\n\t\t\n\t\t\n\t\t\n\t\t\tmobileDeviceConfig='{\"layout\":{\"displayType\":\"card\",\"design\":\"onebyone\",\"forcedOrientation\":false}}'\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dspZml id='zml_snippet1'>\n\t<![CDATA[htmlpage zml_snippet1()\ndisplayname = &quot;zml_snippet&quot;\ncontent\n&lt;%{\n\tvalue_map = thisapp.today_view.performance();\n\tincome = value_map.get(&quot;income&quot;);\n\trevpar = value_map.get(&quot;revpar&quot;);\n\toccupancy = value_map.get(&quot;occupancy&quot;);\n\tadult = value_map.get(&quot;adult&quot;);\n\tchild = value_map.get(&quot;child&quot;);\n\tup_map = {&quot;value&quot;:&quot;zc-li-solid arrows-1-small-triangle-up&quot;,&quot;unicodeValue&quot;:&quot;eb18&quot;};\n\tdown_map = {&quot;value&quot;:&quot;zc-li-solid arrows-1-small-triangle-down&quot;,&quot;unicodeValue&quot;:&quot;eb15&quot;};\n\t%&gt;\n&lt;row&gt;\n\t&lt;column width=&apos;25%&apos;&gt;\n\t&lt;panel&gt;\n\t&lt;pr width=&apos;fill&apos; height=&apos;fill&apos;&gt;\n\t&lt;pc width=&apos;100%&apos; height=&apos;fill&apos; bgColor=&apos;#5697d2&apos; padding=&apos;20px&apos;&gt;\n\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t&lt;pc width=&apos;70%&apos; height=&apos;auto&apos; padding=&apos;10px&apos; hAlign=&apos;left&apos;&gt;\n\t&lt;text value=&quot;Today&apos;s Income&quot; size=&apos;4&apos; color=&apos;#FFFFFF&apos;&gt;&lt;\/text&gt;\n\t&lt;\/pc&gt;\n\t&lt;pc width=&apos;30%&apos;&gt;\n\t&lt;image color=&apos;#FFFFFF&apos; width=&apos;52px&apos; height=&apos;52px&apos; imageType=&apos;icon&apos; value=&apos;zc-li-solid business-money-13&apos; iconsize=&apos;4&apos; cornerRadius=&apos;26px&apos; unicodeValue=&apos;ea48&apos; \/&gt; &lt;\/pc&gt;\n\t&lt;\/pr&gt;\n\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t&lt;pc width=&apos;70%&apos; height=&apos;auto&apos; hAlign=&apos;left&apos; padding=&apos;10px&apos; &gt;\n\t&lt;text value=&quot;&lt;%=income%&gt;&quot; size=&apos;6&apos; color=&apos;#FFFFFF&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t&lt;\/pc&gt;\n\t&lt;pc width=&apos;30%&apos;&gt;\n&lt;%\n\tif(value_map.containKey(&quot;prev income&quot;))\n\t{\n\t\tprev_income = value_map.get(&quot;prev income&quot;);\n\t\tif(income &gt;= prev_income)\n\t\t{\n\t\t\tincome_image_value = up_map.get(&quot;value&quot;);\n\t\t\tincome_image_unicode = up_map.get(&quot;unicodeValue&quot;);\n\t\t\tincome_diff_value = income - prev_income;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tincome_image_value = down_map.get(&quot;value&quot;);\n\t\t\tincome_image_unicode = down_map.get(&quot;unicodeValue&quot;);\n\t\t\tincome_diff_value = prev_income - income;\n\t\t}\n\t\tincome_text_value = income_diff_value \/ prev_income * 100;\n\t\t%&gt;\n&lt;pr&gt;\n\t\t&lt;pc&gt;\n\t\t&lt;image color=&apos;#FFFFFF&apos; width=&apos;40px&apos; height=&apos;40px&apos; imageType=&apos;icon&apos; value=&quot;&lt;%=income_image_value%&gt;&quot; iconsize=&apos;2&apos; cornerRadius=&apos;26px&apos; unicodeValue=&quot;&lt;%=income_image_unicode%&gt;&quot; \/&gt;\n\t\t&lt;\/pc&gt;\n\t\t&lt;pc &gt;\n\t\t&lt;text value=&quot;&lt;%=income_text_value%&gt;%&quot; size=&apos;3&apos; color=&apos;#FFFFFF&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t&lt;\/pc&gt;\n\t\t&lt;\/pr&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;\/pc&gt;\n\t\t&lt;\/pr&gt;\n\t\t&lt;\/pc&gt;\n\t\t&lt;\/pr&gt;\n\t\t&lt;\/panel&gt;\n\t\t&lt;\/column&gt;\n\t\t&lt;column width=&apos;25%&apos;&gt;\n\t\t&lt;panel&gt;\n\t\t&lt;pr width=&apos;fill&apos; height=&apos;fill&apos;&gt;\n\t\t&lt;pc width=&apos;100%&apos; height=&apos;fill&apos; bgColor=&apos;#cc8b5e&apos; padding=&apos;20px&apos;&gt;\n\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t&lt;pc width=&apos;70%&apos; height=&apos;auto&apos; padding=&apos;10px&apos; hAlign=&apos;left&apos;&gt;\n\t\t&lt;text value=&apos;Revenue Per Room&apos; size=&apos;4&apos; color=&apos;#FFFFFF&apos;&gt;&lt;\/text&gt;\n\t\t&lt;\/pc&gt;\n\t\t&lt;pc width=&apos;30%&apos;&gt;\n\t\t&lt;image color=&apos;#FFFFFF&apos; width=&apos;52px&apos; height=&apos;52px&apos; imageType=&apos;icon&apos; value=&apos;zc-li-solid business-money-11&apos; iconsize=&apos;4&apos; cornerRadius=&apos;26px&apos; unicodeValue=&apos;ea46&apos; \/&gt; &lt;\/pc&gt;\n\t\t&lt;\/pr&gt;\n\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t&lt;pc width=&apos;70%&apos; height=&apos;auto&apos; hAlign=&apos;left&apos; padding=&apos;10px&apos;&gt;\n\t\t&lt;text value=&apos;&lt;%=revpar%&gt;&apos; size=&apos;6&apos; color=&apos;#FFFFFF&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t&lt;\/pc&gt;\n\t\t&lt;pc width=&apos;30%&apos;&gt;\n&lt;%\n\tif(value_map.containKey(&quot;prev revpar&quot;))\n\t{\n\t\tprev_revpar = value_map.get(&quot;prev revpar&quot;);\n\t\tif(revpar &gt;= prev_revpar)\n\t\t{\n\t\t\trevpar_image_value = up_map.get(&quot;value&quot;);\n\t\t\trevpar_image_unicode = up_map.get(&quot;unicodeValue&quot;);\n\t\t\trevpar_diff_value = revpar - prev_revpar;\n\t\t}\n\t\telse\n\t\t{\n\t\t\trevpar_image_value = down_map.get(&quot;value&quot;);\n\t\t\trevpar_image_unicode = down_map.get(&quot;unicodeValue&quot;);\n\t\t\trevpar_diff_value = prev_revpar - revpar;\n\t\t}\n\t\trevpar_text_value = revpar_diff_value \/ prev_revpar * 100;\n\t\t%&gt;\n&lt;pr&gt;\n\t\t\t&lt;pc&gt;\n\t\t\t&lt;image color=&apos;#FFFFFF&apos; width=&apos;40px&apos; height=&apos;40px&apos; imageType=&apos;icon&apos; value=&quot;&lt;%=revpar_image_value%&gt;&quot; iconsize=&apos;2&apos; cornerRadius=&apos;26px&apos; unicodeValue=&quot;&lt;%=revpar_image_unicode%&gt;&quot; \/&gt;\n\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;pc &gt;\n\t\t\t&lt;text value=&quot;&lt;%=revpar_text_value%&gt;%&quot; size=&apos;3&apos; color=&apos;#FFFFFF&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\t\n\t\t\t&lt;\/panel&gt;\n\t\t\t&lt;\/column&gt;\n\t\t\t&lt;column width=&apos;25%&apos;&gt;\n\t\t\t&lt;panel&gt;\n\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;fill&apos;&gt;\n\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;fill&apos; bgColor=&apos;#55b987&apos; padding=&apos;20px&apos;&gt;\n\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t&lt;pc width=&apos;70%&apos; height=&apos;auto&apos; padding=&apos;10px&apos; hAlign=&apos;left&apos;&gt;\n\t\t\t&lt;text value=&apos;Occupancy Rate&apos; size=&apos;4&apos; color=&apos;#FFFFFF&apos;&gt;&lt;\/text&gt;\n\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;pc width=&apos;30%&apos;&gt;\n\t\t\t&lt;image color=&apos;#FFFFFF&apos; width=&apos;52px&apos; height=&apos;52px&apos; imageType=&apos;icon&apos; value=&apos;zc-li-solid business-percentage-38&apos; iconsize=&apos;4&apos; cornerRadius=&apos;26px&apos; unicodeValue=&apos;ea50&apos;\/&gt; &lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n\t\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t\t&lt;pc width=&apos;70%&apos; height=&apos;auto&apos; hAlign=&apos;left&apos; padding=&apos;10px&apos;&gt;\n\t\t\t&lt;text value=&apos;&lt;%=occupancy%&gt;&apos; size=&apos;6&apos; color=&apos;#FFFFFF&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;pc width=&apos;30%&apos;&gt;\n&lt;%\n\tif(value_map.containKey(&quot;prev occupancy&quot;))\n\t{\n\t\tprev_occupancy = value_map.get(&quot;prev occupancy&quot;);\n\t\tif(occupancy &gt;= prev_occupancy)\n\t\t{\n\t\t\toccupancy_image_value = up_map.get(&quot;value&quot;);\n\t\t\toccupancy_image_unicode = up_map.get(&quot;unicodeValue&quot;);\n\t\t\toccupancy_diff_value = occupancy - prev_occupancy;\n\t\t}\n\t\telse\n\t\t{\n\t\t\toccupancy_image_value = down_map.get(&quot;value&quot;);\n\t\t\toccupancy_image_unicode = down_map.get(&quot;unicodeValue&quot;);\n\t\t\toccupancy_diff_value = prev_occupancy - occupancy;\n\t\t}\n\t\toccupancy_text_value = occupancy_diff_value \/ prev_occupancy * 100;\n\t\t%&gt;\n&lt;pr&gt;\n\t\t\t\t&lt;pc&gt;\n\t\t\t\t&lt;image color=&apos;#FFFFFF&apos; width=&apos;40px&apos; height=&apos;40px&apos; imageType=&apos;icon&apos; value=&quot;&lt;%=occupancy_image_value%&gt;&quot; iconsize=&apos;2&apos; cornerRadius=&apos;26px&apos; unicodeValue=&quot;&lt;%=occupancy_image_unicode%&gt;&quot; \/&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;pc &gt;\n\t\t\t\t&lt;text value=&quot;&lt;%=occupancy_text_value%&gt;%&quot; size=&apos;3&apos; color=&apos;#FFFFFF&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;\/pc&gt;\n\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t&lt;\/panel&gt;\n\t\t\t\t&lt;\/column&gt;\n\t\t\t\t&lt;column width=&apos;25%&apos;&gt;\n\t\t\t\t&lt;panel&gt;\n\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;fill&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;fill&apos; bgColor=&apos;#d25151&apos; padding=&apos;20px&apos;&gt;\n\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;70%&apos; height=&apos;auto&apos; hAlign=&apos;left&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t&lt;text value=&apos;No. Of Guests&apos; size=&apos;4&apos; color=&apos;#FFFFFF&apos;&gt;&lt;\/text&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;pc width=&apos;30%&apos;&gt;\n\t\t\t\t&lt;image color=&apos;#FFFFFF&apos; width=&apos;52px&apos; height=&apos;52px&apos; imageType=&apos;icon&apos; value=&apos;zc-li-solid ui-1-check-square-11&apos; iconsize=&apos;4&apos; cornerRadius=&apos;26px&apos; unicodeValue=&apos;ed42&apos; \/&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;20%&apos; hAlign=&apos;right&apos; &gt;\n\t\t\t\t&lt;image color=&apos;#FFFFFF&apos; width=&apos;52px&apos; height=&apos;52px&apos; imageType=&apos;icon&apos; value=&apos;zc-li-outline users-multiple-19&apos; iconsize=&apos;4&apos; cornerRadius=&apos;26px&apos; unicodeValue=&apos;ef1c&apos; \/&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;pc width=&apos;30%&apos; hAlign=&apos;left&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t&lt;text value=&quot;&lt;%=adult%&gt;&quot; size=&apos;6&apos; color=&apos;#FFFFFF&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;pc width=&apos;20%&apos; hAlign=&apos;right&apos;&gt;\n\t\t\t\t&lt;image color=&apos;#FFFFFF&apos; width=&apos;52px&apos; height=&apos;52px&apos; imageType=&apos;icon&apos; value=&apos;zc-li-outline emoticons-kid&apos; iconsize=&apos;4&apos; cornerRadius=&apos;26px&apos; unicodeValue=&apos;ebd8&apos; \/&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;pc width=&apos;30%&apos; hAlign=&apos;left&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t&lt;text value=&quot;&lt;%=child%&gt;&quot; size=&apos;6&apos; color=&apos;#FFFFFF&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;\/pr&gt;\t\n\t\t\t\t&lt;\/panel&gt;\n\t\t\t\t&lt;\/column&gt;\n\t\t\t\t&lt;\/row&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dspZml>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"25%\"\n   \t>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dspZml id='zml_snippet2'>\n\t<![CDATA[htmlpage zml_snippet2()\ndisplayname = &quot;zml_snippet&quot;\ncontent\n&lt;%{\n\tvalue_map = thisapp.today_view.quick_link();\n\treservation_count = value_map.get(&quot;reservation&quot;);\n\tcheck_in_count = value_map.get(&quot;check in&quot;);\n\t%&gt;\n&lt;panel&gt;\n\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; padding=&apos;10px&apos; vAlign=&apos;middle&apos;&gt;\n\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t&lt;pc width=&apos;70%&apos; hAlign=&apos;left&apos; paddingLeft=&apos;20px&apos;&gt;\n\t\t\t\t\t&lt;text value=&apos;Quick Links&apos; size=&apos;4&apos; color=&apos;#323232&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t&lt;pc width=&apos;30%&apos; hAlign=&apos;center&apos; paddingLeft=&apos;10px&apos;&gt;\n\t\t\t\t\t&lt;image color=&apos;#323232&apos; width=&apos;52px&apos; height=&apos;52px&apos; imageType=&apos;icon&apos; value=&apos;zc-li-solid ui-2-link-72&apos; iconsize=&apos;4&apos; cornerRadius=&apos;26px&apos; unicodeValue=&apos;edc6&apos; \/&gt;\n\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; padding=&apos;1px&apos; bgColor=&apos;#8f9197&apos;&gt; \n\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;80px&apos;&gt;\n\t\t\t\t\t&lt;pc width=&apos;70%&apos; padding=&apos;20px&apos; hAlign=&apos;left&apos;&gt;\n\t\t\t\t\t&lt;button width=&apos;180px&apos; text=&apos;Reserve&apos; size=&apos;3&apos; color=&apos;#FFFFFF&apos; bgColor=&apos;#5697d2&apos; btnType=&apos;flat&apos; action=&apos;Form&apos; componentLinkName=&apos;Reservation&apos; target=&apos;new-window&apos; \/&gt;\n\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t&lt;pc width=&apos;30%&apos; paddingLeft=&apos;10px&apos; hAlign=&apos;center&apos;&gt;\n\t\t\t\t\t&lt;text value=&quot;&lt;%=reservation_count%&gt;&quot; size=&apos;6&apos; color=&apos;#323232&apos;  action=&apos;Report&apos; componentLinkName=&apos;All_Reservations&apos; parameters=&apos;Added_Time_op=32&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;80px&apos;&gt;\n\t\t\t\t\t&lt;pc width=&apos;70%&apos; padding=&apos;20px&apos; hAlign=&apos;left&apos;&gt;\n\t\t\t\t\t&lt;button width=&apos;180px&apos; text=&apos;Check In&apos; size=&apos;3&apos; color=&apos;#FFFFFF&apos; bgColor=&apos;#cc8b5e&apos; btnType=&apos;flat&apos; action=&apos;Form&apos; componentLinkName=&apos;Check_In&apos; target=&apos;new-window&apos; \/&gt;\n\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t&lt;pc width=&apos;30%&apos; paddingLeft=&apos;10px&apos; hAlign=&apos;center&apos;&gt;\n\t\t\t\t\t&lt;text value=&quot;&lt;%=check_in_count%&gt;&quot; size=&apos;6&apos; color=&apos;#323232&apos; action=&apos;Report&apos; componentLinkName=&apos;Active_Check_Ins&apos; parameters=&apos;Added_Time_op=32&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;\/pr&gt;\n\t\t\t&lt;\/pc&gt;\t\t\t\n\t\t&lt;\/pr&gt;\n\t&lt;\/panel&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dspZml>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dspZml id='zml_snippet3'>\n\t<![CDATA[htmlpage zml_snippet3()\ndisplayname = &quot;zml_snippet&quot;\ncontent\n&lt;%{\n\tvalue_map = thisapp.today_view.new_arrivals();\n\tindividual_count = value_map.get(&quot;guest&quot;);\n\tcorporate_count = value_map.get(&quot;corporate&quot;);\n\t%&gt;\n&lt;panel&gt;\n\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; padding=&apos;10px&apos; bgColor=&apos;#FFFFFF&apos; vAlign=&apos;middle&apos;&gt;\n\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;70%&apos; paddingLeft=&apos;20px&apos; hAlign=&apos;left&apos;&gt;\n\t\t\t\t&lt;text value=&apos;New Arrivals&apos; size=&apos;4&apos; color=&apos;#323232&apos;&gt;&lt;\/text&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;pc width=&apos;30%&apos; hAlign=&apos;center&apos; paddingLeft=&apos;10px&apos;&gt;\n\t\t\t\t&lt;image color=&apos;#323232&apos; width=&apos;52px&apos; height=&apos;52px&apos; imageType=&apos;icon&apos; value=&apos;zc-li-outline users-multiple-19&apos; iconsize=&apos;4&apos; cornerRadius=&apos;26px&apos; unicodeValue=&apos;ef1c&apos; \/&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; padding=&apos;1px&apos; bgColor=&apos;#8f9197&apos;&gt; \n\t\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;60px&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;70%&apos; paddingLeft=&apos;20px&apos; hAlign=&apos;left&apos;&gt;\n\t\t\t\t&lt;text value=&apos;Individuals&apos; size=&apos;4&apos; color=&apos;#323232&apos;&gt;&lt;\/text&gt;\t\t\t\t\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;pc width=&apos;30%&apos;  paddingLeft=&apos;10px&apos; hAlign=&apos;center&apos;&gt;\n\t\t\t\t&lt;text value=&quot;&lt;%=individual_count%&gt;&quot; size=&apos;6&apos; color=&apos;#323232&apos;&gt;&lt;\/text&gt;\t\t\t\t\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;60px&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;70%&apos;  paddingLeft=&apos;20px&apos; hAlign=&apos;left&apos;&gt;\n\t\t\t\t&lt;text value=&apos;Corporates&apos; size=&apos;4&apos; color=&apos;#323232&apos;&gt;&lt;\/text&gt;\t\t\t\t\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;pc width=&apos;30%&apos;  paddingLeft=&apos;10px&apos; hAlign=&apos;center&apos;&gt;\n\t\t\t\t&lt;text value=&quot;&lt;%=corporate_count%&gt;&quot; size=&apos;6&apos; color=&apos;#323232&apos;&gt;&lt;\/text&gt;\t\t\t\t\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n\t\t&lt;\/pc&gt;\n\t&lt;\/pr&gt;\n&lt;\/panel&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dspZml>\n<\/column>\n<\/row>\n<\/column><column\n   \t\t width=\"50%\"\n   \t>\n\t<chart    \t\t type = 'Column'\n   \t\t appLinkName = 'thisapp'\n   \t\t formLinkName = 'Add_Room'\n   \t\t xtitle = 'Room Status'\n   \t\t xfield = 'Room_Status'\n   \t\t ytitle = 'Room Count'\n   \t\t yfields = 'count:Room_Number'\n   \t\t bgColor = '#FFFFFF'\n   \t\t theme = 'theme1'\n   \t\t legendPos = 'center.top'\n\n\/>\n<\/column><column\n   \t\t width=\"25%\"\n   \t>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dspZml id='zml_snippet'>\n\t<![CDATA[htmlpage zml_snippet()\ncontent\n&lt;%{\n\tvalue_map = thisapp.today_view.expected_today();\n\treservation = value_map.get(&quot;reservation&quot;);\n\tcheck_out = value_map.get(&quot;check out&quot;);\n\t%&gt;\n&lt;panel&gt;\n\t&lt;pr width=&apos;fill&apos; height=&apos;fill&apos;&gt;\n\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; bgColor=&apos;#FFFFFF&apos; padding=&apos;10px&apos;&gt;\n\t\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;70%&apos; paddingLeft=&apos;20px&apos; hAlign=&apos;left&apos;&gt;\n\t\t\t\t&lt;text value=&apos;Expected Today&apos; size=&apos;4&apos; color=&apos;#323232&apos;&gt;&lt;\/text&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;pc width=&apos;30%&apos;  hAlign=&apos;center&apos;&gt;\n\t\t\t\t&lt;image color=&apos;#323232&apos; width=&apos;52px&apos; height=&apos;52px&apos; imageType=&apos;icon&apos; value=&apos;zc-li-outline ui-1-calendar-check-62&apos; iconsize=&apos;4&apos; cornerRadius=&apos;26px&apos; unicodeValue=&apos;ece5&apos; \/&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; padding=&apos;1px&apos; bgColor=&apos;#8f9197&apos;&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;80px&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;70%&apos;  hAlign=&apos;left&apos; padding=&apos;20px&apos;&gt;   \n\t\t\t\t&lt;button width=&apos;180px&apos; text=&apos;Yet To Check In&apos; size=&apos;3&apos; color=&apos;#FFFFFF&apos; bgColor=&apos;#55b987&apos; btnType=&apos;flat&apos; action=&apos;Report&apos; componentLinkName=&apos;Upcoming_Check_Ins&apos; parameters=&apos;Check_In=&lt;%=zoho.currentdate%&gt;&apos; target=&apos;new-window&apos; \/&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;pc width=&apos;30%&apos;   hAlign=&apos;center&apos;&gt;\n\t\t\t\t&lt;text value=&quot;&lt;%=reservation%&gt;&quot; size=&apos;6&apos; color=&apos;#323232&apos;&gt;&lt;\/text&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;80px&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;70%&apos;   hAlign=&apos;left&apos; padding=&apos;20px&apos;&gt; \n\t\t\t\t&lt;button width=&apos;180px&apos; text=&apos;Yet To Check Out&apos; size=&apos;3&apos; color=&apos;#FFFFFF&apos; bgColor=&apos;#d25151&apos; btnType=&apos;flat&apos; action=&apos;Report&apos; componentLinkName=&apos;Active_Check_Ins&apos; parameters=&apos;Check_Out=&lt;%=zoho.currentdate%&gt;&apos; target=&apos;new-window&apos; \/&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;pc width=&apos;30%&apos; hAlign=&apos;center&apos;&gt;\n\t\t\t\t&lt;text value=&quot;&lt;%=check_out%&gt;&quot; size=&apos;6&apos; color=&apos;#323232&apos;&gt;&lt;\/text&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n\t\t&lt;\/pc&gt;\n\t&lt;\/pr&gt;\n&lt;\/panel&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dspZml>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dspZml id='zml_snippet4'>\n\t<![CDATA[htmlpage zml_snippet4()\ndisplayname = &quot;zml_snippet&quot;\ncontent\n&lt;%{\n\tvalue_map = thisapp.today_view.complaints();\n\traised = value_map.get(&quot;raised&quot;);\n\tclosed = value_map.get(&quot;closed&quot;);\n\t%&gt;\n&lt;panel&gt;\n\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; padding=&apos;10px&apos; bgColor=&apos;#FFFFFF&apos; vAlign=&apos;middle&apos;&gt;\n\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;70%&apos; paddingLeft=&apos;20px&apos; hAlign=&apos;left&apos;&gt;\n\t\t\t\t&lt;text value=&apos;Complaints&apos; size=&apos;4&apos; color=&apos;#323232&apos;&gt;&lt;\/text&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;pc width=&apos;30%&apos; hAlign=&apos;center&apos; paddingLeft=&apos;10px&apos;&gt;\n\t\t\t\t&lt;image color=&apos;#323232&apos; width=&apos;52px&apos; height=&apos;52px&apos; imageType=&apos;icon&apos; value=&apos;zc-li-outline education-paper&apos; iconsize=&apos;4&apos; cornerRadius=&apos;26px&apos; unicodeValue=&apos;e7c4&apos; \/&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;100%&apos; height=&apos;auto&apos; padding=&apos;1px&apos; bgColor=&apos;#8f9197&apos;&gt; \n\t\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;60px&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;70%&apos; paddingLeft=&apos;20px&apos; hAlign=&apos;left&apos;&gt;\n\t\t\t\t&lt;text value=&apos;Raised&apos; size=&apos;4&apos; color=&apos;#323232&apos;&gt;&lt;\/text&gt;\t\t\t\t\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;pc width=&apos;30%&apos;  paddingLeft=&apos;10px&apos; hAlign=&apos;center&apos;&gt;\n\t\t\t\t&lt;text value=&quot;&lt;%=raised%&gt;&quot; size=&apos;6&apos; color=&apos;#323232&apos;&gt;&lt;\/text&gt;\t\t\t\t\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;60px&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;70%&apos;  paddingLeft=&apos;20px&apos; hAlign=&apos;left&apos;&gt;\n\t\t\t\t&lt;text value=&apos;Closed&apos; size=&apos;4&apos; color=&apos;#323232&apos;&gt;&lt;\/text&gt;\t\t\t\t\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t&lt;pc width=&apos;30%&apos;  paddingLeft=&apos;10px&apos; hAlign=&apos;center&apos;&gt;\n\t\t\t\t&lt;text value=&quot;&lt;%=closed%&gt;&quot; size=&apos;6&apos; color=&apos;#323232&apos;&gt;&lt;\/text&gt;\t\t\t\t\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n\t\t&lt;\/pc&gt;\n\t&lt;\/pr&gt;\n&lt;\/panel&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dspZml>\n<\/column>\n<\/row>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<chart    \t\t type = 'Column'\n   \t\t appLinkName = 'thisapp'\n   \t\t formLinkName = 'Maintenance_Block'\n   \t\t xtitle = 'Status'\n   \t\t xfield = 'Status'\n   \t\t ytitle = 'Maintenance Blocks'\n   \t\t yfields = 'count:ID'\n   \t\t DelugeCriteria = '(((((Block_From is today)||(Block_To is today))||(Added_Time is today))))'\n   \t\t bgColor = 'rgb(255, 255, 255)'\n   \t\t theme = 'theme1'\n   \t\t legendPos = 'center.top'\n   \t\t titleSize = '4'\n   \t\t title = 'Maintenance'\n\n\/>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='html_snippet'>\n\t<![CDATA[htmlpage html_snippet()\ncontent\n&lt;%{\n\t%&gt;\n&lt;style&gt;\n\t\t.zcpage-chart-livetemplate\n\t\t{\n\t\t\twidth:100% !important;\n\t\t}\n\t\t#row_8{\n\t\t\tdisplay:none;\n\t\t}\n\t&lt;\/style&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page Monthly_View 
	 	 { 
 	 	 displayname = "Monthly View" 

 	 	 icon = "" 
	 	 Content="<zml \n\t\t\tisPdfEnabled='false'\n\t\t\n\t\t\tisPrintEnabled='false'\n\t\t\n\t\t\tbgColor='#F4F4F5'\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"30%\"\n   \t>\n\t<chart    \t\t type = 'Donut'\n   \t\t appLinkName = 'thisapp'\n   \t\t formLinkName = 'Raise_New_Complaint'\n   \t\t xtitle = 'Status'\n   \t\t xfield = 'Status'\n   \t\t ytitle = 'Number Of Complaints'\n   \t\t yfields = 'count:Complaint_Id'\n   \t\t DelugeCriteria = '(((Added_Time in this month)))'\n   \t\t bgColor = 'rgb(255, 255, 255)'\n   \t\t theme = 'theme1'\n   \t\t legendPos = 'center.top'\n   \t\t titleSize = '4'\n   \t\t title = 'Complaint Stats'\n\n\/>\n<\/column><column\n   \t\t width=\"70%\"\n   \t>\n\t<chart    \t\t type = 'Column'\n   \t\t appLinkName = 'thisapp'\n   \t\t formLinkName = 'Maintenance_Block'\n   \t\t xtitle = 'Maintenance Status'\n   \t\t xfield = 'Status'\n   \t\t ytitle = 'Maintenance'\n   \t\t yfields = 'count:ID'\n   \t\t DelugeCriteria = '(((((Added_Time in this month)||(Block_From in this month))||(Block_To in this month))))'\n   \t\t bgColor = 'rgb(255, 255, 255)'\n   \t\t theme = 'theme1'\n   \t\t legendPos = 'center.top'\n   \t\t titleSize = '4'\n   \t\t title = 'Maintenance'\n\n\/>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"30%\"\n   \t>\n\t<chart    \t\t type = 'Donut'\n   \t\t appLinkName = 'thisapp'\n   \t\t formLinkName = 'Reservation'\n   \t\t xtitle = 'Status'\n   \t\t xfield = 'Status'\n   \t\t yfields = 'count:Reservation_Id'\n   \t\t bgColor = '#FFFFFF'\n   \t\t theme = 'theme2'\n   \t\t legendPos = 'center.top'\n   \t\t titleSize = '4'\n   \t\t title = 'Reservation Stats'\n   \t\t titleColor = '#444444'\n\n\/>\n<\/column><column\n   \t\t width=\"70%\"\n   \t>\n\t<chart    \t\t type = 'Column'\n   \t\t appLinkName = 'thisapp'\n   \t\t formLinkName = 'Add_Check_In'\n   \t\t xtitle = 'Check In'\n   \t\t xfield = 'Check_In'\n   \t\t yfields = 'count:Reservation_Id.Reservation_Id'\n   \t\t DelugeCriteria = '((((Reservation_Id.Reservation_Id is not null )&amp;&amp;(Check_In in this month))))'\n   \t\t bgColor = 'rgb(255, 255, 255)'\n   \t\t theme = 'theme3'\n   \t\t legendPos = 'center.top'\n   \t\t titleSize = '4'\n   \t\t title = 'Confirmed Reservations'\n   \t\t titleColor = '#323232'\n\n\/>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<chart    \t\t type = 'Stacked Column'\n   \t\t appLinkName = 'thisapp'\n   \t\t formLinkName = 'Add_Check_In'\n   \t\t xtitle = 'Check In'\n   \t\t xfield = 'Check_In'\n   \t\t groupBy = 'Guest_Type'\n   \t\t ytitle = 'Walk In Count'\n   \t\t yfields = 'count:Check_In'\n   \t\t DelugeCriteria = '((((Reservation_Id.Reservation_Id is null )&amp;&amp;(Check_In in this month))))'\n   \t\t bgColor = 'rgb(255, 255, 255)'\n   \t\t theme = 'theme1'\n   \t\t legendPos = 'center.top'\n   \t\t titleSize = '4'\n   \t\t title = 'Walk Ins'\n   \t\t titleColor = '#323232'\n\n\/>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='html_snippet'>\n\t<![CDATA[htmlpage html_snippet()\ncontent\n&lt;%{\n\t%&gt;\n&lt;style&gt;\n\t\t.zcpage-chart-livetemplate\n\t\t{\n\t\t\twidth:100% !important;\n\t\t}\n\t\t#row_4{\n\t\t\tdisplay:none;\n\t\t}\n\t&lt;\/style&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
	}
	section Request_Handling
	{
		displayname= "Request Handling"
		icon = "education-award-55"
		form Raise_New_Complaint
		{
			displayname = "Raise New Complaint"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Complaint_Id
			(
    			type = autonumber
				displayname = "Complaint Id"
				start index = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Room
			(
				type = picklist
				values  = Add_Room[Room_Status == "Occupied"].ID
    			displayformat = [Room_Number]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Type
			(
				type = radiobuttons
				values = {"Maintenance Issue", "Room Shifting"}
				others option = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Description
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Received_by
			(
				type = picklist
				displayname = "Received by"
				values  = Add_Staff.ID
    			displayformat = [" " + Name.first_name + " " + Name.last_name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Status
			(
				type = picklist
				values = {"Pending", "Closed"}
				initial value = "Pending"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Closing_Notes
			(
    			type = textarea
				displayname = "Closing Notes"
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "objects-baloon"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list New_Complaints
		{
			displayName = "New Complaints"
			show all rows from Raise_New_Complaint  [Status == "Pending"]  
			(
				Room
				Description
				Status
				custom action "Close Request"
				(
	  			workflow = Close_Request
				show action in edit record menu = true
				column header = "Close Request"
				condition = (Status == "Pending")
				)
				Closing_Notes as "Closing Notes"
				Type
				Complaint_Id as "Complaint Id"
				Received_by as "Received by"
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Complaint_Id as "Complaint Id"
							Room
							Type
							Description
							Status
							Received_by as "Received by"
				"Close Request"
							Closing_Notes as "Closing Notes"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Complaint_Id as "Complaint Id"
							Room
							Type
							Description
							Received_by as "Received by"
							Status
							Closing_Notes as "Closing Notes"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Closed_Ones
		{
			displayName = "Closed Ones"
			show all rows from Raise_New_Complaint  [Status == "Closed"]  
			(
				Complaint_Id as "Complaint Id"
				Room
				Description
				Status
				Closing_Notes as "Closing Notes"
				Type
			)
			options
			(
				icon = "location-route-close"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Complaint_Id as "Complaint Id"
							Room
							Type
							Description
							Status
							Closing_Notes as "Closing Notes"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Complaint_Id as "Complaint Id"
							Room
							Description
							Status
							Closing_Notes as "Closing Notes"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Shift_a_Room
		{
			displayname = "Shift a Room"
			store data in zc = false
			success message = ""
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Current_Room
			(
				type = picklist
				displayname = "Current Room"
				values  = Add_Room[Room_Status == "Occupied"].ID
    			displayformat = [Room_Number]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Check_In_Id
			(
				type = picklist
				displayname = "Check In Id"
				values  = Add_Check_In.ID
    			displayformat = [Check_In_Id]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Check_In
			(
    			type = date
				displayname = "Check In"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Check_Out
			(
    			type = date
				displayname = "Check Out"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Guest
			(
				type = picklist
				values  = Add_Guest.ID
    			displayformat = [" " + Name.first_name + " " + Name.last_name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Number_Of_Adults
			(
				type = number
				displayname = "Number Of Adults"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Number_Of_Child
			(
				type = number
				displayname = "Number Of Child"
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Move_To
			(
				type = picklist
				displayname = "Move To"
				values  = Add_Room[Room_Status != "Occupied" && Room_Status != "Maintenance Block"].ID
    			displayformat = [Room_Number]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Apply_Rate
			(
				type = picklist
				displayname = "Apply Rate"
				values  = Add_Rate_Type.ID
    			displayformat = [Rate_Type]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Reason
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			plain
			(
    			type = plaintext
				value = ""
	 			row = 1
	 			column = 2   
				width = medium
			)
	
			actions
			{
				Submit
				(
   					type = submit
   					displayname = "Submit"
				)
				Reset
				(
   					type = reset
   					displayname = "Reset"
				)
			}
		}
	}
	section Maintenance
	{
		icon = "arrows-4-block-top-right"
		form Maintenance_Block
		{
			displayname = "Maintenance Block"
			success message = "Maintenance Request Added Successfully"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Complaint_Id
			(
				type = picklist
				displayname = "Complaint Id"
				values  = Raise_New_Complaint.ID
    			displayformat = [Complaint_Id]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Room
			(
				type = picklist
				values  = Add_Room[Room_Status != "Occupied" && Room_Status != "Maintenance Block"].ID
    			displayformat = [Room_Number]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			plain
			(
    			type = plaintext
				value = ""
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Maintenance_Type
			(
				type = picklist
				displayname = "Maintenance Type"
				values  = Add_Maintenance_Type.ID
    			displayformat = [Type]
				allow new entries = true
				[
					displayname = "Add New Type"
				]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Block_From
			(
    			type = date
				displayname = "Block From"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Block_To
			(
    			type = date
				displayname = "Block To"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			Description
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			Closing_Notes
			(
    			type = textarea
				displayname = "Closing Notes"
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Status
			(
				type = picklist
				values = {"Pending", "Cancelled", "On Going", "Closed"}
				initial value = "Pending"
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "media-1-button-circle-stop"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Upcoming
		{
			displayName = "Upcoming"
			show all rows from Maintenance_Block  [Status == "Pending"]  
			(
				Room
				Maintenance_Type as "Maintenance Type"
				Block_From as "Block From"
				Block_To as "Block To"
				Status
				custom action "Cancel"
				(
	  			workflow = Cancel4
				show action in edit record menu = true
				column header = "Cancel"
				condition = (Status == "Pending")
				)
				custom action "Move To On Going"
				(
	  			workflow = Move_To_On_Going
				show action in edit record menu = true
				column header = "Move To On Going"
				condition = (Block_From is today)
				)
			)
			options
			(
				icon = "weather-forecast"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Room
							Maintenance_Type as "Maintenance Type"
							Block_From as "Block From"
							Block_To as "Block To"
							Status
				"Cancel"
				"Move To On Going"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Block_From as "Block From"
							Block_To as "Block To"
							Status
						)
					)
					datablock2
					(
			 			layout type = -2
		     			title = "Room"
		     			related field =  Room[Status == "Pending"]
						fields
						(
							Room_Number as "Room Number"
							Room_Type as "Room Type"
							Room_Status as "Room Status"
						)
					)
					datablock3
					(
			 			layout type = -2
		     			title = "Maintenance Type"
		     			related field =  Maintenance_Type[Status == "Pending"]
						fields
						(
							Type
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list On_Going
		{
			displayName = "On Going"
			show all rows from Maintenance_Block  [Status == "On Going"]  
			(
				Maintenance_Type as "Maintenance Type"
				Status
				custom action "Close Maintenance"
				(
	  			workflow = Close_Maintenance
				show action in view header = true
				show action in edit record menu = true
				column header = "Close Maintenance"
				condition = (Status == "On Going")
				)
				Room
				Block_From as "Block From"
				Block_To as "Block To"
				Description
			)
			options
			(
				icon = "shopping-mobile-card"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Room
							Maintenance_Type as "Maintenance Type"
							Block_From as "Block From"
							Block_To as "Block To"
							Status
							Description
				"Close Maintenance"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
			 			"Close Maintenance"
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
								"Close Maintenance"
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
								"Close Maintenance"
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Block_From as "Block From"
							Block_To as "Block To"
							Status
						)
					)
					datablock2
					(
			 			layout type = -2
		     			title = "Room"
		     			related field =  Room[Status == "On Going"]
						fields
						(
							Room_Number as "Room Number"
							Room_Type as "Room Type"
							Room_Status as "Room Status"
						)
					)
					datablock3
					(
			 			layout type = -2
		     			title = "Maintenance Type"
		     			related field =  Maintenance_Type[Status == "On Going"]
						fields
						(
							Type
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Maintenance_History
		{
			displayName = "Maintenance History"
			show all rows from Maintenance_Block    
			(
				Maintenance_Type as "Maintenance Type"
				Status
				Room
				Block_From as "Block From"
				Block_To as "Block To"
				Description
				Closing_Notes as "Closing Notes"
			)
			options
			(
				icon = "location-route-close"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Room
							Maintenance_Type as "Maintenance Type"
							Block_From as "Block From"
							Block_To as "Block To"
							Description
							Status
							Closing_Notes as "Closing Notes"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Block_From as "Block From"
							Block_To as "Block To"
							Status
						)
					)
					datablock2
					(
			 			layout type = -2
		     			title = "Room"
		     			related field =  Room
						fields
						(
							Room_Number as "Room Number"
							Room_Type as "Room Type"
							Room_Status as "Room Status"
						)
					)
					datablock3
					(
			 			layout type = -2
		     			title = "Maintenance Type"
		     			related field =  Maintenance_Type
						fields
						(
							Type
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Maintenance_Types
		{
			displayName = "Maintenance Types"
			show all rows from Add_Maintenance_Type    
			(
				Type
			)
			options
			(
				icon = "tech-2-pci-card"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Type
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Type
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Service_Usage
	{
		displayname= "Service Usage"
		icon = "business-payment"
		form Add_Service
		{
			displayname = "Add Service"
			success message = "Service Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have unique Service_Name
			(
    			type = text
				displayname = "Service Name"
    			description
    			[
    				type = help_text
    			 	message = "Eg : Laundry"
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Type
			(
				type = radiobuttons
				values = {"Inbuilt", "Additional"}
				initial value = "Additional"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "tech-2-l-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Add"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Generate_Service_Bill
		{
			displayname = "Generate Service Bill"
			success message = "Service Bill Added Successfully"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Date_Time
			(
    			type = datetime
				displayname = "Date-Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Room
			(
				type = picklist
				values  = Add_Room[Room_Status == "Occupied"].ID
    			displayformat = [Room_Number]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Check_In_Row_Id
			(
				type = picklist
				displayname = "Check In Row Id"
				values  = Check_In_Details_Form.ID
    			displayformat = [Invoice_No]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Choose_Service
			(
				type = picklist
				displayname = "Choose Service"
				values  = Add_Service[Type == "Additional"].ID
    			displayformat = [Service_Name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Usage_Details
			(
    			type = textarea
				displayname = "Usage Details"
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Charge
			(
				type = USD
	 			row = 1
	 			column = 1   
				width = medium
			)
			Tax_Amount
			(
				displayname = "Tax Amount"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Total
			(
				type = USD
				initial value = 0.00
	 			row = 1
	 			column = 1   
				width = medium
			)
			Pre_Paid_Amount
			(
				displayname = "Pre Paid Amount"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			Payment_Status
			(
				type = picklist
				displayname = "Payment Status"
				values = {"Un Paid", "Partly Paid", "Fully Paid"}
				initial value = "Un Paid"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "business-money-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Add"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_Amenities_Bill
		{
			displayname = "Add Amenities Bill"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Date_Time
			(
    			type = datetime
				displayname = "Date-Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Room
			(
				type = picklist
				values  = Add_Room[Room_Status == "Occupied"].ID
    			displayformat = [Room_Number]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Check_In_Row_Id
			(
				type = picklist
				displayname = "Check In Row Id"
				values  = Check_In_Details_Form.ID
    			displayformat = [Invoice_No]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Select_Amenities
			(
				type = list
				displayname = "Select Amenities"
				values  = Add_Room_Amenity.ID
    			displayformat = [Amenity_Name]
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Total_Charge
			(
				displayname = "Total Charge"
				type = USD
	 			row = 1
	 			column = 1   
				width = medium
			)
			Pre_Paid_Amount
			(
				displayname = "Pre Paid Amount"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			Payment_Status
			(
				type = picklist
				displayname = "Payment Status"
				values = {"Un Paid", "Partly Paid", "Fully Paid"}
				initial value = "Un Paid"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Service_Bills
		{
			displayName = "Service Bills"
			show all rows from Generate_Service_Bill    
			(
				Choose_Service as "Choose Service"
				Usage_Details as "Usage Details"
				Room
				Charge
				Total
				Pre_Paid_Amount as "Pre Paid Amount"
				Tax_Amount as "Tax Amount"
				Payment_Status as "Payment Status"
				Date_Time as "Date-Time"
				Check_In_Row_Id as "Check In Row Id"
			)
			sort by
			(
				Room ascending
			)
			options
			(
				icon = "business-money-12"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Choose_Service as "Choose Service"
							Room
							Usage_Details as "Usage Details"
							Charge
							Date_Time as "Date-Time"
							Check_In_Row_Id as "Check In Row Id"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Room
							Choose_Service as "Choose Service"
							Usage_Details as "Usage Details"
							Charge
							Total
							Tax_Amount as "Tax Amount"
							Pre_Paid_Amount as "Pre Paid Amount"
							Payment_Status as "Payment Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Additional_Amenities_Bills1
		{
			displayName = "Additional Amenities Bills"
			show all rows from Add_Amenities_Bill    
			(
				Room
				Select_Amenities as "Select Amenities"
				Total_Charge as "Total Charge"
				Pre_Paid_Amount as "Pre Paid Amount"
				Payment_Status as "Payment Status"
				Date_Time as "Date-Time"
				Check_In_Row_Id as "Check In Row Id"
			)
			options
			(
				icon = "design-bullet-list-67"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Room
							Select_Amenities as "Select Amenities"
							Total_Charge as "Total Charge"
							Pre_Paid_Amount as "Pre Paid Amount"
							Payment_Status as "Payment Status"
							Date_Time as "Date-Time"
							Check_In_Row_Id as "Check In Row Id"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Room
							Select_Amenities as "Select Amenities"
							Total_Charge as "Total Charge"
							Pre_Paid_Amount as "Pre Paid Amount"
							Payment_Status as "Payment Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Contacts
	{
		icon = "users-single-04"
		form Add_Corporate_Client
		{
			displayname = "Add Corporate Client"
			success message = "Company Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			plain
			(
    			type = plaintext
				value = "Here you can add your corporate clients"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Corporate_Name
			(
    			type = text
				displayname = "Corporate Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Email
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Phone_Number
			(
    			type = phonenumber
				displayname = "Phone"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Address
			(
    			type = address
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_1
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_2
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			Payment_Options
			(
				type = section
				displayname = "Payment Options"
	 			row = 2
	 			column = 0   
				width = medium
			)
			Set_Payment_Frequency
			(
    			type = checkbox
				displayname = "Set Payment Frequency"
				initial value = false
	 			row = 2
	 			column = 1   
				width = medium
			)
			Select_Frequency
			(
				type = radiobuttons
				displayname = "Select Frequency"
				values = {"Daily", "Weekly", "Monthly", "Yearly"}
	 			row = 2
	 			column = 1   
				width = medium
			)
			Next_Reminder_On
			(
    			type = date
				displayname = "Next Reminder On"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 2
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "design-2-3d-29"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Add"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_Guest
		{
			displayname = "Add Guest"
			success message = "Guest Added Successfully"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Name
			(
    			type = name
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Phone_Number
			(
    			type = phonenumber
				displayname = "Phone"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Email
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = medium
			)
			Photo
			(
    			type = image
				source  = file
				aspect ratio = original
				camera = primary
				show gallery = true
				switch camera = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			Address
			(
    			type = address
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_1
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_2
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Source
			(
				type = radiobuttons
				values = {"Simply Guest", "Corporate"}
				initial value = "Simply Guest"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Corporate
			(
				type = picklist
				values  = Add_Corporate_Client.ID
    			displayformat = [Corporate_Name]
				allow new entries = true
				[
					displayname = "Add New Company"
				]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			ID_Proof
			(
    			type = upload file
				displayname = "ID Proof"
				browse = local_drive
	 			row = 1
	 			column = 1   
				width = medium
			)
			Employee_Id
			(
    			type = text
				displayname = "Employee Id"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "design-2-3d-29"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Add"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Corporates
		{
			displayName = "Corporates"
			show all rows from Add_Corporate_Client    
			(
				Corporate_Name as "Corporate Name"
				Email
				Phone_Number as "Phone"
				Address 
	 			(
	      			displayformat = [address_line_1+""+address_line_2+""+district_city+""+state_province+""+postal_Code+""+country]
	      			enable = Show_As_Text
	 			)
				Select_Frequency as "Frequency"
				Next_Reminder_On as "Next Reminder On"
				Set_Payment_Frequency as "Set Payment Frequency"
			)
			options
			(
				icon = "users-single-04"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Corporate_Name as "Corporate Name"
							Email
							Phone_Number as "Phone"
							Address
							Select_Frequency as "Frequency"
							Next_Reminder_On as "Next Reminder On"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Corporate_Name as "Corporate Name"
							Email
							Phone_Number as "Phone"
							Address
							Select_Frequency as "Frequency"
							Next_Reminder_On as "Next Reminder On"
							Set_Payment_Frequency as "Set Payment Frequency"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Corporate_Guests
		{
			displayName = "Corporate Guests"
			show all rows from Add_Guest  [Source == "Corporate"]  
			(
				Name 
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				Address 
	 			(
	      			displayformat = [address_line_1+""+address_line_2+""+district_city+""+state_province+""+postal_Code+""+country]
	      			enable = Show_As_Text
	 			)
				Phone_Number as "Phone"
				Email
				Photo
				Source
				Corporate
				Employee_Id as "Employee Id"
				ID_Proof as "ID Proof"
				Corporate.Email
			)
			group by
			(
				Corporate ascending
			)
			sort by
			(
				Employee_Id ascending
			)
			options
			(
				icon = "design-bullet-list-67"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Employee_Id as "Employee Id"
							Name
							Phone_Number as "Phone"
							Email
							Photo
							Address
							Corporate
							ID_Proof as "ID Proof"
							Corporate.Email as "Email"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Name
							Phone_Number as "Phone"
							Email
							Photo
							Address
							Source
							Corporate
							ID_Proof as "ID Proof"
							Employee_Id as "Employee Id"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Other_Guests
		{
			displayName = "Other Guests"
			show all rows from Add_Guest  [Source == "Simply Guest"]  
			(
				Name 
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				Phone_Number as "Phone"
				Address 
	 			(
	      			displayformat = [address_line_1+""+address_line_2+""+district_city+""+state_province+""+postal_Code+""+country]
	      			enable = Show_As_Text
	 			)
				Email
				ID_Proof as "ID Proof"
				Source
				Corporate
				Photo
				Employee_Id as "Employee Id"
			)
			options
			(
				icon = "travel-world"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Name
							Phone_Number as "Phone"
							Email
							Address
							ID_Proof as "ID Proof"
							Source
							Corporate
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Name
							Phone_Number as "Phone"
							Email
							Address
							ID_Proof as "ID Proof"
							Source
							Corporate
							Photo
							Employee_Id as "Employee Id"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Payments1
	{
		displayname= "Payments"
		icon = "shopping-credit-card-in"
		form Add_Corporate_Payment
		{
			displayname = "Add Corporate Payment"
			success message = "Corporate Payment Added Successfully"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Payment_On
			(
    			type = date
				displayname = "Payment On"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Select_Corporate
			(
				type = picklist
				displayname = "Select Corporate"
				values  = Add_Corporate_Client.ID
    			displayformat = [Corporate_Name]
				sortorder = ascending
    			description
    			[
    				type = help_text
    			 	message = "First select corporate to know booking ids"
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Check_Ins_To_Be_Covered
			(
				type = list
				displayname = "Check Ins To Be Covered"
				values  = Add_Check_In.ID
    			displayformat = [Check_In_Id]
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Room_Tariff
			(
				displayname = "Room Tariff"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Restaurant_Charge
			(
				displayname = "Restaurant Charge"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Service_Charge
			(
				displayname = "Service Charge"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Amenity_Charge
			(
				displayname = "Amenity Charge"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Total_Amount
			(
				displayname = "Total Amount"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Prepaid_Amount
			(
				displayname = "Prepaid Amount"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Remaining_Balance
			(
				displayname = "Remaining Balance"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Amount_Received
			(
    			type = checkbox
				displayname = "Amount Received"
				initial value = false
    			description
    			[
    				type = help_text
    			 	message = "By Clicking here you are agree to complete this payment."
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Incharge
			(
				type = picklist
				values  = Add_Staff.ID
    			displayformat = [" " + Name.first_name + " " + Name.last_name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "shopping-mobile-card"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Add"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Pending_Corporate_Invoices
		{
			displayName = "Pending Corporate Invoices"
			show all rows from Check_In_Details_Form  [Payment_Status != "Fully Paid" && Status == "Checked Out" && Check_In_Id.Guest_Type == "Corporate"]  
			(
				Check_In_Id as "Check In Id"
				Guest
				Room_Type as "Room Type"
				Room_Number as "Room Number"
				Number_Of_Adult as "Number Of Adult"
				Number_Of_Child as "Number Of Child"
				Check_In_Time as "Check In Time"
				Payment_Mode as "Payment Mode"
				Status
				Invoice_No as "Invoice No"
				Check_Out_Time as "Check Out Time"
				Rate
				Amount as "Room Tariff"
				Tax_Amount as "Tax Amount"
				Total_Amount as "Total Amount"
				(
					display = total	
				)
				Payment_Status as "Payment Status"
				Check_In_Id.Corporate_Will_Pay_For as "Corporate Will Pay For"
				Check_In_Id.Corporate
				custom action "Invoice 1"
				(
	  			workflow = Invoice_5
				show action in edit record menu = true
				column header = "Invoice 1"
				)
				custom action "Invoice 2"
				(
	  			workflow = Invoice_6
				show action in edit record menu = true
				column header = "Invoice 2"
				)
			)
			group by
			(
				Check_In_Id.Corporate ascending
			)
			sort by
			(
				Invoice_No ascending
			)
			options
			(
				icon = "shopping-receipt-list-42"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Check_In_Id.Corporate as "Corporate"
							Invoice_No as "Invoice No"
							Guest
							Check_In_Time as "Check In Time"
							Check_Out_Time as "Check Out Time"
							Amount as "Room Tariff"
							Tax_Amount as "Tax Amount"
							Total_Amount as "Total Amount"
							Check_In_Id.Corporate_Will_Pay_For as "Corporate Will Pay For"
				"Invoice 1"
				"Invoice 2"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Check_In_Id as "Check In Id"
							Guest
							Room_Type as "Room Type"
							Room_Number as "Room Number"
							Tax_Amount as "Tax Amount"
							Number_Of_Child as "Number Of Child"
							Check_In_Time as "Check In Time"
							Check_Out_Time as "Check Out Time"
							Rate
							Amount as "Room Tariff"
							Tax_Amount as "Tax Amount"
							Total_Amount as "Total Amount"
							Payment_Mode as "Payment Mode"
							Payment_Status as "Payment Status"
							Status
							Invoice_No as "Invoice No"
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "Service Charges"
		     			related field =  Generate_Service_Bill.Check_In_Row_Id
						fields
						(
							Date_Time as "Date-Time"
							Choose_Service as "Choose Service"
							Usage_Details as "Usage Details"
							Charge
							Tax_Amount as "Tax Amount"
							Total
						)
					)
					datablock3
					(
			 			layout type = -1
		     			title = "Additional Amenities"
		     			related field =  Add_Amenities_Bill.Check_In_Row_Id
						fields
						(
							Date_Time as "Date-Time"
							Select_Amenities as "Select Amenities"
							Total_Charge as "Total Charge"
						)
					)
					datablock4
					(
			 			layout type = -1
		     			title = "Restaurant Charges"
		     			related field =  New_Order.Check_In_Row_Id
						fields
						(
							Order_Id as "Order Id"
							Select_Timing as "Select Timing"
							Date_Time as "Date-Time"
							Sub_Total as "Sub Total"
							Tax_Amount as "Tax Amount"
							Net_Total as "Net Total"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Other_Payments
		{
			displayName = "Other Payments"
			show all rows from Add_Payment  [Check_In_Id.Guest_Type == "Individual"]  
			(
				Total_Amount as "Total Amount"
				Pre_Paid_Amount as "Pre Paid Amount"
				Incharge
				Payment_Id as "Payment Id"
				Check_In_Id
				Remaining_Balance as "Remaining Balance"
				Payment_Done as "Payment Done"
				Room_Tariff as "Room Tariff"
				Rooms
				Take_Advance_Amount as "Take Advance Amount"
				Advance_Amount as "Advance Amount"
				Restaurant_Charge as "Restaurant Charge"
				Service_Charge as "Service Charge"
			)
			options
			(
				icon = "shopping-credit-card-in"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Total_Amount as "Total Amount"
							Pre_Paid_Amount as "Pre Paid Amount"
							Incharge
							Check_In_Id
							Room_Tariff as "Room Tariff"
							Restaurant_Charge as "Restaurant Charge"
							Service_Charge as "Service Charge"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Total_Amount as "Total Amount"
							Pre_Paid_Amount as "Pre Paid Amount"
							Incharge
							Payment_Id as "Payment Id"
							Check_In_Id
							Remaining_Balance as "Remaining Balance"
							Room_Tariff as "Room Tariff"
							Room_Tariff as "Room Tariff"
							Total_Amount as "Total Amount"
							Advance_Amount as "Advance Amount"
							Advance_Amount as "Advance Amount"
							Check_In_Id
							Check_In_Id
							Check_In_Id
						)
					)
					datablock2
					(
			 			layout type = -2
		     			title = "Check_In_Id"
		     			related field =  Check_In_Id[Check_In_Id.Guest_Type == "Individual"]
						fields
						(
							Reservation_Id as "Reservation Id"
							Check_In as "Check In"
							Check_Out as "Check Out"
							Guest_Type as "Guest Type"
							Guest
							Corporate
							Room_Tariff as "Room Tariff"
							Tax_Amount as "Tax Amount"
							Total_Amount as "Total Amount"
							Advance_Amount as "Advance Amount"
							Corporate_Will_Pay_For as "Corporate Will Pay For"
							Status
							Payment_Status as "Payment Status"
							Check_In_Id as "Check In Id"
						)
					)
					datablock3
					(
			 			layout type = -1
		     			title = "Rooms"
		     			related field =  Rooms[Check_In_Id.Guest_Type == "Individual"]
						fields
						(
							Floor
							Room_Number as "Room Number"
							Room_Type as "Room Type"
							Room_Status as "Room Status"
							Dial_Number as "Dial Number"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Paid_Corporate_Payments
		{
			displayName = "Paid Corporate Payments"
			show all rows from Add_Corporate_Payment  [Amount_Received == true]  
			(
				Payment_On as "Payment On"
				Select_Corporate as "Select Corporate"
				Check_Ins_To_Be_Covered as "Check Ins To Be Covered"
				Total_Amount as "Total Amount"
				Prepaid_Amount as "Prepaid Amount"
				Amount_Received as "Amount Received"
				Incharge
			)
			options
			(
				icon = "shopping-credit-card-in"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Payment_On as "Payment On"
							Select_Corporate as "Select Corporate"
							Check_Ins_To_Be_Covered as "Check Ins To Be Covered"
							Total_Amount as "Total Amount"
							Prepaid_Amount as "Prepaid Amount"
							Amount_Received as "Amount Received"
							Incharge
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Payment_On as "Payment On"
							Select_Corporate as "Select Corporate"
							Check_Ins_To_Be_Covered as "Check Ins To Be Covered"
							Total_Amount as "Total Amount"
							Prepaid_Amount as "Prepaid Amount"
							Amount_Received as "Amount Received"
							Total_Amount as "Total Amount"
						)
					)
					datablock2
					(
			 			layout type = -2
		     			title = "Select Corporate"
		     			related field =  Select_Corporate[Amount_Received == true]
						fields
						(
							Corporate_Name as "Corporate Name"
							Email
							Phone_Number as "Phone"
							Address
							Set_Payment_Frequency as "Set Payment Frequency"
							Select_Frequency as "Select Frequency"
							Next_Reminder_On as "Next Reminder On"
						)
					)
					datablock3
					(
			 			layout type = -1
		     			title = "Covered Check Ins"
		     			related field =  Check_Ins_To_Be_Covered[Amount_Received == true]
						fields
						(
							Check_In_Id as "Check In Id"
							Check_In as "Check In"
							Check_Out as "Check Out"
							Corporate
							Room_Tariff as "Room Tariff"
							Tax_Amount as "Tax Amount"
							Total_Amount as "Total Amount"
							Advance_Amount as "Advance Amount"
							Corporate_Will_Pay_For as "Corporate Will Pay For"
							Payment_Status as "Payment Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section About_Hotel
	{
		displayname= "About Hotel"
		icon = "travel-hotel-symbol"
		form About_Hotel
		{
			displayname = "About Hotel"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Details
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have unique Hotel_Name
			(
    			type = text
				displayname = "Hotel Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Contact_Number
			(
    			type = phonenumber
				displayname = "Contact Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Email
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Address
			(
    			type = address
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_1
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_2
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			Logo
			(
    			type = image
				source  = file
				aspect ratio = original
				camera = primary
				show gallery = true
				switch camera = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			Website
			(
    			type = url
				enable  linkname
	 			row = 1
	 			column = 1   
				width = medium
			)
			Terms_And_Conditions_For_Invoice
			(
    			type = textarea
				displayname = "Terms And Conditions For Invoice"
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			Default_Timings
			(
				type = section
				displayname = "Default Timings"
				visibility = true
	 			row = 2
	 			column = 0   
				width = medium
			)
			must have Check_In_Time
			(
				type = picklist
				displayname = "Check In Time"
				values = {"00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00"}
	 			row = 2
	 			column = 1   
				width = medium
			)
			must have Check_Out_Time
			(
				type = picklist
				displayname = "Check Out Time"
				values = {"00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00"}
	 			row = 2
	 			column = 1   
				width = medium
			)
			must have Schedule_Time
			(
    			type = datetime
				displayname = "Schedule Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 2
	 			column = 1   
				width = medium
			)
			Note
			(
				type = section
	 			row = 3
	 			column = 0   
				width = medium
			)
			plain
			(
    			type = plaintext
				value = ""
	 			row = 3
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "travel-hotel-symbol"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		properties
		{
			total entries
			{
				allowed count = 1
			}
		}
		}
	}
	section Room_Types
	{
		displayname= "Room Types"
		icon = "furniture-table"
		form Add_Room_Type
		{
			displayname = "Add Room Type"
			success message = "Room Type Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have unique Type_Name
			(
    			type = text
				displayname = "Type Name"
    			description
    			[
    				type = help_text
    			 	message = "Eg : Deluxe, Standard"
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Bed_Type
			(
				type = picklist
				displayname = "Bed Type"
				values = {"Single", "Double", "Triple", "Quad", "Queen", "King"}
				others option = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Number_Of_Adults
			(
				type = number
				displayname = "Number Of Adults"
				maxchar = 2
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Number_Of_Child
			(
				type = number
				displayname = "Number Of Child"
				initial value = 0
    			description
    			[
    				type = help_text
    			 	message = "Without any additional charge"
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Number_Of_Extra_Adults
			(
				type = number
				displayname = "Number Of Extra Adults"
				initial value = 0
    			description
    			[
    				type = help_text
    			 	message = "With additional charge"
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
			Image
			(
    			type = image
				source  = file
				aspect ratio = original
				camera = primary
				show gallery = true
				switch camera = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			Room_Amenities
			(
				type = list
				displayname = "Room Amenities"
				values  = Add_Room_Amenity.ID
    			displayformat = [Amenity_Name]
				allow new entries = true
				[
					displayname = "Add New Amenity"
				]
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
			With_Ac
			(
    			type = checkbox
				displayname = "With Ac"
				initial value = false
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "furniture-table"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Amenities
	{
		icon = "travel-hotel-symbol"
		form Add_Room_Amenity
		{
			displayname = "Add Room Amenity"
			success message = "Amenity Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have unique Amenity_Name
			(
    			type = text
				displayname = "Amenity Name"
    			description
    			[
    				type = help_text
    			 	message = "Eg : Television , Wifi"
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "design-2-3d-29"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Add"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Rooms_And_Rates
	{
		displayname= "Rooms And Rates"
		icon = "social-1-logo-yelp"
		form Add_Rooms_And_Rates
		{
			displayname = "Add Rooms And Rates"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Rate_Type
			(
				type = picklist
				displayname = "Rate Type"
				values  = Add_Rate_Type.ID
    			bidirectional = Rooms_And_Rates
    			displayformat = [Rate_Type]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Room_Type
			(
				type = picklist
				displayname = "Room Type"
				values  = Add_Room_Type.ID
    			displayformat = [Type_Name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Rate_Per_Night
			(
				displayname = "Rate Per Night"
				type = USD
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Charge_Per_Extra_Adult
			(
				displayname = "Charge Per Extra Adult"
				type = USD
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "social-1-logo-yelp"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Rooms_And_Rates_Report
		{
			displayName = "Rooms And Rates Report"
   			hide = true
			show all rows from Add_Rooms_And_Rates    
			(
				Room_Type as "Room Type"
				Rate_Per_Night as "Rate Per Night"
				Rate_Type as "Rate Type"
				Charge_Per_Extra_Adult as "Charge Per Extra Adult"
			)
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Rate_Type as "Rate Type"
							Room_Type as "Room Type"
							Rate_Per_Night as "Rate Per Night"
							Charge_Per_Extra_Adult as "Charge Per Extra Adult"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Room_Type as "Room Type"
							Rate_Per_Night as "Rate Per Night"
							Rate_Type as "Rate Type"
							Charge_Per_Extra_Adult as "Charge Per Extra Adult"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Restaurant
	{
		icon = "food-cutlery-75"
		form Add_Food
		{
			displayname = "Add Food"
			success message = "Food Detail Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have unique Item_Name
			(
    			type = text
				displayname = "Item Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Cost
			(
				type = USD
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Food_Availability
			(
				type = checkboxes
				displayname = "Food Availability"
				values  = Food_Timings.ID
    			displayformat = [Name]
				allow new entries = true
				[
					displayname = "Add New Timing"
				]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "furniture-fridge"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Food_Availabilities
	{
		displayname= "Food Availabilities"
		icon = "furniture-fridge"
		form Food_Timings
		{
			displayname = "Food Timings"
			success message = "Food Availability Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have unique Name
			(
    			type = text
    			description
    			[
    				type = help_text
    			 	message = "Eg : Breakfast, Dinner"
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "furniture-fridge"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Tables
	{
		icon = "furniture-table"
		form Add_Table
		{
			displayname = "Add Table"
			success message = "Table Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have unique Table_Number
			(
    			type = text
				displayname = "Table Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Table_Name
			(
    			type = text
				displayname = "Table Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Number_Of_Seats
			(
				type = number
				displayname = "Number Of Seats"
				maxchar = 5
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "design-2-3d-29"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Add"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Restaurant1
	{
		displayname= "Restaurant"
		icon = "food-barbecue-15"
		list Guest_Orders
		{
			displayName = "Guest Orders"
   			hide = true
			show all rows from New_Order  [Room_Guest == true && Check_In_Row_Id.Check_In_Id is not null]  
			(
				Order_Id as "Order Id"
				Order_For as "Order For"
				Choose_Table as "Choose Table"
				Room_Guest as "Room Guest"
				Select_Room as "Select Room"
				Check_In_Row_Id as "Invoice No"
				Select_Timing as "Select Timing"
				Attendant
				Order_Status as "Order Status"
				Tax_Amount as "Tax Amount"
				Payment_Status as "Payment Status"
				Compliment_Food as "Compliment Food"
				Check_In_Row_Id.Check_In_Id as "Check In Id"
				Date_Time as "Date-Time"
				Net_Total as "Net Total"
				Sub_Total as "Sub Total"
				custom action "Print Bill"
				(
	  			workflow = Print_Bill
				show action in edit record menu = true
				column header = "Print Bill"
				)
			)
			options
			(
				icon = "shopping-list"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Order_Id as "Order Id"
							Date_Time as "Date-Time"
							Check_In_Row_Id.Check_In_Id as "Check In Id"
							Check_In_Row_Id as "Invoice No"
							Select_Timing as "Select Timing"
							Select_Room as "Select Room"
							Net_Total as "Net Total"
				"Print Bill"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Order_Id as "Order Id"
							Order_For as "Order For"
							Choose_Table as "Choose Table"
							Room_Guest as "Room Guest"
							Select_Room as "Select Room"
							Check_In_Row_Id as "Invoice No"
							Select_Timing as "Select Timing"
							Date_Time as "Date-Time"
							Attendant
							Order_Status as "Order Status"
							Sub_Total as "Sub Total"
							Tax_Amount as "Tax Amount"
							Net_Total as "Net Total"
							Payment_Status as "Payment Status"
							Compliment_Food as "Compliment Food"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		form New_Order
		{
			displayname = "New Order"
			success message = "New Order Added Successfully"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Order_Id
			(
    			type = autonumber
				displayname = "Order Id"
				start index = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Order_For
			(
				type = picklist
				displayname = "Order For"
				values = {"Dine In", "Take Away", "Room Service"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			Choose_Table
			(
				type = picklist
				displayname = "Choose Table"
				values  = Add_Table.ID
    			displayformat = [Table_Number]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Room_Guest
			(
    			type = checkbox
				displayname = "Room Guest"
				initial value = false
	 			row = 1
	 			column = 1   
				width = medium
			)
			Select_Room
			(
				type = picklist
				displayname = "Select Room"
				values  = Add_Room[Room_Status == "Occupied"].ID
    			displayformat = [Room_Number]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Check_In_Row_Id
			(
				type = picklist
				displayname = "Check In Row Id"
				values  = Check_In_Details_Form.ID
    			displayformat = [Invoice_No]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Select_Timing
			(
				type = picklist
				displayname = "Select Timing"
				values  = Food_Timings.ID
    			displayformat = [Name]
				sortorder = ascending
    			description
    			[
    				type = help_text
    			 	message = "Select timing to add orders"
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Orders
			(
				type = grid
				values  = Food_Order_Details.ID
    			bidirectional = Order_Id
	 			row = 2
	 			column = 1   
				width = medium
			)
			Section1
			(
				type = section
				displayname = "Section"
	 			row = 3
	 			column = 0   
				width = medium
			)
			Date_Time
			(
    			type = datetime
				displayname = "Date-Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 3
	 			column = 1   
				width = medium
			)
			must have Attendant
			(
				type = picklist
				values  = Add_Staff.ID
    			displayformat = [" " + Name.first_name + " " + Name.last_name]
				sortorder = ascending
	 			row = 3
	 			column = 1   
				width = medium
			)
			must have Order_Status
			(
				type = picklist
				displayname = "Order Status"
				values = {"Pending", "Cancelled", "Item Served", "Completed"}
				initial value = "Pending"
	 			row = 3
	 			column = 1   
				width = medium
			)
			must have Sub_Total
			(
				displayname = "Sub Total"
				type = USD
				initial value = 0.00
	 			row = 3
	 			column = 1   
				width = medium
			)
			Tax_Amount
			(
				displayname = "Tax Amount"
				type = USD
				initial value = 0
	 			row = 3
	 			column = 1   
				width = medium
			)
			must have Net_Total
			(
				displayname = "Net Total"
				type = USD
				initial value = 0.00
	 			row = 3
	 			column = 1   
				width = medium
			)
			Payment_Status
			(
				type = picklist
				displayname = "Payment Status"
				values = {"Un Paid", "Paid"}
				initial value = "Un Paid"
	 			row = 3
	 			column = 1   
				width = medium
			)
			Compliment_Food
			(
    			type = checkbox
				displayname = "Compliment Food"
				initial value = false
    			description
    			[
    				type = help_text
    			 	message = "Make this order at no cost"
    			]
	 			row = 3
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "users-2-child"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Pending_Orders
		{
			displayName = "Pending Orders"
			show all rows from New_Order  [Order_Status == "Pending" || Order_Status == "Item Served"]  
			(
				Order_Id as "Order Id"
				Order_For as "Order For"
				Choose_Table as "Choose Table"
				Room_Guest as "Room Guest"
				Select_Room as "Select Room"
				Select_Timing as "Select Timing"
				Date_Time as "Date-Time"
				Attendant
				Order_Status as "Order Status"
				Compliment_Food as "Compliment Food"
				Sub_Total as "Sub Total"
				Net_Total as "Net Total"
				custom action "Add More Item"
				(
	  			workflow = Add_More_Item
				show action in edit record menu = true
				column header = "Add More Item"
				)
				custom action "Complete Order"
				(
	  			workflow = Complete_Order
				show action in edit record menu = true
				column header = "Complete Order"
				condition = (Order_Status == "Item Served")
				)
			)
			options
			(
				icon = "ui-2-hourglass"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Order_Id as "Order Id"
							Order_For as "Order For"
							Choose_Table as "Choose Table"
							Room_Guest as "Room Guest"
							Select_Room as "Select Room"
							Select_Timing as "Select Timing"
							Date_Time as "Date-Time"
				"Add More Item"
				"Complete Order"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Order_Id as "Order Id"
							Order_For as "Order For"
							Choose_Table as "Choose Table"
							Room_Guest as "Room Guest"
							Select_Room as "Select Room"
							Select_Timing as "Select Timing"
							Date_Time as "Date-Time"
							Attendant
							Order_Status as "Order Status"
							Compliment_Food as "Compliment Food"
							Sub_Total as "Sub Total"
							Net_Total as "Net Total"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Awaiting_Payments
		{
			displayName = "Awaiting Payments"
			show all rows from New_Order  [Order_Status == "Completed" && Room_Guest == false]  
			(
				Order_Id as "Order Id"
				Order_For as "Order For"
				Choose_Table as "Choose Table"
				Room_Guest as "Room Guest"
				Select_Room as "Select Room"
				Select_Timing as "Select Timing"
				Date_Time as "Date-Time"
				Order_Status as "Order Status"
				Compliment_Food as "Compliment Food"
				Sub_Total as "Sub Total"
				custom action "Print"
				(
	  			workflow = Print
				show action in edit record menu = true
				column header = "Print"
				)
				custom action "Paid"
				(
	  			workflow = Payment
				show action in edit record menu = true
				column header = "Paid"
				)
				Attendant
				Net_Total as "Net Total"
			)
			options
			(
				icon = "shopping-cash-register"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Order_Id as "Order Id"
							Order_For as "Order For"
							Select_Timing as "Select Timing"
							Date_Time as "Date-Time"
							Attendant
							Net_Total as "Net Total"
				"Print"
				"Paid"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Order_Id as "Order Id"
							Order_For as "Order For"
							Choose_Table as "Choose Table"
							Room_Guest as "Room Guest"
							Select_Room as "Select Room"
							Select_Timing as "Select Timing"
							Date_Time as "Date-Time"
							Attendant
							Order_Status as "Order Status"
							Compliment_Food as "Compliment Food"
							Sub_Total as "Sub Total"
							Net_Total as "Net Total"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Order_History
		{
			displayName = "Order History"
			show all rows from New_Order  [Order_Status == "Completed"]  
			(
				Order_Id as "Order Id"
				Order_For as "Order For"
				Choose_Table as "Choose Table"
				Room_Guest as "Room Guest"
				Select_Room as "Select Room"
				Select_Timing as "Select Timing"
				Date_Time as "Date-Time"
				Attendant
				Order_Status as "Order Status"
				Compliment_Food as "Compliment Food"
				Sub_Total as "Sub Total"
				Net_Total as "Net Total"
				Tax_Amount as "Tax Amount"
				Payment_Status as "Payment Status"
				Check_In_Row_Id as "Check In Row Id"
				custom action "View Bill"
				(
	  			workflow = View_Bill
				show action in edit record menu = true
				column header = "View Bill"
				condition = (Order_Status == "Completed" && Compliment_Food == false)
				)
			)
			options
			(
				icon = "shopping-list"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Order_Id as "Order Id"
							Order_For as "Order For"
							Choose_Table as "Choose Table"
							Room_Guest as "Room Guest"
							Select_Room as "Select Room"
							Select_Timing as "Select Timing"
							Date_Time as "Date-Time"
				"View Bill"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Order_Id as "Order Id"
							Order_For as "Order For"
							Choose_Table as "Choose Table"
							Room_Guest as "Room Guest"
							Select_Room as "Select Room"
							Select_Timing as "Select Timing"
							Date_Time as "Date-Time"
							Attendant
							Order_Status as "Order Status"
							Compliment_Food as "Compliment Food"
							Sub_Total as "Sub Total"
							Net_Total as "Net Total"
							Tax_Amount as "Tax Amount"
							Payment_Status as "Payment Status"
							Check_In_Row_Id as "Check In Row Id"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list New_KOT
		{
			displayName = "New KOT"
			show all rows from Food_Order_Details  [Status == "Waiting"]  
			(
				Choose_Item as "Item"
				Notes
				Quantity
				Unit_Price as "Unit Price"
				Status
				Staff
				Comments
				custom action "Accept"
				(
	  			workflow = Accept
				show action in edit record menu = true
				column header = "Accept"
				)
				custom action "Reject"
				(
	  			workflow = Reject
				show action in edit record menu = true
				column header = "Reject"
				)
				Order_Id as "Order Id"
			)
			sort by
			(
				Order_Id ascending
			)
			options
			(
				icon = "users-2-child"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Order_Id as "Order Id"
							Choose_Item as "Item"
							Notes
							Quantity
				"Accept"
				"Reject"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Choose_Item as "Item"
							Notes
							Quantity
							Unit_Price as "Unit Price"
							Status
							Staff
							Comments
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Items_In_Queue
		{
			displayName = "Items In Queue"
			show all rows from Food_Order_Details  [Status == "Item Accepted"]  
			(
				Choose_Item as "Item"
				Notes
				Quantity
				Unit_Price as "Unit Price"
				Status
				Staff
				Comments
				custom action "Ready To Serve"
				(
	  			workflow = Ready_To_Serve
				show action in edit record menu = true
				column header = "Ready To Serve"
				)
				Order_Id as "Order Id"
			)
			sort by
			(
				Order_Id ascending
			)
			options
			(
				icon = "shopping-cart-simple-remove"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Order_Id as "Order Id"
							Choose_Item as "Item"
							Notes
							Quantity
				"Ready To Serve"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Choose_Item as "Item"
							Notes
							Quantity
							Unit_Price as "Unit Price"
							Status
							Staff
							Comments
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Pending_KOT
		{
			displayName = "Pending KOT"
			show all rows from Food_Order_Details  [Status == "Item Accepted" || Status == "Ready To Serve"]  
			(
				Choose_Item as "Item"
				Notes
				Quantity
				Unit_Price as "Unit Price"
				Status
				Staff
				Comments
				custom action "Item Served"
				(
	  			workflow = Item_Served
				show action in edit record menu = true
				column header = "Item Served"
				condition = (Status == "Ready To Serve")
				)
				custom action "Cancel"
				(
	  			workflow = Cancel
				show action in edit record menu = true
				column header = "Cancel"
				)
				Order_Id as "Order Id"
			)
			sort by
			(
				Order_Id ascending
			)
			options
			(
				icon = "ui-2-hourglass"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Order_Id as "Order Id"
							Choose_Item as "Item"
							Notes
							Quantity
							Status
				"Item Served"
				"Cancel"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Choose_Item as "Item"
							Notes
							Quantity
							Unit_Price as "Unit Price"
							Status
							Staff
							Comments
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Kitchen_Orders
		{
			displayName = "All Kitchen Orders"
			show all rows from Food_Order_Details    
			(
				Choose_Item as "Item"
				Quantity
				Unit_Price as "Unit Price"
				Notes
				Status
				Comments
				Staff
				Order_Id as "Order Id"
				Total_Price as "Total Price"
			)
			options
			(
				icon = "education-book-open"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Choose_Item as "Item"
							Notes
							Quantity
							Unit_Price as "Unit Price"
							Status
							Staff
							Order_Id as "Order Id"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Choose_Item as "Item"
							Quantity
							Unit_Price as "Unit Price"
							Notes
							Status
							Comments
							Staff
							Order_Id as "Order Id"
							Total_Price as "Total Price"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Food_Order_Details
	{
		displayname= "Food Order Details"
		icon = "users-2-contacts-44"
		form Food_Order_Details
		{
			displayname = "Food Order Details"
			success message = "Food Order Detail Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Order_Id
			(
				type = picklist
				displayname = "Order Id"
				values  = New_Order.ID
    			bidirectional = Orders
    			displayformat = [Order_Id]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Choose_Item
			(
				type = picklist
				displayname = "Choose Item"
				values  = Add_Food.ID
    			displayformat = [Item_Name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Notes
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Unit_Price
			(
				displayname = "Unit Price"
				type = USD
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Quantity
			(
				type = number
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Total_Price
			(
				displayname = "Total Price"
				type = USD
	 			row = 1
	 			column = 1   
				width = medium
			)
			Staff
			(
				type = picklist
				values  = Add_Staff.ID
    			displayformat = [" " + Name.prefix + " " + Name.first_name + " " + Name.last_name + " " + Name.suffix]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Status
			(
				type = picklist
				values = {"Waiting", "Item Accepted", "Item Rejected", "Item Cancelled", "Ready To Serve", "Item Served"}
				initial value = "Waiting"
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Comments
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "users-2-contacts-44"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Maintenance_Types
	{
		displayname= "Maintenance Types"
		icon = "tech-2-pci-card"
		form Add_Maintenance_Type
		{
			displayname = "Add Maintenance Type"
			success message = "Maintenance Type Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have unique Type
			(
    			type = text
    			description
    			[
    				type = help_text
    			 	message = "Eg : Air Condition, Plumbing"
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "tech-2-keyboard-wireless"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Add"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Bill
	{
		icon = "business-money-11"
				 page Restaurant_Bill(Order_Id) 
	 	 { 
 	 	 displayname = "Restaurant Bill" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \n\t\t\tisPdfEnabled='true'\n\t\t\n\t\t\tisPrintEnabled='true'\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dspZml id='zml_snippet'>\n\t<![CDATA[htmlpage zml_snippet(Order_Id)\ncontent\n&lt;%{\n\tif(Order_Id != null)\n\t{\n\t\tdetail_map = thisapp.invoice.hotel_details();\n\t\tname = detail_map.get(&quot;name&quot;);\n\t\tlocation = detail_map.get(&quot;location&quot;).toMap();\n\t\tlocation_line1 = location.get(&quot;line 1&quot;);\n\t\tlocation_line2 = location.get(&quot;line 2&quot;);\n\t\tlocation_line3 = location.get(&quot;line 3&quot;);\n\t\tlocation_line4 = location.get(&quot;line 4&quot;);\n\t\temail = detail_map.get(&quot;email&quot;);\n\t\tcontact = detail_map.get(&quot;contact&quot;);\n\t\torder_details = New_Order[ID == Order_Id.toLong()];\n\t\tsub_total = order_details.Sub_Total;\n\t\ttax = order_details.Tax_Amount;\n\t\ttax_percent = (100 * tax) \/ sub_total;\n\t\tnet_total = sub_total + tax;\n\t\t%&gt;\n&lt;row&gt;\n\t&lt;column width=&apos;100%&apos;&gt;\n\t\t&lt;panel&gt;\n\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t&lt;pc width=&apos;100%&apos;&gt;\n\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;2px&apos; bgColor=&apos;#323849&apos;&gt;\n\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;10px&apos; bgColor=&apos;#e9ecf2&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=name%&gt;&apos; size=&apos;5&apos; color=&apos;#323849&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=location_line1%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=location_line2%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=location_line3%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=location_line4%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=contact%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr&gt;\n\t\t\t\t\t\t\t\t&lt;pc padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=email%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;1px&apos; paddingTop=&apos;0px&apos; bgColor=&apos;#323849&apos;&gt;\n\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;10px&apos; paddingTop=&apos;20px&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;pc width=&apos;50%&apos; hAlign=&apos;center&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;text value=&apos;# 1&apos; size=&apos;5&apos; color=&apos;#323849&apos; bold=&apos;true&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t&lt;pc width=&apos;50%&apos; hAlign=&apos;center&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=zoho.currentdate%&gt;&apos; size=&apos;3&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t&lt;pc width=&apos;90%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; bgColor=&apos;#e9ecf2&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;40%&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Item&apos; size=&apos;5&apos; color=&apos;#322849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;20%&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Qty&apos; size=&apos;5&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;20%&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Price&apos; size=&apos;5&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;20%&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Amount&apos; size=&apos;5&apos; color=&apos;#323849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\tfor each  item in Food_Order_Details[Order_Id == input.Order_Id.toLong() &amp;&amp; Status == &quot;Item Served&quot;]\n\t\t{\n\t\t\t%&gt;\n&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;40%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=item.Choose_Item.Item_Name%&gt;&apos; size=&apos;3&apos; color=&apos;#322849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;20%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=item.Quantity%&gt;&apos; size=&apos;3&apos; color=&apos;#322849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;20%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=item.Unit_Price%&gt;&apos; size=&apos;3&apos; color=&apos;#322849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;20%&apos; padding=&apos;10px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=item.Total_Price%&gt;&apos; size=&apos;3&apos; color=&apos;#322849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;1px&apos; paddingTop=&apos;0px&apos; bgColor=&apos;#e9ecf2&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; paddingTop=&apos;20px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;60%&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;20%&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Sub Total&apos; size=&apos;4&apos; bold=&apos;true&apos; color=&apos;#322849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;20%&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=sub_total%&gt;&apos; size=&apos;4&apos; bold=&apos;true&apos; color=&apos;#322849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; paddingTop=&apos;20px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;60%&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;20%&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Tax(&lt;%=tax_percent%&gt;%)&apos; size=&apos;4&apos; bold=&apos;true&apos; color=&apos;#322849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;20%&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=tax%&gt;&apos; size=&apos;4&apos; bold=&apos;true&apos; color=&apos;#322849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; paddingTop=&apos;20px&apos; paddingBottom=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos; height=&apos;auto&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;60%&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;20%&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;Net Total&apos; size=&apos;4&apos; bold=&apos;true&apos; color=&apos;#322849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;pc width=&apos;20%&apos; padding=&apos;5px&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t&lt;text value=&apos;&lt;%=net_total%&gt;&apos; size=&apos;4&apos; bold=&apos;true&apos; color=&apos;#322849&apos;&gt;&lt;\/text&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t\t&lt;pr width=&apos;fill&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;pc width=&apos;100%&apos; padding=&apos;5px&apos; bgColor=&apos;#e9ecf2&apos;&gt;\n\t\t\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t\t\t&lt;\/pc&gt;\n\t\t\t\t\t&lt;\/pr&gt;\n\t\t\t\t&lt;\/pc&gt;\n\t\t\t&lt;\/pr&gt;\n\t\t&lt;\/panel&gt;\n\t&lt;\/column&gt;\n&lt;\/row&gt;\n&lt;%\n\t}\n\telse\n\t{\n\t\t%&gt;\n&lt;panel&gt;\n  &lt;pr height=&apos;fill&apos; width=&apos;fill&apos;&gt;\n    &lt;pc width=&apos;100%&apos; bgColor=&apos;#FFFFFF&apos; padding=&apos;20px&apos; vAlign=&apos;middle&apos;&gt;\n      &lt;pr height=&apos;auto&apos; width=&apos;auto&apos;&gt;\n        &lt;pc padding=&apos;5px&apos; vAlign=&apos;middle&apos;&gt;\n          &lt;pr&gt;\n            &lt;pc&gt;\n              &lt;text type=&apos;Text&apos; value=&apos;Hi, Kindly select one record from the below view&apos; size=&apos;2&apos;&gt; &lt;\/text&gt;\n            &lt;\/pc&gt;\n          &lt;\/pr&gt;\n          &lt;pr&gt;\n            &lt;pc&gt;\n              &lt;button text=&apos;Order History&apos; size=&apos;3&apos; color=&apos;#ffffff&apos; bgColor=&apos;#0072F4&apos; type=&apos;flat&apos; action=&apos;OpenReport&apos; target=&apos;same-window&apos; componentLinkName=&apos;Order_History&apos; \/&gt; &lt;\/pc&gt;\n          &lt;\/pr&gt;\n        &lt;\/pc&gt;\n      &lt;\/pr&gt;\n    &lt;\/pc&gt;\n  &lt;\/pr&gt;\n&lt;\/panel&gt;\n&lt;%\n\t}\n\n}%&gt;]]>\n<\/dspZml>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
	}
	section Add_Reason
	{
		displayname= "Add Reason"
		form Add_Reason
		{
			displayname = "Add Reason"
			store data in zc = false
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Item_Row_Id
			(
				type = picklist
				values  = Food_Order_Details.ID
    			displayformat = [ID]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Status
			(
				type = picklist
				values = {"Waiting", "Item Accepted", "Item Rejected", "Item Cancelled", "Ready To Serve", "Item Served"}
				initial value = "Waiting"
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Comments
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			actions
			{
				Confirm
				(
   					type = submit
   					displayname = "Confirm"
				)
			}
		}
	}
	section Booking_Details
	{
		displayname= "Booking Details"
		icon = "media-2-guitar"
		form Check_In_Details_Form
		{
			displayname = "Check In Details Form"
			success message = "Demo Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Check_In_Id
			(
				type = picklist
				displayname = "Check In Id"
				values  = Add_Check_In.ID
    			bidirectional = Room_Details
    			displayformat = [Check_In_Id]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Guest
			(
				type = picklist
				values  = Add_Guest.ID
    			displayformat = [" " + Name.prefix + " " + Name.first_name + " " + Name.last_name + " " + Name.suffix]
				allow new entries = true
				[
					displayname = "Add New Guest"
				]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Room_Type
			(
				type = picklist
				displayname = "Room Type"
				values  = Add_Room_Type.ID
    			displayformat = [Type_Name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Room_Number
			(
				type = picklist
				displayname = "Room Number"
				values  = Add_Room.ID
    			displayformat = [Room_Number]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Number_Of_Adult
			(
				type = number
				displayname = "Number Of Adult"
	 			row = 1
	 			column = 1   
				width = small
			)
			Number_Of_Child
			(
				type = number
				displayname = "Number Of Child"
	 			row = 1
	 			column = 1   
				width = small
			)
			must have Rate
			(
				type = picklist
				values  = Add_Rate_Type.ID
    			displayformat = [Rate_Type]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Amount
			(
				displayname = "Room Tariff"
				type = USD
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Tax_Amount
			(
				displayname = "Tax Amount"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Total_Amount
			(
				displayname = "Total Amount"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Stay_Length
			(
				type = number
				displayname = "Stay Length"
				initial value = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			Check_In_Time
			(
    			type = datetime
				displayname = "Check In Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			Check_Out_Time
			(
    			type = datetime
				displayname = "Check Out Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Payment_Mode
			(
				type = picklist
				displayname = "Payment Mode"
				values = {"Group Payment", "Separate Payment", "No Need"}
				initial value = "Group Payment"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Payment_Status
			(
				type = picklist
				displayname = "Payment Status"
				values = {"Un Paid", "Partly Paid", "Fully Paid"}
				initial value = "Un Paid"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Status
			(
				type = picklist
				values = {"Checked In", "Checked Out"}
				initial value = "Checked In"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Invoice_No
			(
    			type = autonumber
				displayname = "Invoice No"
				start index = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "media-2-remix"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Payments
	{
		icon = "shopping-credit-card-in"
		form Add_Payment
		{
			displayname = "Add Payment"
			success message = "Payment Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Payment_Id
			(
    			type = autonumber
				displayname = "Payment Id"
				start index = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			Check_In_Id
			(
				type = picklist
				values  = Add_Check_In.ID
    			displayformat = [Check_In_Id]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Rooms
			(
				type = list
				values  = Add_Room.ID
    			displayformat = [Room_Number]
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Room_Tariff
			(
				displayname = "Room Tariff"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Restaurant_Charge
			(
				displayname = "Restaurant Charge"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Service_Charge
			(
				displayname = "Service Charge"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Amenity_Charge
			(
				displayname = "Amenity Charge"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Total_Amount
			(
				displayname = "Total Amount"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Pre_Paid_Amount
			(
				displayname = "Pre Paid Amount"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			Take_Advance_Amount
			(
    			type = checkbox
				displayname = "Take Advance Amount"
				initial value = false
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Advance_Amount
			(
				displayname = "Advance Amount"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Remaining_Balance
			(
				displayname = "Remaining Balance"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Refund_Amount
			(
				displayname = "Refund Amount"
				type = USD
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			Payment_Done
			(
    			type = checkbox
				displayname = "Payment Done"
				initial value = false
    			description
    			[
    				type = help_text
    			 	message = "By Clicking here you are agree to complete this payment."
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Incharge
			(
				type = picklist
				values  = Add_Staff.ID
    			displayformat = [" " + Name.first_name + " " + Name.last_name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			plain
			(
    			type = plaintext
				value = ""
	 			row = 1
	 			column = 2   
				width = medium
			)
	
			customize
			(
				icon = "shopping-mobile-card"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Add"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Add_Service_And_Taxes
	{
		displayname= "Add Service And Taxes"
		icon = "shopping-credit-card-in"
		form Add_Service_And_Taxes
		{
			displayname = "Add Service And Taxes"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Tax_Type
			(
				type = picklist
				displayname = "Tax Type"
				values  = Add_Tax_Type.ID
    			bidirectional = Services_And_Taxes
    			displayformat = [Tax_Name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Choose_Service
			(
				type = picklist
				displayname = "Choose Service"
				values  = Add_Service.ID
    			displayformat = [Service_Name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Percent
			(
    			type = percentage
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "shopping-credit-card-in"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Add_Service_And_Taxes_Report
		{
			displayName = "Add Service And Taxes Report"
   			hide = true
			show all rows from Add_Service_And_Taxes    
			(
				Choose_Service as "Choose Service"
				Percent
				Tax_Type as "Tax Type"
			)
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Choose_Service as "Choose Service"
							Percent
							Tax_Type as "Tax Type"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Choose_Service as "Choose Service"
							Percent
							Tax_Type as "Tax Type"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Rates_And_Tax
	{
		displayname= "Rates And Tax"
		icon = "business-building"
		form Add_Rate_Type
		{
			displayname = "Add Rate Type"
			success message = "Rate Type Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have unique Rate_Type
			(
    			type = text
				displayname = "Rate Type"
    			description
    			[
    				type = help_text
    			 	message = "Eg : Standard rate , Corporate rate"
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Rooms_And_Rates
			(
				type = grid
				displayname = "Rooms And Rates"
				values  = Add_Rooms_And_Rates.ID
    			bidirectional = Rate_Type
	 			row = 2
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "tech-2-keyboard-wireless"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Add"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_Tax_Type
		{
			displayname = "Add Tax Type"
			success message = "Tax Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have unique Tax_Name
			(
    			type = text
				displayname = "Tax Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Services_And_Taxes
			(
				type = grid
				displayname = "Services And Taxes"
				values  = Add_Service_And_Taxes.ID
    			bidirectional = Tax_Type
    			description
    			[
    				type = help_text
    			 	message = "These tax rates will be applied while billing"
    			]
	 			row = 2
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "shopping-mobile-card"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Add"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Rooms
	{
		icon = "furniture-table"
		form Add_Room
		{
			displayname = "Add Room"
			success message = "Room Added Successfully"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Floor
			(
				type = picklist
				values = {"1", "2", "3", "4"}
				others option = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Room_Number
			(
				type = number
				displayname = "Room Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Room_Type
			(
				type = picklist
				displayname = "Room Type"
				values  = Add_Room_Type.ID
    			displayformat = [Type_Name]
				allow new entries = true
				[
					displayname = "Add New Type"
				]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Room_Status
			(
				type = picklist
				displayname = "Room Status"
				values = {"Clean", "Occupied", "Dirty", "Maintenance Block"}
				initial value = "Clean"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Dial_Number
			(
				type = number
				displayname = "Dial Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "design-2-3d-29"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Add"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		kanban Rooms
		{
			displayName = "Rooms"
			show all rows from Add_Room    
			(
				Room_Status as "Room Status"
				Room_Number as "Room Number"
				Floor
				Room_Type as "Room Type"
				(
					view = Type_Of_Rooms
				)
				Room_Type.Image
			)
			sort by
			(
				Room_Number ascending
			)
			options
			(
	 			display field = Room_Status
				record count  = enable
				icon = "design-2-selection"
	 		)
			quickview
			(
				layout
				(
		 			type = 10
					datablock1
					(
			 			layout type = 34
		     			title = "Overview"
						fields
						(
							Floor
							Room_Number as "Room Number"
							Room_Type as "Room Type"
							Room_Type.Image as "Image"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Room_Number as "Room Number"
							Room_Status as "Room Status"
						)
					)
					datablock2
					(
			 			layout type = -2
		     			title = "Room Type"
		     			related field =  Room_Type
						fields
						(
							Type_Name as "Type Name"
							Bed_Type as "Bed Type"
							Number_Of_Adults as "Number Of Adults"
							Number_Of_Child as "Number Of Child"
							Number_Of_Extra_Adults as "Number Of Extra Adults"
							With_Ac as "With Ac"
							Image
							Room_Amenities as "Room Amenities"
						)
					)
					datablock3
					(
			 			layout type = -1
		     			title = "Upcoming Maintenance"
		     			related field =  Maintenance_Block.Room
						fields
						(
							Room
							Maintenance_Type as "Maintenance Type"
							Block_From as "Block From"
							Block_To as "Block To"
							Description
							Closing_Notes as "Closing Notes"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Room_Amenities
		{
			displayName = "Room Amenities"
			show all rows from Add_Room_Amenity    
			(
				Amenity_Name as "Amenity Name"
			)
			options
			(
				icon = "travel-hotel-symbol"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Amenity_Name as "Amenity Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Amenity_Name as "Amenity Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Dirty_Rooms
		{
			displayName = "Dirty Rooms"
			show all rows from Add_Room  [Room_Status == "Dirty"]  
			(
				Floor
				Room_Number as "Room Number"
				Room_Type as "Room Type"
				Room_Status as "Room Status"
				Dial_Number as "Dial Number"
				custom action "Move To Clean"
				(
	  			workflow = Move_To_Clean
				show action in edit record menu = true
				column header = "Move To Clean"
				condition = (Room_Status == "Dirty")
				)
			)
			options
			(
				icon = "furniture-table"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Floor
							Room_Number as "Room Number"
							Room_Type as "Room Type"
							Room_Status as "Room Status"
							Dial_Number as "Dial Number"
				"Move To Clean"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Floor
							Room_Number as "Room Number"
							Room_Type as "Room Type"
							Room_Status as "Room Status"
							Dial_Number as "Dial Number"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Configurations
	{
		icon = "loader-gear"
		form Add_Staff
		{
			displayname = "Add Staff"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Role
			(
				type = picklist
				values = {"Manager", "Front Office Executive", "Housekeeping Executive", "Executive Chef", "Waiter", "Restaurant Cashier"}
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Name
			(
    			type = name
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Email
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = medium
			)
			Phone_Number
			(
    			type = phonenumber
				displayname = "Phone"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Address
			(
    			type = address
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_1
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_2
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			ID_Proof
			(
    			type = upload file
				displayname = "ID Proof"
				browse = local_drive
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "design-2-3d-29"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		summary Hotel_Info
		{
			displayName = "Hotel Info"
			show all rows from About_Hotel    
			(
				Hotel_Name as "Hotel Name"
				Contact_Number as "Contact Number"
				Email
				Address 
	 			(
	      			displayformat = [address_line_1+""+address_line_2+""+district_city+""+state_province+""+postal_Code+""+country]
	      			enable = Show_As_Text
	 			)
				Website
				Check_In_Time as "Check In Time"
				Check_Out_Time as "Check Out Time"
				Logo
				Terms_And_Conditions_For_Invoice as "Terms And Conditions For Invoice"
				Schedule_Time as "Schedule Time"
			)
			options
			(
				display rows = 10
				display records per row = 2
				icon = "business-laptop-71"
			)
			quickview
			(
				layout
				(
		 			type = -2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Hotel_Name as "Hotel Name"
							Contact_Number as "Contact Number"
							Email
							Address
							Website
							Logo
							Check_In_Time as "Check In Time"
							Check_Out_Time as "Check Out Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Hotel_Name as "Hotel Name"
							Contact_Number as "Contact Number"
							Email
							Address
							Website
							Check_In_Time as "Check In Time"
							Check_Out_Time as "Check Out Time"
							Logo
							Terms_And_Conditions_For_Invoice as "Terms And Conditions For Invoice"
							Schedule_Time as "Schedule Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		custom Type_Of_Rooms
		{
			displayName = "Type Of Rooms"
			show all rows from Add_Room_Type    
			(
				Number_Of_Adults as "Number Of Adults"
				Type_Name as "Type Name"
				Room_Amenities as "Room Amenities"
				Bed_Type as "Bed Type"
				Image
				With_Ac as "Available With"
				Number_Of_Child as "Number Of Child"
				Number_Of_Extra_Adults as "Number Of Extra Adults"
			)
			options
			(
				icon = "tech-2-pci-card"
	 		)
			quickview
			(
				layout
				(
		 			type = 6
					datablock1
					(
			 			layout type = 29
		     			title = "Overview"
						fields
						(
							Image
							Type_Name as "Type Name"
							Room_Amenities as "Room Amenities"
							With_Ac as "Available With"
							Bed_Type as "Bed Type"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Type_Name as "Type Name"
							Bed_Type as "Bed Type"
							Number_Of_Adults as "Number Of Adults"
							Number_Of_Child as "Number Of Child"
							Number_Of_Extra_Adults as "Number Of Extra Adults"
							Image
							With_Ac as "Available With"
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "Amenities"
		     			related field =  Room_Amenities
						fields
						(
							Amenity_Name as "Amenity Name"
						)
					)
					datablock3
					(
			 			layout type = -1
		     			title = "Rates"
		     			related field =  Add_Rooms_And_Rates.Room_Type
						fields
						(
							Rate_Type as "Rate Type"
							Rate_Per_Night as "Rate Per Night"
							Charge_Per_Extra_Adult as "Charge Per Extra Adult"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Rate_Types
		{
			displayName = "Rate Types"
			show all rows from Add_Rate_Type    
			(
				Rate_Type as "Rate Type"
				Rooms_And_Rates as "Rooms And Rates"
				(
					view = Rooms_And_Rates_Report
					field = Rooms_And_Rates.Room_Type + "  - >  " + Rooms_And_Rates.Rate_Per_Night
				)
			)
			options
			(
				icon = "tech-2-pci-card"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Rate_Type as "Rate Type"
							Rooms_And_Rates.Room_Type as "Rooms And Rates"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Rate_Type as "Rate Type"
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "Rooms And Rates"
		     			related field =  Rooms_And_Rates
						fields
						(
							Room_Type as "Room Type"
							Rate_Per_Night as "Rate Per Night"
							Charge_Per_Extra_Adult as "Charge Per Extra Adult"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Services
		{
			displayName = "Services"
			show all rows from Add_Service  [Type == "Additional"]  
			(
				Service_Name as "Service Name"
			)
			options
			(
				icon = "travel-church"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Service_Name as "Service Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Service_Name as "Service Name"
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "Taxes"
		     			related field =  Add_Service_And_Taxes.Choose_Service
						fields
						(
							Tax_Type as "Tax Type"
							Percent
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Taxes
		{
			displayName = "Taxes"
			show all rows from Add_Tax_Type    
			(
				Tax_Name as "Tax Name"
				Services_And_Taxes as "Services And Taxes"
				(
					field = Services_And_Taxes.Choose_Service + "  - " + Services_And_Taxes.Percent
				)
			)
			options
			(
				icon = "shopping-credit-card-in"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Tax_Name as "Tax Name"
							Services_And_Taxes.Choose_Service as "Services And Taxes"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Tax_Name as "Tax Name"
						)
					)
					datablock2
					(
			 			layout type = -1
		     			title = "Services And Taxes"
		     			related field =  Services_And_Taxes
						fields
						(
							Choose_Service as "Choose Service"
							Percent
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Staffs
		{
			displayName = "Staffs"
			show all rows from Add_Staff    
			(
				Role
				Name 
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				Email
				Phone_Number as "Phone"
				Address 
	 			(
	      			displayformat = [address_line_1+""+address_line_2+""+district_city+""+state_province+""+postal_Code+""+country]
	      			enable = Show_As_Text
	 			)
				ID_Proof as "ID Proof"
			)
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Role
							Name
							Email
							Phone_Number as "Phone"
							Address
							ID_Proof as "ID Proof"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Role
							Name
							Email
							Phone_Number as "Phone"
							Address
							ID_Proof as "ID Proof"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Tables
		{
			displayName = "Tables"
			show all rows from Add_Table    
			(
				Table_Number as "Table Number"
				Number_Of_Seats as "Number Of Seats"
				(
					display = total	
				)
				Table_Name as "Table Name"
			)
			options
			(
				icon = "furniture-table"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Table_Number as "Table Number"
							Number_Of_Seats as "Number Of Seats"
							Table_Name as "Table Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Table_Number as "Table Number"
							Number_Of_Seats as "Number Of Seats"
							Table_Name as "Table Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Food_Timings1
		{
			displayName = "Food Timings"
			show all rows from Food_Timings    
			(
				Name
			)
			options
			(
				icon = "furniture-fridge"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Name
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Name
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Foods_And_Beverages
		{
			displayName = "Foods And Beverages"
			show all rows from Add_Food    
			(
				Item_Name as "Item Name"
				Cost
				Food_Availability as "Food Availability"
			)
			options
			(
				icon = "food-hob"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Item_Name as "Item Name"
							Cost
							Food_Availability as "Food Availability"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Item_Name as "Item Name"
							Cost
							Food_Availability as "Food Availability"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Public_Reservation
	{
		displayname= "Public Reservation"
		form Public_Reservation
		{
			displayname = "Public Reservation"
			store data in zc = false
			success message = ""
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Check_In
			(
    			type = date
				displayname = "Check In"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Check_Out
			(
    			type = date
				displayname = "Check Out"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Number_Of_Rooms
			(
				type = number
				displayname = "Number Of Rooms"
				initial value = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Number_Of_Adults
			(
				type = number
				displayname = "Number Of Adults"
				initial value = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Number_Of_Child
			(
				type = number
				displayname = "Number Of Child"
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			Contact
			(
				type = section
				visibility = true
	 			row = 2
	 			column = 0   
				width = medium
			)
			must have Name
			(
    			type = name
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 2
	 			column = 1   
				width = medium
			)
			must have Phone_Number
			(
    			type = phonenumber
				displayname = "Phone"
	 			row = 2
	 			column = 1   
				width = medium
			)
			must have Email
			(
    			type = email
	 			row = 2
	 			column = 1   
				width = medium
			)
			Section1
			(
				type = section
				displayname = "Section"
	 			row = 3
	 			column = 0   
				width = medium
			)
			notes
			(
    			type = plaintext
				value = "This reservation will get confirm by our front office executive."
	 			row = 3
	 			column = 1   
				width = medium
			)
	
			actions
			{
				Submit
				(
   					type = submit
   					displayname = "Submit"
				)
				Reset
				(
   					type = reset
   					displayname = "Reset"
				)
			}
		}
	}
	section Copy_of_Reservation
	{
		displayname= "Copy of Reservation"
		form Add_Reason1
		{
			displayname = "Add Reason"
			store data in zc = false
			success message = ""
			field alignment = left
			feature property = 32
					hide = true
			Details
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Reservation_Id
			(
				type = picklist
				displayname = "Reservation Id"
				values  = Reservation.ID
    			displayformat = [Reservation_Id]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Status
			(
				type = picklist
				values = {"Awaiting For Confirmation", "Reserved", "Cancelled", "Converted Check in"}
				initial value = "Awaiting For Confirmation"
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Reason
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			actions
			{
				Submit
				(
   					type = submit
   					displayname = "Submit"
				)
				Reset
				(
   					type = reset
   					displayname = "Reset"
				)
			}
		}
	}
	section Check_Out_Form
	{
		displayname= "Check Out Form"
		form Check_Out_Form
		{
			displayname = "Check Out Form"
			store data in zc = false
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Check_In_Id
			(
				type = picklist
				displayname = "Check In Id"
				values  = Add_Check_In.ID
    			displayformat = [Check_In_Id]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Room_Number
			(
				type = picklist
				displayname = "Room Number"
				values  = Add_Room[Room_Status == "Occupied"].ID
    			displayformat = [Room_Number]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Guest
			(
				type = picklist
				values  = Add_Guest.ID
    			displayformat = [" " + Name.prefix + " " + Name.first_name + " " + Name.last_name + " " + Name.suffix]
				allow new entries = true
				[
					displayname = "Add New Guest"
				]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Check_In_Time
			(
    			type = datetime
				displayname = "Check In Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			Check_Out_Time
			(
    			type = datetime
				displayname = "Check Out Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Additional_Bill_Count
			(
				type = number
				displayname = "Additional Bill Count"
				initial value = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Payment_Mode
			(
				type = picklist
				displayname = "Payment Mode"
				values = {"Group Payment", "Separate Payment"}
				initial value = "Group Payment"
	 			row = 1
	 			column = 1   
				width = medium
			)
			confirmation
			(
    			type = plaintext
				value = "Are you sure to check out ?"
	 			row = 1
	 			column = 1   
				width = medium
			)
			bills
			(
    			type = plaintext
				value = ""
	 			row = 1
	 			column = 2   
				width = medium
			)
			other_info
			(
    			type = plaintext
				value = ""
	 			row = 1
	 			column = 2   
				width = medium
			)
	
			actions
			{
				Check_Out
				(
   					type = submit
   					displayname = "Check Out"
				)
				Reset
				(
   					type = reset
   					displayname = "Reset"
				)
			}
		}
	}
	functions
	{
 			void maintenance.close(Maintenance_Block form)
			{
				url = zoho.appuri + "#Form:Maintenance_Block?recLinkID=" + form.ID + "&Status=Closed&viewLinkName=On_Going&zc_NextUrl=#Report:On_Going";
				openUrl(url,"popup window");
			}
 			void order.accept_item(int item_row_id)
			{
				staff = Add_Staff[Email == zoho.loginuserid].ID;
				item_row = Food_Order_Details[ID == item_row_id];
				item_row.Status="Item Accepted";
				item_row.Staff=staff;
				openUrl("#Script:page.refresh","same window");
			}
 			void order.reject_item(int item_row_id)
			{
				openUrl("#Form:Add_Reason?Status=Item Rejected&Item_Row_Id=" + item_row_id,"popup window");
			}
 			void order.item_ready_to_serve(int item_row_id)
			{
				item_row = Food_Order_Details[ID == item_row_id];
				item_row.Status="Ready To Serve";
				openUrl("#Script:page.refresh","same window");
			}
 			void order.item_served(int item_row_id)
			{
				item_row = Food_Order_Details[ID == item_row_id];
				item_row.Status="Item Served";
				total_order_count = Food_Order_Details[Order_Id == item_row.Order_Id].count(ID);
				finished_orders = Food_Order_Details[Order_Id == item_row.Order_Id && Status == "Item Served" || Status == "Item Cancelled" || Status == "Item Rejected"].count(ID);
				if(total_order_count == finished_orders)
				{
					order = New_Order[ID == item_row.Order_Id];
					order.Order_Status="Item Served";
				}
				openUrl("#Script:page.refresh","same window");
			}
 			void order.cancel_item(int item_row_id)
			{
				openUrl("#Form:Add_Reason?Status=Item Cancelled&Item_Row_Id=" + item_row_id,"popup window");
			}
 			void order.add_more_item(int order_id)
			{
				openUrl("#Form:Food_Order_Details?Order_Id=" + order_id,"popup window");
			}
 			void order.complete_order(int order_id)
			{
				order = New_Order[ID == input.order_id];
				if(order.Compliment_Food != true)
				{
					total = 0.00;
					for each  item in Food_Order_Details[Order_Id == input.order_id && Status == "Item Served"]
					{
						total = total + item.Total_Price;
					}
					net_total = total;
					service_id = Add_Service[Service_Name == "Restaurant"].ID;
					tax_map = thisapp.tax.find_tax_amount(service_id,total);
					net_total = net_total + tax_map.get("amount");
					order.Sub_Total=total;
					order.Net_Total=net_total;
				}
				order.Order_Status="Completed";
				openUrl("#Script:page.refresh","same window");
			}
 			map tax.find_tax_amount(int service_id, float amount)
			{
				tax_map = Map();
				total_tax_amount = 0.0;
				tax_list = List();
				for each  tax_type in Add_Service_And_Taxes[Choose_Service == service_id]
				{
					tax_amount = (tax_type.Percent / 100 * amount).round(2);
					total_tax_amount = total_tax_amount + tax_amount;
					tax_list.add(tax_type.Tax_Type);
				}
				tax_map.put("tax list",tax_list);
				tax_map.put("amount",total_tax_amount);
				return tax_map;
			}
 			void order.payment(New_Order form)
			{
				form.Payment_Status="Paid";
			}
 			int check_in.find_check_in_row_id(int room_id)
			{
				check_in_row_id = Check_In_Details_Form[Room_Number == room_id && Status == "Checked In"].ID;
				return check_in_row_id;
			}
 			void order.print(int order_id)
			{
				openUrl(zoho.appuri + "print/Restaurant_Bill?Order_Id=" + order_id,"new window");
			}
 			void order.view_bill(int order_id)
			{
				openUrl("#Page:Restaurant_Bill?Order_Id=" + order_id,"same window");
			}
 			void reservation.check_in(int reservation_id)
			{
				openUrl("#Form:Add_Check_In?Reservation_Id=" + reservation_id,"same window");
			}
 			map room.find_available_rooms(date check_in, date check_out, string search_type)
			{
				room = Add_Room[ID != 0];
				rooms = room.ID.getall();
				available_rooms = Map();
				//checking for check ins
				check_ins = Add_Check_In[(Check_Out >= input.check_in && Check_Out <= input.check_out) || (Check_In >= input.check_in && Check_Out <= input.check_out) || (Check_In <= input.check_in && Check_Out >= input.check_out) || (Check_In >= input.check_in && Check_In <= input.check_out)];
				if(check_ins.count(ID) != 0)
				{
					booked_rooms = Check_In_Details_Form[Check_In_Id in check_ins.ID.getall() && Status == "Checked In"].Room_Number.getAll();
					rooms.removeAll(booked_rooms);
				}
				//checking for reservations
				reservations = Reservation[(Check_Out >= input.check_in && Check_Out <= input.check_out) || (Check_In >= input.check_in && Check_Out <= input.check_out) || (Check_In <= input.check_in && Check_Out >= input.check_out) || (Check_In >= input.check_in && Check_In >= input.check_out) && Status == "Reserved"];
				if(reservations.count(ID) != 0)
				{
					reserved_rooms = reservations.Choose_Rooms.getall();
					rooms.removeAll(reserved_rooms);
				}
				//checking for maintenance
				maintenance = Maintenance_Block[(Block_To >= input.check_in && Block_To <= input.check_out) || (Block_From >= input.check_in && Block_To <= input.check_out) || (Block_From <= input.check_in && Block_To >= input.check_out) || (Block_From >= input.check_in && Block_From >= input.check_out) && Status != "Closed" || Status != "Cancelled"];
				if(maintenance.count(ID) != 0)
				{
					in_maintenance = maintenance.Room.getall();
					rooms.removeAll(in_maintenance);
				}
				//mapping process
				room_count = rooms.size();
				room_types = Add_Room[ID in rooms].Room_Type.getAll();
				available_rooms.put("Availability",room_count);
				if(room_count > 0)
				{
					distinct_room_types = room_types.distinct();
					if(search_type != "Search")
					{
						available_rooms.put("Types",distinct_room_types);
						available_rooms.put("Rooms",rooms);
					}
				}
				return available_rooms;
			}
 			void Notification.Send_Notification(string userEmail)
			{
				appname = zoho.appname;
				sendmail
				[
					from :zoho.adminuserid
					to :userEmail
					subject :"Invitation to access '" + zoho.appname + "' "
					message :"<div style='width:100%;display:inline-block;box-sizing:border-box;border:1px solid #ddd;'><div style='padding:2%;text-align:center;'>You've been invited to use an application built on Zoho Creator by \"" + zoho.adminuserid + "\".</div><div style='background: #efefef; padding: 20.0px;margin: 20.0px 0 10.0px;text-align:center;'><h2>" + appname.toUpperCase() + "</h2><div style='margin: 20.0px 0 10.0px;'><a style='padding:10px;background-color: rgb(62,149,205);text-decoration: none;color: rgb(255,255,255);font-size: 14.0px;' href='https://creator.zoho.com" + zoho.appuri + "' target='_blank'> Go to application </a></div></div></div>"
				]
			}
 			void Complaint.Close(int complaint_id)
			{
				url = zoho.appuri + "#Form:Raise_New_Complaint?recLinkID=" + complaint_id + "&Status=Closed&viewLinkName=New_Complaints&zc_NextUrl=#Report:Closed_Ones";
				openUrl(url,"popup window");
			}
 			map today_view.performance()
			{
				today_income = 0;
				prev_income = 0;
				value_map = Map();
				for each  check_in in Check_In_Details_Form[Status == "Checked In" || (Added_Time is today && Status == "Checked Out")]
				{
					main_rec = Add_Check_In[ID == check_in.Check_In_Id];
					if(main_rec.Check_In == main_rec.Check_Out)
					{
						number_of_days = 1;
					}
					else
					{
						number_of_days = days360(main_rec.Check_In,main_rec.Check_Out);
					}
					today_income = today_income + check_in.Amount / if(number_of_days == 0,1,number_of_days);
					info today_income;
					info check_in.Stay_Length;
				}
				total_room_count = Add_Room[ID != 0].count();
				revpar = today_income / if(total_room_count == 0,1,total_room_count);
				checked_in = Check_In_Details_Form[Status == "Checked In"];
				occupancy_rate = checked_in.count() / if(total_room_count == 0,1,total_room_count) * 100;
				adult = checked_in.sum(Number_Of_Adult);
				child = checked_in.sum(Number_Of_Child);
				value_map.put("income",today_income.round(2));
				value_map.put("occupancy",occupancy_rate.round(2));
				value_map.put("revpar",revpar.round(2));
				value_map.put("adult",adult);
				value_map.put("child",child);
				prev_check_in_count = 0;
				for each  prev_check_in in Check_In_Details_Form[(Status == "Checked In" && Check_In_Time is not today) || Added_Time is yesterday && Status == "Checked Out"]
				{
					if(prev_check_in.Check_In_Id.Check_In == prev_check_in.Check_In_Id.Check_Out)
					{
						number_of_days_prev = 1;
					}
					else
					{
						number_of_days_prev = days360(prev_check_in.Check_In_Id.Check_In,prev_check_in.Check_In_Id.Check_Out);
					}
					prev_income = prev_income + prev_check_in.Amount / if(number_of_days_prev == 0,1,number_of_days_prev);
					prev_check_in_count = prev_check_in_count + 1;
				}
				if(prev_check_in_count != 0)
				{
					prev_occupancy = prev_check_in_count / if(total_room_count == 0,1,total_room_count) * 100;
					prev_revpar = prev_income / if(total_room_count == 0,1,total_room_count);
					value_map.put("prev income",prev_income);
					value_map.put("prev occupancy",prev_occupancy);
					value_map.put("prev revpar",prev_revpar);
				}
				return value_map;
			}
 			map today_view.quick_link()
			{
				value_map = Map();
				reservation_count_today = Reservation[Added_Time is today].count();
				check_in_count = Add_Check_In[Added_Time is today].count();
				value_map.put("reservation",reservation_count_today);
				value_map.put("check in",check_in_count);
				return value_map;
			}
 			map today_view.new_arrivals()
			{
				value_map = Map();
				guest_count = Add_Guest[Added_Time is today].count();
				corporate_count = Add_Corporate_Client[Added_Time is today].count();
				value_map.put("guest",guest_count);
				value_map.put("corporate",corporate_count);
				return value_map;
			}
 			map today_view.expected_today()
			{
				value_map = Map();
				reservation_count = Reservation[Check_In is today && Status == "Reserved"].count();
				check_out_count = Add_Check_In[Check_Out is today && Status == "Checked In"].count();
				value_map.put("reservation",reservation_count);
				value_map.put("check out",check_out_count);
				return value_map;
			}
 			map today_view.complaints()
			{
				value_map = Map();
				raised_complaints = Raise_New_Complaint[Added_Time is today].count();
				closed_complaints = Raise_New_Complaint[Modified_Time is today && Status == "Closed"].count();
				value_map.put("raised",raised_complaints);
				value_map.put("closed",closed_complaints);
				return value_map;
			}
 			void reservation.confirm(int rec_id)
			{
				url = zoho.appuri + "#Form:Reservation?recLinkID=" + rec_id + "&viewLinkName=Awaiting_Confirmations&zc_NextUrl=#Report:Awaiting_Confirmations";
				openUrl(url,"popup window");
			}
 			map invoice.hotel_details()
			{
				detail_map = Map();
				hotel_details = About_Hotel[ID != 0];
				detail_map.put("name",hotel_details.Hotel_Name);
				detail_map.put("email",hotel_details.Email);
				detail_map.put("contact",hotel_details.Contact_Number);
				if(hotel_details.Logo != "")
				{
					img = hotel_details.Logo.toString();
					new_url = img.replaceAll("/sharedBy/appLinkName/viewLinkName/fieldName",zoho.appuri + "Hotel_Info/Logo");
					start_index = new_url.indexOf("https");
					end_index = new_url.indexOf("\" lowqual");
					img_url = new_url.subString(start_index,end_index);
					detail_map.put("image",img_url);
				}
				else
				{
					detail_map.put("image","");
				}
				var = hotel_details.Address;
				info var;
				info var.address_line_1;
				detail_map.put("website",hotel_details.Website);
				detail_map.put("terms",hotel_details.Terms_And_Conditions_For_Invoice);
				location_map = Map();
				location_map.put("line 1",hotel_details.Address.address_line_1);
				location_map.put("line 2",hotel_details.Address.district_city);
				location_map.put("line 3",hotel_details.Address.state_province);
				location_map.put("line 4",hotel_details.Address.postal_Code);
				detail_map.put("location",location_map);
				return detail_map;
			}
 			map reservation.rate_calculation(int room_count, int total_nights, int rate_type, int room_type, int number_of_adults)
			{
				tax_amount = 0;
				room_tariff = 0;
				value_map = Map();
				rate = Add_Rooms_And_Rates[Rate_Type == rate_type && Room_Type == room_type];
				rate_per_night = rate.Rate_Per_Night;
				extra_adult_charge = rate.Charge_Per_Extra_Adult;
				room_details = Add_Room_Type[ID == room_type];
				adults = room_details.Number_Of_Adults * room_count;
				extra_adults_allowed = room_details.Number_Of_Extra_Adults * room_count;
				total_adults = adults + extra_adults_allowed;
				room_rate = total_nights * rate_per_night * room_count;
				rate_details = "";
				rate_details = rate_details + "<p>Rate Description</p><p>Rate/night : " + rate_per_night + "</p><p>" + room_count + " rooms * " + total_nights + "  nights : " + room_rate + "</p>";
				extra_charge = 0;
				if(number_of_adults > adults)
				{
					if(number_of_adults > total_adults)
					{
						extra_charge = extra_adult_charge * extra_adults_allowed * total_nights;
					}
					else
					{
						extra_charge = (number_of_adults - adults) * extra_adult_charge * total_nights;
					}
					rate_details = rate_details + "<p>Extra adult charge : " + extra_charge + "</p>";
				}
				room_tariff = room_rate + extra_charge;
				service_id = Add_Service[Service_Name == "Accommodation"].ID;
				tax_count = Add_Service_And_Taxes[Choose_Service == service_id].count(ID);
				if(tax_count != 0)
				{
					tax_map = thisapp.tax.find_tax_amount(service_id,room_tariff);
					tax_amount = tax_map.get("amount");
					tax_list = List();
					for each  tax in tax_map.get("tax list")
					{
						tax_name = Add_Tax_Type[ID == tax].Tax_Name;
						tax_list.add(tax_name);
					}
					rate_details = rate_details + "<p>Included taxes : " + tax_list + "</p>";
				}
				value_map.put("tariff",room_tariff);
				value_map.put("tax",tax_amount);
				value_map.put("details",rate_details);
				return value_map;
			}
 			void reservation.cancel(Reservation form)
			{
				form.Status="Cancelled";
				openUrl("#Script:page.refresh","same window");
				if(form.Guest != null)
				{
					name = form.Guest.Name;
					email = form.Guest.Email;
				}
				else if(form.Corporate != null)
				{
					name = form.Corporate.Corporate_Name;
					email = form.Corporate.Email;
				}
				hotel_details = About_Hotel[ID != 0];
				sendmail
				[
					from :zoho.adminuserid
					to :email
					subject :"New Reservation"
					message :("Hi " + name) + ",<br>Thank you for choosing hotel " + hotel_details.Hotel_Name + " Your reservation for " + form.Check_In + " to " + form.Check_Out + " has been cancelled.<br>Reason : " + form.Reason + " <br>For enquiry please contact <br>Phone : " + hotel_details.Contact_Number + "<br>Email : " + hotel_details.Email + "<br>Regards by<br>" + hotel_details.Hotel_Name
				]
			}
 			void reservation.cancel_with_reason(int reservation_id)
			{
				url = zoho.appuri + "#Form:Reservation?recLinkID=" + reservation_id + "&Status=Cancelled&viewLinkName=Upcoming_Check_Ins&zc_NextUrl=#Report:Upcoming_Check_Ins";
				openUrl(url,"popup window");
			}
 			void check_in.check_out(int check_in_id, int room_id)
			{
				main_rec = Add_Check_In[ID == input.check_in_id];
				check_in_row = Check_In_Details_Form[Check_In_Id == input.check_in_id && Room_Number == input.room_id];
				check_in_row.Check_Out_Time=zoho.currenttime;
				check_in_row.Status="Checked Out";
				room_rec = Add_Room[ID == input.room_id];
				room_rec.Room_Status="Dirty";
				rate_per_night = check_in_row.Amount / days360(main_rec.Check_In,main_rec.Check_Out);
				amount = rate_per_night * check_in_row.Stay_Length;
				tax_per_night = check_in_row.Tax_Amount / days360(main_rec.Check_In,main_rec.Check_Out);
				tax = tax_per_night * check_in_row.Stay_Length;
				total = amount + tax;
				check_in_row.Amount=amount;
				check_in_row.Tax_Amount=tax;
				check_in_row.Total_Amount=total;
				check_in_rows = Check_In_Details_Form[Check_In_Id == input.check_in_id];
				total_room_tariff = check_in_rows.sum(Amount);
				total_tax = check_in_rows.sum(Tax_Amount);
				total_amount = check_in_rows.sum(Total_Amount);
				main_rec.Room_Tariff=total_room_tariff;
				main_rec.Tax_Amount=total_tax;
				check_in_rows.Total_Amount=total_amount;
			}
 			map check_in.rate_calculation_1(int rate, int room_type, date check_in, date check_out, int adults)
			{
				rate_map = Map();
				rate_rec = Add_Rooms_And_Rates[Rate_Type == input.rate && Room_Type == input.room_type];
				room_rate = rate_rec.Rate_Per_Night;
				room_type_rec = Add_Room_Type[ID == input.room_type];
				if(input.adults > 1)
				{
					extra_adults = adults - room_type_rec.Number_Of_Adults;
					extra_charge = rate_rec.Charge_Per_Extra_Adult * extra_adults;
				}
				total_room_rate = room_rate + ifnull(extra_charge,0);
				if(input.check_in.toDate() == input.check_out.toDate())
				{
					total_nights = 1;
				}
				else
				{
					total_nights = days360(check_in,check_out);
				}
				amount = total_nights * total_room_rate;
				service_id = Add_Service[Service_Name == "Accommodation"].ID;
				tax_map = thisapp.tax.find_tax_amount(service_id,amount);
				tax_amount = tax_map.get("amount");
				total_amount = tax_amount + amount;
				rate_map.put("amount",amount);
				rate_map.put("tax",tax_amount);
				rate_map.put("total",total_amount);
				return rate_map;
			}
 			void check_in.check_out_process(int check_in_id, int room_no)
			{
				room = Check_In_Details_Form[Check_In_Id == input.check_in_id && Room_Number == input.room_no && Status != "Checked Out"];
				check_in_count = Check_In_Details_Form[Check_In_Id == input.check_in_id && Status == "Checked_In"].count();
				main_rec = Add_Check_In[ID == input.check_in_id];
				if(check_in_count == 0)
				{
					main_rec.Status="Checked Out";
					if(main_rec.Guest_Type == "Individual")
					{
						main_rec.Payment_Status="Done";
					}
				}
			}
 			void check_in.show_invoice_1(int invoice_no)
			{
				openUrl("#Page:Invoice_1?invoice_no=" + invoice_no,"new window");
			}
 			void check_in.show_invoice_2(int invoice_no)
			{
				openUrl("#Page:Invoice_2?invoice_no=" + invoice_no,"new window");
			}
 			list invoice.stay_dates(int invoice_id)
			{
				check_in_row = Check_In_Details_Form[ID == invoice_id];
				stay_date_list = List();
				count_string = leftpad("",check_in_row.Stay_Length).removeLastOccurence(" ");
				count_list = count_string.toList(" ");
				check_in = check_in_row.Check_In_Time.toDate();
				for each  count in count_list
				{
					stay_date_list.add(check_in);
					check_in = check_in.addDay(1);
				}
				return stay_date_list;
			}
 			string check_in.bill_reminder(int corporate)
			{
				mail_string = "";
				for each  check_in in Add_Check_In[Corporate == input.corporate && Payment_Status == "Pending"]
				{
				}
				return "";
			}
 			void reservation.cancel_from_timeline(Reservation form)
			{
				if(form.Status == "Awaiting For Confirmation")
				{
					thisapp.reservation.cancel(form);
				}
				else if(form.Status == "Reserved")
				{
					url = zoho.appuri + "#Form:Reservation?recLinkID=" + form.ID + "&Status=Cancelled&viewLinkName=Timeline_View&zc_NextUrl=#Report:Timeline_View";
					openUrl(url,"popup window");
				}
			}
 			void maintenance.cancel(Maintenance_Block form)
			{
				form.Status="Cancelled";
			}
 			void maintenance.move_to_on_going(Maintenance_Block form)
			{
				form.Status="On Going";
			}
	}



	workflow
	{
		form
		{
			Run_Scripts_On_Click_Of_C as "Run Scripts On Click Of Confirm Button"
			{
				type =  form
				form = Add_Reason
				button = Confirm
				on click
				{
					actions 
					{
					on click
					(
						if(Comments != null)
										{
											item_row = Food_Order_Details[ID == input.Item_Row_Id];
											item_row.Status=input.Status;
											item_row.Comments=input.Comments;
											staff = Add_Staff[Email == zoho.loginuserid].ID;
											item_row.Staff=staff;
											total_order_row_count = Food_Order_Details[Order_Id == item_row.Order_Id].count(ID);
											cancelled_row_count = Food_Order_Details[Order_Id == item_row.Order_Id && Status == "Item Rejected" || Status == "Item Cancelled"].count(ID);
											if(total_order_row_count == cancelled_row_count)
											{
												order = New_Order[ID == item_row.Order_Id];
												order.Order_Status="Cancelled";
											}
											else
											{
												finished_orders = Food_Order_Details[Order_Id == item_row.Order_Id && Status == "Item Served" || Status == "Item Cancelled" || Status == "Item Rejected"].count(ID);
												if(total_order_row_count == finished_orders)
												{
													order = New_Order[ID == item_row.Order_Id];
													order.Order_Status="Item Served";
												}
											}
											openUrl("#Script:page.refresh","same window");
										}
					)
					}
				}
			}
			Run_Scripts_On_Click_Of_B as "Run Scripts On Click Of Book Now"
			{
				type =  form
				form = Check_In
				button = Check_In1
				on click
				{
					actions 
					{
					on click
					(
						if(Check_In != null && Check_Out != null)
										{
											if(Available_Room_Count != 0)
											{
												url = "#Form:Add_Check_In?Check_In=" + input.Check_In + "&Check_Out=" + input.Check_Out;
												openUrl(url,"same window");
											}
										}
					)
					}
				}
			}
			Run_Scripts_On_Click_Of_S as "Run Scripts On Click Of Submit Button"
			{
				type =  form
				form = Shift_a_Room
				button = Submit
				on click
				{
					actions 
					{
					on click
					(
						if(zoho.currentdate == Check_Out)
										{
											total_nights = 1;
										}
										else
										{
											total_nights = days360(zoho.currentdate,input.Check_Out);
										}
										room_type = Add_Room_Type[ID == input.Move_To.Room_Type];
										extra_charge = 0.0;
										rate_rec = Add_Rooms_And_Rates[Rate_Type == input.Apply_Rate && Room_Type == input.Move_To.Room_Type];
										if(Number_Of_Adults > room_type.Number_Of_Adults)
										{
											extra_charge = (input.Number_Of_Adults - room_type.Number_Of_Adults) * rate_rec.Charge_Per_Extra_Adult;
										}
										room_tariff = total_nights * (rate_rec.Rate_Per_Night + extra_charge);
										service_id = Add_Service[Service_Name == "Accommodation"].ID;
										tax_map = thisapp.tax.find_tax_amount(service_id,room_tariff);
										old_room = Check_In_Details_Form[Check_In_Id == input.Check_In_Id && Room_Number == input.Current_Room];
										if(Check_In < zoho.currentdate)
										{
											insert into Check_In_Details_Form
											[
												Added_User=zoho.loginuser
												Room_Number=input.Move_To
												Guest=input.Guest
												Number_Of_Adult=input.Number_Of_Adults
												Number_Of_Child=input.Number_Of_Child
												Check_In_Id=input.Check_In_Id
												Rate=input.Apply_Rate
												Status="Checked In"
												Check_In_Time=zoho.currenttime
												Amount=room_tariff
												Tax_Amount=tax_map.get("amount")
												Total_Amount=room_tariff + tax_map.get("amount")
											]
											old_room.Check_Out_Time=zoho.currenttime;
											old_room.Status="Checked Out";
											thisapp.check_in.check_out(input.Check_In_Id,input.Current_Room);
										}
										else
										{
											old_room.Room_Number=input.Move_To;
											old_room.Rate=input.Apply_Rate;
											old_room.Status="Checked In";
											old_room.Payment_Mode="Group Payment";
											old_room.Amount=room_tariff;
											old_room.Room_Type=room_type.ID;
											old_room.Tax_Amount=tax_map.get("amount");
											old_room.Total_Amount=room_tariff + tax_map.get("amount");
										}
										old_room_rec = Add_Room[ID == input.Current_Room];
										old_room_rec.Room_Status="Dirty";
										new_room_rec = Add_Room[ID == input.Move_To];
										new_room_rec.Room_Status="Occupied";
										thisapp.check_in.check_out(input.Check_In_Id,input.Move_To);
					)
					}
				}
			}
			Run_Scripts_On_Click_Of_S1 as "Run Scripts On Click Of Submit Button"
			{
				type =  form
				form = Public_Reservation
				button = Submit
				on click
				{
					actions 
					{
					on click
					(
						guest = Add_Guest[Email == input.Email];
										if(guest.count(ID) == 0)
										{
											guest_id = insert into Add_Guest
										[
											Email=input.Email
											Phone_Number=input.Phone_Number
											Source="Simply Guest"
											Name.first_name=input.Name.first_name
											Name.last_name=input.Name.last_name
											Added_User=zoho.loginuser
										];
										}
										else
										{
											guest_id = guest.ID;
										}
										insert into Reservation
										[
											Guest_Type="Individual"
											Guest=guest_id
											Check_In=input.Check_In
											Check_Out=input.Check_Out
											Number_Of_Adults=input.Number_Of_Adults
											Number_Of_Rooms=input.Number_Of_Rooms
											Number_Of_Child=input.Number_Of_Child
											Status="Awaiting For Confirmation"
											Added_User=zoho.loginuser
										]
										hotel_details = About_Hotel[ID != 0];
										sendmail
										[
											from :zoho.adminuserid
											to :input.Email
											subject :"New Reservation"
											message :("Hi " + input.Name) + ",<br>Thank you for choosing hotel " + hotel_details.Hotel_Name + " Your reservation for " + input.Check_In + " to " + input.Check_Out + " has been waiting for confirmation. It will get confirm by our front office executive.<br>For enquiry please contact <br>Phone : " + hotel_details.Contact_Number + "<br>Email : " + hotel_details.Email + "<br>Regards by<br>" + hotel_details.Hotel_Name
										]
					)
					}
				}
			}
			Run_Scripts_On_Click_Of_C1 as "Run Scripts On Click Of Check Out"
			{
				type =  form
				form = Check_Out_Form
				button = Check_Out
				on click
				{
					actions 
					{
					on click
					(
						check_in_row = Check_In_Details_Form[Check_In_Id == input.Check_In_Id && Room_Number == input.Room_Number];
										check_in_row.Payment_Mode=input.Payment_Mode;
										check_in_count = Check_In_Details_Form[Check_In_Id == input.Check_In_Id && Status == "Checked In"].count(ID);
										additional_bill_count = 0;
										thisapp.check_in.check_out(input.Check_In_Id,input.Room_Number);
										if(Payment_Mode == "Separate Payment")
										{
											openUrl("#Form:Add_Payment?Check_In_Id=" + input.Check_In_Id + "&Rooms=" + input.Room_Number,"same window");
										}
										else
										{
											if(input.Check_In_Id.Guest_Type == "Corporate")
											{
												if(Check_In_Id.Corporate_Will_Pay_For == "All Charges")
												{
													if(check_in_count == 1)
													{
														thisapp.check_in.check_out_process(input.Check_In_Id,input.Room_Number);
													}
												}
												else
												{
													all_check_in_rows = Check_In_Details_Form[Check_In_Id == input.Check_In_Id].ID.getAll();
													restaurant_orders = New_Order[Check_In_Row_Id in all_check_in_rows && Compliment_Food == false && Payment_Status != "Paid"].count();
													additional_amenities = Add_Amenities_Bill[Check_In_Row_Id in all_check_in_rows && Payment_Status != "Fully Paid"].count();
													service_bills = Generate_Service_Bill[Check_In_Row_Id in all_check_in_rows && Payment_Status != "Fully Paid"].count();
													additional_bill_count = restaurant_orders + service_bills + additional_amenities;
													if(check_in_count == 1)
													{
														if(additional_bill_count == 0)
														{
															thisapp.check_in.check_out_process(input.Check_In_Id,input.Room_Number);
														}
														else
														{
															openUrl("#Form:Add_Payment?Check_In_Id=" + input.Check_In_Id,"same window");
														}
													}
												}
											}
										}
										if(Payment_Mode != "Separate Payment" && additional_bill_count == 0)
										{
											openUrl("#Report:Active_Check_Ins","same window");
										}
					)
					}
				}
			}
			Direct_to_Form_Properties as "Direct to - Form Properties"
			{
				type =  presuccess
				form = Add_Check_In
				on start
				{
					actions 
					{
						openURL("#Report:Active_Check_Ins","new window");
					}
				}
			}
			Direct_to_Form_Properties1 as "Direct to - Form Properties"
			{
				type =  presuccess
				form = Add_Payment
				on start
				{
					actions 
					{
						openURL("#Report:Active_Check_Ins","new window");
					}
				}
			}
			Run_Scripts_While_Adding_16 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Guest
				record event = on add

	field rules
	{
					actions 
					{
						hide Corporate;
					}
	}

			}
			Run_Scripts_On_Always18 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Guest
				record event = on add or edit

	field rules
	{
					actions  (Source == "Corporate")
					{
						show Corporate,Employee_Id;
					}
	}

			}
			Run_Scripts_On_Always19 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Guest
				record event = on add or edit

	on validate
	{
					actions  (Source == "Corporate")
					{
						custom deluge script
						(
											if(Corporate == null)
										{
											alert "Select any company";
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always20 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Room_Type
				record event = on add or edit

	on user input of Number_Of_Adults
	{
					actions 
					{
						custom deluge script
						(
											if(Number_Of_Adults < 1)
										{
											alert "Enter valid value for number of adults";
											input.Number_Of_Adults = null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always21 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Rate_Type
				record event = on add or edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											all_selected_room_types = List();
										for each  room_type in Rooms_And_Rates
										{
											if(room_type.Room_Type != null)
											{
												all_selected_room_types.add(room_type.Room_Type);
											}
										}
										distinct_list = all_selected_room_types.distinct();
										if(distinct_list.size() != all_selected_room_types.size())
										{
											alert "Duplicate room types found";
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always22 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Rate_Type
				record event = on add or edit

	on user input of Rooms_And_Rates.Charge_Per_Extra_Adult
	{
					actions 
					{
						custom deluge script
						(
											if(row.Charge_Per_Extra_Adult != null)
										{
											if(row.Charge_Per_Extra_Adult <= 0)
											{
												alert "Enter a valid amount for extra person charge";
												row.Charge_Per_Extra_Adult=null;
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always23 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Rate_Type
				record event = on add or edit

	on user input of Rooms_And_Rates.Rate_Per_Night
	{
					actions 
					{
						custom deluge script
						(
											if(row.Rate_Per_Night != null)
										{
											if(row.Rate_Per_Night <= 0)
											{
												alert "Enter a valid amount for rate per night";
												row.Rate_Per_Night=null;
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always24 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Rate_Type
				record event = on add or edit

	on add row of Rooms_And_Rates
	{
					actions 
					{
						custom deluge script
						(
											all_room_types = Add_Room_Type[ID != 0].ID.getAll();
										for each  room in Rooms_And_Rates
										{
											if(room.Room_Type != null)
											{
												all_room_types.removeElement(room.Room_Type);
											}
										}
										row.Room_Type:ui.add(all_room_types);
						)
					}
	}

			}
			Run_Scripts_On_Always25 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Rate_Type
				record event = on add or edit

	on delete row of Rooms_And_Rates
	{
					actions 
					{
						custom deluge script
						(
											all_room_types = Add_Room_Type[ID != 0].ID.getAll();
										for each  room in Rooms_And_Rates
										{
											if(room.Room_Type != null)
											{
												all_room_types.removeElement(room.Room_Type);
											}
										}
										row.Room_Type:ui.add(all_room_types);
						)
					}
	}

			}
			Run_Scripts_On_Always26 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Tax_Type
				record event = on add or edit

	on user input of Services_And_Taxes.Percent
	{
					actions 
					{
						custom deluge script
						(
											if(row.Percent != null)
										{
											if(row.Percent <= 0)
											{
												alert "Enter a valid percent for tax";
												row.Percent=null;
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always27 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Tax_Type
				record event = on add or edit

	on add row of Services_And_Taxes
	{
					actions 
					{
						custom deluge script
						(
											all_services = Add_Service[ID != 0].ID.getAll();
										for each  service in input.Services_And_Taxes
										{
											if(service.Choose_Service != null)
											{
												all_services.removeElement(service.Choose_Service);
											}
										}
										row.Choose_Service:ui.add(all_services);
						)
					}
	}

			}
			Run_Scripts_On_Always28 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Tax_Type
				record event = on add or edit

	on delete row of Services_And_Taxes
	{
					actions 
					{
						custom deluge script
						(
											all_services = Add_Service[ID != 0].ID.getAll();
										for each  service in input.Services_And_Taxes
										{
											if(service.Choose_Service != null)
											{
												all_services.removeElement(service.Choose_Service);
											}
										}
										row.Choose_Service:ui.add(all_services);
						)
					}
	}

			}
			Run_Scripts_While_Adding_22 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Maintenance_Block
				record event = on add

	field rules
	{
					actions 
					{
						hide Status,Closing_Notes;
					}
	}

			}
			Run_Scripts_While_Adding_23 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Maintenance_Block
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(Block_From != null && Block_To != null)
										{
											if(Block_From > Block_To || Block_From < zoho.currentdate)
											{
												alert "Please enter the correct dates to block";
												cancel submit;
											}
											else
											{
												reservations = Reservation[(Check_In >= input.Block_From && Check_In <= input.Block_To) || (Check_Out >= input.Block_From && Check_Out <= input.Block_To) || (Check_In <= input.Block_From && Check_Out >= input.Block_To) && Status == "Reserved" && Choose_Rooms == input.Room];
												if(reservations.count() != 0)
												{
													alert "You cannot add maintenance for this room on these dates";
													cancel submit;
												}
											}
										}
										if(Block_From == zoho.currentdate)
										{
											input.Status = "On Going";
										}
										else
										{
											input.Status = "Pending";
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_24 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Maintenance_Block
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											if(Room != null)
										{
											if(Block_From == zoho.currentdate)
											{
												room_rec = Add_Room[ID == input.Room];
												room_rec.Room_Status="Maintenance Block";
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_25 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Maintenance_Block
				record event = on add

	on user input of Block_From
	{
					actions 
					{
						custom deluge script
						(
											if(Block_From != null)
										{
											if(Block_From < zoho.currentdate)
											{
												alert "You are not able to block the rooms for past days";
											}
											else
											{
												if(Block_To != null)
												{
													if(Block_From > Block_To)
													{
														alert "From date must be lesser than to date";
													}
												}
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_26 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Maintenance_Block
				record event = on add

	on user input of Block_To
	{
					actions 
					{
						custom deluge script
						(
											if(Block_To != null)
										{
											if(Block_To < zoho.currentdate)
											{
												alert "You are not able to block the rooms for past days";
											}
											else
											{
												if(Block_From != null)
												{
													if(Block_To < Block_From)
													{
														alert "To date must be greater than from date";
													}
												}
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Editing4 as "Run Scripts While Editing a Record"
			{
				type =  form
				form = Maintenance_Block
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Status == "Closed")
										{
											disable Block_From;
											disable Block_To;
											disable Maintenance_Type;
											disable Description;
											disable Room;
											disable Status;
										}
						)
					}
	}

			}
			Run_Scripts_While_Editing7 as "Run Scripts While Editing a Record"
			{
				type =  form
				form = Maintenance_Block
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(Room != old.Room)
										{
											old_room_rec = Add_Room[ID == old.Room];
											old_room_rec.Room_Status="Clean";
										}
										if(Block_From < old.Block_From || Block_From > Block_To)
										{
											alert "Please check the dates to block";
											cancel submit;
										}
										else
										{
											if(input.Status != "Closed")
											{
												if(Block_From < zoho.currentdate)
												{
													input.Status = "On Going";
												}
												else if(Block_From > zoho.currentdate)
												{
													input.Status = "Pending";
												}
											}
											room_rec = Add_Room[ID == input.Room];
											if(Status == "On Going")
											{
												room_rec.Room_Status="Maintenance Block";
											}
											else
											{
												room_rec.Room_Status="Clean";
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_27 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Reason
				record event = on add

	field rules
	{
					actions 
					{
						hide Item_Row_Id;
						disable Status;
					}
	}

			}
			Run_Scripts_On_Always29 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Room
				record event = on add or edit

	field rules
	{
					actions 
					{
						hide Room_Status;
					}
	}

			}
			Run_Scripts_While_Adding_28 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Food_Order_Details
				record event = on add

	field rules
	{
					actions 
					{
						hide Status,Comments,Staff;
						disable Unit_Price,Order_Id,Total_Price;
					}
	}

			}
			Run_Scripts_While_Adding_29 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Food_Order_Details
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(input.Order_Id.Select_Timing != null)
										{
											all_items = Add_Food[Food_Availability == input.Order_Id.Select_Timing].ID.getAll();
											input.Choose_Item:ui.add(all_items);
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_30 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Food_Order_Details
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											if(Order_Id != null)
										{
											order = New_Order[ID == input.Order_Id];
											order.Order_Status="Pending";
										}
										openUrl("#Script:page.refresh","same window");
						)
					}
	}

			}
			Run_Scripts_While_Adding_31 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Food_Order_Details
				record event = on add

	on user input of Choose_Item
	{
					actions 
					{
						custom deluge script
						(
											if(Choose_Item != null)
										{
											input.Unit_Price = Add_Food[ID == input.Choose_Item].Cost;
											if(input.Quantity != null)
											{
												input.Total_Price = input.Quantity * input.Unit_Price;
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_32 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Food_Order_Details
				record event = on add

	on user input of Quantity
	{
					actions 
					{
						custom deluge script
						(
											if(input.Quantity != null && input.Choose_Item != null)
										{
											input.Unit_Price = Add_Food[ID == input.Choose_Item].Cost;
											input.Total_Price = input.Quantity * input.Unit_Price;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_33 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Check_In
				record event = on add

	field rules
	{
					actions 
					{
						hide Payment_Status;
					}
	}

			}
			Run_Scripts_While_Adding_34 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Check_In
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hotel_detail_count = About_Hotel[ID != 0].count(ID);
										if(hotel_detail_count == 0)
										{
											openUrl("#Form:About_Hotel","popup window");
										}
										clear Room_Details.Rate;
										disable Room_Details.Amount;
										hide Room_Details.Check_Out_Time;
										hide Room_Details.Check_In_Time;
										hide Room_Details.Status;
										hide Room_Details.Tax_Amount;
										hide Room_Details.Total_Amount;
										hide Room_Details.Payment_Mode;
										hide Room_Details.Payment_Status;
										hide Room_Details.Stay_Length;
										if(Reservation_Id != null)
										{
											show Reservation_Id;
											disable Guest_Type;
											input.Guest_Type = input.Reservation_Id.Guest_Type;
											if(Guest_Type == "Corporate")
											{
												hide Guest;
												show Corporate;
												show Corporate_Will_Pay_For;
												disable Corporate;
												input.Corporate = input.Reservation_Id.Corporate;
											}
											else
											{
												hide Corporate;
												show Guest;
												disable Guest;
												input.Guest = input.Reservation_Id.Guest;
											}
											input.Check_In = input.Reservation_Id.Check_In;
											input.Check_Out = input.Reservation_Id.Check_Out;
											if(input.Reservation_Id.Advance_Amount != null)
											{
												input.Advance_Amount = input.Reservation_Id.Advance_Amount;
											}
										}
										else
										{
											hide Reservation_Id;
										}
										if(Check_In != null && Check_Out != null)
										{
											available_rooms = thisapp.room.find_available_rooms(input.Check_In,input.Check_Out,"Booking");
											Room_Details.Room_Number:ui.add(available_rooms.get("Rooms"));
											Room_Details.Room_Type:ui.add(available_rooms.get("Types"));
										}
										else
										{
											clear Room_Details.Room_Number;
											clear Room_Details.Room_Type;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_35 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Check_In
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											hotel_detail_count = About_Hotel[ID != 0].count(ID);
										if(hotel_detail_count == 0)
										{
											alert "You have to add hotel details before adding check ins";
											cancel submit;
										}
										selected_rooms = List();
										for each  room in Room_Details
										{
											if(room.Room_Number != null)
											{
												selected_rooms.add(room.Room_Number);
											}
										}
										if(selected_rooms.size() != 0)
										{
											distinct_rooms = selected_rooms.distinct();
											if(distinct_rooms.size() != selected_rooms.size())
											{
												alert "Room duplication found";
												cancel submit;
											}
											else
											{
												for each  room in input.Room_Details
												{
													room.Check_In_Time=zoho.currenttime;
													input.Status = "Checked In";
													room_rec = Add_Room[ID == room.Room_Number];
													room_rec.Room_Status="Occupied";
												}
											}
										}
										if(Advance_Amount != null)
										{
											if(Advance_Amount > Total_Amount)
											{
												alert "Advance amount should be less than total amount";
												cancel submit;
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_36 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Check_In
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											if(Reservation_Id != null)
										{
											reservation_rec = Reservation[ID == input.Reservation_Id];
											reservation_rec.Status="Converted Check In";
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_37 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Check_In
				record event = on add

	on add row of Room_Details
	{
					actions 
					{
						custom deluge script
						(
											available_rooms = thisapp.room.find_available_rooms(input.Check_In,input.Check_Out,"Check In");
										rooms = available_rooms.get("Rooms").toList();
										if(input.Reservation_Id != null)
										{
											rooms.addAll(input.Reservation_Id.Choose_Rooms);
										}
										for each  room in Room_Details
										{
											if(room.Room_Number != null && room.Room_Number != row.Room_Number)
											{
												rooms.removeElement(room.Room_Number);
											}
										}
										room_types = List();
										for each  rom in rooms
										{
											type = Add_Room[ID == rom].Room_Type;
											room_types.add(type);
										}
										distinct_types = room_types.distinct();
										row.Room_Type:ui.add(distinct_types);
										row.Room_Number:ui.add(rooms);
										all_guests = Add_Guest[ID != 0].ID.getAll();
										row.Guest:ui.add(all_guests);
										if(Reservation_Id != null)
										{
											booked_room_count = input.Reservation_Id.Choose_Rooms.size() - 1;
											selected_rooms = input.Room_Details.Room_Number.getall();
											if(booked_room_count >= selected_rooms.size())
											{
												row.Room_Type=input.Reservation_Id.Room_Type;
												max_adults = row.Room_Type.Number_Of_Extra_Adults + row.Room_Type.Number_Of_Adults;
												limited_adults = row.Room_Type.Number_Of_Adults;
												if(input.Reservation_Id.Number_Of_Adults >= max_adults)
												{
													row.Number_Of_Adult=max_adults;
												}
												else
												{
													row.Number_Of_Adult=limited_adults;
												}
												row.Number_Of_Child=row.Room_Type.Number_Of_Child;
												row.Rate=input.Reservation_Id.Select_Rate;
												booked_rooms = input.Reservation_Id.Choose_Rooms;
												row.Room_Number=booked_rooms.get(booked_room_count - selected_rooms.size());
												adults = ifnull(row.Number_Of_Adult,0);
												rate_map = thisapp.check_in.rate_calculation_1(row.Rate,row.Room_Type,input.Check_In,input.Check_Out,adults);
												row.Amount=rate_map.get("amount");
												total_tariff = input.Room_Details.sum(Amount);
												input.Room_Tariff = total_tariff;
												row.Tax_Amount=rate_map.get("tax");
												input.Tax_Amount = input.Room_Details.sum(Tax_Amount);
												row.Total_Amount=rate_map.get("total");
												input.Total_Amount = input.Room_Details.sum(Total_Amount);
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_38 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Service
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											accommodation_service_count = Add_Service[Service_Name == "Accommodation"].count(ID);
										if(accommodation_service_count == 0)
										{
											insert into Add_Service
											[
												Service_Name="Accommodation"
												Added_User=zoho.loginuser
											]
										}
										restaurant_service_count = Add_Service[Service_Name == "Restaurant"].count(ID);
										if(restaurant_service_count == 0)
										{
											insert into Add_Service
											[
												Service_Name="Restaurant"
												Added_User=zoho.loginuser
											]
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_39 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = About_Hotel
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											accommodation_service_count = Add_Service[Service_Name == "Accommodation"].count(ID);
										if(accommodation_service_count == 0)
										{
											insert into Add_Service
											[
												Service_Name="Accommodation"
												Type="Inbuilt"
												Added_User=zoho.loginuser
											]
										}
										restaurant_service_count = Add_Service[Service_Name == "Restaurant"].count(ID);
										if(restaurant_service_count == 0)
										{
											insert into Add_Service
											[
												Service_Name="Restaurant"
												Type="Inbuilt"
												Added_User=zoho.loginuser
											]
										}
										admin_count = Add_Staff[Email == zoho.adminuserid].count(ID);
										if(admin_count == 0)
										{
											insert into Add_Staff
											[
												Email=zoho.adminuserid
												Role="Manager"
												Added_User=zoho.loginuser
												Name.first_name="Admin"
											]
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_40 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Tax_Type
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											accommodation_service_count = Add_Service[Service_Name == "Accommodation"].count(ID);
										if(accommodation_service_count == 0)
										{
											insert into Add_Service
											[
												Service_Name="Accommodation"
												Type="Inbuilt"
												Added_User=zoho.loginuser
											]
										}
										restaurant_service_count = Add_Service[Service_Name == "Restaurant"].count(ID);
										if(restaurant_service_count == 0)
										{
											insert into Add_Service
											[
												Service_Name="Restaurant"
												Type="Inbuilt"
												Added_User=zoho.loginuser
											]
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_41 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Generate_Service_Bill
				record event = on add

	field rules
	{
					actions 
					{
						hide Payment_Status;
					}
	}

			}
			Run_Scripts_While_Editing8 as "Run Scripts While Editing a Record"
			{
				type =  form
				form = Generate_Service_Bill
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Choose_Service != null)
										{
											chosen_service = input.Choose_Service;
										}
										default_services = {"Accommodation","Restaurant"};
										service_ids = Add_Service[Service_Name not in default_services].ID.getAll();
										input.Choose_Service:ui.add(service_ids);
										if(chosen_service != null)
										{
											input.Choose_Service = chosen_service;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_42 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = New_Order
				record event = on add

	field rules
	{
					actions 
					{
						hide Choose_Table,Select_Room,Order_Status,Room_Guest,Compliment_Food,Payment_Status,Net_Total,Tax_Amount;
					}
	}

			}
			Run_Scripts_While_Adding_43 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = New_Order
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											input.Attendant = Add_Staff[Email == zoho.loginuserid].ID;
										input.Date_Time = zoho.currenttime;
										hide Orders.Staff;
										hide Orders.Status;
										hide Orders.Comments;
										clear Orders.Choose_Item;
										food_count = Add_Food[ID != 0].count(ID);
										if(food_count == 0)
										{
											alert "Please add some food items to order";
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_44 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = New_Order
				record event = on add

	on user input of Select_Timing
	{
					actions 
					{
						custom deluge script
						(
											if(Select_Timing != null)
										{
											available_foods = Add_Food[Food_Availability == input.Select_Timing].ID.getAll();
											Orders.Choose_Item:ui.add(available_foods);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always30 as "Run Scripts On Always"
			{
				type =  form
				form = New_Order
				record event = on add or edit

	field rules
	{
					actions  (Select_Timing is null)
					{
					hide add row of Orders;
					}
					actions  (Room_Guest == true)
					{
						show Select_Room,Compliment_Food;
					}
					actions 
					{
						disable Sub_Total,Net_Total,Order_Status,Attendant,Date_Time,Tax_Amount;
						hide Check_In_Row_Id;
					}
					actions  (Order_For == "Room Service")
					{
						show Select_Room,Compliment_Food;
						hide Room_Guest;
					}
					actions  (Order_For == "Dine In")
					{
						show Room_Guest,Choose_Table;
					}
					actions  (Select_Timing is not null)
					{
						disable Select_Timing;
					}
	}

			}
			Run_Scripts_On_Always31 as "Run Scripts On Always"
			{
				type =  form
				form = New_Order
				record event = on add or edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											disable Orders.Unit_Price;
										disable Orders.Total_Price;
										disable Orders.Status;
										disable Orders.Staff;
										disable Orders.Comments;
						)
					}
	}

			}
			Run_Scripts_On_Always32 as "Run Scripts On Always"
			{
				type =  form
				form = New_Order
				record event = on add or edit

	on validate
	{
					actions  (Room_Guest == true)
					{
						custom deluge script
						(
											if(Select_Room == null)
										{
											alert "Select a room to take order";
											cancel submit;
										}
						)
					}
					actions 
					{
						custom deluge script
						(
											if(Order_For != "Dine In")
										{
											input.Choose_Table = null;
										}
										if(Order_For == "Take Away")
										{
											input.Room_Guest = false;
										}
										if(Room_Guest == false)
										{
											input.Select_Room = null;
											input.Compliment_Food = false;
										}
										main_rec = Add_Check_In[ID == input.Check_In_Row_Id.Check_In_Id];
										if(Date_Time < main_rec.Check_In || Date_Time > main_rec.Check_Out)
										{
											alert "Enter a valid stay time of this selected room";
											cancel submit;
										}
						)
					}
					actions  (Order_For == "Room Service")
					{
						custom deluge script
						(
											input.Room_Guest = true;
						)
					}
					actions  (Order_For == "Dine In")
					{
						custom deluge script
						(
											if(Choose_Table == null)
										{
											alert "Choose a table";
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always33 as "Run Scripts On Always"
			{
				type =  form
				form = New_Order
				record event = on add or edit

	on user input of Orders.Quantity
	{
					actions 
					{
						custom deluge script
						(
											if(row.Quantity != null)
										{
											if(row.Quantity < 1)
											{
												alert "Enter a valid quantity for order";
												row.Quantity=null;
											}
											else
											{
												if(row.Choose_Item != null)
												{
													row.Total_Price=row.Unit_Price * row.Quantity;
													input.Sub_Total = input.Orders.sum(Total_Price);
												}
											}
										}
										else
										{
											input.Sub_Total = ifnull(input.Sub_Total,0) - ifnull(row.Total_Price,0);
											row.Total_Price=null;
										}
										input.Net_Total = input.Sub_Total;
						)
					}
	}

			}
			Run_Scripts_On_Always34 as "Run Scripts On Always"
			{
				type =  form
				form = New_Order
				record event = on add or edit

	on user input of Select_Room
	{
					actions  (Select_Room is not null)
					{
						custom deluge script
						(
											if(Payment_Status != "Paid")
										{
											input.Check_In_Row_Id = thisapp.check_in.find_check_in_row_id(input.Select_Room);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always35 as "Run Scripts On Always"
			{
				type =  form
				form = New_Order
				record event = on add or edit

	on user input of Orders.Choose_Item
	{
					actions 
					{
						custom deluge script
						(
											if(row.Choose_Item != null)
										{
											row.Unit_Price=Add_Food[ID == row.Choose_Item].Cost;
											if(row.Quantity != null)
											{
												row.Total_Price=row.Unit_Price * row.Quantity;
												input.Sub_Total = input.Orders.sum(Total_Price);
											}
										}
										else
										{
											input.Sub_Total = ifnull(input.Sub_Total,0) - ifnull(row.Total_Price,0);
											row.Unit_Price=null;
											row.Total_Price=null;
										}
										input.Net_Total = input.Sub_Total;
						)
					}
	}

			}
			Run_Scripts_On_Always36 as "Run Scripts On Always"
			{
				type =  form
				form = New_Order
				record event = on add or edit

	on add row of Orders
	{
					actions 
					{
						custom deluge script
						(
											if(Select_Timing != null)
										{
											available_foods = Add_Food[Food_Availability == input.Select_Timing].ID.getAll();
											row.Choose_Item:ui.add(available_foods);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always37 as "Run Scripts On Always"
			{
				type =  form
				form = New_Order
				record event = on add or edit

	on delete row of Orders
	{
					actions 
					{
						custom deluge script
						(
											// if(Select_Timing != null)
										// {
										// 	available_foods = Add_Food[Food_Availability == input.Select_Timing].ID.getAll();
										// 	row.Choose_Item:ui.add(available_foods);
										// }
										// input.Sub_Total = ifnull(input.Sub_Total,0) - ifnull(row.Total_Price,0);
										// service_id = Add_Service[Service_Name == "Restaurant"].ID;
										// tax_count = Add_Service_And_Taxes[Choose_Service == service_id].count(ID);
										// if(tax_count != 0)
										// {
										// 	input.Tax_Amount = thisapp.tax.find_tax_amount(service_id,input.Sub_Total);
										// }
										// input.Net_Total = input.Sub_Total + input.Tax_Amount;
						)
					}
	}

			}
			Run_Scripts_While_Adding_45 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Staff
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											if(Email != null && Role != null)
										{
											thisapp.permissions.assignUserInProfile(input.Email,input.Role);
											thisapp.Notification.Send_Notification(input.Email);
										}
						)
					}
	}

			}
			Run_Scripts_while_Editing as "Run Scripts while Editing a Record"
			{
				type =  form
				form = Add_Staff
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(Email != null && Role != null)
										{
											if(old.Email != input.Email)
											{
												thisapp.permissions.deleteuser(old.Email);
											}
											thisapp.permissions.assignUserInProfile(input.Email,input.Role);
											thisapp.Notification.Send_Notification(input.Email);
										}
						)
					}
	}

			}
			Run_Scripts_While_Deletin2 as "Run Scripts While Deleting a Record"
			{
				type =  form
				form = Add_Staff
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(Email != null)
										{
											thisapp.permissions.deleteuser(input.Email);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always38 as "Run Scripts On Always"
			{
				type =  form
				form = Generate_Service_Bill
				record event = on add or edit

	field rules
	{
					actions 
					{
						disable Tax_Amount,Total;
						hide Check_In_Row_Id;
					}
	}

			}
			Run_Scripts_On_Always39 as "Run Scripts On Always"
			{
				type =  form
				form = Generate_Service_Bill
				record event = on add or edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(input.Pre_Paid_Amount != null)
										{
											if(Pre_Paid_Amount == 0)
											{
												input.Payment_Status = "Un Paid";
											}
											else if(Pre_Paid_Amount < Total && Pre_Paid_Amount != 0)
											{
												input.Payment_Status = "Partly Paid";
											}
											else if(Pre_Paid_Amount == Total)
											{
												input.Payment_Status = "Fully Paid";
											}
										}
										else
										{
											input.Pre_Paid_Amount = 0;
										}
										main_rec = Add_Check_In[ID == input.Check_In_Row_Id.Check_In_Id];
										if(Date_Time < main_rec.Check_In || Date_Time > main_rec.Check_Out)
										{
											alert "Enter a valid stay time of this selected room";
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always40 as "Run Scripts On Always"
			{
				type =  form
				form = Generate_Service_Bill
				record event = on add or edit

	on user input of Choose_Service
	{
					actions 
					{
						custom deluge script
						(
											if(Choose_Service != null && Charge != null)
										{
											service_id = Add_Service[ID == input.Choose_Service].ID;
											tax_map = thisapp.tax.find_tax_amount(service_id,input.Charge);
											input.Tax_Amount = tax_map.get("amount");
											input.Total = input.Charge + input.Tax_Amount;
										}
										else
										{
											input.Tax_Amount = 0;
											input.Total = ifnull(input.Charge,0);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always41 as "Run Scripts On Always"
			{
				type =  form
				form = Generate_Service_Bill
				record event = on add or edit

	on user input of Pre_Paid_Amount
	{
					actions 
					{
						custom deluge script
						(
											if(Pre_Paid_Amount != null)
										{
											if(Pre_Paid_Amount < 0)
											{
												alert "Enter a valid amount for paid amount";
												input.Pre_Paid_Amount = 0;
											}
											else if(Pre_Paid_Amount > Total)
											{
												alert "Paid amount cannot be greater than the total amount";
												input.Pre_Paid_Amount = 0;
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always42 as "Run Scripts On Always"
			{
				type =  form
				form = Generate_Service_Bill
				record event = on add or edit

	on user input of Room
	{
					actions 
					{
						custom deluge script
						(
											if(Room != null && Payment_Status != "Fully Paid")
										{
											input.Check_In_Row_Id = thisapp.check_in.find_check_in_row_id(input.Room);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always43 as "Run Scripts On Always"
			{
				type =  form
				form = Generate_Service_Bill
				record event = on add or edit

	on user input of Charge
	{
					actions 
					{
						custom deluge script
						(
											if(Charge != null)
										{
											if(Charge <= 0)
											{
												alert "Enter a valid amount";
												input.Charge = null;
											}
											else
											{
												if(Choose_Service != null && Charge != null)
												{
													service_id = Add_Service[ID == input.Choose_Service].ID;
													tax_map = thisapp.tax.find_tax_amount(service_id,input.Charge);
													input.Tax_Amount = tax_map.get("amount");
													input.Total = input.Charge + input.Tax_Amount;
												}
											}
										}
										else
										{
											input.Tax_Amount = 0;
											input.Total = ifnull(input.Charge,0);
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_46 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Check_In
				record event = on add

	field rules
	{
					actions 
					{
						disable Check_In;
						hide Available_Room_Count;
					}
	}

			}
			Run_Scripts_While_Adding_47 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Check_In
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											input.Check_In = zoho.currentdate;
										input.Check_Out = input.Check_In.addDay(1);
										hotel_detail_count = About_Hotel[ID != 0].count(ID);
										if(hotel_detail_count == 0)
										{
											openUrl("#Form:About_Hotel","popup window");
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_48 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Check_In
				record event = on add

	on user input of Check_Out
	{
					actions 
					{
						custom deluge script
						(
											if(Check_Out != null)
										{
											if(Check_Out < zoho.currentdate)
											{
												alert "You cannot make bookings for past time";
												input.Check_Out = null;
												input.plain = "";
											}
											else if(Check_In != null)
											{
												if(Check_Out < Check_In)
												{
													alert "Check out date cannot be greater than check In date";
													input.Check_In = null;
													input.plain = "";
												}
												else
												{
													room_map = thisapp.room.find_available_rooms(input.Check_In,input.Check_Out,"Search");
													available_Rooms_Count = room_map.get("Availability");
													input.Available_Room_Count = available_Rooms_Count;
													if(available_Rooms_Count > 0)
													{
														input.plain = available_Rooms_Count + " rooms available for direct check in";
													}
													else
													{
														input.plain = "Rooms not available for entered dates <br> Try checking by changing the dates";
													}
												}
											}
										}
										else
										{
											input.plain = "";
										}
						)
					}
	}

			}
			Run_Scripts_On_Always44 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Check_In
				record event = on add or edit

	field rules
	{
					actions  (Guest_Type == "Corporate")
					{
						show Corporate,Corporate_Will_Pay_For;
					}
					actions 
					{
						disable Check_In,Check_Out,Room_Tariff,Tax_Amount,Total_Amount;
						hide Status,Refund_Amount;
					}
					actions  (Reservation_Id is not null)
					{
						show Reservation_Id;
						disable Reservation_Id;
					}
					actions  (Guest_Type == "Individual")
					{
						show Guest;
					}
	}

			}
			Run_Scripts_On_Always45 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Check_In
				record event = on add or edit

	on validate
	{
					actions  (Guest_Type == "Corporate")
					{
						custom deluge script
						(
											if(Corporate == null)
										{
											alert "Select a company to finish booking";
											cancel submit;
										}
										else if(Corporate_Will_Pay_For == "" || Corporate_Will_Pay_For == null)
										{
											alert "Please select a payment option";
											cancel submit;
										}
										input.Guest = null;
						)
					}
					actions 
					{
						custom deluge script
						(
											if(Advance_Amount != null)
										{
											if(Advance_Amount < 0)
											{
												alert "Enter a valid amount for advance";
												cancel submit;
											}
										}
						)
					}
					actions  (Guest_Type == "Individual")
					{
						custom deluge script
						(
											if(Guest == null)
										{
											alert "Select a guest to finish booking";
											cancel submit;
										}
										input.Corporate = null;
										input.Corporate_Will_Pay_For = null;
						)
					}
	}

			}
			Run_Scripts_On_Always46 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Check_In
				record event = on add or edit

	on user input of Room_Details.Room_Number
	{
					actions 
					{
						custom deluge script
						(
											if(row.Room_Number != null)
										{
											row.Room_Type=Add_Room[ID == row.Room_Number].Room_Type;
											rates = Add_Rooms_And_Rates[Room_Type == row.Room_Type].Rate_Type.getAll();
											row.Rate:ui.add(rates);
											input.Room_Tariff = ifnull(input.Room_Tariff,0) - ifnull(row.Amount,0);
											row.Amount=null;
											input.Tax_Amount = ifnull(input.Tax_Amount,0) - ifnull(row.Tax_Amount,0);
											row.Tax_Amount=0.0;
											input.Total_Amount = ifnull(input.Total_Amount,0) - ifnull(row.Total_Amount,0);
											row.Total_Amount=0.0;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always47 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Check_In
				record event = on add or edit

	on user input of Room_Details.Number_Of_Adult
	{
					actions 
					{
						custom deluge script
						(
											if(row.Number_Of_Adult != null && row.Room_Type != null)
										{
											room_type = Add_Room_Type[ID == row.Room_Type];
											max_adults = room_type.Number_Of_Adults + room_type.Number_Of_Extra_Adults;
											if(row.Number_Of_Adult > max_adults)
											{
												alert "Maximum adults for this room is " + max_adults;
												row.Number_Of_Adult=null;
											}
											else
											{
												if(row.Rate != null)
												{
													adults = ifnull(row.Number_Of_Adult,0);
													rate_map = thisapp.check_in.rate_calculation_1(row.Rate,row.Room_Type,input.Check_In,input.Check_Out,adults);
													row.Amount=rate_map.get("amount");
													total_tariff = input.Room_Details.sum(Amount);
													input.Room_Tariff = total_tariff;
													row.Tax_Amount=rate_map.get("tax");
													input.Tax_Amount = input.Room_Details.sum(Tax_Amount);
													row.Total_Amount=rate_map.get("total");
													input.Total_Amount = input.Room_Details.sum(Total_Amount);
												}
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always48 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Check_In
				record event = on add or edit

	on user input of Room_Details.Room_Type
	{
					actions 
					{
						custom deluge script
						(
											if(row.Room_Type != null)
										{
											available_rooms = thisapp.room.find_available_rooms(input.Check_In,input.Check_Out,"Check In");
											rooms = available_rooms.get("Rooms");
											type_wise_rooms = Add_Room[ID in rooms && Room_Type == row.Room_Type].ID.getAll();
											for each  room in input.Room_Details
											{
												if(room.Room_Type == row.Room_Type)
												{
													type_wise_rooms.removeElement(room.Room_Number);
												}
											}
											row.Room_Number:ui.add(type_wise_rooms);
											room_type = Add_Room_Type[ID == row.Room_Type];
											row.Number_Of_Adult=room_type.Number_Of_Adults;
											if(row.Number_Of_Adult != null)
											{
												max_adults = room_type.Number_Of_Adults + room_type.Number_Of_Extra_Adults;
												if(row.Number_Of_Adult > max_adults)
												{
													alert "Maximum adults for this room is " + max_adults;
													row.Number_Of_Adult=null;
												}
											}
											rates = Add_Rooms_And_Rates[Room_Type == row.Room_Type].Rate_Type.getAll();
											row.Rate:ui.add(rates);
											input.Room_Tariff = ifnull(input.Room_Tariff,0) - ifnull(row.Amount,0);
											row.Amount=null;
											input.Tax_Amount = ifnull(input.Tax_Amount,0) - ifnull(row.Tax_Amount,0);
											row.Tax_Amount=0.0;
											input.Total_Amount = ifnull(input.Total_Amount,0) - ifnull(row.Total_Amount,0);
											row.Total_Amount=0.0;
											row.Number_Of_Adult=null;
											row.Number_Of_Child=null;
										}
										else
										{
											input.Room_Tariff = ifnull(input.Room_Tariff,0) - ifnull(row.Amount,0);
											row.Amount=null;
											input.Tax_Amount = ifnull(input.Tax_Amount,0) - ifnull(row.Tax_Amount,0);
											row.Tax_Amount=0.0;
											input.Total_Amount = ifnull(input.Total_Amount,0) - ifnull(row.Total_Amount,0);
											row.Total_Amount=0.0;
											row.Rate=null;
											row.Room_Number=null;
											row.Number_Of_Adult=null;
											row.Number_Of_Child=null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always49 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Check_In
				record event = on add or edit

	on user input of Room_Details.Number_Of_Child
	{
					actions 
					{
						custom deluge script
						(
											if(row.Number_Of_Child != null && row.Room_Type != null)
										{
											room_type = Add_Room_Type[ID == row.Room_Type];
											max_child = room_type.Number_Of_Child;
											if(row.Number_Of_Child > max_child)
											{
												alert "Maximum child for this room is " + max_child;
												row.Number_Of_Child=null;
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always50 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Check_In
				record event = on add or edit

	on user input of Room_Details.Rate
	{
					actions 
					{
						custom deluge script
						(
											if(row.Rate != null && row.Room_Type != null)
										{
											adults = ifnull(row.Number_Of_Adult,0);
											rate_map = thisapp.check_in.rate_calculation_1(row.Rate,row.Room_Type,input.Check_In,input.Check_Out,adults);
											row.Amount=rate_map.get("amount");
											total_tariff = input.Room_Details.sum(Amount);
											input.Room_Tariff = total_tariff;
											row.Tax_Amount=rate_map.get("tax");
											input.Tax_Amount = input.Room_Details.sum(Tax_Amount);
											row.Total_Amount=rate_map.get("total");
											input.Total_Amount = input.Room_Details.sum(Total_Amount);
										}
										else if(row.Rate == null)
										{
											input.Room_Tariff = ifnull(input.Room_Tariff,0) - ifnull(row.Amount,0);
											row.Amount=null;
											input.Tax_Amount = ifnull(input.Tax_Amount,0) - ifnull(row.Tax_Amount,0);
											row.Tax_Amount=0.0;
											input.Total_Amount = ifnull(input.Total_Amount,0) - ifnull(row.Total_Amount,0);
											row.Total_Amount=0.0;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always51 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Check_In
				record event = on add or edit

	on delete row of Room_Details
	{
					actions 
					{
						custom deluge script
						(
											available_rooms = thisapp.room.find_available_rooms(input.Check_In,input.Check_Out,"Check In");
										rooms = available_rooms.get("Rooms").toList();
										for each  room in input.Room_Details
										{
											if(room.Room_Number != null)
											{
												rooms.removeElement(room.Room_Number);
											}
										}
										room_types = List();
										for each  rom in rooms
										{
											type = Add_Room[ID == rom].Room_Type;
											room_types.add(type);
										}
										distinct_types = room_types.distinct();
										row.Room_Type:ui.add(distinct_types);
										row.Room_Number:ui.add(rooms);
										if(row.Amount != null)
										{
											input.Room_Tariff = ifnull(input.Room_Tariff,0) - ifnull(row.Amount,0);
											input.Tax_Amount = ifnull(input.Tax_Amount,0) - ifnull(row.Tax_Amount,0);
											input.Total_Amount = ifnull(input.Total_Amount,0) - ifnull(row.Total_Amount,0);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always52 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Corporate_Client
				record event = on add or edit

	field rules
	{
					actions  (Set_Payment_Frequency == true)
					{
						show Select_Frequency,Next_Reminder_On;
						disable Next_Reminder_On;
					}
	}

			}
			Run_Scripts_On_Always53 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Corporate_Client
				record event = on add or edit

	on validate
	{
					actions  (Set_Payment_Frequency == true)
					{
						custom deluge script
						(
											if(Select_Frequency == "")
										{
											alert "Select any frequency for payment reminder";
											cancel submit;
										}
						)
					}
					actions 
					{
						custom deluge script
						(
											if(Set_Payment_Frequency == false)
										{
											if(Select_Frequency != "" && Next_Reminder_On != null)
											{
												input.Select_Frequency = "";
												input.Next_Reminder_On = null;
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always54 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Corporate_Client
				record event = on add or edit

	on user input of Select_Frequency
	{
					actions  (Select_Frequency is not null)
					{
						custom deluge script
						(
											if(Select_Frequency == "Daily")
										{
											input.Next_Reminder_On = zoho.currentdate.addDay(1);
										}
										else if(Select_Frequency == "Weekly")
										{
											input.Next_Reminder_On = zoho.currentdate.addWeek(1);
										}
										else if(Select_Frequency == "Monthly")
										{
											input.Next_Reminder_On = zoho.currentdate.addMonth(1);
										}
										else if(Select_Frequency == "Yearly")
										{
											input.Next_Reminder_On = zoho.currentdate.addYear(1);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always55 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Service
				record event = on add or edit

	field rules
	{
					actions 
					{
						hide Type;
					}
	}

			}
			Run_Scripts_While_Adding_49 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Amenities_Bill
				record event = on add

	field rules
	{
					actions 
					{
						hide Payment_Status;
					}
	}

			}
			Run_Scripts_On_Always56 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Amenities_Bill
				record event = on add or edit

	field rules
	{
					actions 
					{
						hide Check_In_Row_Id;
					}
	}

			}
			Run_Scripts_On_Always57 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Amenities_Bill
				record event = on add or edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(input.Pre_Paid_Amount != null)
										{
											if(Pre_Paid_Amount == 0)
											{
												input.Payment_Status = "Un Paid";
											}
											else if(Pre_Paid_Amount < input.Total_Charge && Pre_Paid_Amount != 0)
											{
												input.Payment_Status = "Partly Paid";
											}
											else if(Pre_Paid_Amount == input.Total_Charge)
											{
												input.Payment_Status = "Fully Paid";
											}
										}
										else
										{
											input.Pre_Paid_Amount = 0;
										}
										main_rec = Add_Check_In[ID == input.Check_In_Row_Id.Check_In_Id];
										if(Date_Time < main_rec.Check_In || Date_Time > main_rec.Check_Out)
										{
											alert "Enter a valid stay time of this selected room";
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always58 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Amenities_Bill
				record event = on add or edit

	on user input of Total_Charge
	{
					actions 
					{
						custom deluge script
						(
											if(Total_Charge != null)
										{
											if(Total_Charge <= 0)
											{
												alert "Enter a valid amount";
												input.Total_Charge = null;
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always59 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Amenities_Bill
				record event = on add or edit

	on user input of Room
	{
					actions 
					{
						custom deluge script
						(
											if(Room != null && Payment_Status != "Fully Paid")
										{
											input.Check_In_Row_Id = thisapp.check_in.find_check_in_row_id(input.Room);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always60 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Food
				record event = on add or edit

	on user input of Cost
	{
					actions 
					{
						custom deluge script
						(
											if(Cost != null)
										{
											if(Cost <= 0)
											{
												alert "Enter a valid amount";
												input.Cost = null;
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always61 as "Run Scripts On Always"
			{
				type =  form
				form = Reservation
				record event = on add or edit

	field rules
	{
					actions  (Guest_Type == "Individual")
					{
						show Guest;
					}
					actions 
					{
						disable Total_Amount,Room_Tariff,Tax_Amount;
					}
					actions  (Confirm_Reservation == true)
					{
						show Rate,Choose_Rooms,Room_Type;
					}
					actions  (Guest_Type == "Corporate")
					{
						show Corporate;
					}
	}

			}
			Run_Scripts_On_Always62 as "Run Scripts On Always"
			{
				type =  form
				form = Reservation
				record event = on add or edit

	on validate
	{
					actions  (Guest_Type == "Individual")
					{
						custom deluge script
						(
											if(Guest == null)
										{
											alert "Select any guest to complete the reservation";
											cancel submit;
										}
										else if(Corporate != null && Guest != null)
										{
											input.Corporate = null;
										}
						)
					}
					actions 
					{
						custom deluge script
						(
											if(Advance_Amount < 0 || Advance_Amount > Total_Amount)
										{
											alert "Enter a valid amount for advance";
											cancel submit;
										}
						)
					}
					actions  (Confirm_Reservation == false)
					{
						custom deluge script
						(
											input.Status = "Awaiting For Confirmation";
										input.Room_Type = null;
										input.Choose_Rooms = null;
										input.Select_Rate = null;
										input.Room_Tariff = 0;
										input.Tax_Amount = 0;
										input.Total_Amount = 0;
										input.Advance_Amount = 0;
						)
					}
					actions  (Confirm_Reservation == true)
					{
						custom deluge script
						(
											if(Select_Rate == null && Choose_Rooms == {})
										{
											alert "Select rooms and rate to confirm the reservation";
											cancel submit;
										}
										else if(Choose_Rooms == {})
										{
											alert "Choose rooms to confirm the reservation";
											cancel submit;
										}
										else if(Select_Rate == null)
										{
											alert "Select rate to finish the reservation";
											cancel submit;
										}
						)
					}
					actions  (Guest_Type == "Corporate")
					{
						custom deluge script
						(
											if(Corporate == null)
										{
											alert "Select any corporate to complete the reservation";
											cancel submit;
										}
										else if(Corporate != null && Guest != null)
										{
											input.Guest = null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always63 as "Run Scripts On Always"
			{
				type =  form
				form = Reservation
				record event = on add or edit

	on user input of Number_Of_Rooms
	{
					actions 
					{
						custom deluge script
						(
											if(Number_Of_Rooms != null)
										{
											if(Number_Of_Rooms < 1)
											{
												alert "Enter a valid number of rooms";
												input.Number_Of_Rooms = 1;
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always64 as "Run Scripts On Always"
			{
				type =  form
				form = Reservation
				record event = on add or edit

	on user input of Choose_Rooms
	{
					actions 
					{
						custom deluge script
						(
											if(Choose_Rooms != {})
										{
											room_count = input.Choose_Rooms.size();
											max_adult = (input.Room_Type.Number_Of_Adults + input.Room_Type.Number_Of_Extra_Adults) * room_count;
											child = input.Room_Type.Number_Of_Child * room_count;
											input.Stay_Details = "<div><p style='color:#c32525;'>Maximum " + max_adult + " adults and " + child + " child can stay in these selected rooms</p></div>";
											if(input.Select_Rate != null)
											{
												room_count = input.Choose_Rooms.size();
												total_nights = days360(input.Check_In,input.Check_Out);
												if(total_nights == 0)
												{
													total_nights = 1;
												}
												value_map = thisapp.reservation.rate_calculation(room_count,total_nights,input.Select_Rate,input.Room_Type,input.Number_Of_Adults);
												input.Room_Tariff = value_map.get("tariff");
												input.Tax_Amount = value_map.get("tax");
												input.Rate_Details = value_map.get("details");
												input.Total_Amount = input.Room_Tariff + input.Tax_Amount;
											}
										}
										else
										{
											input.Stay_Details = "";
											input.Room_Tariff = 0.0;
											input.Tax_Amount = 0.0;
											input.Total_Amount = 0.0;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always65 as "Run Scripts On Always"
			{
				type =  form
				form = Reservation
				record event = on add or edit

	on user input of Check_Out
	{
					actions 
					{
						custom deluge script
						(
											if(Check_Out != null)
										{
											if(Check_Out < zoho.currentdate)
											{
												alert "You cannot make bookings for past time";
												input.Check_Out = null;
											}
											else if(Check_In != null)
											{
												if(Check_Out < Check_In)
												{
													alert "Check out date cannot be greater than check In date";
													input.Check_Out = null;
												}
												else
												{
													room_map = thisapp.room.find_available_rooms(input.Check_In,input.Check_Out,"Reservation");
													available_Rooms_Count = room_map.get("Availability");
													if(available_Rooms_Count > 0)
													{
														input.Room_Type:ui.add(room_map.get("Types"));
													}
													else
													{
														alert "Rooms not available for entered dates, Try checking by changing the dates";
													}
													input.Room_Type = null;
												}
											}
										}
										else
										{
											clear Room_Type;
											input.Room_Type = null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always66 as "Run Scripts On Always"
			{
				type =  form
				form = Reservation
				record event = on add or edit

	on user input of Select_Rate
	{
					actions 
					{
						custom deluge script
						(
											if(input.Select_Rate != null)
										{
											if(Choose_Rooms != {})
											{
												room_count = input.Choose_Rooms.size();
												total_nights = days360(input.Check_In,input.Check_Out);
												if(total_nights == 0)
												{
													total_nights = 1;
												}
												value_map = thisapp.reservation.rate_calculation(room_count,total_nights,input.Select_Rate,input.Room_Type,input.Number_Of_Adults);
												input.Room_Tariff = value_map.get("tariff");
												input.Tax_Amount = value_map.get("tax");
												input.Rate_Details = value_map.get("details");
												input.Total_Amount = input.Room_Tariff + input.Tax_Amount;
											}
										}
										else
										{
											input.Room_Tariff = 0.0;
											input.Total_Amount = 0.0;
											input.Tax_Amount = 0.0;
											input.Rate_Details = "";
										}
						)
					}
	}

			}
			Run_Scripts_On_Always67 as "Run Scripts On Always"
			{
				type =  form
				form = Reservation
				record event = on add or edit

	on user input of Check_In
	{
					actions 
					{
						custom deluge script
						(
											if(Check_In != null)
										{
											if(Check_In < zoho.currentdate)
											{
												alert "You cannot make bookings for past time";
												input.Check_In = null;
											}
											else if(Check_Out != null)
											{
												if(Check_In > Check_Out)
												{
													alert "Check In date cannot be greater than check out date";
													input.Check_In = null;
												}
												else
												{
													room_map = thisapp.room.find_available_rooms(input.Check_In,input.Check_Out,"Reservation");
													available_Rooms_Count = room_map.get("Availability");
													if(available_Rooms_Count > 0)
													{
														input.Room_Type:ui.add(room_map.get("Types"));
													}
													else
													{
														alert "Rooms not available for entered dates, Try checking by changing the dates";
													}
													input.Room_Type = null;
												}
											}
										}
										else
										{
											clear Room_Type;
											input.Room_Type = null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always68 as "Run Scripts On Always"
			{
				type =  form
				form = Reservation
				record event = on add or edit

	on user input of Room_Type
	{
					actions 
					{
						custom deluge script
						(
											if(Room_Type != null)
										{
											room_map = thisapp.room.find_available_rooms(input.Check_In,input.Check_Out,"Reservation");
											rooms = Add_Room[ID in room_map.get("Rooms") && Room_Type == input.Room_Type].ID.getAll();
											input.Choose_Rooms:ui.add(rooms);
										}
										else
										{
											clear Choose_Rooms;
											input.Stay_Details = "";
											input.Select_Rate = null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always69 as "Run Scripts On Always"
			{
				type =  form
				form = Reservation
				record event = on add or edit

	on user input of Advance_Amount
	{
					actions 
					{
						custom deluge script
						(
											if(Advance_Amount != null)
										{
											if(Advance_Amount < 0)
											{
												alert "Enter a valid amount for advance";
												input.Advance_Amount = 0.0;
											}
											else if(Advance_Amount > Total_Amount)
											{
												alert "Advance amount should be less than the total amount";
												input.Advance_Amount = 0.0;
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always70 as "Run Scripts On Always"
			{
				type =  form
				form = Reservation
				record event = on add or edit

	on user input of Number_Of_Child
	{
					actions 
					{
						custom deluge script
						(
											if(Number_Of_Child != null)
										{
											if(Number_Of_Child < 0)
											{
												alert "Enter a valid number for child";
												input.Number_Of_Child = 0;
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always71 as "Run Scripts On Always"
			{
				type =  form
				form = Reservation
				record event = on add or edit

	on user input of Number_Of_Adults
	{
					actions 
					{
						custom deluge script
						(
											if(Number_Of_Adults != null)
										{
											if(Number_Of_Adults < 1)
											{
												alert "Enter a valid number of adults";
												input.Number_Of_Adults = 1;
											}
										}
										else
										{
											input.Number_Of_Adults = 1;
										}
										if(Room_Type != null && Select_Rate != null)
										{
											room_count = input.Choose_Rooms.size();
											total_nights = days360(input.Check_In,input.Check_Out);
											if(total_nights == 0)
											{
												total_nights = 1;
											}
											value_map = thisapp.reservation.rate_calculation(room_count,total_nights,input.Select_Rate,input.Room_Type,input.Number_Of_Adults);
											input.Room_Tariff = value_map.get("tariff");
											input.Tax_Amount = value_map.get("tax");
											input.Rate_Details = value_map.get("details");
											input.Total_Amount = input.Room_Tariff + input.Tax_Amount;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_50 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Reservation
				record event = on add

	field rules
	{
					actions 
					{
						hide Status,Cancellation_Charge,Reason;
					}
	}

			}
			Run_Scripts_While_Adding_51 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Reservation
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											clear Select_Rate;
										clear Room_Type;
										clear Choose_Rooms;
										if(input.Check_In != null && input.Check_Out != null)
										{
											room_map = thisapp.room.find_available_rooms(input.Check_In,input.Check_Out,"Reservation");
											input.Room_Type:ui.add(room_map.get("Types"));
										}
										hotel_detail_count = About_Hotel[ID != 0].count(ID);
										if(hotel_detail_count == 0)
										{
											openUrl("#Form:About_Hotel","popup window");
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_52 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Reservation
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(input.Check_In < zoho.currentdate || Check_Out < Check_In)
										{
											alert "Enter valid dates to make a reservation";
											cancel submit;
										}
										hotel_detail_count = About_Hotel[ID != 0].count(ID);
										if(hotel_detail_count == 0)
										{
											alert "You have to add your hotel details before adding reservation";
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_53 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Reservation
				record event = on add

	on success
	{
					actions  (Confirm_Reservation == false)
					{
						custom deluge script
						(
											if(Guest != null)
										{
											name = input.Guest.Name;
											email = input.Guest.Email;
										}
										else if(Corporate != null)
										{
											name = input.Corporate.Corporate_Name;
											email = input.Corporate.Email;
										}
										hotel_details = About_Hotel[ID != 0];
										sendmail
										[
											from :zoho.adminuserid
											to :email
											subject :"New Reservation"
											message :("Hi " + name) + ",<br>Thank you for choosing hotel " + hotel_details.Hotel_Name + " Your reservation for " + input.Check_In + " to " + input.Check_Out + " has been waiting for confirmation. It will get confirm by our front office executive.<br>For enquiry please contact <br>Phone : " + hotel_details.Contact_Number + "<br>Email : " + hotel_details.Email + "<br>Regards by<br>" + hotel_details.Hotel_Name
										]
						)
					}
					actions  (Confirm_Reservation == true)
					{
						custom deluge script
						(
											if(Guest != null)
										{
											name = input.Guest.Name;
											email = input.Guest.Email;
										}
										else if(Corporate != null)
										{
											name = input.Corporate.Corporate_Name;
											email = input.Corporate.Email;
										}
										hotel_details = About_Hotel[ID != 0];
										regular_check_in_time = hotel_details.Check_In_Time;
										regular_check_in_time = regular_check_in_time + ":00";
										sendmail
										[
											from :zoho.adminuserid
											to :email
											subject :"Reservation Status"
											message :("Hi " + name) + ",<br>Thank you for choosing hotel " + hotel_details.Hotel_Name + " Your reservation for " + input.Check_In + " to " + input.Check_Out + " got confirmed. you can check in after" + regular_check_in_time + ".<br> your reservation id is mentioned below.<br>Res Id :" + input.Reservation_Id + "<br>For enquiry please contact <br>Phone : " + hotel_details.Contact_Number + "<br>Email : " + hotel_details.Email + "<br>Regards by<br>" + hotel_details.Hotel_Name
										]
										input.Status = "Reserved";
						)
					}
	}

			}
			Run_Scripts_While_Editing9 as "Run Scripts While Editing a Record"
			{
				type =  form
				form = Reservation
				record event = on edit

	field rules
	{
					actions  (Status == "Cancelled" || Status == "Converted Check in")
					{
						disable Advance_Amount,Choose_Rooms,Room_Type,Select_Rate;
					}
					actions  (Status == "Cancelled")
					{
						show Reason,Cancellation_Charge;
						disable Check_In,Check_Out,Confirm_Reservation;
					}
	}

			}
			Run_Scripts_While_Editing10 as "Run Scripts While Editing a Record"
			{
				type =  form
				form = Reservation
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Check_In != null && Check_Out != null && Status != "Cancelled")
										{
											room_map = thisapp.room.find_available_rooms(input.Check_In,input.Check_Out,"Reservation");
											room_types = room_map.get("Types").toList();
											input.Room_Type:ui.add(room_types);
										}
										disable Status;
						)
					}
	}

			}
			Run_Scripts_While_Editing11 as "Run Scripts While Editing a Record"
			{
				type =  form
				form = Reservation
				record event = on edit

	on validate
	{
					actions  (Confirm_Reservation == true)
					{
						custom deluge script
						(
											if(old.Confirm_Reservation != true)
										{
											if(Guest != null)
											{
												name = input.Guest.Name;
												email = input.Guest.Email;
											}
											else if(Corporate != null)
											{
												name = input.Corporate.Corporate_Name;
												email = input.Corporate.Email;
											}
											hotel_details = About_Hotel[ID != 0];
											regular_check_in_time = hotel_details.Check_In_Time;
											regular_check_in_time = regular_check_in_time + ":00";
											sendmail
											[
												from :zoho.adminuserid
												to :email
												subject :"Reservation Status"
												message :("Hi " + name) + ",<br>Thank you for choosing hotel " + hotel_details.Hotel_Name + " Your reservation for " + input.Check_In + " to " + input.Check_Out + " got confirmed. you can check in after" + regular_check_in_time + ".<br> your reservation id is mentioned below.<br>Res Id :" + input.Reservation_Id + "<br>For enquiry please contact <br>Phone : " + hotel_details.Contact_Number + "<br>Email : " + hotel_details.Email + "<br>Regards by<br>" + hotel_details.Hotel_Name
											]
											input.Status = "Reserved";
										}
						)
					}
					actions  (Status == "Cancelled")
					{
						custom deluge script
						(
											if(Reason == "")
										{
											alert "Enter a reason for cancellation";
											cancel submit;
										}
										else
										{
											if(Guest != null)
											{
												name = input.Guest.Name;
												email = input.Guest.Email;
											}
											else if(Corporate != null)
											{
												name = input.Corporate.Corporate_Name;
												email = input.Corporate.Email;
											}
											hotel_details = About_Hotel[ID != 0];
											sendmail
											[
												from :zoho.adminuserid
												to :email
												subject :"New Reservation"
												message :("Hi " + name) + ",<br>Thank you for choosing hotel " + hotel_details.Hotel_Name + " Your reservation for " + input.Check_In + " to " + input.Check_Out + " has been cancelled.<br>Reason : " + input.Reason + " <br>For enquiry please contact <br>Phone : " + hotel_details.Contact_Number + "<br>Email : " + hotel_details.Email + "<br>Regards by<br>" + hotel_details.Hotel_Name
											]
										}
						)
					}
	}

			}
			Run_Scripts_While_Editing12 as "Run Scripts While Editing a Record"
			{
				type =  form
				form = Reservation
				record event = on edit

	on user input of Cancellation_Charge
	{
					actions  (Status == "Cancelled")
					{
						custom deluge script
						(
											if(Cancellation_Charge != null)
										{
											if(Cancellation_Charge < 0)
											{
												alert "Enter a valid amount for cancellation charge";
												input.Cancellation_Charge = 0;
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always72 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Payment
				record event = on add or edit

	field rules
	{
					actions 
					{
						disable Total_Amount,Pre_Paid_Amount,Remaining_Balance,Check_In_Id,Incharge,Rooms,Amenity_Charge,Advance_Amount,Restaurant_Charge,Service_Charge,Room_Tariff,Refund_Amount;
					}
	}

			}
			Run_Scripts_While_Adding_54 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Payment
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Check_In_Id != null)
										{
											if(Rooms == {})
											{
												paying_rooms = Check_In_Details_Form[Check_In_Id == input.Check_In_Id && Payment_Mode == "Group Payment"];
												input.Rooms = paying_rooms.Room_Number.getall();
											}
											if(input.Check_In_Id.Guest != null)
											{
												show Room_Tariff;
												input.Room_Tariff = Check_In_Details_Form[Check_In_Id == input.Check_In_Id && Room_Number in input.Rooms].sum(Total_Amount);
											}
											else
											{
												hide Room_Tariff;
											}
											restaurant_bills = New_Order[Check_In_Row_Id.Check_In_Id == input.Check_In_Id && Select_Room in input.Rooms && Compliment_Food == false];
											services = Generate_Service_Bill[Check_In_Row_Id.Check_In_Id == input.Check_In_Id && Room in input.Rooms && Payment_Status != "Fully Paid"];
											amenities = Add_Amenities_Bill[Check_In_Row_Id.Check_In_Id == input.Check_In_Id && Room in input.Rooms && Payment_Status != "Fully Paid"];
											input.Restaurant_Charge = restaurant_bills.sum(Net_Total);
											input.Service_Charge = services.sum(Total);
											input.Amenity_Charge = amenities.sum(Total_Charge);
											input.Pre_Paid_Amount = services.sum(Pre_Paid_Amount) + amenities.sum(Pre_Paid_Amount);
											input.Total_Amount = input.Room_Tariff + services.sum(Total) + amenities.sum(Total_Charge) + restaurant_bills.sum(Net_Total);
											if(input.Check_In_Id.Advance_Amount != null && input.Check_In_Id.Guest_Type != "Corporate")
											{
												check_in_count = Check_In_Details_Form[Check_In_Id == input.Check_In_Id].count(ID);
												if(input.Check_In_Id.Advance_Amount != 0 && check_in_count == 0)
												{
													input.Take_Advance_Amount = true;
													disable Take_Advance_Amount;
													input.Advance_Amount = input.Check_In_Id.Advance_Amount;
												}
											}
											else
											{
												hide Take_Advance_Amount;
												hide Advance_Amount;
											}
											total_paid_amount = input.Pre_Paid_Amount + input.Advance_Amount;
											input.Remaining_Balance = input.Total_Amount - total_paid_amount;
											if(input.Total_Amount < total_paid_amount)
											{
												input.Refund_Amount = total_paid_amount - input.Total_Amount;
												input.Remaining_Balance = 0;
											}
											rooms = List();
											invoices = List();
											for each  room in input.Rooms
											{
												room_number = Add_Room[ID == room].Room_Number;
												rooms.add(room_number);
												invoice = Check_In_Details_Form[Check_In_Id == input.Check_In_Id && Room_Number == room].Invoice_No;
												invoices.add(invoice);
											}
											main_invoice_url = "https://app.zohocreator.com" + zoho.appuri + "#Report:On_Payment_Invoices?Invoice_No=" + invoices;
											input.plain = "<a href=" + main_invoice_url + " target='_blank'>Collect Main Invoices</a><br>";
											if(input.Restaurant_Charge != 0)
											{
												url = "https://app.zohocreator.com" + zoho.appuri + "#Report:Guest_Orders?Select_Room=" + rooms;
												input.plain = input.plain + "<a href=" + url + " target='_blank'>Collect Restaurant Bills</a>";
											}
										}
										input.Incharge = Add_Staff[Email == zoho.loginuserid].ID;
						)
					}
	}

			}
			Run_Scripts_While_Adding_55 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Payment
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(Payment_Done == false)
										{
											alert "Click payment done to complete this payment";
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_56 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Payment
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											if(input.Payment_Done == true)
										{
											for each  room_number in input.Rooms
											{
												check_in_rec = Check_In_Details_Form[Check_In_Id == input.Check_In_Id && Room_Number == room_number];
												if(input.Room_Tariff != 0)
												{
													check_in_rec.Payment_Status="Fully Paid";
												}
												else
												{
													check_in_rec.Payment_Status="Partly Paid";
												}
											}
											for each  service_bill in Generate_Service_Bill[Check_In_Row_Id == input.Check_In_Id]
											{
												service_bill.Payment_Status="Fully Paid";
											}
											for each  amenity_bill in Add_Amenities_Bill[Check_In_Row_Id == input.Check_In_Id]
											{
												amenity_bill.Payment_Status="Fully Paid";
											}
											for each  order in New_Order[Check_In_Row_Id == input.Check_In_Id]
											{
												order.Payment_Status="Paid";
											}
											for each  room in input.Rooms
											{
												room_id = Add_Room[ID == room].ID;
												thisapp.check_in.check_out_process(input.Check_In_Id,room_id);
											}
											main_rec = Add_Check_In[ID == input.Check_In_Id];
											main_rec.Refund_Amount=input.Refund_Amount;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_57 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Raise_New_Complaint
				record event = on add

	field rules
	{
					actions 
					{
						hide Status,Closing_Notes;
						disable Received_by;
					}
	}

			}
			Run_Scripts_While_Adding_58 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Raise_New_Complaint
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											input.Received_by = Add_Staff[Email == zoho.loginuserid].ID;
						)
					}
	}

			}
			Run_Scripts_While_Editing13 as "Run Scripts While Editing a Record"
			{
				type =  form
				form = Raise_New_Complaint
				record event = on edit

	field rules
	{
					actions  (Status == "Closed")
					{
						disable Received_by,Type;
					}
	}

			}
			Run_Scripts_While_Editing14 as "Run Scripts While Editing a Record"
			{
				type =  form
				form = Raise_New_Complaint
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											disable Status;
										if(Status == "Closed")
										{
											disable Description;
											disable Room;
										}
										if(Status == "Pending")
										{
											disable Room;
											disable Description;
											hide Closing_Notes;
										}
						)
					}
	}

			}
			Run_Scripts_While_Editing15 as "Run Scripts While Editing a Record"
			{
				type =  form
				form = Raise_New_Complaint
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(Closing_Notes == "")
										{
											alert "Please provide some notes to close this request";
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always73 as "Run Scripts On Always"
			{
				type =  form
				form = Maintenance_Block
				record event = on add or edit

	field rules
	{
					actions  (Complaint_Id is not null)
					{
						show Complaint_Id;
						disable Complaint_Id;
					}
	}

			}
			Run_Scripts_On_Always74 as "Run Scripts On Always"
			{
				type =  form
				form = Maintenance_Block
				record event = on add or edit

	on user input of Room
	{
					actions 
					{
						custom deluge script
						(
											if(Room != null)
										{
											str = "Upcoming reservations<br>";
											upcoming_reservations = Reservation[Status == "Reserved" && Choose_Rooms == input.Room];
											if(upcoming_reservations.count() != 0)
											{
												for each  reservation in upcoming_reservations
												{
													str = str + reservation.Check_In + " -- " + reservation.Check_Out + "<br>";
												}
												input.plain = str;
											}
											else
											{
												input.plain = "";
											}
										}
										else
										{
											input.plain = "";
										}
						)
					}
	}

			}
			Run_Scripts_On_Always75 as "Run Scripts On Always"
			{
				type =  form
				form = Add_Corporate_Payment
				record event = on add or edit

	field rules
	{
					actions 
					{
						disable Payment_On,Amenity_Charge,Prepaid_Amount,Restaurant_Charge,Room_Tariff,Incharge,Service_Charge,Total_Amount,Remaining_Balance;
					}
	}

			}
			Run_Scripts_While_Adding_59 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Corporate_Payment
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											input.Payment_On = zoho.currentdate;
										input.Incharge = Add_Staff[Email == zoho.loginuserid].ID;
										clear Check_Ins_To_Be_Covered;
										clear Select_Corporate;
										pending_payments = Add_Check_In[Payment_Status == "Pending" && Guest_Type == "Corporate" && Status == "Checked Out"];
										if(pending_payments.count() > 0)
										{
											corporates = pending_payments.Corporate.getall();
											input.Select_Corporate:ui.add(corporates.distinct());
										}
										else
										{
											alert "There were no pending payments";
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_60 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Corporate_Payment
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											for each  check_in in input.Check_Ins_To_Be_Covered
										{
											main_rec = Add_Check_In[ID == check_in];
											main_rec.Payment_Status="Done";
											for each  check_in_row in Check_In_Details_Form[Check_In_Id == check_in]
											{
												check_in_row.Payment_Status="Fully Paid";
												for each  order in New_Order[Check_In_Row_Id == check_in_row && Payment_Status == "Un Paid"]
												{
													order.Payment_Status="Paid";
												}
												for each  service_bill in Generate_Service_Bill[Check_In_Row_Id == check_in_row && Payment_Status != "Fully Paid"]
												{
													service_bill.Payment_Status="Fully Paid";
												}
												for each  amenity_charge in Add_Amenities_Bill[Check_In_Row_Id == check_in_row && Payment_Status != "Fully Paid"]
												{
													amenity_charge.Payment_Status="Fully Paid";
												}
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_61 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Corporate_Payment
				record event = on add

	on user input of Check_Ins_To_Be_Covered
	{
					actions 
					{
						custom deluge script
						(
											if(Check_Ins_To_Be_Covered != {})
										{
											all_invoices = Check_In_Details_Form[Check_In_Id in input.Check_Ins_To_Be_Covered].ID.getAll();
											service_bills = Generate_Service_Bill[Check_In_Row_Id in all_invoices && Payment_Status != "Fully Paid"];
											amenity_charges = Add_Amenities_Bill[Check_In_Row_Id in all_invoices && Payment_Status != "Fully Paid"];
											check_in_recs = Add_Check_In[ID in input.Check_Ins_To_Be_Covered];
											input.Room_Tariff = check_in_recs.sum(Total_Amount);
											input.Restaurant_Charge = New_Order[Check_In_Row_Id in all_invoices && Payment_Status == "Un Paid"].sum(Net_Total);
											input.Service_Charge = service_bills.sum(Total);
											input.Amenity_Charge = amenity_charges.sum(Total_Charge);
											input.Prepaid_Amount = ifnull(check_in_recs.Advance_Amount,0) + ifnull(service_bills.sum(Pre_Paid_Amount),0) + ifnull(amenity_charges.sum(Pre_Paid_Amount),0);
											input.Total_Amount = input.Room_Tariff + input.Service_Charge + input.Restaurant_Charge + input.Amenity_Charge;
											input.Remaining_Balance = input.Total_Amount - input.Prepaid_Amount;
										}
										else
										{
											input.Room_Tariff = 0;
											input.Restaurant_Charge = 0;
											input.Service_Charge = 0;
											input.Amenity_Charge = 0;
											input.Remaining_Balance = 0;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_62 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Corporate_Payment
				record event = on add

	on user input of Select_Corporate
	{
					actions 
					{
						custom deluge script
						(
											if(Select_Corporate != null)
										{
											pending_payments = Add_Check_In[Payment_Status == "Pending" && Corporate == input.Select_Corporate && Status == "Checked Out"].ID.getAll();
											input.Check_Ins_To_Be_Covered:ui.add(pending_payments);
										}
										else
										{
											clear Check_Ins_To_Be_Covered;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_63 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Public_Reservation
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											input.Check_In = zoho.currentdate;
										input.Check_Out = input.Check_In.addDay(1);
						)
					}
	}

			}
			Run_Scripts_While_Adding_64 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Public_Reservation
				record event = on add

	on user input of Number_Of_Child
	{
					actions 
					{
						custom deluge script
						(
											if(Number_Of_Child != null)
										{
											if(Number_Of_Child < 0)
											{
												alert "Enter a valid count for child";
												input.Number_Of_Child = 0;
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_65 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Public_Reservation
				record event = on add

	on user input of Number_Of_Rooms
	{
					actions 
					{
						custom deluge script
						(
											if(Number_Of_Rooms != null)
										{
											if(Number_Of_Rooms < 1)
											{
												alert "Enter a valid count for rooms";
												input.Number_Of_Rooms = 1;
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_66 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Public_Reservation
				record event = on add

	on user input of Number_Of_Adults
	{
					actions 
					{
						custom deluge script
						(
											if(Number_Of_Adults != null)
										{
											if(Number_Of_Adults < 1)
											{
												alert "Enter a valid count for adults";
												input.Number_Of_Adults = 1;
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_67 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Public_Reservation
				record event = on add

	on user input of Check_In
	{
					actions 
					{
						custom deluge script
						(
											if(Check_In < zoho.currentdate)
										{
											alert "You cannot make reservation for past days";
											input.Check_In = null;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_68 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Public_Reservation
				record event = on add

	on user input of Check_Out
	{
					actions 
					{
						custom deluge script
						(
											if(Check_Out != null)
										{
											if(Check_Out < Check_In)
											{
												alert "Check out date must be greater than check in date";
												input.Check_Out = null;
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_69 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Shift_a_Room
				record event = on add

	field rules
	{
					actions  (Current_Room is not null)
					{
						show Check_In,Check_In_Id,Check_Out,Guest,Number_Of_Adults,Number_Of_Child;
					}
					actions 
					{
						disable Check_In,Check_Out,Guest,Number_Of_Adults,Number_Of_Child,Check_In_Id;
					}
	}

			}
			Run_Scripts_While_Adding_70 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Shift_a_Room
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											clear Move_To;
										clear Apply_Rate;
						)
					}
	}

			}
			Run_Scripts_While_Adding_71 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Shift_a_Room
				record event = on add

	on user input of Move_To
	{
					actions 
					{
						custom deluge script
						(
											if(Move_To != null)
										{
											available_rates = Add_Rooms_And_Rates[Room_Type == input.Move_To.Room_Type].Rate_Type.getAll();
											input.Apply_Rate:ui.add(available_rates);
										}
										else
										{
											clear Apply_Rate;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_72 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Shift_a_Room
				record event = on add

	on user input of Current_Room
	{
					actions 
					{
						custom deluge script
						(
											if(Current_Room != null)
										{
											input.Check_In_Id = Check_In_Details_Form[Room_Number == input.Current_Room && Status == "Checked In"].Check_In_Id;
											input.Check_In = input.Check_In_Id.Check_In;
											input.Check_Out = input.Check_In_Id.Check_Out;
											room_row = Check_In_Details_Form[Check_In_Id == input.Check_In_Id && Room_Number == input.Current_Room];
											input.Guest = room_row.Guest;
											input.Number_Of_Adults = room_row.Number_Of_Adult;
											if(room_row.Number_Of_Child != null)
											{
												input.Number_Of_Child = room_row.Number_Of_Child;
											}
											room_map = thisapp.room.find_available_rooms(zoho.currentdate,input.Check_Out,"Check In");
											if(room_map.get("Availability") != 0)
											{
												input.Move_To:ui.add(room_map.get("Rooms"));
											}
											else
											{
												alert "No rooms available for these dates";
											}
										}
										else
										{
											input.Check_In_Id = null;
											input.Check_Out = null;
											input.Check_In = null;
											input.Number_Of_Child = 0;
											input.Number_Of_Adults = null;
											input.Guest = null;
											clear Move_To;
											clear Apply_Rate;
										}
						)
					}
	}

			}
			Run_Scripts_While_Editing16 as "Run Scripts While Editing a Record"
			{
				type =  form
				form = Add_Check_In
				record event = on edit

	field rules
	{
					actions  (Status == "Checked Out")
					{
						disable Advance_Amount,Payment_Status;
					hide add row of Room_Details;
					hide delete row of Room_Details;
					}
	}

			}
			Run_Scripts_While_Editing17 as "Run Scripts While Editing a Record"
			{
				type =  form
				form = Add_Check_In
				record event = on edit

	on load
	{
					actions  (Status == "Checked Out")
					{
						custom deluge script
						(
											disable Room_Details.Room_Number;
										disable Room_Details.Room_Type;
										disable Room_Details.Rate;
										hide Room_Details.Payment_Mode;
						)
					}
	}

			}
			Run_Scripts_While_Editing18 as "Run Scripts While Editing a Record"
			{
				type =  form
				form = Add_Check_In
				record event = on edit

	on success
	{
					actions  (Status == "Checked In")
					{
						custom deluge script
						(
											for each  rec in Check_In_Details_Form[Check_In_Id == null]
										{
											room_rec = Add_Room[ID == rec.Room_Number && Room_Status == "Occupied"];
											room_rec.Room_Status="Dirty";
										}
										delete from Check_In_Details_Form[Check_In_Id == null];
						)
					}
	}

			}
			Run_Scripts_While_Deletin4 as "Run Scripts While Deleting a Record"
			{
				type =  form
				form = Add_Check_In
				record event = on delete

	on success
	{
					actions 
					{
						custom deluge script
						(
											for each  rec in Check_In_Details_Form[Check_In_Id == null]
										{
											room_rec = Add_Room[ID == rec.Room_Number];
											room_rec.Room_Status="Dirty";
										}
										delete from Check_In_Details_Form[Check_In_Id == null];
						)
					}
	}

			}
			Run_Scripts_While_Editing19 as "Run Scripts While Editing a Record"
			{
				type =  form
				form = Add_Amenities_Bill
				record event = on edit

	field rules
	{
					actions 
					{
						disable Payment_Status;
					}
	}

			}
			Run_Scripts_While_Adding_73 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Check_Out_Form
				record event = on add

	field rules
	{
					actions 
					{
						disable Check_In_Id,Check_Out_Time,Check_In_Time,Guest,Room_Number,Additional_Bill_Count;
					}
	}

			}
			Run_Scripts_While_Adding_74 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Check_Out_Form
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Room_Number != null && Check_In_Id != null)
										{
											check_in_details = Check_In_Details_Form[Check_In_Id = input.Check_In_Id && Room_Number == input.Room_Number];
											input.Guest = check_in_details.Guest;
											input.Check_Out_Time = zoho.currenttime;
											input.Check_In_Time = check_in_details.Check_In_Time;
											check_in_count = Check_In_Details_Form[Check_In_Id == input.Check_In_Id && Status == "Checked In"].count(ID);
											if(input.Check_In_Id.Guest_Type == "Corporate")
											{
												restaurant_orders = New_Order[Check_In_Row_Id == check_in_details.ID && Compliment_Food == false && Payment_Status != "Paid"].count();
												additional_amenities = Add_Amenities_Bill[Check_In_Row_Id == check_in_details.ID && Payment_Status != "Fully Paid"].count();
												service_bills = Generate_Service_Bill[Check_In_Row_Id == check_in_details.ID && Payment_Status != "Fully Paid"].count();
												additional_bill_count = restaurant_orders + service_bills + additional_amenities;
												input.Additional_Bill_Count = additional_bill_count;
												if(input.Check_In_Id.Corporate_Will_Pay_For == "All Charges")
												{
													input.Payment_Mode = "Group Payment";
													disable Payment_Mode;
													input.other_info = "Corporate will pay all amount for this check out";
												}
												else if(input.Check_In_Id.Corporate_Will_Pay_For == "Only Room Charge")
												{
													input.other_info = "Corporate will pay room charge for this check out";
													if(additional_bill_count == 0)
													{
														input.Payment_Mode = "Group Payment";
														disable Payment_Mode;
														input.other_info = input.other_info + "<br> This check out does not contain any additional bills to pay now";
													}
													else
													{
														if(check_in_count == 1)
														{
															input.Payment_Mode = "Group Payment";
															disable Payment_Mode;
														}
													}
												}
											}
											if(input.Check_In_Id.Guest_Type == "Individual")
											{
												if(check_in_count == 1)
												{
													input.Payment_Mode = "Group Payment";
													disable Payment_Mode;
												}
											}
											main_invoice_url = "https://app.zohocreator.com" + zoho.appuri + "#Report:On_Payment_Invoices?Invoice_No=" + check_in_details.Invoice_No;
											input.bills = "<a href=" + main_invoice_url + " target='_blank'>Collect Main Invoices</a><br>";
											if(restaurant_orders != 0)
											{
												url = "https://app.zohocreator.com" + zoho.appuri + "#Report:Guest_Orders?Select_Room=" + input.Room_Number.Room_Number;
												input.bills = input.bills + "<a href=" + url + " target='_blank'>Collect Restaurant Bills</a>";
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always76 as "Run Scripts On Always"
			{
				type =  form
				form = Check_In_Details_Form
				record event = on add or edit

	field rules
	{
					actions 
					{
						hide Invoice_No,Check_Out_Time,Payment_Mode;
					}
	}

			}
			Run_Scripts_On_Always77 as "Run Scripts On Always"
			{
				type =  form
				form = About_Hotel
				record event = on add or edit

	field rules
	{
					actions 
					{
						hide Schedule_Time;
					}
	}

			}
			Run_Scripts_On_Always78 as "Run Scripts On Always"
			{
				type =  form
				form = About_Hotel
				record event = on add or edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											input.plain = "<div> <b><font size='3' color='#ff0000'>Note :&nbsp;</font></b> </div> <div>  <br> </div> <div>  &nbsp; &nbsp; &nbsp;&nbsp;  <font size='3'>For Online Reservation, Publish <a href='" + zoho.appuri + "form-perma/Public_Reservation' target='_blank'>Public Reservation</a> Form.&nbsp;</font> </div> <div>  &nbsp; &nbsp; &nbsp;&nbsp;  <font size='3'>for Publishing please refer this <a target='_blank' href='https://www.zoho.com/creator/newhelp/app-settings/publish-forms.html'>link</a>.</font> </div> <div>  <br> </div>";
						)
					}
	}

			}
			Run_Scripts_On_Always79 as "Run Scripts On Always"
			{
				type =  form
				form = About_Hotel
				record event = on add or edit

	on user input of Check_In_Time
	{
					actions 
					{
						custom deluge script
						(
											if(Check_In_Time != null || Check_In_Time != "")
										{
											date_value = (zoho.currentdate + " " + input.Check_In_Time + ":00").toTime();
											if(date_value <= zoho.currenttime)
											{
												input.Schedule_Time = date_value.addDay(1);
											}
											else
											{
												input.Schedule_Time = date_value;
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Deletin5 as "Run Scripts While Deleting a Record"
			{
				type =  form
				form = About_Hotel
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											alert "You cannot delete this record, you can only edit";
										cancel delete;
						)
					}
	}

			}
			Run_Scripts_While_Adding_75 as "Run Scripts While Adding a Record"
			{
				type =  form
				form = Add_Room
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											room_count = Add_Room[Room_Number == input.Room_Number && Floor == input.Floor].count(ID);
										if(room_count == 1)
										{
											alert "This room already exists";
											cancel submit;
										}
						)
					}
	}

			}
		}
		schedule
		{
			Payment_Reminder as "Payment_Reminder"
			{
				type =  schedule
				form = Add_Corporate_Client
				start = Next_Reminder_On at "00:00:00"
				frequency = daily
				time zone = "Asia/Kolkata"
				on start
				{
					actions  (Select_Frequency is not null)
					{
					on load
					(
						if(Next_Reminder_On != null)
										{
											if(Next_Reminder_On == zoho.currentdate)
											{
												pending_payments = Add_Check_In[Corporate == input.ID && Payment_Status == "Pending"];
												if(pending_payments.count() != 0)
												{
													hotel_detail = About_Hotel[ID != 0];
													mail_content = "Hi " + input.Corporate_Name + ",<br>This is " + input.Select_Frequency + " reminder for payment";
													sendmail
													[
														from :zoho.adminuserid
														to :input.Email
														subject :hotel_detail.Hotel_Name + " - Payment Reminder"
														message :mail_content
														Attachments :view:Pending_Corporate_Invoices[Check_In_Id.Corporate == input.ID] as PDF
													]
												}
												if(Select_Frequency == "Daily")
												{
													input.Next_Reminder_On = zoho.currentdate.addDay(1);
												}
												else if(Select_Frequency == "Weekly")
												{
													input.Next_Reminder_On = zoho.currentdate.addWeek(1);
												}
												else if(Select_Frequency == "Monthly")
												{
													input.Next_Reminder_On = zoho.currentdate.addMonth(1);
												}
												else if(Select_Frequency == "Yearly")
												{
													input.Next_Reminder_On = zoho.currentdate.addYear(1);
												}
											}
										}
					)
					}
				}
			}
			Upcoming_Maintenance as "Upcoming_Maintenance"
			{
				type =  schedule
				form = Maintenance_Block
				start = Block_From at "00:00:00"
				time zone = "Asia/Kolkata"
				on start
				{
					actions  (Added_Time < zoho.currentdate && Block_From == zoho.currentdate)
					{
					on load
					(
						input.Status = "On Going";
										room_rec = Add_Room[ID == input.Room];
										room_rec.Room_Status="Maintenance Block";
					)
					}
				}
			}
			Daily_Stay_Length_Updatio as "Daily_Stay_Length_Updatio"
			{
				type =  schedule
				form = About_Hotel
				start = Schedule_Time
				frequency = daily
				time zone = "Asia/Kolkata"
				on start
				{
					actions 
					{
					on load
					(
						check_in_count = Add_Check_In[Status == "Checked In"].count();
										if(check_in_count != 0)
										{
											for each  rec in Check_In_Details_Form[Status == "Checked In" && Check_In_Time is not today]
											{
												main_rec = Add_Check_In[ID == rec.Check_In_Id];
												if(main_rec.Check_Out >= zoho.currentdate)
												{
													rec.Check_Out_Time=(zoho.currentdate + " " + input.Check_Out_Time + ":00").toTime();
													rec.Stay_Length=rec.Stay_Length + 1;
												}
											}
										}
					)
					}
				}
			}
		}
		functions
		{
			Close_Maintenance as "Close Maintenance"
			{
				type =  functions
				form = Maintenance_Block
				on start
				{
					actions 
					{
					maintenance.close(Maintenance_Block);
					}
				}
			}
			Accept as "Accept"
			{
				type =  functions
				form = Food_Order_Details
				on start
				{
					actions 
					{
					order.accept_item(ID);
					}
				}
			}
			Reject as "Reject"
			{
				type =  functions
				form = Food_Order_Details
				on start
				{
					actions 
					{
					order.reject_item(ID);
					}
				}
			}
			Ready_To_Serve as "Ready To Serve"
			{
				type =  functions
				form = Food_Order_Details
				on start
				{
					actions 
					{
					order.item_ready_to_serve(ID);
					}
				}
			}
			Item_Served as "Item Served"
			{
				type =  functions
				form = Food_Order_Details
				on start
				{
					actions 
					{
					order.item_served(ID);
					}
				}
			}
			Cancel as "Cancel"
			{
				type =  functions
				form = Food_Order_Details
				on start
				{
					actions 
					{
					order.cancel_item(ID);
					}
				}
			}
			Add_More_Item as "Add More Item"
			{
				type =  functions
				form = New_Order
				on start
				{
					actions 
					{
					order.add_more_item(ID);
					}
				}
			}
			Complete_Order as "Complete Order"
			{
				type =  functions
				form = New_Order
				on start
				{
					actions 
					{
					order.complete_order(ID);
					}
				}
			}
			Print as "Print"
			{
				type =  functions
				form = New_Order
				on start
				{
					actions 
					{
					order.print(ID);
					}
				}
			}
			Payment as "Payment"
			{
				type =  functions
				form = New_Order
				on start
				{
					actions 
					{
					order.payment(New_Order);
					}
				}
			}
			Check_In as "Check In"
			{
				type =  functions
				form = Reservation
				on start
				{
					actions 
					{
					reservation.check_in(ID);
					}
				}
			}
			Cancel2 as "Cancel"
			{
				type =  functions
				form = Reservation
				on start
				{
					actions 
					{
					on click
					(
						url = zoho.appuri + "#Form:Reservation?recLinkID=" + input.ID + "&Status=Cancelled&viewLinkName=Upcoming_Check_Ins&zc_NextUrl=#Report:Upcoming_Check_Ins";
										openUrl(url,"popup window");
					)
					}
				}
			}
			Schedule_Maintenance as "Schedule Maintenance"
			{
				type =  functions
				form = Raise_New_Complaint
				on start
				{
				}
			}
			Close1 as "Close"
			{
				type =  functions
				form = Raise_New_Complaint
				on start
				{
				}
			}
			Close_Request as "Close Request"
			{
				type =  functions
				form = Raise_New_Complaint
				on start
				{
					actions 
					{
					Complaint.Close(ID);
					}
				}
			}
			Confirm1 as "Confirm"
			{
				type =  functions
				form = Reservation
				on start
				{
					actions 
					{
					reservation.confirm(ID);
					}
				}
			}
			Cancel3 as "Cancel"
			{
				type =  functions
				form = Reservation
				on start
				{
					actions 
					{
					reservation.cancel(Reservation);
					}
				}
			}
			Check_Out2 as "Check Out"
			{
				type =  functions
				form = Check_In_Details_Form
				on start
				{
					actions 
					{
					on click
					(
						openUrl("#Form:Check_Out_Form?Check_In_Id=" + input.Check_In_Id + "&Room_Number=" + input.Room_Number,"same window");
					)
					}
				}
			}
			View_Bill as "View Bill"
			{
				type =  functions
				form = New_Order
				on start
				{
					actions 
					{
					on click
					(
						openUrl("#Page:Restaurant_Bill?Order_Id=" + input.ID,"new window");
					)
					}
				}
			}
			Invoice_1 as "Invoice_1"
			{
				type =  functions
				form = Check_In_Details_Form
				on start
				{
					actions 
					{
					check_in.show_invoice_1(Invoice_No);
					}
				}
			}
			Invoice_2 as "Invoice 2"
			{
				type =  functions
				form = Check_In_Details_Form
				on start
				{
					actions 
					{
					check_in.show_invoice_2(Invoice_No);
					}
				}
			}
			Print_Bill as "Print Bill"
			{
				type =  functions
				form = New_Order
				on start
				{
					actions 
					{
					order.print(ID);
					}
				}
			}
			Invoice_3 as "Invoice_1"
			{
				type =  functions
				form = Check_In_Details_Form
				on start
				{
					actions 
					{
					check_in.show_invoice_1(Invoice_No);
					}
				}
			}
			Invoice_4 as "Invoice_2"
			{
				type =  functions
				form = Check_In_Details_Form
				on start
				{
					actions 
					{
					check_in.show_invoice_2(Invoice_No);
					}
				}
			}
			Move_To_Clean as "Move_To_Clean"
			{
				type =  functions
				form = Add_Room
				on start
				{
					actions 
					{
					on click
					(
						room_rec = Add_Room[ID == input.ID];
										room_rec.Room_Status="Clean";
					)
					}
				}
			}
			Invoice_5 as "Invoice_1"
			{
				type =  functions
				form = Check_In_Details_Form
				on start
				{
					actions 
					{
					check_in.show_invoice_1(Invoice_No);
					}
				}
			}
			Invoice_6 as "Invoice_2"
			{
				type =  functions
				form = Check_In_Details_Form
				on start
				{
					actions 
					{
					check_in.show_invoice_2(Invoice_No);
					}
				}
			}
			Cancel1 as "Cancel"
			{
				type =  functions
				form = Reservation
				on start
				{
					actions 
					{
					reservation.cancel_from_timeline(Reservation);
					}
				}
			}
			Confirm as "Confirm"
			{
				type =  functions
				form = Reservation
				on start
				{
					actions 
					{
					reservation.confirm(ID);
					}
				}
			}
			Check_In1 as "Check In"
			{
				type =  functions
				form = Reservation
				on start
				{
					actions 
					{
					reservation.check_in(ID);
					}
				}
			}
			Cancel4 as "Cancel"
			{
				type =  functions
				form = Maintenance_Block
				on start
				{
					actions 
					{
					maintenance.cancel(Maintenance_Block);
					}
				}
			}
			Move_To_On_Going as "Move_To_On_Going"
			{
				type =  functions
				form = Maintenance_Block
				on start
				{
					actions 
					{
					maintenance.move_to_on_going(Maintenance_Block);
					}
				}
			}
			Cancel5 as "Cancel"
			{
				type =  functions
				form = Reservation
				on start
				{
					actions 
					{
					on click
					(
						url = zoho.appuri + "#Form:Reservation?recLinkID=" + input.ID + "&Status=Cancelled&viewLinkName=No_Shows&zc_NextUrl=#Report:No_Shows";
										openUrl(url,"popup window");
					)
					}
				}
			}
		}
	}
	share_settings
	{
			"Front Office Executive"
			{
				name = "Front Office Executive"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false}
				description = "Front Office Executive Profile\n"
				ModulePermissions
				{
					Add_Corporate_Payment
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Paid_Corporate_Payments={"View"}
						}
						FieldPermissions
						{
							Remaining_Balance{visibility:true,readonly:false}
							Incharge{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Service_Charge{visibility:true,readonly:false}
							Amenity_Charge{visibility:true,readonly:false}
							Payment_On{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Amount_Received{visibility:true,readonly:false}
							Restaurant_Charge{visibility:true,readonly:false}
							Select_Corporate{visibility:true,readonly:false}
							Check_Ins_To_Be_Covered{visibility:true,readonly:false}
							Prepaid_Amount{visibility:true,readonly:false}
						}
					}
					Add_Check_In
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Check_Ins={"View"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Advance_Amount{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Reservation_Id{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Room_Details{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Corporate_Will_Pay_For{visibility:true,readonly:false}
							Refund_Amount{visibility:true,readonly:false}
							Billing{visibility:true,readonly:false}
							Guest_Type{visibility:true,readonly:false}
						}
					}
					Food_Timings
					{
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Tax_Type
					{
						ReportPermissions
						{
							Taxes={"View"}
						}
						FieldPermissions
						{
							Services_And_Taxes{visibility:true,readonly:false}
							Tax_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Amenities_Bill
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Additional_Amenities_Bills1={"View"}
						}
						FieldPermissions
						{
							Date_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Select_Amenities{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Total_Charge{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
						}
					}
					Add_Room_Amenity
					{
						FieldPermissions
						{
							Amenity_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Check_In
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Check_In{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Available_Room_Count{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
						}
					}
					Add_Payment
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Other_Payments={"View"}
						}
						FieldPermissions
						{
							Payment_Id{visibility:true,readonly:false}
							Remaining_Balance{visibility:true,readonly:false}
							Advance_Amount{visibility:true,readonly:false}
							Incharge{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Service_Charge{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Amenity_Charge{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Payment_Done{visibility:true,readonly:false}
							Rooms{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Restaurant_Charge{visibility:true,readonly:false}
							Refund_Amount{visibility:true,readonly:false}
							Take_Advance_Amount{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
						}
					}
					Add_Maintenance_Type
					{
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Type{visibility:true,readonly:false}
						}
					}
					New_Order
					{
						ReportPermissions
						{
							Guest_Orders={"View"}
						}
						FieldPermissions
						{
							Order_Id{visibility:true,readonly:false}
							Orders{visibility:true,readonly:false}
							Order_Status{visibility:true,readonly:false}
							Room_Guest{visibility:true,readonly:false}
							Order_For{visibility:true,readonly:false}
							Sub_Total{visibility:true,readonly:false}
							Select_Timing{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Select_Room{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Date_Time{visibility:true,readonly:false}
							Net_Total{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Section1{visibility:true,readonly:false}
							Choose_Table{visibility:true,readonly:false}
							Compliment_Food{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Attendant{visibility:true,readonly:false}
						}
					}
					Generate_Service_Bill
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Service_Bills={"View"}
						}
						FieldPermissions
						{
							Date_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Usage_Details{visibility:true,readonly:false}
							Total{visibility:true,readonly:false}
							Charge{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
							Choose_Service{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
						}
					}
					Reservation
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Upcoming_Check_Ins={"View"}
							Timeline_View={"View"}
							All_Reservations={"View"}
							Awaiting_Confirmations={"View","Edit"}
							No_Shows={"View"}
						}
						FieldPermissions
						{
							Advance_Amount{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Number_Of_Rooms{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Reservation_Id{visibility:true,readonly:false}
							Reason{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Rate_Details{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Stay_Details{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Number_Of_Adults{visibility:true,readonly:false}
							Confirm_Reservation{visibility:true,readonly:false}
							Cancellation_Charge{visibility:true,readonly:false}
							Rate{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Choose_Rooms{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Select_Rate{visibility:true,readonly:false}
							Details{visibility:true,readonly:false}
							Guest_Type{visibility:true,readonly:false}
						}
					}
					Shift_a_Room
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Number_Of_Adults{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Apply_Rate{visibility:true,readonly:false}
							Current_Room{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Reason{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Move_To{visibility:true,readonly:false}
						}
					}
					Food_Order_Details
					{
						FieldPermissions
						{
							Order_Id{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Comments{visibility:true,readonly:false}
							Staff{visibility:true,readonly:false}
							Choose_Item{visibility:true,readonly:false}
							Quantity{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Notes{visibility:true,readonly:false}
							Unit_Price{visibility:true,readonly:false}
							Total_Price{visibility:true,readonly:false}
						}
					}
					Add_Reason
					{
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Item_Row_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Comments{visibility:true,readonly:false}
						}
					}
					Raise_New_Complaint
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Closed_Ones={"View"}
							New_Complaints={"View"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Type{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Closing_Notes{visibility:true,readonly:false}
							Complaint_Id{visibility:true,readonly:false}
							Received_by{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
						}
					}
					Add_Room
					{
						ReportPermissions
						{
							Dirty_Rooms={"View"}
							Rooms={"View"}
						}
						FieldPermissions
						{
							Floor{visibility:true,readonly:false}
							Dial_Number{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
							Room_Status{visibility:true,readonly:false}
						}
					}
					Maintenance_Block
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Upcoming={"View"}
							On_Going={"View"}
							Maintenance_History={"View"}
						}
						FieldPermissions
						{
							Block_From{visibility:true,readonly:false}
							Block_To{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Maintenance_Type{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Closing_Notes{visibility:true,readonly:false}
							Complaint_Id{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
						}
					}
					Public_Reservation
					{
						FieldPermissions
						{
							Number_Of_Adults{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							notes{visibility:true,readonly:false}
							Number_Of_Rooms{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							Contact{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
							Section1{visibility:true,readonly:false}
						}
					}
					About_Hotel
					{
						FieldPermissions
						{
							Default_Timings{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							Schedule_Time{visibility:true,readonly:false}
							Website{visibility:true,readonly:false}
							Hotel_Name{visibility:true,readonly:false}
							Logo{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
							Terms_And_Conditions_For_Invoice{visibility:true,readonly:false}
							Details{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Note{visibility:true,readonly:false}
							Contact_Number{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
						}
					}
					Add_Table
					{
						FieldPermissions
						{
							Number_Of_Seats{visibility:true,readonly:false}
							Table_Number{visibility:true,readonly:false}
							Table_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Service
					{
						ReportPermissions
						{
							Services={"View"}
						}
						FieldPermissions
						{
							Type{visibility:true,readonly:false}
							Service_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Food
					{
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Cost{visibility:true,readonly:false}
							Item_Name{visibility:true,readonly:false}
							Food_Availability{visibility:true,readonly:false}
						}
					}
					Add_Room_Type
					{
						ReportPermissions
						{
							Type_Of_Rooms={"View"}
						}
						FieldPermissions
						{
							Number_Of_Extra_Adults{visibility:true,readonly:false}
							Bed_Type{visibility:true,readonly:false}
							Number_Of_Adults{visibility:true,readonly:false}
							Type_Name{visibility:true,readonly:false}
							With_Ac{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Room_Amenities{visibility:true,readonly:false}
							Image{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Check_Out_Form
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							other_info{visibility:true,readonly:false}
							Payment_Mode{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
							Additional_Bill_Count{visibility:true,readonly:false}
							bills{visibility:true,readonly:false}
							confirmation{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
						}
					}
					Add_Corporate_Client
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Corporates={"View","Edit"}
						}
						FieldPermissions
						{
							Select_Frequency{visibility:true,readonly:false}
							Corporate_Name{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Payment_Options{visibility:true,readonly:false}
							Set_Payment_Frequency{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							Next_Reminder_On{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Staff
					{
						FieldPermissions
						{
							Role{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							ID_Proof{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Rate_Type
					{
						FieldPermissions
						{
							Rate_Type{visibility:true,readonly:false}
							Rooms_And_Rates{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Guest
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Other_Guests={"View","Edit"}
							Corporate_Guests={"View","Edit"}
						}
						FieldPermissions
						{
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							ID_Proof{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Employee_Id{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Photo{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Source{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Rooms_And_Rates
					{
						FieldPermissions
						{
							Room_Type{visibility:true,readonly:false}
							Rate_Per_Night{visibility:true,readonly:false}
							Rate_Type{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Charge_Per_Extra_Adult{visibility:true,readonly:false}
						}
					}
					Check_In_Details_Form
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Active_Check_Ins={"View"}
							On_Payment_Invoices={"View"}
							Check_In_History={"View"}
							Pending_Corporate_Invoices={"View"}
						}
						FieldPermissions
						{
							Stay_Length{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Number_Of_Adult{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Rate{visibility:true,readonly:false}
							Payment_Mode{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Amount{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Invoice_No{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
						}
					}
					Add_Service_And_Taxes
					{
						FieldPermissions
						{
							Tax_Type{visibility:true,readonly:false}
							Percent{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Choose_Service{visibility:true,readonly:false}
						}
					}
					Add_Reason1
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Reservation_Id{visibility:true,readonly:false}
							Details{visibility:true,readonly:false}
							Reason{visibility:true,readonly:false}
						}
					}
					Today_s_Page
					{
						enabled = tab
					}
					Monthly_View
					{
						enabled = tab
					}
					Invoice_1
					{
						enabled = tab
					}
					Invoice_2
					{
						enabled = tab
					}
					Restaurant_Bill
					{
						enabled = tab
					}
				}
			}
			"Administrator"
			{
				name = "Administrator"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true}
				description = "This profile will have all the permissions.\n"
			}
			"Restaurant Cashier"
			{
				name = "Restaurant Cashier"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false}
				description = "Cashier Profile\n"
				ModulePermissions
				{
					Add_Corporate_Payment
					{
						FieldPermissions
						{
							Remaining_Balance{visibility:true,readonly:false}
							Incharge{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Service_Charge{visibility:true,readonly:false}
							Amenity_Charge{visibility:true,readonly:false}
							Payment_On{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Amount_Received{visibility:true,readonly:false}
							Restaurant_Charge{visibility:true,readonly:false}
							Select_Corporate{visibility:true,readonly:false}
							Check_Ins_To_Be_Covered{visibility:true,readonly:false}
							Prepaid_Amount{visibility:true,readonly:false}
						}
					}
					Add_Check_In
					{
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Advance_Amount{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Reservation_Id{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Room_Details{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Corporate_Will_Pay_For{visibility:true,readonly:false}
							Refund_Amount{visibility:true,readonly:false}
							Billing{visibility:true,readonly:false}
							Guest_Type{visibility:true,readonly:false}
						}
					}
					Food_Timings
					{
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Tax_Type
					{
						FieldPermissions
						{
							Services_And_Taxes{visibility:true,readonly:false}
							Tax_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Amenities_Bill
					{
						FieldPermissions
						{
							Date_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Select_Amenities{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Total_Charge{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
						}
					}
					Add_Room_Amenity
					{
						FieldPermissions
						{
							Amenity_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Check_In
					{
						FieldPermissions
						{
							Check_In{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Available_Room_Count{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
						}
					}
					Add_Payment
					{
						FieldPermissions
						{
							Payment_Id{visibility:true,readonly:false}
							Remaining_Balance{visibility:true,readonly:false}
							Advance_Amount{visibility:true,readonly:false}
							Incharge{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Service_Charge{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Amenity_Charge{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Payment_Done{visibility:true,readonly:false}
							Rooms{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Restaurant_Charge{visibility:true,readonly:false}
							Refund_Amount{visibility:true,readonly:false}
							Take_Advance_Amount{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
						}
					}
					Add_Maintenance_Type
					{
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Type{visibility:true,readonly:false}
						}
					}
					New_Order
					{
						ReportPermissions
						{
							Order_History={"View"}
							Awaiting_Payments={"View"}
						}
						FieldPermissions
						{
							Order_Id{visibility:true,readonly:false}
							Orders{visibility:true,readonly:false}
							Order_Status{visibility:true,readonly:false}
							Room_Guest{visibility:true,readonly:false}
							Order_For{visibility:true,readonly:false}
							Sub_Total{visibility:true,readonly:false}
							Select_Timing{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Select_Room{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Date_Time{visibility:true,readonly:false}
							Net_Total{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Section1{visibility:true,readonly:false}
							Choose_Table{visibility:true,readonly:false}
							Compliment_Food{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Attendant{visibility:true,readonly:false}
						}
					}
					Generate_Service_Bill
					{
						FieldPermissions
						{
							Date_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Usage_Details{visibility:true,readonly:false}
							Total{visibility:true,readonly:false}
							Charge{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
							Choose_Service{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
						}
					}
					Reservation
					{
						FieldPermissions
						{
							Advance_Amount{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Number_Of_Rooms{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Reservation_Id{visibility:true,readonly:false}
							Reason{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Rate_Details{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Stay_Details{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Number_Of_Adults{visibility:true,readonly:false}
							Confirm_Reservation{visibility:true,readonly:false}
							Cancellation_Charge{visibility:true,readonly:false}
							Rate{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Choose_Rooms{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Select_Rate{visibility:true,readonly:false}
							Details{visibility:true,readonly:false}
							Guest_Type{visibility:true,readonly:false}
						}
					}
					Shift_a_Room
					{
						FieldPermissions
						{
							Number_Of_Adults{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Apply_Rate{visibility:true,readonly:false}
							Current_Room{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Reason{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Move_To{visibility:true,readonly:false}
						}
					}
					Food_Order_Details
					{
						FieldPermissions
						{
							Order_Id{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Comments{visibility:true,readonly:false}
							Staff{visibility:true,readonly:false}
							Choose_Item{visibility:true,readonly:false}
							Quantity{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Notes{visibility:true,readonly:false}
							Unit_Price{visibility:true,readonly:false}
							Total_Price{visibility:true,readonly:false}
						}
					}
					Add_Reason
					{
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Item_Row_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Comments{visibility:true,readonly:false}
						}
					}
					Raise_New_Complaint
					{
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Type{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Closing_Notes{visibility:true,readonly:false}
							Complaint_Id{visibility:true,readonly:false}
							Received_by{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
						}
					}
					Add_Room
					{
						FieldPermissions
						{
							Floor{visibility:true,readonly:false}
							Dial_Number{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
							Room_Status{visibility:true,readonly:false}
						}
					}
					Maintenance_Block
					{
						FieldPermissions
						{
							Block_From{visibility:true,readonly:false}
							Block_To{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Maintenance_Type{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Closing_Notes{visibility:true,readonly:false}
							Complaint_Id{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
						}
					}
					Public_Reservation
					{
						FieldPermissions
						{
							Number_Of_Adults{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							notes{visibility:true,readonly:false}
							Number_Of_Rooms{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							Contact{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
							Section1{visibility:true,readonly:false}
						}
					}
					About_Hotel
					{
						FieldPermissions
						{
							Default_Timings{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							Schedule_Time{visibility:true,readonly:false}
							Website{visibility:true,readonly:false}
							Hotel_Name{visibility:true,readonly:false}
							Logo{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
							Terms_And_Conditions_For_Invoice{visibility:true,readonly:false}
							Details{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Note{visibility:true,readonly:false}
							Contact_Number{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
						}
					}
					Add_Table
					{
						FieldPermissions
						{
							Number_Of_Seats{visibility:true,readonly:false}
							Table_Number{visibility:true,readonly:false}
							Table_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Service
					{
						FieldPermissions
						{
							Type{visibility:true,readonly:false}
							Service_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Food
					{
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Cost{visibility:true,readonly:false}
							Item_Name{visibility:true,readonly:false}
							Food_Availability{visibility:true,readonly:false}
						}
					}
					Add_Room_Type
					{
						FieldPermissions
						{
							Number_Of_Extra_Adults{visibility:true,readonly:false}
							Bed_Type{visibility:true,readonly:false}
							Number_Of_Adults{visibility:true,readonly:false}
							Type_Name{visibility:true,readonly:false}
							With_Ac{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Room_Amenities{visibility:true,readonly:false}
							Image{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Check_Out_Form
					{
						FieldPermissions
						{
							other_info{visibility:true,readonly:false}
							Payment_Mode{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
							Additional_Bill_Count{visibility:true,readonly:false}
							bills{visibility:true,readonly:false}
							confirmation{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
						}
					}
					Add_Corporate_Client
					{
						FieldPermissions
						{
							Select_Frequency{visibility:true,readonly:false}
							Corporate_Name{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Payment_Options{visibility:true,readonly:false}
							Set_Payment_Frequency{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							Next_Reminder_On{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Staff
					{
						FieldPermissions
						{
							Role{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							ID_Proof{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Rate_Type
					{
						FieldPermissions
						{
							Rate_Type{visibility:true,readonly:false}
							Rooms_And_Rates{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Guest
					{
						FieldPermissions
						{
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							ID_Proof{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Employee_Id{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Photo{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Source{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Rooms_And_Rates
					{
						FieldPermissions
						{
							Room_Type{visibility:true,readonly:false}
							Rate_Per_Night{visibility:true,readonly:false}
							Rate_Type{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Charge_Per_Extra_Adult{visibility:true,readonly:false}
						}
					}
					Check_In_Details_Form
					{
						FieldPermissions
						{
							Stay_Length{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Number_Of_Adult{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Rate{visibility:true,readonly:false}
							Payment_Mode{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Amount{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Invoice_No{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
						}
					}
					Add_Service_And_Taxes
					{
						FieldPermissions
						{
							Tax_Type{visibility:true,readonly:false}
							Percent{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Choose_Service{visibility:true,readonly:false}
						}
					}
					Add_Reason1
					{
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Reservation_Id{visibility:true,readonly:false}
							Details{visibility:true,readonly:false}
							Reason{visibility:true,readonly:false}
						}
					}
					Restaurant_Bill
					{
						enabled = tab
					}
				}
			}
			"Customer"
			{
				name = "Customer"
				type = Customer_Portal
				permissions = {Chat:false, Predefined:true}
				description = "This is the default profile having only add and view permission.\n"
			}
			"Housekeeping Executive"
			{
				name = "Housekeeping Executive"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false}
				description = "Housekeeping Executive Profile\n"
				ModulePermissions
				{
					Add_Corporate_Payment
					{
						FieldPermissions
						{
							Remaining_Balance{visibility:true,readonly:false}
							Incharge{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Service_Charge{visibility:true,readonly:false}
							Amenity_Charge{visibility:true,readonly:false}
							Payment_On{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Amount_Received{visibility:true,readonly:false}
							Restaurant_Charge{visibility:true,readonly:false}
							Select_Corporate{visibility:true,readonly:false}
							Check_Ins_To_Be_Covered{visibility:true,readonly:false}
							Prepaid_Amount{visibility:true,readonly:false}
						}
					}
					Add_Check_In
					{
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Advance_Amount{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Reservation_Id{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Room_Details{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Corporate_Will_Pay_For{visibility:true,readonly:false}
							Refund_Amount{visibility:true,readonly:false}
							Billing{visibility:true,readonly:false}
							Guest_Type{visibility:true,readonly:false}
						}
					}
					Food_Timings
					{
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Tax_Type
					{
						FieldPermissions
						{
							Services_And_Taxes{visibility:true,readonly:false}
							Tax_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Amenities_Bill
					{
						FieldPermissions
						{
							Date_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Select_Amenities{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Total_Charge{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
						}
					}
					Add_Room_Amenity
					{
						FieldPermissions
						{
							Amenity_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Check_In
					{
						FieldPermissions
						{
							Check_In{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Available_Room_Count{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
						}
					}
					Add_Payment
					{
						FieldPermissions
						{
							Payment_Id{visibility:true,readonly:false}
							Remaining_Balance{visibility:true,readonly:false}
							Advance_Amount{visibility:true,readonly:false}
							Incharge{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Service_Charge{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Amenity_Charge{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Payment_Done{visibility:true,readonly:false}
							Rooms{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Restaurant_Charge{visibility:true,readonly:false}
							Refund_Amount{visibility:true,readonly:false}
							Take_Advance_Amount{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
						}
					}
					Add_Maintenance_Type
					{
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Type{visibility:true,readonly:false}
						}
					}
					New_Order
					{
						FieldPermissions
						{
							Order_Id{visibility:true,readonly:false}
							Orders{visibility:true,readonly:false}
							Order_Status{visibility:true,readonly:false}
							Room_Guest{visibility:true,readonly:false}
							Order_For{visibility:true,readonly:false}
							Sub_Total{visibility:true,readonly:false}
							Select_Timing{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Select_Room{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Date_Time{visibility:true,readonly:false}
							Net_Total{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Section1{visibility:true,readonly:false}
							Choose_Table{visibility:true,readonly:false}
							Compliment_Food{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Attendant{visibility:true,readonly:false}
						}
					}
					Generate_Service_Bill
					{
						FieldPermissions
						{
							Date_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Usage_Details{visibility:true,readonly:false}
							Total{visibility:true,readonly:false}
							Charge{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
							Choose_Service{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
						}
					}
					Reservation
					{
						FieldPermissions
						{
							Advance_Amount{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Number_Of_Rooms{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Reservation_Id{visibility:true,readonly:false}
							Reason{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Rate_Details{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Stay_Details{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Number_Of_Adults{visibility:true,readonly:false}
							Confirm_Reservation{visibility:true,readonly:false}
							Cancellation_Charge{visibility:true,readonly:false}
							Rate{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Choose_Rooms{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Select_Rate{visibility:true,readonly:false}
							Details{visibility:true,readonly:false}
							Guest_Type{visibility:true,readonly:false}
						}
					}
					Shift_a_Room
					{
						FieldPermissions
						{
							Number_Of_Adults{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Apply_Rate{visibility:true,readonly:false}
							Current_Room{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Reason{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Move_To{visibility:true,readonly:false}
						}
					}
					Food_Order_Details
					{
						FieldPermissions
						{
							Order_Id{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Comments{visibility:true,readonly:false}
							Staff{visibility:true,readonly:false}
							Choose_Item{visibility:true,readonly:false}
							Quantity{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Notes{visibility:true,readonly:false}
							Unit_Price{visibility:true,readonly:false}
							Total_Price{visibility:true,readonly:false}
						}
					}
					Add_Reason
					{
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Item_Row_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Comments{visibility:true,readonly:false}
						}
					}
					Raise_New_Complaint
					{
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Type{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Closing_Notes{visibility:true,readonly:false}
							Complaint_Id{visibility:true,readonly:false}
							Received_by{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
						}
					}
					Add_Room
					{
						ReportPermissions
						{
							Dirty_Rooms={"View"}
							Rooms={"View"}
						}
						FieldPermissions
						{
							Floor{visibility:true,readonly:false}
							Dial_Number{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
							Room_Status{visibility:true,readonly:false}
						}
					}
					Maintenance_Block
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Upcoming={"View"}
							On_Going={"View"}
							Maintenance_History={"View"}
						}
						FieldPermissions
						{
							Block_From{visibility:true,readonly:false}
							Block_To{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Maintenance_Type{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Closing_Notes{visibility:true,readonly:false}
							Complaint_Id{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
						}
					}
					Public_Reservation
					{
						FieldPermissions
						{
							Number_Of_Adults{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							notes{visibility:true,readonly:false}
							Number_Of_Rooms{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							Contact{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
							Section1{visibility:true,readonly:false}
						}
					}
					About_Hotel
					{
						FieldPermissions
						{
							Default_Timings{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							Schedule_Time{visibility:true,readonly:false}
							Website{visibility:true,readonly:false}
							Hotel_Name{visibility:true,readonly:false}
							Logo{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
							Terms_And_Conditions_For_Invoice{visibility:true,readonly:false}
							Details{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Note{visibility:true,readonly:false}
							Contact_Number{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
						}
					}
					Add_Table
					{
						FieldPermissions
						{
							Number_Of_Seats{visibility:true,readonly:false}
							Table_Number{visibility:true,readonly:false}
							Table_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Service
					{
						FieldPermissions
						{
							Type{visibility:true,readonly:false}
							Service_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Food
					{
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Cost{visibility:true,readonly:false}
							Item_Name{visibility:true,readonly:false}
							Food_Availability{visibility:true,readonly:false}
						}
					}
					Add_Room_Type
					{
						FieldPermissions
						{
							Number_Of_Extra_Adults{visibility:true,readonly:false}
							Bed_Type{visibility:true,readonly:false}
							Number_Of_Adults{visibility:true,readonly:false}
							Type_Name{visibility:true,readonly:false}
							With_Ac{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Room_Amenities{visibility:true,readonly:false}
							Image{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Check_Out_Form
					{
						FieldPermissions
						{
							other_info{visibility:true,readonly:false}
							Payment_Mode{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
							Additional_Bill_Count{visibility:true,readonly:false}
							bills{visibility:true,readonly:false}
							confirmation{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
						}
					}
					Add_Corporate_Client
					{
						FieldPermissions
						{
							Select_Frequency{visibility:true,readonly:false}
							Corporate_Name{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Payment_Options{visibility:true,readonly:false}
							Set_Payment_Frequency{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							Next_Reminder_On{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Staff
					{
						FieldPermissions
						{
							Role{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							ID_Proof{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Rate_Type
					{
						FieldPermissions
						{
							Rate_Type{visibility:true,readonly:false}
							Rooms_And_Rates{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Guest
					{
						FieldPermissions
						{
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							ID_Proof{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Employee_Id{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Photo{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Source{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Rooms_And_Rates
					{
						FieldPermissions
						{
							Room_Type{visibility:true,readonly:false}
							Rate_Per_Night{visibility:true,readonly:false}
							Rate_Type{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Charge_Per_Extra_Adult{visibility:true,readonly:false}
						}
					}
					Check_In_Details_Form
					{
						FieldPermissions
						{
							Stay_Length{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Number_Of_Adult{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Rate{visibility:true,readonly:false}
							Payment_Mode{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Amount{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Invoice_No{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
						}
					}
					Add_Service_And_Taxes
					{
						FieldPermissions
						{
							Tax_Type{visibility:true,readonly:false}
							Percent{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Choose_Service{visibility:true,readonly:false}
						}
					}
					Add_Reason1
					{
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Reservation_Id{visibility:true,readonly:false}
							Details{visibility:true,readonly:false}
							Reason{visibility:true,readonly:false}
						}
					}
				}
			}
			"Waiter"
			{
				name = "Waiter"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false}
				description = "Waiter Profile\n"
				ModulePermissions
				{
					Add_Corporate_Payment
					{
						FieldPermissions
						{
							Remaining_Balance{visibility:false,readonly:false}
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Incharge{visibility:false,readonly:false}
							Total_Amount{visibility:false,readonly:false}
							Service_Charge{visibility:false,readonly:false}
							Amenity_Charge{visibility:false,readonly:false}
							Payment_On{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Room_Tariff{visibility:false,readonly:false}
							Amount_Received{visibility:false,readonly:false}
							Restaurant_Charge{visibility:false,readonly:false}
							Select_Corporate{visibility:false,readonly:false}
							Check_Ins_To_Be_Covered{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Prepaid_Amount{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Add_Check_In
					{
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Advance_Amount{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Reservation_Id{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Room_Details{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Corporate_Will_Pay_For{visibility:true,readonly:false}
							Refund_Amount{visibility:true,readonly:false}
							Billing{visibility:true,readonly:false}
							Guest_Type{visibility:true,readonly:false}
						}
					}
					Food_Timings
					{
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Tax_Type
					{
						FieldPermissions
						{
							Services_And_Taxes{visibility:true,readonly:false}
							Tax_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Amenities_Bill
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Select_Amenities{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Date_Time{visibility:false,readonly:false}
							Payment_Status{visibility:false,readonly:false}
							Added_User{visibility:false}
							Check_In_Row_Id{visibility:false,readonly:false}
							Total_Charge{visibility:false,readonly:false}
							Pre_Paid_Amount{visibility:false,readonly:false}
							ID{visibility:false}
							Room{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Add_Room_Amenity
					{
						FieldPermissions
						{
							Amenity_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Check_In
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Check_In{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Check_Out{visibility:false,readonly:false}
							Modified_User_IP_Address{visibility:false}
							Added_User_IP_Address{visibility:false}
							plain{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Available_Room_Count{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Add_Payment
					{
						FieldPermissions
						{
							Payment_Id{visibility:true,readonly:false}
							Remaining_Balance{visibility:true,readonly:false}
							Advance_Amount{visibility:true,readonly:false}
							Incharge{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Service_Charge{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Amenity_Charge{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Payment_Done{visibility:true,readonly:false}
							Rooms{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Restaurant_Charge{visibility:true,readonly:false}
							Refund_Amount{visibility:true,readonly:false}
							Take_Advance_Amount{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
						}
					}
					Add_Maintenance_Type
					{
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Type{visibility:true,readonly:false}
						}
					}
					New_Order
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Order_History={"View"}
							Pending_Orders={"View"}
						}
						FieldPermissions
						{
							Order_Id{visibility:true,readonly:false}
							Orders{visibility:true,readonly:false}
							Order_Status{visibility:true,readonly:false}
							Room_Guest{visibility:true,readonly:false}
							Order_For{visibility:true,readonly:false}
							Sub_Total{visibility:true,readonly:false}
							Select_Timing{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Select_Room{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Date_Time{visibility:true,readonly:false}
							Net_Total{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Section1{visibility:true,readonly:false}
							Choose_Table{visibility:true,readonly:false}
							Compliment_Food{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Attendant{visibility:true,readonly:false}
						}
					}
					Generate_Service_Bill
					{
						FieldPermissions
						{
							Date_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Usage_Details{visibility:true,readonly:false}
							Total{visibility:true,readonly:false}
							Charge{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
							Choose_Service{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
						}
					}
					Reservation
					{
						FieldPermissions
						{
							Advance_Amount{visibility:false,readonly:false}
							Total_Amount{visibility:false,readonly:false}
							Number_Of_Rooms{visibility:false,readonly:false}
							Number_Of_Child{visibility:false,readonly:false}
							Corporate{visibility:false,readonly:false}
							Check_In{visibility:false,readonly:false}
							Reservation_Id{visibility:false,readonly:false}
							Reason{visibility:false,readonly:false}
							Tax_Amount{visibility:false,readonly:false}
							Rate_Details{visibility:false,readonly:false}
							Added_User{visibility:false}
							Room_Type{visibility:false,readonly:false}
							Stay_Details{visibility:false,readonly:false}
							ID{visibility:false}
							Added_Time{visibility:false}
							Status{visibility:false,readonly:false}
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Number_Of_Adults{visibility:false,readonly:false}
							Confirm_Reservation{visibility:false,readonly:false}
							Cancellation_Charge{visibility:false,readonly:false}
							Rate{visibility:false,readonly:false}
							Guest{visibility:false,readonly:false}
							Choose_Rooms{visibility:false,readonly:false}
							Check_Out{visibility:false,readonly:false}
							Room_Tariff{visibility:false,readonly:false}
							Select_Rate{visibility:false,readonly:false}
							Details{visibility:false,readonly:false}
							Guest_Type{visibility:false,readonly:false}
						}
					}
					Shift_a_Room
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Number_Of_Adults{visibility:false,readonly:false}
							Number_Of_Child{visibility:false,readonly:false}
							Guest{visibility:false,readonly:false}
							Apply_Rate{visibility:false,readonly:false}
							Current_Room{visibility:false,readonly:false}
							Check_In{visibility:false,readonly:false}
							Check_In_Id{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Reason{visibility:false,readonly:false}
							Check_Out{visibility:false,readonly:false}
							Modified_User_IP_Address{visibility:false}
							Added_User_IP_Address{visibility:false}
							plain{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Move_To{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Food_Order_Details
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Pending_KOT={"View"}
						}
						FieldPermissions
						{
							Order_Id{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Comments{visibility:true,readonly:false}
							Staff{visibility:true,readonly:false}
							Choose_Item{visibility:true,readonly:false}
							Quantity{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Notes{visibility:true,readonly:false}
							Unit_Price{visibility:true,readonly:false}
							Total_Price{visibility:true,readonly:false}
						}
					}
					Add_Reason
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Item_Row_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Comments{visibility:true,readonly:false}
						}
					}
					Raise_New_Complaint
					{
						FieldPermissions
						{
							Status{visibility:false,readonly:false}
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Description{visibility:false,readonly:false}
							Closing_Notes{visibility:false,readonly:false}
							Complaint_Id{visibility:false,readonly:false}
							Received_by{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Type{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Room{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Add_Room
					{
						FieldPermissions
						{
							Floor{visibility:true,readonly:false}
							Dial_Number{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
							Room_Status{visibility:true,readonly:false}
						}
					}
					Maintenance_Block
					{
						FieldPermissions
						{
							Block_From{visibility:true,readonly:false}
							Block_To{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Maintenance_Type{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Closing_Notes{visibility:true,readonly:false}
							Complaint_Id{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
						}
					}
					Public_Reservation
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Number_Of_Adults{visibility:false,readonly:false}
							Email{visibility:false,readonly:false}
							notes{visibility:false,readonly:false}
							Number_Of_Rooms{visibility:false,readonly:false}
							Number_Of_Child{visibility:false,readonly:false}
							Check_In{visibility:false,readonly:false}
							Phone_Number{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Check_Out{visibility:false,readonly:false}
							Contact{visibility:false,readonly:false}
							Name{visibility:false,readonly:false}
							Modified_User_IP_Address{visibility:false}
							Added_User_IP_Address{visibility:false}
							Section1{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Added_Time{visibility:false}
						}
					}
					About_Hotel
					{
						FieldPermissions
						{
							Default_Timings{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							Schedule_Time{visibility:true,readonly:false}
							Website{visibility:true,readonly:false}
							Hotel_Name{visibility:true,readonly:false}
							Logo{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
							Terms_And_Conditions_For_Invoice{visibility:true,readonly:false}
							Details{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Note{visibility:true,readonly:false}
							Contact_Number{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
						}
					}
					Add_Table
					{
						FieldPermissions
						{
							Number_Of_Seats{visibility:true,readonly:false}
							Table_Number{visibility:true,readonly:false}
							Table_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Service
					{
						FieldPermissions
						{
							Type{visibility:true,readonly:false}
							Service_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Food
					{
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Cost{visibility:true,readonly:false}
							Item_Name{visibility:true,readonly:false}
							Food_Availability{visibility:true,readonly:false}
						}
					}
					Add_Room_Type
					{
						FieldPermissions
						{
							Number_Of_Extra_Adults{visibility:true,readonly:false}
							Bed_Type{visibility:true,readonly:false}
							Number_Of_Adults{visibility:true,readonly:false}
							Type_Name{visibility:true,readonly:false}
							With_Ac{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Room_Amenities{visibility:true,readonly:false}
							Image{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Check_Out_Form
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							other_info{visibility:false,readonly:false}
							Payment_Mode{visibility:false,readonly:false}
							Guest{visibility:false,readonly:false}
							Check_In_Id{visibility:false,readonly:false}
							Additional_Bill_Count{visibility:false,readonly:false}
							confirmation{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Check_In_Time{visibility:false,readonly:false}
							Modified_User_IP_Address{visibility:false}
							Added_User_IP_Address{visibility:false}
							Added_User{visibility:false}
							Check_Out_Time{visibility:false,readonly:false}
							bills{visibility:false,readonly:false}
							ID{visibility:false}
							Room_Number{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Add_Corporate_Client
					{
						FieldPermissions
						{
							Select_Frequency{visibility:true,readonly:false}
							Corporate_Name{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Payment_Options{visibility:true,readonly:false}
							Set_Payment_Frequency{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							Next_Reminder_On{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Staff
					{
						FieldPermissions
						{
							Role{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							ID_Proof{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Rate_Type
					{
						FieldPermissions
						{
							Rate_Type{visibility:true,readonly:false}
							Rooms_And_Rates{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Guest
					{
						FieldPermissions
						{
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							ID_Proof{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Employee_Id{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Photo{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Source{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Rooms_And_Rates
					{
						FieldPermissions
						{
							Room_Type{visibility:true,readonly:false}
							Rate_Per_Night{visibility:true,readonly:false}
							Rate_Type{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Charge_Per_Extra_Adult{visibility:true,readonly:false}
						}
					}
					Check_In_Details_Form
					{
						FieldPermissions
						{
							Stay_Length{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Number_Of_Adult{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Rate{visibility:true,readonly:false}
							Payment_Mode{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Amount{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Invoice_No{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
						}
					}
					Add_Service_And_Taxes
					{
						FieldPermissions
						{
							Tax_Type{visibility:true,readonly:false}
							Percent{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Choose_Service{visibility:true,readonly:false}
						}
					}
					Add_Reason1
					{
						FieldPermissions
						{
							Status{visibility:false,readonly:false}
							Modified_User{visibility:false}
							Added_User_IP_Address{visibility:false}
							Modified_Time{visibility:false}
							Details{visibility:false,readonly:false}
							Added_User{visibility:false}
							Reservation_Id{visibility:false,readonly:false}
							ID{visibility:false}
							Reason{visibility:false,readonly:false}
							Added_Time{visibility:false}
							Modified_User_IP_Address{visibility:false}
						}
					}
				}
			}
			"Manager"
			{
				name = "Manager"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false}
				description = "Manager Profile\n"
				ModulePermissions
				{
					Add_Corporate_Payment
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Paid_Corporate_Payments={"View"}
						}
						FieldPermissions
						{
							Remaining_Balance{visibility:true,readonly:false}
							Incharge{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Service_Charge{visibility:true,readonly:false}
							Amenity_Charge{visibility:true,readonly:false}
							Payment_On{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Amount_Received{visibility:true,readonly:false}
							Restaurant_Charge{visibility:true,readonly:false}
							Select_Corporate{visibility:true,readonly:false}
							Check_Ins_To_Be_Covered{visibility:true,readonly:false}
							Prepaid_Amount{visibility:true,readonly:false}
						}
					}
					Add_Check_In
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Check_Ins={"View"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Advance_Amount{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Reservation_Id{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Room_Details{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Corporate_Will_Pay_For{visibility:true,readonly:false}
							Refund_Amount{visibility:true,readonly:false}
							Billing{visibility:true,readonly:false}
							Guest_Type{visibility:true,readonly:false}
						}
					}
					Food_Timings
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Food_Timings1={"View","Edit"}
						}
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Tax_Type
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Taxes={"View","Edit"}
						}
						FieldPermissions
						{
							Services_And_Taxes{visibility:true,readonly:false}
							Tax_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Amenities_Bill
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Additional_Amenities_Bills1={"View"}
						}
						FieldPermissions
						{
							Date_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Select_Amenities{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Total_Charge{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
						}
					}
					Add_Room_Amenity
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Room_Amenities={"View","Edit"}
						}
						FieldPermissions
						{
							Amenity_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Check_In
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Check_In{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Available_Room_Count{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
						}
					}
					Add_Payment
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Other_Payments={"View"}
						}
						FieldPermissions
						{
							Payment_Id{visibility:true,readonly:false}
							Remaining_Balance{visibility:true,readonly:false}
							Advance_Amount{visibility:true,readonly:false}
							Incharge{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Service_Charge{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Amenity_Charge{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Payment_Done{visibility:true,readonly:false}
							Rooms{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Restaurant_Charge{visibility:true,readonly:false}
							Refund_Amount{visibility:true,readonly:false}
							Take_Advance_Amount{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
						}
					}
					Add_Maintenance_Type
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Maintenance_Types={"View","Edit"}
						}
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Type{visibility:true,readonly:false}
						}
					}
					New_Order
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Order_History={"View"}
							Awaiting_Payments={"View"}
							Guest_Orders={"View"}
							Pending_Orders={"View"}
						}
						FieldPermissions
						{
							Order_Id{visibility:true,readonly:false}
							Orders{visibility:true,readonly:false}
							Order_Status{visibility:true,readonly:false}
							Room_Guest{visibility:true,readonly:false}
							Order_For{visibility:true,readonly:false}
							Sub_Total{visibility:true,readonly:false}
							Select_Timing{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Select_Room{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Date_Time{visibility:true,readonly:false}
							Net_Total{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Section1{visibility:true,readonly:false}
							Choose_Table{visibility:true,readonly:false}
							Compliment_Food{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Attendant{visibility:true,readonly:false}
						}
					}
					Generate_Service_Bill
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Service_Bills={"View"}
						}
						FieldPermissions
						{
							Date_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Usage_Details{visibility:true,readonly:false}
							Total{visibility:true,readonly:false}
							Charge{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
							Choose_Service{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
						}
					}
					Reservation
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Upcoming_Check_Ins={"View"}
							Timeline_View={"View"}
							All_Reservations={"View"}
							Awaiting_Confirmations={"View","Edit"}
							No_Shows={"View"}
						}
						FieldPermissions
						{
							Advance_Amount{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Number_Of_Rooms{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Reservation_Id{visibility:true,readonly:false}
							Reason{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Rate_Details{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Stay_Details{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Number_Of_Adults{visibility:true,readonly:false}
							Confirm_Reservation{visibility:true,readonly:false}
							Cancellation_Charge{visibility:true,readonly:false}
							Rate{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Choose_Rooms{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Select_Rate{visibility:true,readonly:false}
							Details{visibility:true,readonly:false}
							Guest_Type{visibility:true,readonly:false}
						}
					}
					Shift_a_Room
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Number_Of_Adults{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Apply_Rate{visibility:true,readonly:false}
							Current_Room{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Reason{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Move_To{visibility:true,readonly:false}
						}
					}
					Food_Order_Details
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Pending_KOT={"View"}
							New_KOT={"View"}
							All_Kitchen_Orders={"View"}
							Items_In_Queue={"View"}
						}
						FieldPermissions
						{
							Order_Id{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Comments{visibility:true,readonly:false}
							Staff{visibility:true,readonly:false}
							Choose_Item{visibility:true,readonly:false}
							Quantity{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Notes{visibility:true,readonly:false}
							Unit_Price{visibility:true,readonly:false}
							Total_Price{visibility:true,readonly:false}
						}
					}
					Add_Reason
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Item_Row_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Comments{visibility:true,readonly:false}
						}
					}
					Raise_New_Complaint
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Closed_Ones={"View"}
							New_Complaints={"View"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Type{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Closing_Notes{visibility:true,readonly:false}
							Complaint_Id{visibility:true,readonly:false}
							Received_by{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
						}
					}
					Add_Room
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Dirty_Rooms={"View"}
							Rooms={"View","Edit"}
						}
						FieldPermissions
						{
							Floor{visibility:true,readonly:false}
							Dial_Number{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
							Room_Status{visibility:true,readonly:false}
						}
					}
					Maintenance_Block
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Upcoming={"View"}
							On_Going={"View"}
							Maintenance_History={"View"}
						}
						FieldPermissions
						{
							Block_From{visibility:true,readonly:false}
							Block_To{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Maintenance_Type{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Closing_Notes{visibility:true,readonly:false}
							Complaint_Id{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
						}
					}
					Public_Reservation
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Number_Of_Adults{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							notes{visibility:true,readonly:false}
							Number_Of_Rooms{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							Contact{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
							Section1{visibility:true,readonly:false}
						}
					}
					About_Hotel
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Hotel_Info={"View","Edit"}
						}
						FieldPermissions
						{
							Default_Timings{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							Schedule_Time{visibility:true,readonly:false}
							Website{visibility:true,readonly:false}
							Hotel_Name{visibility:true,readonly:false}
							Logo{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
							Terms_And_Conditions_For_Invoice{visibility:true,readonly:false}
							Details{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Note{visibility:true,readonly:false}
							Contact_Number{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
						}
					}
					Add_Table
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Tables={"View","Edit"}
						}
						FieldPermissions
						{
							Number_Of_Seats{visibility:true,readonly:false}
							Table_Number{visibility:true,readonly:false}
							Table_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Service
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Services={"View","Edit"}
						}
						FieldPermissions
						{
							Type{visibility:true,readonly:false}
							Service_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Food
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Foods_And_Beverages={"View","Edit"}
						}
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Cost{visibility:true,readonly:false}
							Item_Name{visibility:true,readonly:false}
							Food_Availability{visibility:true,readonly:false}
						}
					}
					Add_Room_Type
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Type_Of_Rooms={"View","Edit"}
						}
						FieldPermissions
						{
							Number_Of_Extra_Adults{visibility:true,readonly:false}
							Bed_Type{visibility:true,readonly:false}
							Number_Of_Adults{visibility:true,readonly:false}
							Type_Name{visibility:true,readonly:false}
							With_Ac{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Room_Amenities{visibility:true,readonly:false}
							Image{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Check_Out_Form
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							other_info{visibility:true,readonly:false}
							Payment_Mode{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
							Additional_Bill_Count{visibility:true,readonly:false}
							bills{visibility:true,readonly:false}
							confirmation{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
						}
					}
					Add_Corporate_Client
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Corporates={"View","Edit"}
						}
						FieldPermissions
						{
							Select_Frequency{visibility:true,readonly:false}
							Corporate_Name{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Payment_Options{visibility:true,readonly:false}
							Set_Payment_Frequency{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							Next_Reminder_On{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Staff
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Staffs={"View","Edit"}
						}
						FieldPermissions
						{
							Role{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							ID_Proof{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Rate_Type
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Rate_Types={"View","Edit"}
						}
						FieldPermissions
						{
							Rate_Type{visibility:true,readonly:false}
							Rooms_And_Rates{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Guest
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Other_Guests={"View","Edit"}
							Corporate_Guests={"View","Edit"}
						}
						FieldPermissions
						{
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							ID_Proof{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Employee_Id{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Photo{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Source{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Rooms_And_Rates
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Rooms_And_Rates_Report={"View","Edit"}
						}
						FieldPermissions
						{
							Room_Type{visibility:true,readonly:false}
							Rate_Per_Night{visibility:true,readonly:false}
							Rate_Type{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Charge_Per_Extra_Adult{visibility:true,readonly:false}
						}
					}
					Check_In_Details_Form
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Active_Check_Ins={"View"}
							On_Payment_Invoices={"View"}
							Check_In_History={"View"}
							Pending_Corporate_Invoices={"View"}
						}
						FieldPermissions
						{
							Stay_Length{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Number_Of_Adult{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Rate{visibility:true,readonly:false}
							Payment_Mode{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Amount{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Invoice_No{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
						}
					}
					Add_Service_And_Taxes
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Add_Service_And_Taxes_Report={"View","Edit"}
						}
						FieldPermissions
						{
							Tax_Type{visibility:true,readonly:false}
							Percent{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Choose_Service{visibility:true,readonly:false}
						}
					}
					Add_Reason1
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Reservation_Id{visibility:true,readonly:false}
							Details{visibility:true,readonly:false}
							Reason{visibility:true,readonly:false}
						}
					}
					Today_s_Page
					{
						enabled = tab
					}
					Monthly_View
					{
						enabled = tab
					}
					Invoice_1
					{
						enabled = tab
					}
					Invoice_2
					{
						enabled = tab
					}
					Restaurant_Bill
					{
						enabled = tab
					}
				}
			}
			"Executive Chef"
			{
				name = "Executive Chef"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false}
				description = "Executive Chef Profile\n"
				ModulePermissions
				{
					Add_Corporate_Payment
					{
						FieldPermissions
						{
							Remaining_Balance{visibility:false,readonly:false}
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Incharge{visibility:false,readonly:false}
							Total_Amount{visibility:false,readonly:false}
							Service_Charge{visibility:false,readonly:false}
							Amenity_Charge{visibility:false,readonly:false}
							Payment_On{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Room_Tariff{visibility:false,readonly:false}
							Amount_Received{visibility:false,readonly:false}
							Restaurant_Charge{visibility:false,readonly:false}
							Select_Corporate{visibility:false,readonly:false}
							Check_Ins_To_Be_Covered{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Prepaid_Amount{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Add_Check_In
					{
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Advance_Amount{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Check_In{visibility:true,readonly:false}
							Reservation_Id{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Check_Out{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Room_Details{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Corporate_Will_Pay_For{visibility:true,readonly:false}
							Refund_Amount{visibility:true,readonly:false}
							Billing{visibility:true,readonly:false}
							Guest_Type{visibility:true,readonly:false}
						}
					}
					Food_Timings
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Food_Timings1={"View","Edit"}
						}
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Tax_Type
					{
						FieldPermissions
						{
							Services_And_Taxes{visibility:true,readonly:false}
							Tax_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Amenities_Bill
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Select_Amenities{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Date_Time{visibility:false,readonly:false}
							Payment_Status{visibility:false,readonly:false}
							Added_User{visibility:false}
							Check_In_Row_Id{visibility:false,readonly:false}
							Total_Charge{visibility:false,readonly:false}
							Pre_Paid_Amount{visibility:false,readonly:false}
							ID{visibility:false}
							Room{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Add_Room_Amenity
					{
						FieldPermissions
						{
							Amenity_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Check_In
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Check_In{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Check_Out{visibility:false,readonly:false}
							Modified_User_IP_Address{visibility:false}
							Added_User_IP_Address{visibility:false}
							plain{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Available_Room_Count{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Add_Payment
					{
						FieldPermissions
						{
							Payment_Id{visibility:true,readonly:false}
							Remaining_Balance{visibility:true,readonly:false}
							Advance_Amount{visibility:true,readonly:false}
							Incharge{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Service_Charge{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Amenity_Charge{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Payment_Done{visibility:true,readonly:false}
							Rooms{visibility:true,readonly:false}
							Room_Tariff{visibility:true,readonly:false}
							Restaurant_Charge{visibility:true,readonly:false}
							Refund_Amount{visibility:true,readonly:false}
							Take_Advance_Amount{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
						}
					}
					Add_Maintenance_Type
					{
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Type{visibility:true,readonly:false}
						}
					}
					New_Order
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Order_History={"View"}
							Pending_Orders={"View"}
						}
						FieldPermissions
						{
							Order_Id{visibility:true,readonly:false}
							Orders{visibility:true,readonly:false}
							Order_Status{visibility:true,readonly:false}
							Room_Guest{visibility:true,readonly:false}
							Order_For{visibility:true,readonly:false}
							Sub_Total{visibility:true,readonly:false}
							Select_Timing{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Select_Room{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Date_Time{visibility:true,readonly:false}
							Net_Total{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Section1{visibility:true,readonly:false}
							Choose_Table{visibility:true,readonly:false}
							Compliment_Food{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Attendant{visibility:true,readonly:false}
						}
					}
					Generate_Service_Bill
					{
						FieldPermissions
						{
							Date_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Usage_Details{visibility:true,readonly:false}
							Total{visibility:true,readonly:false}
							Charge{visibility:true,readonly:false}
							Check_In_Row_Id{visibility:true,readonly:false}
							Pre_Paid_Amount{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
							Choose_Service{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
						}
					}
					Reservation
					{
						FieldPermissions
						{
							Advance_Amount{visibility:false,readonly:false}
							Total_Amount{visibility:false,readonly:false}
							Number_Of_Rooms{visibility:false,readonly:false}
							Number_Of_Child{visibility:false,readonly:false}
							Corporate{visibility:false,readonly:false}
							Check_In{visibility:false,readonly:false}
							Reservation_Id{visibility:false,readonly:false}
							Reason{visibility:false,readonly:false}
							Tax_Amount{visibility:false,readonly:false}
							Rate_Details{visibility:false,readonly:false}
							Added_User{visibility:false}
							Room_Type{visibility:false,readonly:false}
							Stay_Details{visibility:false,readonly:false}
							ID{visibility:false}
							Added_Time{visibility:false}
							Status{visibility:false,readonly:false}
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Number_Of_Adults{visibility:false,readonly:false}
							Confirm_Reservation{visibility:false,readonly:false}
							Cancellation_Charge{visibility:false,readonly:false}
							Rate{visibility:false,readonly:false}
							Guest{visibility:false,readonly:false}
							Choose_Rooms{visibility:false,readonly:false}
							Check_Out{visibility:false,readonly:false}
							Room_Tariff{visibility:false,readonly:false}
							Select_Rate{visibility:false,readonly:false}
							Details{visibility:false,readonly:false}
							Guest_Type{visibility:false,readonly:false}
						}
					}
					Shift_a_Room
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Number_Of_Adults{visibility:false,readonly:false}
							Number_Of_Child{visibility:false,readonly:false}
							Guest{visibility:false,readonly:false}
							Apply_Rate{visibility:false,readonly:false}
							Current_Room{visibility:false,readonly:false}
							Check_In{visibility:false,readonly:false}
							Check_In_Id{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Reason{visibility:false,readonly:false}
							Check_Out{visibility:false,readonly:false}
							Modified_User_IP_Address{visibility:false}
							Added_User_IP_Address{visibility:false}
							plain{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Move_To{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Food_Order_Details
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Pending_KOT={"View"}
							New_KOT={"View"}
							All_Kitchen_Orders={"View"}
							Items_In_Queue={"View"}
						}
						FieldPermissions
						{
							Order_Id{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Comments{visibility:true,readonly:false}
							Staff{visibility:true,readonly:false}
							Choose_Item{visibility:true,readonly:false}
							Quantity{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Notes{visibility:true,readonly:false}
							Unit_Price{visibility:true,readonly:false}
							Total_Price{visibility:true,readonly:false}
						}
					}
					Add_Reason
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Item_Row_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Comments{visibility:true,readonly:false}
						}
					}
					Raise_New_Complaint
					{
						FieldPermissions
						{
							Status{visibility:false,readonly:false}
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Description{visibility:false,readonly:false}
							Closing_Notes{visibility:false,readonly:false}
							Complaint_Id{visibility:false,readonly:false}
							Received_by{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Type{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Room{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Add_Room
					{
						FieldPermissions
						{
							Floor{visibility:true,readonly:false}
							Dial_Number{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
							Room_Status{visibility:true,readonly:false}
						}
					}
					Maintenance_Block
					{
						FieldPermissions
						{
							Block_From{visibility:true,readonly:false}
							Block_To{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Maintenance_Type{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Closing_Notes{visibility:true,readonly:false}
							Complaint_Id{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Room{visibility:true,readonly:false}
						}
					}
					Public_Reservation
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							Number_Of_Adults{visibility:false,readonly:false}
							Email{visibility:false,readonly:false}
							notes{visibility:false,readonly:false}
							Number_Of_Rooms{visibility:false,readonly:false}
							Number_Of_Child{visibility:false,readonly:false}
							Check_In{visibility:false,readonly:false}
							Phone_Number{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Check_Out{visibility:false,readonly:false}
							Contact{visibility:false,readonly:false}
							Name{visibility:false,readonly:false}
							Modified_User_IP_Address{visibility:false}
							Added_User_IP_Address{visibility:false}
							Section1{visibility:false,readonly:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Added_Time{visibility:false}
						}
					}
					About_Hotel
					{
						FieldPermissions
						{
							Default_Timings{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							Schedule_Time{visibility:true,readonly:false}
							Website{visibility:true,readonly:false}
							Hotel_Name{visibility:true,readonly:false}
							Logo{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
							Terms_And_Conditions_For_Invoice{visibility:true,readonly:false}
							Details{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Note{visibility:true,readonly:false}
							Contact_Number{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
						}
					}
					Add_Table
					{
						FieldPermissions
						{
							Number_Of_Seats{visibility:true,readonly:false}
							Table_Number{visibility:true,readonly:false}
							Table_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Service
					{
						FieldPermissions
						{
							Type{visibility:true,readonly:false}
							Service_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Food
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Foods_And_Beverages={"View","Edit"}
						}
						FieldPermissions
						{
							Section{visibility:true,readonly:false}
							Cost{visibility:true,readonly:false}
							Item_Name{visibility:true,readonly:false}
							Food_Availability{visibility:true,readonly:false}
						}
					}
					Add_Room_Type
					{
						FieldPermissions
						{
							Number_Of_Extra_Adults{visibility:true,readonly:false}
							Bed_Type{visibility:true,readonly:false}
							Number_Of_Adults{visibility:true,readonly:false}
							Type_Name{visibility:true,readonly:false}
							With_Ac{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Room_Amenities{visibility:true,readonly:false}
							Image{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Check_Out_Form
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Modified_Time{visibility:false}
							other_info{visibility:false,readonly:false}
							Payment_Mode{visibility:false,readonly:false}
							Guest{visibility:false,readonly:false}
							Check_In_Id{visibility:false,readonly:false}
							Additional_Bill_Count{visibility:false,readonly:false}
							confirmation{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Check_In_Time{visibility:false,readonly:false}
							Modified_User_IP_Address{visibility:false}
							Added_User_IP_Address{visibility:false}
							Added_User{visibility:false}
							Check_Out_Time{visibility:false,readonly:false}
							bills{visibility:false,readonly:false}
							ID{visibility:false}
							Room_Number{visibility:false,readonly:false}
							Added_Time{visibility:false}
						}
					}
					Add_Corporate_Client
					{
						FieldPermissions
						{
							Select_Frequency{visibility:true,readonly:false}
							Corporate_Name{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Payment_Options{visibility:true,readonly:false}
							Set_Payment_Frequency{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							Next_Reminder_On{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Staff
					{
						FieldPermissions
						{
							Role{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							ID_Proof{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Rate_Type
					{
						FieldPermissions
						{
							Rate_Type{visibility:true,readonly:false}
							Rooms_And_Rates{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Add_Guest
					{
						FieldPermissions
						{
							Email{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							ID_Proof{visibility:true,readonly:false}
							Corporate{visibility:true,readonly:false}
							Employee_Id{visibility:true,readonly:false}
							Phone_Number{visibility:true,readonly:false}
							Photo{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Source{visibility:true,readonly:false}
							Name{visibility:true,readonly:false}
						}
					}
					Add_Rooms_And_Rates
					{
						FieldPermissions
						{
							Room_Type{visibility:true,readonly:false}
							Rate_Per_Night{visibility:true,readonly:false}
							Rate_Type{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Charge_Per_Extra_Adult{visibility:true,readonly:false}
						}
					}
					Check_In_Details_Form
					{
						FieldPermissions
						{
							Stay_Length{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Total_Amount{visibility:true,readonly:false}
							Number_Of_Adult{visibility:true,readonly:false}
							Number_Of_Child{visibility:true,readonly:false}
							Rate{visibility:true,readonly:false}
							Payment_Mode{visibility:true,readonly:false}
							Guest{visibility:true,readonly:false}
							Amount{visibility:true,readonly:false}
							Check_In_Id{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Tax_Amount{visibility:true,readonly:false}
							Check_In_Time{visibility:true,readonly:false}
							Payment_Status{visibility:true,readonly:false}
							Invoice_No{visibility:true,readonly:false}
							Room_Type{visibility:true,readonly:false}
							Check_Out_Time{visibility:true,readonly:false}
							Room_Number{visibility:true,readonly:false}
						}
					}
					Add_Service_And_Taxes
					{
						FieldPermissions
						{
							Tax_Type{visibility:true,readonly:false}
							Percent{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Choose_Service{visibility:true,readonly:false}
						}
					}
					Add_Reason1
					{
						FieldPermissions
						{
							Status{visibility:false,readonly:false}
							Modified_User{visibility:false}
							Added_User_IP_Address{visibility:false}
							Modified_Time{visibility:false}
							Details{visibility:false,readonly:false}
							Added_User{visibility:false}
							Reservation_Id{visibility:false,readonly:false}
							ID{visibility:false}
							Reason{visibility:false,readonly:false}
							Added_Time{visibility:false}
							Modified_User_IP_Address{visibility:false}
						}
					}
				}
			}
			roles
			{
				"CEO"
				{
					description = "User belonging to this role can access data of all other users.\n\n\n\n"
				}
			}
	}

	customize
	{
		
		layout = "tab"
		color = "black"
		base theme = "professional"
		new theme = 4
		new theme color = 1
		icons = true
    	icon type = 1
    	icon name = "zc-ab-finance6"
    	icon theme = "darkgrey"
		icons style = outline
	}

	
}