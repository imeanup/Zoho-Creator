/*
 * Author       : app.zohocreator
 * Generated on : 06-May-2020 23:17:18
 * Version      : 1.0
 */
 application "Time Tracker"
 {
 	date format = "dd-MMM-yyyy"
 	time zone = "Asia/Kolkata"
 	time format = "24-hr"
	section Hidden
	{
		hide = true
		icon = "ui-2-menu-bold"
		form Add_Project
		{
			displayname = "Add Project"
			success message = "Project Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have Title
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = medium
			)
			Description
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Project_Manager
			(
				type = picklist
				displayname = "Project Manager"
				values  = Add_Employee[Designation == "Manager"].ID
    			displayformat = [Email]
				allow new entries = true
				[
					displayname = "Add New"
				]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Project_Members
			(
				type = list
				displayname = "Project Members"
				values  = Add_Employee.ID
    			displayformat = [Email]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
			Jobs
			(
				type = list
				values  = Add_Job.ID
    			bidirectional = Project
    			displayformat = [Job_Title]
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_Job
		{
			displayname = "Add Job"
			success message = "Job Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Project
			(
				type = picklist
				values  = Add_Project[Project_Manager.Email == zoho.loginuserid].ID
    			bidirectional = Jobs
    			displayformat = [Title]
				allow new entries = true
				[
					displayname = "Add New"
				]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Job_Title
			(
    			type = text
				displayname = "Job Title"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Start_Date
			(
    			type = date
				displayname = "Start Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			End_Date
			(
    			type = date
				displayname = "End Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			Description
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			Assignees_Admin
			(
				type = list
				displayname = "Assignees"
				values  = Add_Employee.ID
    			displayformat = [Email]
				allow new entries = true
				[
					displayname = "Add New"
				]
				searchable = true
				sortorder = ascending
				height = 60px
				private = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			Assignees
			(
				type = list
				values  = Add_Employee.ID
    			displayformat = [Email]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
			Status
			(
				type = picklist
				values = {"Active", "Completed"}
				initial value = "Active"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Set_Reminder
			(
    			type = checkbox
				displayname = "Set Reminder (Mail  will  be triggered 1 day before end date)"
				initial value = false
	 			row = 1
	 			column = 1   
				width = medium
			)
			Remarks
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_Task
		{
			displayname = "Add Task"
			success message = "Task Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have Job
			(
				type = picklist
				values  = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID
    			displayformat = [Job_Title]
				allow new entries = true
				[
					displayname = "Add New"
				]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Task
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = medium
			)
			Start_Date_Time
			(
    			type = datetime
				displayname = "Start Date-Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			End_Date_Time
			(
    			type = datetime
				displayname = "End Date-Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			Description
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			Set_Reminder
			(
    			type = checkbox
				displayname = "Set Reminder (Mail  will  be triggered 1 hour before end time)"
				initial value = false
	 			row = 1
	 			column = 1   
				width = medium
			)
			Task_AddedBy
			(
    			type = email
				displayname = "Task AddedBy"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Stop_Timer
		{
			displayname = "Stop Timer"
			store data in zc = false
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			recID
			(
				type = number
	 			row = 1
	 			column = 1   
				width = medium
			)
			Project_Name
			(
				type = picklist
				displayname = "Project Name"
				values  = Add_Project.ID
    			displayformat = [Title]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Job_Name
			(
				type = picklist
				displayname = "Job Name"
				values  = Add_Job.ID
    			displayformat = [Job_Title]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Task
			(
				type = picklist
				values  = Add_Task.ID
    			displayformat = [Task]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				Stop
				(
   					type = button
   					displayname = "Stop"
				)
			}
		}
		form Start_Timer
		{
			displayname = "Start Timer"
			store data in zc = false
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Project_Name
			(
				type = picklist
				displayname = "Project Name"
				values  = Add_Project[Project_Manager.Email == zoho.loginuserid || Project_Members.Email == zoho.loginuserid].ID
    			displayformat = [Title]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Job_Name
			(
				type = picklist
				displayname = "Job Name"
				values  = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID
    			displayformat = [Job_Title]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Task
			(
				type = picklist
				values  = Add_Task[Added_User == zoho.loginuser].ID
    			displayformat = [Task]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			plain
			(
    			type = plaintext
				value = ""
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				Start_Timer
				(
   					type = button
   					displayname = "Start Timer"
				)
			}
		}
				 page Weekly_progress_bar(fromDate,userMailID) 
	 	 { 
 	 	 displayname = "WeeklyProgressBar" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Weekly_progress_bar1'>\n\t<![CDATA[htmlpage Weekly_progress_bar1(fromDate,userMailID)\ncontent\n&lt;%{\n\tdateVal = fromDate.toDate();\n\tweekStartDate = toStartOfWeek(dateVal);\n\tweekDaysList = {&quot;Sunday&quot;,&quot;Monday&quot;,&quot;TuesDay&quot;,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;,&quot;Saturday&quot;};\n\tweeklyMap = {&quot;Sunday&quot;:weekStartDate,&quot;Monday&quot;:weekStartDate.addDay(1),&quot;TuesDay&quot;:weekStartDate.addDay(2),&quot;Wednesday&quot;:weekStartDate.addDay(3),&quot;Thursday&quot;:weekStartDate.addDay(4),&quot;Friday&quot;:weekStartDate.addDay(5),&quot;Saturday&quot;:weekStartDate.addDay(6)};\n\tprevWeek = weekStartDate.subDay(1);\n\tnextWeek = weekStartDate.addDay(7);\n\t%&gt;\n&lt;style&gt;\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t  .row {\n\t\t\t\t\t\t\t\t\tmargin-left: 0px;\n\t\t\t\t\t\t\t\t\tmargin-right: 0px\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t.container-fluid {\n\t\t\t\t\t\t\t\t\t    margin-right: 0px;\n\t\t\t\t\t\t\t\t\t    margin-left: 0px;\n\t\t\t\t\t\t\t\t\t    padding-left: 0px;\n\t\t\t\t\t\t\t\t\t    padding-right: 0px;\n\t\t\t\t\t\t\t\t\t    height:100vh;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdiv{\n\t\t\t\t\t\t\t\t\t\tbox-sizing:border-box;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t.secondcol\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpadding-left: 0px;\n\t\t\t\t\t\t\t\t\tpadding-right: 0px;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t.weeklyCol\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t  height:50%;\n\t\t\t\t\t\t\t\t\t  border:1px solid rgba(193, 193, 193, 0.37);\n\t\t\t\t\t\t\t\t\t  text-align:center;\n\t\t\t\t\t\t\t\t\t\ttext-overflow: ellipsis;\n\t\t\t\t\t\t\t\t\t    white-space: nowrap;\n\t\t\t\t\t\t\t\t\t    overflow: hidden;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t  .weeklyprogressCol\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t   height:50%;\n\t\t\t\t\t\t\t\t\tpadding-left: 10%;\n\t\t\t\t\t\t\t\t\tpadding-right: 10%;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t  .weeklyHrsCol\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t  text-align: center;\n\t\t\t\t\t\t\t\t\t  width: 100%;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t#progressbar\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t  height: 20px;\n\t\t\t\t\t\t\t\t\t  background-color: #eee;\n\t\t\t\t\t\t\t\t\t  margin: 6% 0% 3%;\n\t\t\t\t\t\t\t\t\t  border-radius:5px;\n\t\t\t\t\t\t\t\t\t  clear: both;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t  #progress \n\t\t\t\t\t\t\t\t\t  {    \n\t\t\t\t\t\t\t\t\t  background: #b1e67a;\n\t\t\t\t\t\t\t\t\t  height: 100%;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t  max-width: 100%;\n\t\t\t\t\t\t\t\t\t  float: left;\n\t\t\t\t\t\t\t\t\t  border-radius:5px;\n\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t   \/* C5 changes starts here *\/\n.zc-pb-page-content-wrapper .elemContainment\n{\npadding:0px !important;\n}\n.column-container .zc-pb-tile-container\n{\npadding:0px !important;\n}\n.column-container .zc-pb-tile-container .zc-pb-tile-card\n{\n\tborder-radius: 0;\n}\n\/* C5 changes ends here *\/\n.secondcol:first-child{\n    margin-left:0.3%;\n}\n.btnStyle{\n\tdisplay: inline-block;\n    border-radius: 4px;\n    border: 1px solid #ccc;\n    padding: 6px 12px;\n    vertical-align: middle;\n    text-align: center;\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 1.42857143;\n\t\n}\n\t\t\t\t\t\t\t\t\t  \t&lt;\/style&gt;\n\t\t\t\t\t\t\t\t\t&lt;div class=&quot;container-fluid&quot; style=&quot;box-sizing:border-box;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &lt;div class=&quot;row&quot; style=&quot;padding:1%;box-sizing:border-box;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &lt;div class=&quot;row&quot; style=&quot;min-height:30%;box-sizing:border-box;&quot;&gt;\n&lt;%\n\tlogHoursList = Add_Time_Logs[Log_Date &gt;= weekStartDate &amp;&amp; Log_Date &lt;= weekStartDate.addDay(6) &amp;&amp; Submitted_By.Email == input.userMailID &amp;&amp; Status != &quot;Tracking Time&quot;].Hours.getAll();\n\ttotalTime = thisapp.TimeCalculations.totalHours(weekStartDate,logHoursList);\n\tdayFromTotalTime = totalTime.getDayOfWeek();\n\thrsVal = (dayFromTotalTime - 1) * 24 + totalTime.getHour();\n\tminsVal = totalTime.getMinutes();\n\t%&gt;\n&lt;div class=&quot;col-md-12&quot; style=&quot;height:100%;box-sizing:border-box;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &lt;div style=&quot;height:100%;float:left;&quot;&gt;&lt;span style=&quot;font-size: x-large;font-weight: bold;&quot;&gt;&lt;%=hrsVal%&gt;h &lt;%=minsVal%&gt;m&lt;\/span&gt;&lt;br&gt;&lt;span&gt;Total Time worked&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  \t\t\t\t&lt;div style=&quot;text-align:right;height:100%;float:right;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;a href=&quot;&lt;%=zoho.appuri%&gt;view-embed\/Weekly_progress_bar?fromDate=&lt;%=prevWeek%&gt;&amp;&amp;userMailID=&lt;%=userMailID%&gt;&quot; class=&quot;btnStyle&quot; target=&quot;WeeklyView&quot;&gt;&lt;&lt;\/a&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &lt;span class=&quot;btnStyle&quot;&gt;&lt;%=weeklyMap.get(&quot;Sunday&quot;)%&gt;-&lt;%=weeklyMap.get(&quot;Saturday&quot;)%&gt;&lt;\/span&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &lt;a class=&quot;btnStyle&quot; href=&quot;&lt;%=zoho.appuri%&gt;view-embed\/Weekly_progress_bar?fromDate=&lt;%=nextWeek%&gt;&amp;&amp;userMailID=&lt;%=userMailID%&gt;&quot; target=&quot;WeeklyView&quot;&gt;&gt;&lt;\/a&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  \t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  \t\t\t&lt;div class=&quot;row seven-cols&quot; style=&quot;padding-top: 5px; height:68%&quot;&gt;\n\t\t\t\t\t\t\t\t\t&lt;div class=&quot;col-md-12 secondcol&quot; style=&quot;height:100%&quot;&gt;\n&lt;%\n\tfor each  eachDay in weekDaysList\n\t{\n\t\tlogHoursList = Add_Time_Logs[Log_Date == weeklyMap.get(eachDay).toDate() &amp;&amp; Submitted_By.Email == input.userMailID &amp;&amp; Status != &quot;Tracking Time&quot;].Hours.getAll();\n\t\ttotalTime = thisapp.TimeCalculations.totalHours(weeklyMap.get(eachDay).toDate(),logHoursList);\n\t\thrsVal = totalTime.getHour();\n\t\tminsVal = totalTime.getMinutes();\n\t\tloggedDate = weeklyMap.get(eachDay).toDate().addDay(1);\n\t\tif(totalTime == loggedDate &amp;&amp; hrsVal == 0 &amp;&amp; minsVal == 0)\n\t\t{\n\t\t\thrsVal = 24;\n\t\t\tminsVal = 0;\n\t\t}\n\t\tpercentTime = (hrsVal * 60 + minsVal) \/ 1440 * 100;\n\t\t%&gt;\n&lt;div style=&quot;float:left;width:14.2%;height:100%;&quot;&gt;\n\t\t\t\t\t\t\t\t\t&lt;div class=&quot;weeklyCol&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &lt;span style=&quot;top:1%;position:relative;vertical-align:-webkit-baseline-middle;&quot;&gt;&lt;%=eachDay%&gt;&lt;br&gt;\n&lt;%\n\t\tif(weeklyMap.get(eachDay).toDate() &lt;= zoho.currentdate)\n\t\t{\n\t\t\t%&gt;\n&lt;a style=&quot;color: black;&quot; title=&quot;Add Daily Logs&quot; href=&quot;&lt;%=zoho.appuri%&gt;#Form:Add_Daily_Logs?Log_Date_Daily=&lt;%=weeklyMap.get(eachDay)%&gt;&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;&lt;%=weeklyMap.get(eachDay)%&gt;&lt;\/b&gt;&lt;\/a&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\t%&gt;\n&lt;b&gt;&lt;%=weeklyMap.get(eachDay)%&gt;&lt;\/b&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/span&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t&lt;div class=&quot;weeklyprogressCol&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &lt;div id=&apos;progressbar&apos;&gt;&lt;div id=&apos;progress&apos; style=&quot;width:&lt;%=percentTime%&gt;%; transition: width 5s ease;color:white;text-align:center;white-space: nowrap;&quot;&gt;&lt;%=percentTime.round(0)%&gt;%&lt;\/div&gt;&lt;\/div&gt;&lt;div class=&quot;weeklyHrsCol&quot;&gt;&lt;%=hrsVal%&gt;h &lt;%=minsVal%&gt;m&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  \t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page Member_View(usermailid) 
	 	 { 
 	 	 displayname = "Member View" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\twebDeviceConfig='{\"layout\":{\"style\":\"padding-right:0px;padding-top:0px;padding-bottom:0px;padding-left:0px;\",\"design\":\"fluid\",\"displayType\":\"plain\"}}'\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Member_View1'>\n\t<![CDATA[htmlpage Member_View1(usermailid)\ncontent\n&lt;%{\n\temployeeName = Add_Employee[Email == input.usermailid].Name;\n\t%&gt;\n&lt;style&gt;\n.topbar_dropdown#zc-app-dropdown a{\n\t\t\t\t\t\t\t\t\t  height:100%;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t  @media (max-height: 617px )\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t.firstRow {\n\t\t\t\t\t\t\t\t\t    height: 55px;\n\t\t\t\t\t\t\t\t\t\tmin-height: 55px;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t.secondRow {\n\t\t\t\t\t\t\t\t\t    height: 180px;\n\t\t\t\t\t\t\t\t\t\tmin-height: 180px;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t.thirdRow {\n\t\t\t\t\t\t\t\t\t    height: 340px;\n\t\t\t\t\t\t\t\t\t\tmin-height: 340px;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t    @media (max-width: 807px )\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t.firstRow, .chartDiv, .recentDiv{\n\t\t\t\t\t\t\t\t\t\tmin-width: 530px;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t.chartDiv{\n\t\t\t\t\t\t\t\t\t     border-right: 10px solid #eaeaea !important;\n\t\t\t\t\t\t\t\t\t\t box-sizing: border-box;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t   @media (max-width: 991px )\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t.chartDiv{\n\t\t\t\t\t\t\t\t\t  \t\tborder:none;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t  .page_content_wrapper {\n\t\t\t\t\t\t\t\t\t  background-color: #eaeaea;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t.row {\n\t\t\t\t\t\t\t\t\tmargin-left: 0px;\n\t\t\t\t\t\t\t\t\tmargin-right: 0px\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t.userdefinedCol\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t  padding-left: 0px;\n\t\t\t\t\t\t\t\t\tpadding-right: 0px\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t div{\n\t\t\t\t\t\t\t\t\t\tbox-sizing:border-box;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t &lt;\/style&gt;\n\t\t\t\t\t\t\t\t\t  &lt;div class=&quot;container-fluid&quot; style=&quot;padding-top:1%;padding-bottom:1%;background-color: #eaeaea;height:100vh&quot;&gt;\n\t\t\t\t\t\t\t\t\t  &lt;div class=&quot;row firstRow&quot; style=&quot;text-align: center;padding-top: 1%;background-color:#ffffff;height:9%;margin-bottom:1%;font-weight: lighter;font-size: 150%;color: black;box-sizing:border-box;&quot;&gt;&lt;%=employeeName%&gt; Logs&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  &lt;div class=&quot;row secondRow&quot; style=&quot;margin-bottom:1%;height:150px;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;iframe class=&quot;col-md-12 userdefinedCol&quot; style=&quot;&quot; name=&apos;WeeklyView&apos; width=&apos;100%&apos; frameborder=&apos;0&apos; scrolling=&apos;Yes&apos; src=&apos;&lt;%=zoho.appuri%&gt;view-embed\/Weekly_progress_bar?fromDate=&lt;%=zoho.currentdate%&gt;&amp;&amp;userMailID=&lt;%=usermailid%&gt;&apos; &gt;&lt;\/iframe&gt;    \n\t\t\t\t\t\t\t\t\t  \t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;div class=&quot;row thirdRow&quot; style=&quot;height:calc(87% - 150px);&quot;&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;iframe class=&quot;col-md-8 userdefinedCol chartDiv&quot; name=&apos;DateView&apos; style=&quot;height:100%;&quot; width=&apos;100%&apos; frameborder=&apos;0&apos; scrolling=&apos;No&apos; src=&apos;&lt;%=zoho.appuri%&gt;view-embed\/DayChart?dayVal=&lt;%=zoho.currentdate%&gt;&amp;&amp;userMailID=&lt;%=usermailid%&gt;&apos;&gt;&lt;\/iframe&gt; \n\t\t\t\t\t\t\t\t\t  \t\t&lt;div class=&quot;col-md-4 recentDiv&quot; style=&quot;padding-right:0px;padding-left:0px;height:100%;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  &lt;div style=&quot;background-color: #ffffff;height: 10%;font-size: 18px;color: rgba(0,0,0,0.9);font-weight: lighter;font-family: &apos;ProximaNova Regular&apos;,sans-serif;padding: 3% 0 0 5%;box-sizing:border-box;&quot;&gt;Recently Tracked Logs&lt;\/div&gt;\n&lt;%\n\trecentLogs = Add_Time_Logs[Submitted_By.Email == input.usermailid &amp;&amp; Status != &quot;Tracking Time&quot;] sort by Added_Time desc range from 1 to 5;\n\tif(recentLogs.count() &gt; 0)\n\t{\n\t\t%&gt;\n&lt;div style=&quot;height: 90%;box-sizing:border-box;background-color: #ffffff;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;ul style=&quot;height: 100%;    margin: 0;padding: 0 5%;padding-top:2%&quot;&gt;\n&lt;%\n\t\tcountVal = 0;\n\t\tcolorList = {&quot;warning&quot;,&quot;info&quot;,&quot;danger&quot;,&quot;success&quot;};\n\t\tfor each  eachLogs in recentLogs\n\t\t{\n\t\t\thr = eachLogs.Hours.getPrefix(&quot;:&quot;);\n\t\t\tmins = eachLogs.Hours.getSuffix(&quot;:&quot;);\n\t\t\t%&gt;\n&lt;li class=&quot;alert alert-block alert-&lt;%=colorList.get(countVal)%&gt;&quot; style=&quot;height: 15%;border-bottom: 1px solid rgba(193, 193, 193, 0.45);margin-bottom: 15px;overflow: hidden;text-overflow: ellipsis;width: 100%;white-space: nowrap;&quot;&gt;\n&lt;%\n\t\t\tif(eachLogs.Project_Name != null)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;span title=&quot;&lt;%=hr%&gt;h &lt;%=mins%&gt;m tracked for &lt;%=eachLogs.Job_Name.Job_Title%&gt; - &lt;%=eachLogs.Project_Name.Title%&gt;&quot;&gt;&lt;%=hr%&gt;h &lt;%=mins%&gt;m tracked for &lt;%=eachLogs.Job_Name.Job_Title%&gt; - &lt;%=eachLogs.Project_Name.Title%&gt;&lt;\/span&gt;\n&lt;%\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;span title=&quot;&lt;%=hr%&gt;h &lt;%=mins%&gt;m tracked for &lt;%=eachLogs.Job_Name.Job_Title%&gt;&quot;&gt;&lt;%=hr%&gt;h &lt;%=mins%&gt;m tracked for &lt;%=eachLogs.Job_Name.Job_Title%&gt;&lt;\/span&gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/li&gt;\n&lt;%\n\t\t\tif(countVal &gt;= 3)\n\t\t\t{\n\t\t\t\tcountVal = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcountVal = countVal + 1;\n\t\t\t}\n\t\t}\n\t\t%&gt;\n&lt;\/ul&gt; \n\t\t\t\t\t\t\t\t\t  \t\t&lt;\/div&gt;\n&lt;%\n\t}\n\telse\n\t{\n\t\t%&gt;\n&lt;div style=&quot;height: 90%;box-sizing:border-box;background-color: #ffffff;text-align: center;font-size: x-large;color: gainsboro;padding-top: 45%;&quot;&gt;No logs available&lt;\/div&gt;\n&lt;%\n\t}\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page DayChart(dayVal,userMailID) 
	 	 { 
 	 	 displayname = "DayChart" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\twebDeviceConfig='{\"layout\":{\"displayType\":\"card\",\"design\":\"fluid\",\"style\":\"padding-right:0px;padding-top:0px;padding-bottom:0px;padding-left:0px;\"}}'\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='DayChart1'>\n\t<![CDATA[htmlpage DayChart1(dayVal,userMailID)\ncontent\n&lt;%{\n\tdateVal = dayVal.toDate();\n\t%&gt;\n&lt;style&gt;\n.row {\n\t\t\t\t\t\t\t\t\tmargin-left: 0px;\n\t\t\t\t\t\t\t\t\tmargin-right: 0px\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t.container-fluid {\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t    margin-left: 0px;\n\t\t\t\t\t\t\t\t\t    padding-left: 0px;\n\t\t\t\t\t\t\t\t\t    padding-right: 0px;\n\t\t\t\t\t\t\t\t\theight:100vh;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t.calendarClass{\n\t\t\t\t\t\t\t\t\t\tdisplay:none;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdiv{\n\t\t\t\t\t\t\t\t\t\tbox-sizing:border-box;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t#checkbox_1{\n\t\t\t\t\t\t\t\t\t   width:12%;\n\t\t\t\t\t\t\t\t\t   height:22%;\n\t\t\t\t\t\t\t\t\t  cursor:pointer;\n\t\t\t\t\t\t\t\t\t   position:absolute;\n\t\t\t\t\t\t\t\t\t   opacity:0;\n\t\t\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t\t\t\tinput[type=checkbox]#checkbox_1:checked + iframe\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t  display:none;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\tinput[type=checkbox]#checkbox_1 + iframe\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t  display:block;\n\t\t\t\t\t\t\t\t\t  }\n \/* C5 changes starts here *\/\n.zc-pb-page-content-wrapper .elemContainment\n{\npadding:0px !important;\n}\n.column-container .zc-pb-tile-container\n{\npadding:0px !important;\n}\n.column-container .zc-pb-tile-container .zc-pb-tile-card\n{\n\tborder-radius: 0;\n}\n\/* C5 changes ends here *\/\n\t\t\t\t\t\t\t\t\tbody\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbackground-color: #eaeaea;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t  .chart {      margin-bottom: 0px;    padding: 0px;    display: table;    table-layout: fixed;    height: 100%;    background-image: linear-gradient(to top, rgba(0, 0, 0, 0.1) 2%, rgba(0, 0, 0, 0) 2%);    background-size: 100% 50px;}\n\t\t\t\t\t\t\t\t\t  .chart li {  position: relative;  display: table-cell;  vertical-align: bottom;  height: 200px; text-align: center;  content: attr(title);  word-wrap: break-word;}\n\t\t\t\t\t\t\t\t\t  .chart span {  margin: 0 1em;  display: block;  animation: draw 1s ease-in-out;}\n\t\t\t\t\t\t\t\t\t  .chart span:before {  position: absolute;  left: 0;  right: 0;  top: 100%; display: block;  text-align: center; padding: 0 2%; content: attr(title);  word-wrap: break-word;}@keyframes draw {  0% {    height: 0;  }}\n\t\t\t\t\t\t\t\t\t  &lt;\/style&gt;\n\t\t\t\t\t\t\t\t\t&lt;div class=&quot;container-fluid&quot; &gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \n\t\t\t\t\t\t\t\t\t&lt;div class=&quot;row&quot; style=&quot;padding:1%;height:100%;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  &lt;div class=&quot;row&quot; style=&quot;height:20%&quot;&gt;\n&lt;%\n\tlogHoursList = Add_Time_Logs[Status != &quot;Tracking Time&quot; &amp;&amp; Submitted_By.Email == input.userMailID &amp;&amp; Log_Date == dateVal].Hours.getAll();\n\ttotalTime = thisapp.TimeCalculations.totalHours(dateVal,logHoursList);\n\thrsVal = totalTime.getHour();\n\tminsVal = totalTime.getMinutes();\n\tloggedDate = dateVal.addDay(1);\n\tif(totalTime == loggedDate &amp;&amp; hrsVal == 0 &amp;&amp; minsVal == 0)\n\t{\n\t\thrsVal = 24;\n\t\tminsVal = 0;\n\t}\n\t%&gt;\n&lt;div class=&quot;col-md-12&quot; style=&quot;height:100%;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &lt;div style=&quot;height:100%;float:left;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &lt;span style=&quot;font-size: x-large;font-weight: bold;&quot;&gt;&lt;%=hrsVal%&gt;h &lt;%=minsVal%&gt;m&lt;\/span&gt;&lt;br&gt;&lt;span&gt;Total Time worked&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  \t\t\t\t\t&lt;div style=&quot;text-align:right;height:100%;float:right;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t&lt;input id=&quot;checkbox_1&quot; type=&quot;checkbox&quot; checked&gt;&lt;%=dateVal%&gt;&lt;\/input&gt;\n\t\t\t\t\t\t\t\t\t&lt;iframe class=&quot;calendarClass&quot; name=&apos;CalendarView&apos; style=&quot;min-height:175px;position: fixed;top: 10%;right: 3%;z-index: 1;&quot; width=&apos;40%&apos; frameborder=&apos;0&apos; scrolling=&apos;No&apos; src=&apos;&lt;%=zoho.appuri%&gt;view-embed\/CalendarPage?dateVal=&lt;%=dateVal%&gt;&amp;&amp;usermailid=&lt;%=userMailID%&gt;&apos; &gt;&lt;\/iframe&gt;    \n\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;&lt;\/div&gt;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t  &lt;div class=&quot;row&quot; style=&quot;height:75%&quot;&gt;\n&lt;%\n\tdayRec = Add_Time_Logs[Status != &quot;Tracking Time&quot; &amp;&amp; Submitted_By.Email == input.userMailID &amp;&amp; Log_Date == dateVal];\n\tif(dayRec.count() &gt; 0)\n\t{\n\t\t%&gt;\n&lt;ul class=&quot;col-xs-12 chart&quot;&gt;\n&lt;%\n\t\tfor each  eachRec in dayRec\n\t\t{\n\t\t\thrsVal = eachRec.Hours.getPrefix(&quot;:&quot;).toLong();\n\t\t\tminsVal = eachRec.Hours.getSuffix(&quot;:&quot;).toLong();\n\t\t\tpercentTime = (hrsVal * 60 + minsVal) \/ 1440 * 100;\n\t\t\tif(eachRec.Task == null)\n\t\t\t{\n\t\t\t\tspanTitle = eachRec.Job_Name.Job_Title;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tspanTitle = eachRec.Task.Task;\n\t\t\t}\n\t\t\t%&gt;\n&lt;li&gt;&lt;%=hrsVal%&gt;h &lt;%=minsVal%&gt;m\n\t\t\t\t\t\t\t\t\t  &lt;span style=&quot;height:&lt;%=percentTime%&gt;%;background: rgba(87, 169, 251,0.65);&quot; title=&quot;&lt;%=spanTitle%&gt;&quot;&gt;&lt;\/span&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/li&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/ul&gt;\n&lt;%\n\t}\n\telse\n\t{\n\t\t%&gt;\n&lt;div class=&quot;col-xs-12&quot; style=&quot;height: 100%; text-align: center; font-size: x-large; color: gainsboro; padding: 12%;&quot;&gt;No logs available &lt;br&gt; &lt;a href=&quot;&lt;%=zoho.appuri%&gt;#Form:Add_Time_Logs&quot; class=&quot;zc-live-primary-btn &quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-plus&quot; style=&quot;font-size: 11px;&quot;&gt;&lt;\/i&gt; Add Log&lt;\/a&gt;&lt;\/div&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t   &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page CalendarPage(dateVal,usermailid) 
	 	 { 
 	 	 displayname = "CalendarPage" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\twebDeviceConfig='{\"layout\":{\"displayType\":\"card\",\"design\":\"fluid\",\"style\":\"padding-right:0px;padding-top:0px;padding-bottom:0px;padding-left:0px;\"}}'\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='CalendarPage1'>\n\t<![CDATA[htmlpage CalendarPage1(dateVal,usermailid)\ncontent\n&lt;%{\n\tuserdate = dateVal.toDate();\n\tstr = thisapp.PageData.calendarFun(userdate,usermailid);\n\t%&gt;\n&lt;style&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t .caltable{\n\t\t\t\t\t\t\t\t\t\t\t\t width: 100%;\n\t\t\t\t\t\t\t\t\t\t\t\t background-color: white;\n\t\t\t\t\t\t\t\t\t\t\t\t border: 1px solid #eaeaea;\n\t\t\t\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t\t\t\t th.caltableHeading {\n\t\t\t\t\t\t\t\t\t\t\t\t    padding: 1%;\n\t\t\t\t\t\t\t\t\t\t\t\t    font-weight: bold;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\ttd.caltableCell {\n\t\t\t\t\t\t\t\t\t\t\t\t    text-align: center;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdiv{\n\t\t\t\t\t\t\t\t\t\tbox-sizing:border-box;\n\t\t\t\t\t\t\t\t\t}\n\/* C5 changes starts here *\/\n.zc-pb-page-content-wrapper .elemContainment\n{\npadding:0px !important;\n}\n.column-container .zc-pb-tile-container\n{\npadding:0px !important;\n}\n\/* C5 changes ends here *\/\n\t\t\t\t\t\t\t\t\t\t\t\t &lt;\/style&gt; \n\t\t\t\t\t\t\t\t\t\t\t\t &lt;%=str%&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page Timer 
	 	 { 
 	 	 displayname = "Timer" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\twebDeviceConfig='{\"layout\":{\"displayType\":\"card\",\"design\":\"fluid\",\"style\":\"padding-right:0px;padding-top:0px;padding-bottom:0px;padding-left:0px;\"}}'\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Timer1'>\n\t<![CDATA[htmlpage Timer1()\ncontent\n&lt;%{\n\t%&gt;\n&lt;style&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\tbody{\n\t\t\t\t\t\t\t\t\t\t\t\t\tbackground-color: #eaeaea;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\/* C5 changes starts here *\/\n.zc-pb-page-content-wrapper .elemContainment\n{\npadding:0px !important;\n}\n.column-container .zc-pb-tile-container\n{\npadding:0px !important;\n}\n.column-container .zc-pb-tile-container .zc-pb-tile-card\n{\n\tborder-radius: 0;\n}\n\/* C5 changes ends here *\/\n.form-choice-field{\n\twidth:200px !important;\n}\n\t\t\t\t\t\t\t\t\t\t\t\t   &lt;\/style&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;div style=&quot;width:100%;height:100%;&quot;&gt;\n&lt;%\n\trunningRec = Add_Time_Logs[Status == &quot;Tracking Time&quot; &amp;&amp; Added_User == zoho.loginuser &amp;&amp; Log_Date == zoho.currentdate];\n\tif(runningRec.count() == 0)\n\t{\n\t\t%&gt;\n&lt;div  style=&quot;width:100%;height:100%;&quot; elName=&apos;zc-component&apos; formLinkName=&apos;Start_Timer&apos; params=&apos;zc_Header=true&amp;amp;zc_SuccMsg=Data Added Successfully!&amp;amp;zc_SubmitVal=Submit&amp;amp;zc_ResetVal=Reset&apos;&gt;Loading Form...&lt;\/div&gt;\n&lt;%\n\t}\n\telse\n\t{\n\t\t%&gt;\n&lt;div style=&quot;width:100%;height:100%;&quot; elName=&apos;zc-component&apos; formLinkName=&apos;Stop_Timer&apos; params=&apos;zc_Header=true&amp;amp;zc_SuccMsg=Data Added Successfully!&amp;amp;zc_SubmitVal=Submit&amp;amp;zc_ResetVal=Reset&amp;recID=&lt;%=runningRec.ID%&gt;&apos;&gt;Loading Form...&lt;\/div&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
		form Add_Remarks
		{
			displayname = "Add Remarks"
			store data in zc = false
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have Completed_on
			(
    			type = date
				displayname = "Completed on"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			recID
			(
				type = number
	 			row = 1
	 			column = 1   
				width = medium
			)
			Remarks
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			actions
			{
				Complete
				(
   					type = button
   					displayname = "Complete"
				)
			}
		}
		list Weekly_Logs
		{
			displayName = "Weekly Logs"
   			hide = true
			show all rows from Add_weekly_Logs    
			(
				From_Date as "From"
				To_Date as "To"
				Logs.Project_Name as "Project Name"
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							From_Date as "From"
							To_Date as "To"
							Logs.Project_Name as "Project Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							From_Date as "From"
							To_Date as "To"
							Logs.Project_Name as "Project Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Daily_Logs
		{
			displayName = "Daily Logs"
   			hide = true
			show all rows from Add_Daily_Logs    
			(
				Log_Date_Daily as "Log Date"
				Logs.Project_Name as "Project Name"
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Log_Date_Daily as "Log Date"
							Logs.Project_Name as "Project Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Log_Date_Daily as "Log Date"
							Logs.Project_Name as "Project Name"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_projects
		{
			displayName = "All projects"
   			hide = true
			show all rows from Add_Project    
			(
				Title
				Description
				Project_Manager as "Project Manager"
				Project_Members as "Project Members"
				Jobs
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Title
							Description
							Project_Manager as "Project Manager"
							Project_Members as "Project Members"
							Jobs
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Title
							Description
							Project_Manager as "Project Manager"
							Project_Members as "Project Members"
							Jobs
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_jobs
		{
			displayName = "All jobs"
   			hide = true
			show all rows from Add_Job    
			(
				Project
				Job_Title as "Job Title"
				Start_Date as "Start Date"
				End_Date as "End Date"
				Description
				Assignees_Admin as "Assignees"
				Assignees
				Set_Reminder as "Reminder"
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Project
							Job_Title as "Job Title"
							Start_Date as "Start Date"
							End_Date as "End Date"
							Description
							Assignees_Admin as "Assignees"
							Assignees
							Set_Reminder as "Reminder"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Project
							Job_Title as "Job Title"
							Start_Date as "Start Date"
							End_Date as "End Date"
							Description
							Assignees_Admin as "Assignees"
							Assignees
							Set_Reminder as "Reminder"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_task
		{
			displayName = "All task"
   			hide = true
			show all rows from Add_Task    
			(
				Task
				Job
				Start_Date_Time as "Start Date-Time"
				End_Date_Time as "End Date-Time"
				Description
				Set_Reminder as "Reminder"
				Task_AddedBy as "Task AddedBy"
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Task
							Job
							Start_Date_Time as "Start Date-Time"
							End_Date_Time as "End Date-Time"
							Description
							Set_Reminder as "Reminder"
							Task_AddedBy as "Task AddedBy"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Task
							Job
							Start_Date_Time as "Start Date-Time"
							End_Date_Time as "End Date-Time"
							Description
							Set_Reminder as "Reminder"
							Task_AddedBy as "Task AddedBy"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Dashboard
	{
		icon = "ui-1-dashboard-half"
				 page Dashboard_Mobile 
	 	 { 
 	 	 displayname = "Dashboard" 

 	 	 icon = "ui-1-dashboard-half" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='html_snippet'>\n\t<![CDATA[htmlpage html_snippet()\ncontent\n&lt;%{\n\tdateVal = zoho.currentdate;\n\tweekStartDate = toStartOfWeek(dateVal);\n\tweekDaysList = {&quot;Sunday&quot;,&quot;Monday&quot;,&quot;TuesDay&quot;,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;,&quot;Saturday&quot;};\n\tweeklyMap = {&quot;Sunday&quot;:weekStartDate,&quot;Monday&quot;:weekStartDate.addDay(1),&quot;TuesDay&quot;:weekStartDate.addDay(2),&quot;Wednesday&quot;:weekStartDate.addDay(3),&quot;Thursday&quot;:weekStartDate.addDay(4),&quot;Friday&quot;:weekStartDate.addDay(5),&quot;Saturday&quot;:weekStartDate.addDay(6)};\n\tprevWeek = weekStartDate.subDay(1);\n\tnextWeek = weekStartDate.addDay(7);\n\tlogHoursList = Add_Time_Logs[Log_Date &gt;= weekStartDate &amp;&amp; Log_Date &lt;= weekStartDate.addDay(6) &amp;&amp; Submitted_By.Email == zoho.loginuserid &amp;&amp; Status != &quot;Tracking Time&quot;].Hours.getAll();\n\ttotalTime = thisapp.TimeCalculations.totalHours(weekStartDate,logHoursList);\n\tdayFromTotalTime = totalTime.getDayOfWeek();\n\thrsVal = (dayFromTotalTime - 1) * 24 + totalTime.getHour();\n\tminsVal = totalTime.getMinutes();\n\t%&gt;\n&lt;style&gt;\n\t\t\t\t\t\t\t\t\t.weeklyCol\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t  border:1px solid rgba(193, 193, 193, 0.37);\n\t\t\t\t\t\t\t\t\t  text-align:center;\n\t\t\t\t\t\t\t\t\t\ttext-overflow: ellipsis;\n\t\t\t\t\t\t\t\t\t    white-space: nowrap;\n\t\t\t\t\t\t\t\t\t    overflow: hidden;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t  .weeklyprogressCol\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\tpadding-left: 10%;\n\t\t\t\t\t\t\t\t\tpadding-right: 10%;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t  .weeklyHrsCol\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t  text-align: center;\n\t\t\t\t\t\t\t\t\t  width: 100%;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t#progressbar\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t  height: 20px;\n\t\t\t\t\t\t\t\t\t  background-color: #eee;\n\t\t\t\t\t\t\t\t\t  margin: 1% 0% 0.5%;\n\t\t\t\t\t\t\t\t\t  border-radius:5px;\n\t\t\t\t\t\t\t\t\t  clear: both;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t  #progress \n\t\t\t\t\t\t\t\t\t  {    \n\t\t\t\t\t\t\t\t\t  background: #b1e67a;\n\t\t\t\t\t\t\t\t\t  height: 100%;\n\t\t\t\t\t\t\t\t\t  max-width: 100%;\n\t\t\t\t\t\t\t\t\t  float: left;\n\t\t\t\t\t\t\t\t\t  border-radius:5px;\n\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t  \t&lt;\/style&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;div style=&quot;float:left;width: calc(100% - 10px);padding-left: 10px;&quot;&gt;\n\t&lt;span style=&quot;font-size: x-large;font-weight: bold;&quot;&gt;&lt;%=hrsVal%&gt;h &lt;%=minsVal%&gt;m&lt;\/span&gt;&lt;br&gt;&lt;span&gt;Total Time worked&lt;\/span&gt;\n\t&lt;\/div&gt;\n\t&lt;div class=&quot;secondcol&quot;&gt;\n&lt;%\n\tfor each  eachDay in weekDaysList\n\t{\n\t\tlogHoursList = Add_Time_Logs[Log_Date == weeklyMap.get(eachDay).toDate() &amp;&amp; Submitted_By.Email == zoho.loginuserid &amp;&amp; Status != &quot;Tracking Time&quot;].Hours.getAll();\n\t\ttotalTime = thisapp.TimeCalculations.totalHours(weeklyMap.get(eachDay).toDate(),logHoursList);\n\t\thrsVal = totalTime.getHour();\n\t\tminsVal = totalTime.getMinutes();\n\t\tloggedDate = weeklyMap.get(eachDay).toDate().addDay(1);\n\t\tif(totalTime == loggedDate &amp;&amp; hrsVal == 0 &amp;&amp; minsVal == 0)\n\t\t{\n\t\t\thrsVal = 24;\n\t\t\tminsVal = 0;\n\t\t}\n\t\tpercentTime = (hrsVal * 60 + minsVal) \/ 1440 * 100;\n\t\t%&gt;\n&lt;div style=&quot;float:left;width: calc(100% - 20px);margin: 10px;&quot;&gt;\n\t\t\t\t\t\t\t\t\t&lt;div class=&quot;weeklyCol&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &lt;span style=&quot;top:1%;position:relative;vertical-align:-webkit-baseline-middle;&quot;&gt;&lt;%=eachDay%&gt;&lt;br&gt;\n&lt;%\n\t\tif(weeklyMap.get(eachDay).toDate() &lt;= zoho.currentdate)\n\t\t{\n\t\t\t%&gt;\n&lt;a style=&quot;color: black;&quot; title=&quot;Add Daily Logs&quot; href=&quot;&lt;%=zoho.appuri%&gt;#Form:Add_Daily_Logs?Log_Date_Daily=&lt;%=weeklyMap.get(eachDay)%&gt;&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;&lt;%=weeklyMap.get(eachDay)%&gt;&lt;\/b&gt;&lt;\/a&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\t%&gt;\n&lt;b&gt;&lt;%=weeklyMap.get(eachDay)%&gt;&lt;\/b&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/span&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t&lt;div class=&quot;weeklyprogressCol&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t   &lt;div id=&apos;progressbar&apos;&gt;&lt;div id=&apos;progress&apos; style=&quot;width:&lt;%=percentTime%&gt;%; transition: width 5s ease;color:white;text-align:center;white-space: nowrap;&quot;&gt;&lt;%=percentTime.round(0)%&gt;%&lt;\/div&gt;&lt;\/div&gt;&lt;div class=&quot;weeklyHrsCol&quot;&gt;&lt;%=hrsVal%&gt;h &lt;%=minsVal%&gt;m&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='html_snippet1'>\n\t<![CDATA[htmlpage html_snippet1()\ndisplayname = &quot;html_snippet&quot;\ncontent\n&lt;%{\n\tdateVal = zoho.currentdate;\n\tlogHoursList = Add_Time_Logs[Status != &quot;Tracking Time&quot; &amp;&amp; Submitted_By.Email == zoho.loginuserid &amp;&amp; Log_Date == dateVal].Hours.getAll();\n\ttotalTime = thisapp.TimeCalculations.totalHours(dateVal,logHoursList);\n\thrsVal = totalTime.getHour();\n\tminsVal = totalTime.getMinutes();\n\tloggedDate = dateVal.addDay(1);\n\tif(totalTime == loggedDate &amp;&amp; hrsVal == 0 &amp;&amp; minsVal == 0)\n\t{\n\t\thrsVal = 24;\n\t\tminsVal = 0;\n\t}\n\t%&gt;\n&lt;style&gt;\n.chart {      margin-bottom: 0px;    padding: 0px;width:100%;    display: table;    table-layout: fixed;    height: 100%;    background-image: linear-gradient(to top, rgba(0, 0, 0, 0.1) 2%, rgba(0, 0, 0, 0) 2%);    background-size: 100% 50px;}\n\t\t\t\t\t\t\t\t\t  .chart li {  position: relative;  display: table-cell;  vertical-align: bottom;  height: 200px; text-align: center;  content: attr(title);  word-wrap: break-word;}\n\t\t\t\t\t\t\t\t\t  .chart span {  margin: 0 1em;  display: block;  animation: draw 1s ease-in-out;}\n\t\t\t\t\t\t\t\t\t  .chart span:before {  position: absolute;  left: 0;  right: 0;  top: 100%; display: block;  text-align: center; padding: 0 2%; content: attr(title);  word-wrap: break-word;}@keyframes draw {  0% {    height: 0;  }}\n\t\t\t\t\t\t\t\t\t  &lt;\/style&gt;\n\t&lt;div style=&quot;display:inline-block;width:100%;&quot;&gt;\n\t&lt;div style=&quot;float:left;padding-left:10px;&quot;&gt;\n\t&lt;span style=&quot;font-size: x-large;font-weight: bold;&quot;&gt;&lt;%=hrsVal%&gt;h &lt;%=minsVal%&gt;m&lt;\/span&gt;&lt;br&gt;&lt;span&gt;Total Time worked&lt;\/span&gt;\n&lt;\/div&gt;\n&lt;div style=&quot;text-align:right;float:right;padding:15px 10px 0px 0px;&quot;&gt;&lt;%=dateVal%&gt;&lt;\/div&gt;\n&lt;\/div&gt;\n&lt;div style=&quot;height:345px;width:calc(100% - 20px); padding: 10px;margin-bottom: 40px;&quot;&gt;\n&lt;%\n\tdayRec = Add_Time_Logs[Status != &quot;Tracking Time&quot; &amp;&amp; Submitted_By.Email == zoho.loginuserid &amp;&amp; Log_Date == dateVal];\n\tif(dayRec.count() &gt; 0)\n\t{\n\t\t%&gt;\n&lt;ul class=&quot;chart&quot;&gt;\n&lt;%\n\t\tfor each  eachRec in dayRec\n\t\t{\n\t\t\thrsVal = eachRec.Hours.getPrefix(&quot;:&quot;).toLong();\n\t\t\tminsVal = eachRec.Hours.getSuffix(&quot;:&quot;).toLong();\n\t\t\tpercentTime = (hrsVal * 60 + minsVal) \/ 1440 * 100;\n\t\t\tif(eachRec.Task == null)\n\t\t\t{\n\t\t\t\tspanTitle = eachRec.Job_Name.Job_Title;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tspanTitle = eachRec.Task.Task;\n\t\t\t}\n\t\t\t%&gt;\n&lt;li&gt;&lt;%=hrsVal%&gt;h &lt;%=minsVal%&gt;m\n\t\t\t\t\t\t\t\t\t  &lt;span style=&quot;height:&lt;%=percentTime%&gt;%;background: rgba(87, 169, 251,0.65);&quot; title=&quot;&lt;%=spanTitle%&gt;&quot;&gt;&lt;\/span&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/li&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/ul&gt;\n&lt;%\n\t}\n\telse\n\t{\n\t\t%&gt;\n&lt;div style=&quot;text-align: center; font-size: x-large; color: gainsboro;padding:20px;&quot;&gt;No logs available &lt;br&gt; &lt;a href=&quot;&lt;%=zoho.appuri%&gt;#Form:Add_Time_Logs&quot; class=&quot;zc-live-primary-btn &quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-plus&quot; style=&quot;font-size: 11px;&quot;&gt;&lt;\/i&gt; Add Log&lt;\/a&gt;&lt;\/div&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='html_snippet2'>\n\t<![CDATA[htmlpage html_snippet2()\ndisplayname = &quot;html_snippet&quot;\ncontent\n&lt;%{\n\t%&gt;\n&lt;style&gt;\n.tableHeading , .tableCell{\n\t\t\t\t\t\t\t\t\t      vertical-align: middle;\n\t\t\t\t\t\t\t\t\t    text-align: center;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t  .tableHeading{\n\t\t\t\t\t\t\t\t\t  font-weight:bold;\n\t\t\t\t\t\t\t\t\t  font-size:15px;\n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t.tableRow{\n\t\t\t\t\t\t\t\t\t\theight:35px;\n\t\t\t\t\t\t\t\t\t\tborder-bottom:1px solid #ddd;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n&lt;\/style&gt;\n&lt;div style=&quot;height:400px;margin-bottom:5px;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  \t\t\t&lt;div style=&quot;height: 10%;font-size: 18px;color: rgba(0,0,0,0.9);font-weight: lighter;font-family: &apos;ProximaNova Regular&apos;,sans-serif;padding-top: 1.5%;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  &lt;span style=&quot;padding-left:10px;&quot;&gt;Jobs&lt;\/span&gt;&lt;span style=&quot;float: right;font-size: 14px;padding-right:10px;&quot;&gt;&lt;a href=&quot;&lt;%=zoho.appuri%&gt;#Report:Jobs&quot; target=&quot;_blank&quot;&gt;View All&lt;\/a&gt; &lt;\/span&gt;&lt;\/div&gt;\n&lt;%\n\tjobsRec = Add_Job[Added_User == zoho.loginuser || Assignees.Email == zoho.loginuserid &amp;&amp; Status == &quot;Active&quot;] sort by Added_Time desc range from 1 to 8;\n\tif(jobsRec.count() &gt; 0)\n\t{\n\t\t%&gt;\n&lt;table class=&quot;table&quot; style=&quot;width:calc(100% - 20px);margin: 10px;border:1px solid #ddd;    border-collapse: collapse;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  &lt;tr class=&quot;tableRow&quot;&gt; \n\t\t\t\t\t\t\t\t\t  &lt;th class=&quot;tableHeading&quot;&gt;Jobs&lt;\/th&gt;\n\t\t\t\t\t\t\t\t\t  &lt;th class=&quot;tableHeading&quot;&gt;Project&lt;\/th&gt;\n\t\t\t\t\t\t\t\t\t  &lt;th class=&quot;tableHeading&quot;&gt;Start Date&lt;\/th&gt;\n\t\t\t\t\t\t\t\t\t  &lt;th class=&quot;tableHeading&quot;&gt;End Date&lt;\/th&gt;\n\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\tfor each  eachJob in jobsRec\n\t\t{\n\t\t\t%&gt;\n&lt;tr class=&quot;tableRow&quot;&gt; \n\t\t\t\t\t\t\t\t\t  &lt;td class=&quot;tableCell&quot;&gt;&lt;%=eachJob.Job_Title%&gt;&lt;\/td&gt;\n&lt;%\n\t\t\tif(eachJob.Project != null)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;td class=&quot;tableCell&quot;&gt;&lt;%=eachJob.Project.Title%&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;td class=&quot;tableCell&quot;&gt;-&lt;\/td&gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;td class=&quot;tableCell&quot;&gt;&lt;%=eachJob.Start_Date%&gt;&lt;\/td&gt;\n&lt;%\n\t\t\tif(eachJob.End_Date != null)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;td class=&quot;tableCell&quot;&gt;&lt;%=eachJob.End_Date%&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;td class=&quot;tableCell&quot;&gt;-&lt;\/td&gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/tr&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/table&gt;\n&lt;%\n\t}\n\telse\n\t{\n\t\t%&gt;\n&lt;div style=&quot;text-align: center;font-size: x-large;color: gainsboro;padding-top: 20%;&quot;&gt;No Jobs available&lt;br&gt; &lt;a href=&quot;#Form:Add_Job&quot; class=&quot;zc-live-primary-btn &quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-plus&quot; style=&quot;font-size: 11px;&quot;&gt;&lt;\/i&gt; Add Job&lt;\/a&gt;&lt;\/div&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='html_snippet4'>\n\t<![CDATA[htmlpage html_snippet4()\ndisplayname = &quot;html_snippet&quot;\ncontent\n&lt;%{\n\t%&gt;\n&lt;style&gt;\n.memberImg{\n\t\t\t\t\t\t\t\t\t  width: 50px;height: 45px;}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t  @media only screen and (max-width: 1256px ) and (min-width: 991px)\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t.memberImg{\n\t\t\t\t\t\t\t\t\t  \t\twidth: 33px;height: 35px;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t }\n\t.alertmsg{    padding: 15px;border: 1px solid transparent;border-radius: 4px;}\n\t.alertmsg-warning{    color: #8a6d3b; background-color: #fcf8e3;    border-color: #faebcc}\n\t.alertmsg-info{    color: #31708f; background-color: #d9edf7;    border-color: #bce8f1;}\n\t.alertmsg-danger{color: #a94442;background-color: #f2dede;border-color: #ebccd1;}\n\t.alertmsg-success{color: #3c763d;background-color: #dff0d8; border-color: #d6e9c6;}\n&lt;\/style&gt;\n&lt;div style=&quot;height:400px&quot;&gt;\n&lt;%\n\tmanagerRecCount = Add_Employee[Email == zoho.loginuserid &amp;&amp; Designation = &quot;Manager&quot;].count();\n\tif(managerRecCount &gt; 0)\n\t{\n\t\t%&gt;\n&lt;div style=&quot;height: 10%;font-size: 18px;color: rgba(0,0,0,0.9);font-weight: lighter;font-family: &apos;ProximaNova Regular&apos;,sans-serif;padding-top: 1.5%;padding-left: 10px;    box-sizing: border-box;&quot;&gt;Members&lt;\/div&gt;\n&lt;%\n\t\tempRec = Add_Employee[Reporting_To == zoho.loginuserid];\n\t\tif(empRec.count() &gt; 0)\n\t\t{\n\t\t\t%&gt;\n&lt;div style=&quot;height: 90%;background-color: #ffffff;overflow: auto;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  &lt;ul style=&quot;height: 90%;padding: 0 15px;list-style: none;&quot;&gt;\n&lt;%\n\t\t\tcountVal = 0;\n\t\t\tcolorList = {&quot;#ec407a&quot;,&quot;#536dfe&quot;,&quot;#80c784&quot;,&quot;#9675ce&quot;,&quot;#12a89d&quot;,&quot;#ff9000&quot;};\n\t\t\tfor each  eachemp in empRec\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;li style=&quot;margin-bottom: 10px;height: 15%;border-bottom: 1px solid rgba(193, 193, 193, 0.45);&quot;&gt; \n\t\t\t\t\t\t\t\t\t  &lt;div class=&quot;memberImg&quot; style=&quot;display: flex;align-items: center;justify-content: center;float: left;border-radius: 50%;background-color: &lt;%=colorList.get(countVal)%&gt;;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;i class=&quot;zc-li-solid users-single-05&quot; style=&quot;color: white;&quot;&gt;&lt;\/i&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  &lt;div style=&quot;float: right;width: calc(100% - 60px);line-height:40px;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;span style=&quot;float: left;&quot;&gt;&lt;%=eachemp.Name%&gt;&lt;\/span&gt; \n\t\t\t\t\t\t\t\t\t  \t\t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;\/li&gt;\n&lt;%\n\t\t\t\tif(countVal &gt;= 5)\n\t\t\t\t{\n\t\t\t\t\tcountVal = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcountVal = countVal + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/ul&gt; \n\t\t\t\t\t\t\t\t\t  \t\t&lt;\/div&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\t%&gt;\n&lt;div style=&quot;height: 90%;background-color: #ffffff;text-align: center;font-size: x-large;color: gainsboro;padding-top: 45%;&quot;&gt;No Members Available&lt;\/div&gt;\n&lt;%\n\t\t}\n\t}\n\telse\n\t{\n\t\t%&gt;\n&lt;div style=&quot;height: 10%;font-size: 18px;color: rgba(0,0,0,0.9);font-weight: lighter;font-family: &apos;ProximaNova Regular&apos;,sans-serif;padding-top: 1.5%;padding-left: 10px;    box-sizing: border-box;&quot;&gt;Recently Tracked Logs&lt;\/div&gt;\n&lt;%\n\t\trecentLogs = Add_Time_Logs[Submitted_By.Email == zoho.loginuserid &amp;&amp; Status != &quot;Tracking Time&quot;] sort by Added_Time desc range from 1 to 5;\n\t\tif(recentLogs.count() &gt; 0)\n\t\t{\n\t\t\t%&gt;\n&lt;div style=&quot;height: 90%;background-color: #ffffff;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;ul style=&quot;height: 100%;padding: 0 5%;padding-top:2%;list-style: none;&quot;&gt;\n&lt;%\n\t\t\tcountVal = 0;\n\t\t\tcolorList = {&quot;warning&quot;,&quot;info&quot;,&quot;danger&quot;,&quot;success&quot;};\n\t\t\tfor each  eachLogs in recentLogs\n\t\t\t{\n\t\t\t\thr = eachLogs.Hours.getPrefix(&quot;:&quot;);\n\t\t\t\tmins = eachLogs.Hours.getSuffix(&quot;:&quot;);\n\t\t\t\t%&gt;\n&lt;li class=&quot;alertmsg alertmsg-&lt;%=colorList.get(countVal)%&gt;&quot; style=&quot;margin-bottom: 15px;overflow: hidden;text-overflow: ellipsis;white-space: nowrap;&quot;&gt;\n&lt;%\n\t\t\t\tif(eachLogs.Project_Name != null)\n\t\t\t\t{\n\t\t\t\t\t%&gt;\n&lt;span title=&quot;&lt;%=hr%&gt;h &lt;%=mins%&gt;m tracked for &lt;%=eachLogs.Job_Name.Job_Title%&gt; - &lt;%=eachLogs.Project_Name.Title%&gt;&quot;&gt;&lt;%=hr%&gt;h &lt;%=mins%&gt;m tracked for &lt;%=eachLogs.Job_Name.Job_Title%&gt; - &lt;%=eachLogs.Project_Name.Title%&gt;&lt;\/span&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t%&gt;\n&lt;span title=&quot;&lt;%=hr%&gt;h &lt;%=mins%&gt;m tracked for &lt;%=eachLogs.Job_Name.Job_Title%&gt;&quot;&gt;&lt;%=hr%&gt;h &lt;%=mins%&gt;m tracked for &lt;%=eachLogs.Job_Name.Job_Title%&gt;&lt;\/span&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t\t%&gt;\n&lt;\/li&gt;\n&lt;%\n\t\t\t\tif(countVal &gt;= 3)\n\t\t\t\t{\n\t\t\t\t\tcountVal = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcountVal = countVal + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/ul&gt; \n\t\t\t\t\t\t\t\t\t  \t\t&lt;\/div&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\t%&gt;\n&lt;div style=&quot;height: 90%;background-color: #ffffff;text-align: center;font-size: x-large;color: gainsboro;padding-top: 4545%;&quot;&gt;No Logs Available&lt;\/div&gt;\n&lt;%\n\t\t}\n\t}\n\t%&gt;\n&lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page Dashboard 
	 	 { 
 	 	 displayname = "Dashboard" 

 	 	 icon = "" 
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\twebDeviceConfig='{\"layout\":{\"style\":\"padding-right:0px;padding-top:0px;padding-bottom:0px;padding-left:0px;\",\"design\":\"fluid\",\"displayType\":\"plain\"}}'\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Dashboard1'>\n\t<![CDATA[htmlpage Dashboard1()\ncontent\n&lt;%{\n\t%&gt;\n&lt;style&gt;\n\t\t\t\t\t\t\t\t\t  .topbar_dropdown#zc-app-dropdown a{\n\t\t\t\t\t\t\t\t\t  height:100%;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t  .borderCol{\n\t\t\t\t\t\t\t\t\t     border-right: 5px solid #eaeaea !important;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t   @media (max-width: 991px )\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t.borderCol{\n\t\t\t\t\t\t\t\t\t  \t\tborder:none;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t .memberImg{\n\t\t\t\t\t\t\t\t\t  width: 50px;height: 45px;}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t  @media only screen and (max-width: 1256px ) and (min-width: 991px)\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t.memberImg{\n\t\t\t\t\t\t\t\t\t  \t\twidth: 33px;height: 35px;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t  .page_content_wrapper {\n\t\t\t\t\t\t\t\t\t  background-color: #eaeaea;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t  .row {\n\t\t\t\t\t\t\t\t\tmargin-left: 0px;\n\t\t\t\t\t\t\t\t\tmargin-right: 0px\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t.userdefinedCol\n\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t  padding-left: 0px;\n\t\t\t\t\t\t\t\t\tpadding-right: 0px\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t.tableHeading , .tableCell{\n\t\t\t\t\t\t\t\t\t      vertical-align: middle;\n\t\t\t\t\t\t\t\t\t    text-align: center;\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t  .tableHeading{\n\t\t\t\t\t\t\t\t\t  font-weight:bold;\n\t\t\t\t\t\t\t\t\t  font-size:15px;\n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t &lt;\/style&gt;\n&lt;%\n\tthisapp.ManageUsers.addEmployee();\n\tmanagerRecCount = Add_Employee[Email == zoho.loginuserid &amp;&amp; Designation = &quot;Manager&quot;].count();\n\tif(managerRecCount &gt; 0 &amp;&amp; Add_Project[Added_User == zoho.loginuser].count() == 0)\n\t{\n\t\topenUrl(&quot;#Form:Add_Project&quot;,&quot;popup window&quot;);\n\t}\n\t%&gt;\n&lt;div class=&quot;container-fluid&quot; style=&quot;padding-top:1%;padding-bottom:1%;background-color: #eaeaea;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;div class=&quot;row&quot; style=&quot;margin-bottom:0.5%;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;iframe class=&quot;col-md-12 userdefinedCol&quot; name=&apos;WeeklyView&apos; style=&quot;min-height:155px;height:155px;&quot; width=&apos;100%&apos; frameborder=&apos;0&apos; scrolling=&apos;Yes&apos; src=&apos;&lt;%=zoho.appuri%&gt;view-embed\/Weekly_progress_bar?fromDate=&lt;%=zoho.currentdate%&gt;&amp;&amp;userMailID=&lt;%=zoho.loginuserid%&gt;&apos; &gt;&lt;\/iframe&gt;    \n\t\t\t\t\t\t\t\t\t  \t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  \t&lt;div class=&quot;row&quot; style=&quot;margin-bottom:0.5%;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;div class=&quot;col-md-7 userdefinedCol borderCol&quot;&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;iframe width=&quot;100%&quot;  name=&apos;DateView&apos; style=&quot;min-height:345px;&quot;  frameborder=&apos;0&apos; scrolling=&apos;No&apos; src=&apos;&lt;%=zoho.appuri%&gt;view-embed\/DayChart?dayVal=&lt;%=zoho.currentdate%&gt;&amp;&amp;userMailID=&lt;%=zoho.loginuserid%&gt;&apos;&gt;&lt;\/iframe&gt; \n\t\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;div class=&quot;col-md-5 userdefinedCol&quot;&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;iframe width=&quot;100%&quot; name=&apos;TimerForm&apos; style=&quot;min-height:345px;&quot; frameborder=&apos;0&apos; scrolling=&apos;No&apos; src=&apos;&lt;%=zoho.appuri%&gt;view-embed\/Timer&apos;&gt;&lt;\/iframe&gt; \n\t\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  \t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  \t&lt;div class=&quot;row&quot;&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;div class=&quot;col-md-8 borderCol&quot; style=&quot;background-color: #ffffff;height:400px;margin-bottom:5px;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  \t\t\t&lt;div style=&quot;height: 10%;font-size: 18px;color: rgba(0,0,0,0.9);font-weight: lighter;font-family: &apos;ProximaNova Regular&apos;,sans-serif;padding-top: 1.5%;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  &lt;span&gt;Jobs&lt;\/span&gt;&lt;span style=&quot;float: right;font-size: 14px;&quot;&gt;&lt;a href=&quot;&lt;%=zoho.appuri%&gt;#Report:Jobs&quot; target=&quot;_blank&quot;&gt;View All&lt;\/a&gt; &lt;\/span&gt;&lt;\/div&gt;\n&lt;%\n\tjobsRec = Add_Job[Added_User == zoho.loginuser || Assignees.Email == zoho.loginuserid &amp;&amp; Status == &quot;Active&quot;] sort by Added_Time desc range from 1 to 8;\n\tif(jobsRec.count() &gt; 0)\n\t{\n\t\t%&gt;\n&lt;table class=&quot;table&quot; style=&quot;margin-top: 1%;border:1px solid #ddd;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  &lt;tr class=&quot;tableRow&quot;&gt; \n\t\t\t\t\t\t\t\t\t  &lt;th class=&quot;tableHeading&quot;&gt;Jobs&lt;\/th&gt;\n\t\t\t\t\t\t\t\t\t  &lt;th class=&quot;tableHeading&quot;&gt;Project&lt;\/th&gt;\n\t\t\t\t\t\t\t\t\t  &lt;th class=&quot;tableHeading&quot;&gt;Start Date&lt;\/th&gt;\n\t\t\t\t\t\t\t\t\t  &lt;th class=&quot;tableHeading&quot;&gt;End Date&lt;\/th&gt;\n\t\t\t\t\t\t\t\t\t  &lt;th class=&quot;tableHeading&quot;&gt;Complete&lt;\/th&gt;\n\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\tfor each  eachJob in jobsRec\n\t\t{\n\t\t\t%&gt;\n&lt;tr class=&quot;tableRow&quot;&gt; \n\t\t\t\t\t\t\t\t\t  &lt;td class=&quot;tableCell&quot;&gt;&lt;%=eachJob.Job_Title%&gt;&lt;\/td&gt;\n&lt;%\n\t\t\tif(eachJob.Project != null)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;td class=&quot;tableCell&quot;&gt;&lt;%=eachJob.Project.Title%&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;td class=&quot;tableCell&quot;&gt;-&lt;\/td&gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;td class=&quot;tableCell&quot;&gt;&lt;%=eachJob.Start_Date%&gt;&lt;\/td&gt;\n&lt;%\n\t\t\tif(eachJob.End_Date != null)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;td class=&quot;tableCell&quot;&gt;&lt;%=eachJob.End_Date%&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;td class=&quot;tableCell&quot;&gt;-&lt;\/td&gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;td class=&quot;tableCell&quot;&gt;\n&lt;%\n\t\t\tif(eachJob.Added_User == zoho.loginuser)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;a class=&quot;zc-custom-btn zc_transition&quot; href=&quot;#Form:Add_Remarks?recID=&lt;%=eachJob.ID%&gt;&amp;&amp;zc_LoadIn=dialog&quot;&gt;Complete&lt;\/a&gt;\n&lt;%\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;a style=&quot;pointer-events: none;opacity: 0.3;&quot; class=&quot;zc-custom-btn zc_transition&quot; href=&quot;#Form:Add_Remarks?recID=&lt;%=eachJob.ID%&gt;&amp;&amp;zc_LoadIn=dialog&quot;&gt;Complete&lt;\/a&gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/td&gt; \n\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/table&gt;\n&lt;%\n\t}\n\telse\n\t{\n\t\t%&gt;\n&lt;div style=&quot;text-align: center;font-size: x-large;color: gainsboro;padding-top: 20%;&quot;&gt;No Jobs available&lt;br&gt; &lt;a href=&quot;#Form:Add_Job&quot; class=&quot;zc-live-primary-btn &quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-plus&quot; style=&quot;font-size: 11px;&quot;&gt;&lt;\/i&gt; Add Job&lt;\/a&gt;&lt;\/div&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  \t&lt;div class=&quot;col-md-4&quot; style=&quot;padding-right:0px;padding-left:0px;height:400px;&quot;&gt;\n&lt;%\n\tif(managerRecCount &gt; 0)\n\t{\n\t\t%&gt;\n&lt;div style=&quot;box-sizing:border-box;background-color: #ffffff;height: 10%;font-size: 18px;color: rgba(0,0,0,0.9);font-weight: lighter;font-family: &apos;ProximaNova Regular&apos;,sans-serif;padding: 3% 0 0 5%;&quot;&gt;Members&lt;\/div&gt;\n&lt;%\n\t\tempRec = Add_Employee[Reporting_To == zoho.loginuserid];\n\t\tif(empRec.count() &gt; 0)\n\t\t{\n\t\t\t%&gt;\n&lt;div style=&quot;height: 90%;background-color: #ffffff;overflow: auto;box-sizing:border-box;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  &lt;ul style=&quot;height: 94%;    margin: 0;margin-top:3%;padding: 0 5%;list-style: none;&quot;&gt;\n&lt;%\n\t\t\tcountVal = 0;\n\t\t\tcolorList = {&quot;#ec407a&quot;,&quot;#536dfe&quot;,&quot;#80c784&quot;,&quot;#9675ce&quot;,&quot;#12a89d&quot;,&quot;#ff9000&quot;};\n\t\t\tfor each  eachemp in empRec\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;li style=&quot;height: 15%;border-bottom: 1px solid rgba(193, 193, 193, 0.45);&quot;&gt; \n\t\t\t\t\t\t\t\t\t  &lt;div class=&quot;memberImg&quot; style=&quot;display: flex;align-items: center;justify-content: center;float: left;border-radius: 50%;background-color: &lt;%=colorList.get(countVal)%&gt;;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;i class=&quot;fa fa-user&quot; style=&quot;color: white;&quot;&gt;&lt;\/i&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  &lt;div style=&quot;float: right;width: calc(100% - 60px);line-height:40px;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;span style=&quot;float: left;&quot;&gt;&lt;%=eachemp.Name%&gt;&lt;\/span&gt; \n\t\t\t\t\t\t\t\t\t  \t\t&lt;span style=&quot;float: right;padding-right: 3%;&quot;&gt; \n\t\t\t\t\t\t\t\t\t  \t\t&lt;a href=&quot;&lt;%=zoho.appuri%&gt;#View:Member_View?usermailid=&lt;%=eachemp.Email%&gt;&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-arrow-right&quot;&gt;&lt;\/i&gt;&lt;\/a&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;\/span&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;\/li&gt;\n&lt;%\n\t\t\t\tif(countVal &gt;= 5)\n\t\t\t\t{\n\t\t\t\t\tcountVal = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcountVal = countVal + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/ul&gt; \n\t\t\t\t\t\t\t\t\t  \t\t&lt;\/div&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\t%&gt;\n&lt;div style=&quot;height:90%;box-sizing:border-box;background-color: #ffffff;text-align: center;font-size: x-large;color: gainsboro;padding-top: 40%;&quot;&gt;No members available&lt;\/div&gt;\n&lt;%\n\t\t}\n\t}\n\telse\n\t{\n\t\t%&gt;\n&lt;div style=&quot;background-color: #ffffff;height: 10%;box-sizing:border-box;font-size: 18px;color: rgba(0,0,0,0.9);font-weight: lighter;font-family: &apos;ProximaNova Regular&apos;,sans-serif;padding: 3% 0 0 5%;&quot;&gt;Recently Tracked Logs&lt;\/div&gt;\n&lt;%\n\t\trecentLogs = Add_Time_Logs[Submitted_By.Email == zoho.loginuserid &amp;&amp; Status != &quot;Tracking Time&quot;] sort by Added_Time desc range from 1 to 5;\n\t\tif(recentLogs.count() &gt; 0)\n\t\t{\n\t\t\t%&gt;\n&lt;div style=&quot;height: 90%;background-color: #ffffff;box-sizing:border-box;&quot;&gt;\n\t\t\t\t\t\t\t\t\t  \t\t&lt;ul style=&quot;height: 100%;padding: 0 5%;padding-top:2%;    margin: 0;list-style: none;&quot;&gt;\n&lt;%\n\t\t\tcountVal = 0;\n\t\t\tcolorList = {&quot;warning&quot;,&quot;info&quot;,&quot;danger&quot;,&quot;success&quot;};\n\t\t\tfor each  eachLogs in recentLogs\n\t\t\t{\n\t\t\t\thr = eachLogs.Hours.getPrefix(&quot;:&quot;);\n\t\t\t\tmins = eachLogs.Hours.getSuffix(&quot;:&quot;);\n\t\t\t\t%&gt;\n&lt;li class=&quot;alert alert-block alert-&lt;%=colorList.get(countVal)%&gt;&quot; style=&quot;height: 15%;border-bottom: 1px solid rgba(193, 193, 193, 0.45);overflow: hidden;text-overflow: ellipsis;width: 100%;white-space: nowrap;&quot;&gt;\n&lt;%\n\t\t\t\tif(eachLogs.Project_Name != null)\n\t\t\t\t{\n\t\t\t\t\t%&gt;\n&lt;span title=&quot;&lt;%=hr%&gt;h &lt;%=mins%&gt;m tracked for &lt;%=eachLogs.Job_Name.Job_Title%&gt; - &lt;%=eachLogs.Project_Name.Title%&gt;&quot;&gt;&lt;%=hr%&gt;h &lt;%=mins%&gt;m tracked for &lt;%=eachLogs.Job_Name.Job_Title%&gt; - &lt;%=eachLogs.Project_Name.Title%&gt;&lt;\/span&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t%&gt;\n&lt;span title=&quot;&lt;%=hr%&gt;h &lt;%=mins%&gt;m tracked for &lt;%=eachLogs.Job_Name.Job_Title%&gt;&quot;&gt;&lt;%=hr%&gt;h &lt;%=mins%&gt;m tracked for &lt;%=eachLogs.Job_Name.Job_Title%&gt;&lt;\/span&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t\t%&gt;\n&lt;\/li&gt;\n&lt;%\n\t\t\t\tif(countVal &gt;= 3)\n\t\t\t\t{\n\t\t\t\t\tcountVal = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcountVal = countVal + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/ul&gt; \n\t\t\t\t\t\t\t\t\t  \t\t&lt;\/div&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\t%&gt;\n&lt;div style=&quot;height:90%;background-color: #ffffff;text-align: center;font-size: x-large;color: gainsboro;padding-top: 40%;box-sizing:border-box;&quot;&gt;No logs available&lt;\/div&gt;\n&lt;%\n\t\t}\n\t}\n\t%&gt;\n&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
	}
	section Logs
	{
		icon = "users-2-a-time"
		form Add_Time_Logs
		{
			displayname = "Add Time Logs"
			success message = "Your time log has been added successfully!"
			field alignment = left
			feature property = 32
			JobID
			(
				type = number
	 			row = 1
	 			column = 1   
				width = medium
			)
			Project_Name
			(
				type = picklist
				displayname = "Project Name"
				values  = Add_Project[Project_Manager.Email == zoho.loginuserid || Project_Members.Email == zoho.loginuserid].ID
    			displayformat = [Title]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Job_Name
			(
				type = picklist
				displayname = "Job Name"
				values  = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID
    			displayformat = [Job_Title]
				allow new entries = true
				[
					displayname = "Add New"
				]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Task
			(
				type = picklist
				values  = Add_Task[Added_User == zoho.loginuser].ID
    			displayformat = [Task]
				allow new entries = true
				[
					displayname = "Add New"
				]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Description
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Log_Date
			(
    			type = date
				displayname = "Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Track_as
			(
				type = radiobuttons
				displayname = "Track as"
				values = {"Hours", "Start & End", "Start Timer"}
				initial value = "Hours"
				layout = 3
	 			row = 1
	 			column = 1   
				width = medium
			)
			Start_Time
			(
    			type = text
				displayname = "Start Time"
				initial value = "00:00"
	 			row = 1
	 			column = 1   
				width = medium
			)
			End_Time
			(
    			type = text
				displayname = "End Time"
				initial value = "00:00"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Hours
			(
    			type = text
				initial value = "00:00"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Status
			(
				type = picklist
				values = {"Tracking Time", "Tracked"}
				initial value = "Tracked"
	 			row = 1
	 			column = 1   
				width = medium
			)
			TimerStopAt
			(
    			type = datetime
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			Submitted_By
			(
				type = picklist
				displayname = "Submitted By"
				values  = Add_Employee.ID
    			displayformat = [Email]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Project_Manager
			(
				type = picklist
				displayname = "Project Manager"
				values  = Add_Employee.ID
    			displayformat = [Email]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			plain
			(
    			type = plaintext
				value = "<br />"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_Daily_Logs
		{
			displayname = "Add Daily Logs"
			success message = "Your daily logs has been added successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Log_Date_Daily
			(
    			type = date
				displayname = "Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			Logs
			(
				type = grid
	    
				Project_Name
				(
					type = picklist
					displayname = "Project Name"
					values  = Add_Project[Project_Manager.Email == zoho.loginuserid || Project_Members.Email == zoho.loginuserid].ID
    				displayformat = [Title]
					searchable = true
					sortorder = ascending
					width = medium
				)
				must have Job_Name
				(
					type = picklist
					displayname = "Job Name"
					values  = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID
    				displayformat = [Job_Title]
					allow new entries = true
					[
						displayname = "Add New"
					]
					searchable = true
					sortorder = ascending
					width = medium
				)
				Task
				(
					type = picklist
					values  = Add_Task[Added_User == zoho.loginuser].ID
    				displayformat = [Task]
					allow new entries = true
					[
						displayname = "Add New"
					]
					searchable = true
					sortorder = ascending
					width = medium
				)
				Description
				(
    				type = textarea
					height = 100px
					width = medium
				)
				must have Hours
				(
    				type = text
					initial value = "00:00"
					width = medium
				)
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-1-circle-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_weekly_Logs
		{
			displayname = "Add weekly Logs"
			success message = "Your weekly logs has been added successfully!"
			field alignment = left
			feature property = 32
			must have From_Date
			(
    			type = date
				displayname = "From"
				alloweddays = 0
	 			row = 1
	 			column = 1   
				width = medium
			)
			To_Date
			(
    			type = date
				displayname = "To"
				alloweddays = 6
	 			row = 1
	 			column = 1   
				width = medium
			)
			Logs
			(
				type = grid
	    
				Project_Name
				(
					type = picklist
					displayname = "Project Name"
					values  = Add_Project[Project_Manager.Email == zoho.loginuserid || Project_Members.Email == zoho.loginuserid].ID
    				displayformat = [Title]
					searchable = true
					sortorder = ascending
					width = medium
				)
				must have Job_Name
				(
					type = picklist
					displayname = "Job Name"
					values  = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID
    				displayformat = [Job_Title]
					allow new entries = true
					[
						displayname = "Add New"
					]
					searchable = true
					sortorder = ascending
					width = medium
				)
				Task
				(
					type = picklist
					values  = Add_Task[Added_User == zoho.loginuser].ID
    				displayformat = [Task]
					allow new entries = true
					[
						displayname = "Add New"
					]
					searchable = true
					sortorder = ascending
					width = medium
				)
				must have Sunday
				(
    				type = text
					initial value = "00:00"
					width = medium
				)
				must have Monday
				(
    				type = text
					initial value = "00:00"
					width = medium
				)
				must have Tuesday
				(
    				type = text
					initial value = "00:00"
					width = medium
				)
				must have Wednesday
				(
    				type = text
					initial value = "00:00"
					width = medium
				)
				must have Thursday
				(
    				type = text
					initial value = "00:00"
					width = medium
				)
				must have Friday
				(
    				type = text
					initial value = "00:00"
					width = medium
				)
				must have Saturday
				(
    				type = text
					initial value = "00:00"
					width = medium
				)
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-3-calendar-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		calendar My_Logs
		{
			displayName = "My Logs"
			show all rows from Add_Time_Logs  [Submitted_By.Email == zoho.loginuserid]  
			(
				End_Time as "End Time"
				Submitted_By as "Submitted By"
				Project_Manager as "Project Manager"
				Description
				Project_Name as "Project Name"
				Task
				Track_as as "Track as"
				Hours
				Task.Task_AddedBy as "Task AddedBy"
				Submitted_By.Email
				Job_Name as "Job Name"
				Status
				Start_Time as "Start Time"
				Log_Date as "Date"
			)
			filters
			(
				Status
				Track_as
				Job_Name
			)
			options
			(
				display type = month
				week start day = sunday
				display field = Job_Name
				start date = Log_Date
				default date 
				(
	    			day   = Today
	    			month = Currentmonth
	    			year  = Currentyear
				)
				icon = "ui-1-calendar-check-59"
			)
			custom actions
			(
				"Stop Timer"
				(
	  			workflow = Stop_Timer
				show action in view header = true
				success message = ""
				condition = (Status == "Tracking Time")
				)
			)
			quickview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = 4
		     			title = "Overview"
						fields
						(
							Log_Date as "Date"
							Job_Name as "Job Name"
							Status
							Hours
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								"Stop Timer"
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								"Stop Timer"
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Log_Date as "Date"
							Project_Name as "Project Name"
							Job_Name as "Job Name"
							Task
							Description
							Track_as as "Track as"
							Start_Time as "Start Time"
							End_Time as "End Time"
							Hours
							Status
							Submitted_By as "Submitted By"
							Project_Manager as "Project Manager"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
			 			"Stop Timer"
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Team_Logs
		{
			displayName = "Team Logs"
			show all rows from Add_Time_Logs  [Submitted_By.Reporting_To == zoho.loginuserid || Project_Manager.Email == zoho.loginuserid]  
			(
				Log_Date as "Date"
				Description
				Start_Time as "Start Time"
				End_Time as "End Time"
				Project_Manager as "Project Manager"
				Project_Name as "Project Name"
				Track_as as "Track as"
				Task
				Hours
				Job_Name as "Job Name"
				Submitted_By as "Submitted By"
				Status
			)
			filters
			(
				Status
				Track_as
			)
			group by
			(
				Log_Date ascending
			)
			options
			(
				icon = "ui-1-calendar-grid-61"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Log_Date as "Date"
							Project_Name as "Project Name"
							Job_Name as "Job Name"
							Task
							Hours
							Status
							Submitted_By as "Submitted By"
							Project_Manager as "Project Manager"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Log_Date as "Date"
							Project_Name as "Project Name"
							Job_Name as "Job Name"
							Task
							Description
							Track_as as "Track as"
							Start_Time as "Start Time"
							End_Time as "End Time"
							Hours
							Status
							Submitted_By as "Submitted By"
							Project_Manager as "Project Manager"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list All_Logs
		{
			displayName = "All Logs"
			show all rows from Add_Time_Logs    
			(
				Log_Date as "Date"
				Description
				Track_as as "Track as"
				Start_Time as "Start Time"
				End_Time as "End Time"
				Project_Manager as "Project Manager"
				Project_Name as "Project Name"
				Task
				Submitted_By.Designation
				Job_Name as "Job Name"
				Submitted_By as "Submitted By"
				Hours
				Status
			)
			filters
			(
				Status
				Track_as
			)
			group by
			(
				Log_Date ascending
				Submitted_By.Designation ascending
			)
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Log_Date as "Date"
							Project_Name as "Project Name"
							Job_Name as "Job Name"
							Task
							Hours
							Status
							Submitted_By as "Submitted By"
							Project_Manager as "Project Manager"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Log_Date as "Date"
							Project_Name as "Project Name"
							Job_Name as "Job Name"
							Task
							Description
							Track_as as "Track as"
							Start_Time as "Start Time"
							End_Time as "End Time"
							Hours
							Status
							Submitted_By as "Submitted By"
							Project_Manager as "Project Manager"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Jobs_Tasks
	{
		displayname= "Jobs/Tasks"
		icon = "education-books-46"
		list Projects
		{
			displayName = "Projects"
			show all rows from Add_Project  [Added_User == zoho.loginuser]  
			(
				Title
				Description
				Project_Manager as "Project Manager"
				Project_Members as "Project Members"
			)
			options
			(
				icon = "shopping-list"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Title
							Description
							Project_Manager as "Project Manager"
							Project_Members as "Project Members"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Title
							Description
							Project_Manager as "Project Manager"
							Project_Members as "Project Members"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Jobs
		{
			displayName = "Jobs"
			show all rows from Add_Job  [Added_User == zoho.loginuser || Assignees.Email == zoho.loginuserid]  
			(
				Job_Title as "Job Title"
				Project
				Start_Date as "Start Date"
				End_Date as "End Date"
				Description
				Set_Reminder as "Reminder"
				Assignees
				Status
				Remarks
				custom action "Complete"
				(
	  			workflow = Complete
				show action in view header = true
				column header = "Complete"
				success message = ""
				condition = (Status == "Active" && Added_User == zoho.loginuser)
				)
			)
			filters
			(
				Assignees
				Project
			)
			group by
			(
				Status ascending
			)
			options
			(
				icon = "files-archive-paper-check"
	 		)
			conditional formatting
			(
				"overDueAlert"
				{
				condition = (End_Date > zoho.currentdate)
				fields = [End_Date]
				format = "color:#e64d3b;background-color:#ffffff;"
				}
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Job_Title as "Job Title"
							Project
							Start_Date as "Start Date"
							End_Date as "End Date"
							Status
				"Complete"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								"Complete"
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Job_Title as "Job Title"
							Project
							Description
							Start_Date as "Start Date"
							End_Date as "End Date"
							Set_Reminder as "Reminder"
							Assignees
							Status
							Remarks
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
			 			"Complete"
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Tasks
		{
			displayName = "Tasks"
			show all rows from Add_Task  [Added_User == zoho.loginuser]  
			(
				Task
				Job
				Start_Date_Time as "Start Date-Time"
				End_Date_Time as "End Date-Time"
				Description
				Set_Reminder as "Reminder"
				Job.Status
			)
			filters
			(
				Job
			)
			group by
			(
				Job.Status ascending
			)
			options
			(
				icon = "education-paper"
	 		)
			conditional formatting
			(
				"overDueAlert"
				{
				condition = (End_Date_Time > zoho.currentdate)
				fields = [End_Date_Time]
				format = "color:#e64d3b;background-color:#ffffff;"
				}
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Task
							Job
							Start_Date_Time as "Start Date-Time"
							End_Date_Time as "End Date-Time"
							Job.Status as "Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Task
							Job
							Start_Date_Time as "Start Date-Time"
							End_Date_Time as "End Date-Time"
							Description
							Set_Reminder as "Reminder"
							Job.Status as "Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Admin
	{
		icon = "ui-1-lock-circle"
		list Employees
		{
			displayName = "Employees"
			show all rows from Add_Employee    
			(
				Name 
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				Email
				Designation
				Reporting_To as "Reporting To"
			)
			filters
			(
				Designation
				Reporting_To
			)
			group by
			(
				Designation ascending
			)
			options
			(
				icon = "users-multiple-11"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Name
							Email
							Designation
							Reporting_To as "Reporting To"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Email
							Designation
							Reporting_To as "Reporting To"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Add_Employee
		{
			displayname = "Add Employee"
			success message = "New Employee Added Successfully!"
			field alignment = left
			feature property = 32
			must have Name
			(
    			type = name
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 3
	 			column = 1   
				width = medium
			)
			must have unique Email
			(
    			type = email
	 			row = 4
	 			column = 1   
				width = medium
			)
			must have Designation
			(
				type = picklist
				values = {"Member", "Manager"}
	 			row = 5
	 			column = 1   
				width = medium
			)
			Reporting_To
			(
				type = picklist
				displayname = "Reporting To"
				values = {""}
	 			row = 6
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "users-2-a-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	functions
	{
 			date TimeCalculations.addHoursToDate(date logDate, string hrs)
			{
				//Here adding hours to the given date
				hrsVal = hrs.getPrefix(":").toLong();
				minsVal = hrs.getSuffix(":").toLong();
				return logDate.toTime().addHour(hrsVal).addMinutes(minsVal);
			}
 			string TimeCalculations.getDifference(date startDate, date endDate)
			{
				//Calculating the hours difference from given two dates
				millihrs = (endDate - startDate);
				if(millihrs <= 0)
				{
					timeVal = "00:00";
				}
				else
				{
					hrsVal = ((millihrs % 86400000) / 3600000).toLong();
					minsVal = ((millihrs % 86400000 % 3600000) / 60000).toLong();
					timeVal = thisapp.TimeCalculations.getStringTime(hrsVal,minsVal);
				}
				return timeVal;
			}
 			string TimeCalculations.getStringTime(int hrsVal, int minsVal)
			{
				strhrs = hrsVal.toString();
				strmins = minsVal.toString();
				if(input.hrsVal < 10)
				{
					strhrs = "0" + hrsVal;
				}
				if(input.minsVal < 10)
				{
					strmins = "0" + minsVal;
				}
				return strhrs + ":" + strmins;
			}
 			string TimeCalculations.hoursCalculation(string startTime, string endTime, date dateVal)
			{
				startDate = thisapp.TimeCalculations.addHoursToDate(dateVal,startTime);
				endDate = thisapp.TimeCalculations.addHoursToDate(dateVal,endTime);
				timeVal = thisapp.TimeCalculations.getDifference(startDate,endDate);
				return timeVal;
			}
 			void CustomAction.manualStopTimer(int recID)
			{
				logRecords = Add_Time_Logs[ID = input.recID];
				currentHrs = zoho.currenttime.getHour();
				currentMins = zoho.currenttime.getMinutes();
				//Update 'End Time' field with current time 
				logRecords.End_Time=thisapp.TimeCalculations.getStringTime(currentHrs,currentMins);
				//Calculating the tracked hours and updating the same
				logRecords.Hours=thisapp.TimeCalculations.hoursCalculation(logRecords.Start_Time,logRecords.End_Time,logRecords.Log_Date);
				logRecords.Status="Tracked";
			}
 			void TimeCalculations.autoStopTimer(int recID)
			{
				logRecords = Add_Time_Logs[ID = input.recID];
				hrsVal = logRecords.TimerStopAt.getHour();
				minsVal = logRecords.TimerStopAt.getMinutes();
				//Update 'End Time' field with current time 
				logRecords.End_Time=thisapp.TimeCalculations.getStringTime(hrsVal,minsVal);
				//Calculating the tracked hours and updating the same
				logRecords.Hours=thisapp.TimeCalculations.hoursCalculation(logRecords.Start_Time,logRecords.End_Time,logRecords.Log_Date);
				logRecords.Status="Tracked";
			}
 			list PageData.listing(int num, list mylist)
			{
				//Generating the list here
				if(input.num > 0)
				{
					mylist.add(num);
					thisapp.PageData.listing(num - 1,mylist);
				}
				return mylist.sort(true);
			}
 			string PageData.calendarFun(date userdate, string usermailid)
			{
				//Generating the calendar here
				endDate = eomonth(userdate,0);
				StartDate = toStartOfMonth(userdate);
				month_of_year = {"1":"January","2":"February","3":"March","4":"April","5":"May","6":"June","7":"July","8":"August","9":"September","10":"October","11":"November","12":"December"};
				monthVal = userdate.getMonth();
				prev = StartDate.subDay(1);
				next = endDate.addDay(1);
				endday = endDate.getDay();
				dateList = thisapp.PageData.listing(endday,{});
				info dateList;
				if(StartDate.getDayOfWeek() > 1)
				{
					startDayofWeek = StartDate.getDayOfWeek();
					zeroList = thisapp.PageData.listing(startDayofWeek - 1,{});
					info zeroList;
					for each  eachZeroList in zeroList
					{
						dateList.add(0);
					}
				}
				dateList.sort(true);
				if(7 - endDate.getDayOfWeek() < 7)
				{
					endDayOfWeek = 7 - endDate.getDayOfWeek();
					zeroList = thisapp.PageData.listing(endDayOfWeek,{});
					info zeroList;
					for each  eachZeroList in zeroList
					{
						dateList.add(0);
					}
				}
				str = "<table class='caltable'><tr style='background:rgba(87, 169, 251,0.65);color:white;'><th class='caltableHeading'><a style='color:white;' href='" + zoho.appuri + "view-embed/CalendarPage?dateVal=" + prev + "&&usermailid=" + usermailid + "' target='CalendarView'><</a></th><th class='caltableHeading' colspan='5'>" + month_of_year.get(monthVal.toString()) + " " + userdate.getYear() + "</th><th class='tableHeading'><a style='color:white;' href='" + zoho.appuri + "view-embed/CalendarPage?dateVal=" + next + "&&usermailid=" + usermailid + "' target='CalendarView'>></a></th></tr><tr><th class='caltableHeading'>Sun</th><th class='caltableHeading'>Mon</th><th class='caltableHeading'>Tue</th><th class='caltableHeading'>Wed</th><th class='caltableHeading'>Thu</th><th class='caltableHeading'>Fri</th><th class='caltableHeading'>Sat</th></tr>";
				for each index eachIndexOfDate in dateList
				{
					indexVal = eachIndexOfDate + 1;
					val = dateList.get(eachIndexOfDate);
					if(indexVal % 7 == 1)
					{
						if(val == "0")
						{
							str = str + "<tr><td class='caltableCell'></td>";
						}
						else
						{
							str = str + "<tr><td class='caltableCell'><a style='color:Black;' href='" + zoho.appuri + "view-embed/DayChart?dayVal=" + prev.addDay(val.toLong()) + "&&userMailID=" + usermailid + "' target='DateView'>" + val + "</a></td>";
						}
					}
					else if(indexVal % 7 == 0)
					{
						if(val == "0")
						{
							str = str + "<td class='caltableCell'></td></tr>";
						}
						else
						{
							str = str + "<td class='caltableCell'><a style='color:Black;' href='" + zoho.appuri + "view-embed/DayChart?dayVal=" + prev.addDay(val.toLong()) + "&&userMailID=" + usermailid + "' target='DateView'>" + val + "</a></td></tr>";
						}
					}
					else
					{
						if(val == "0")
						{
							str = str + "<td class='caltableCell'></td>";
						}
						else
						{
							str = str + "<td class='caltableCell'><a style='color:Black;' href='" + zoho.appuri + "view-embed/DayChart?dayVal=" + prev.addDay(val.toLong()) + "&&userMailID=" + usermailid + "' target='DateView'>" + val + "</a></td>";
						}
					}
				}
				str = str + "</table>";
				return str;
			}
 			void ManageUsers.addEmployee()
			{
				employeeCount = Add_Employee[ID != 0].count();
				if(employeeCount == 0)
				{
					insert into Add_Employee
					[
						Designation="Manager"
						Email=zoho.loginuserid
						Name.first_name=zoho.loginuser
						Added_User=zoho.loginuser
					]
				}
			}
 			void CustomAction.jobStatusChange(int recID)
			{
				openUrl("#Form:Add_Remarks?recID=" + recID,"popup window");
			}
 			date TimeCalculations.totalHours(date logDate, list:string logHoursList)
			{
				totalHrs = logDate;
				for each  eachLogDateRec in logHoursList
				{
					totalHrs = thisapp.TimeCalculations.addHoursToDate(totalHrs,eachLogDateRec);
				}
				return totalHrs;
			}
 			void MailTasks.sendToManager(string empEmail)
			{
				empRec = Add_Employee[Email == input.empEmail];
				sendmail
				[
					from :zoho.adminuserid
					to :empEmail
					subject :"Invitation to access Time Tracker App"
					message :("Hi&nbsp;" + empRec.Name) + ",<div><br></div><div>You have been added as manager to log your working hours. And here you can view the log reports of your team members.</div><div><br></div><div>Click <a href=\"" + "https://app.zohocreator.com" + zoho.appuri + "\"" + " target=\"_blank\">here</a> to access \"Time Tracker App\"</div><div><br></div><div>Regards,</div><div>" + zoho.adminuser + "<br></div>"
				]
			}
 			void MailTasks.sendToMember(string empEmail)
			{
				empRec = Add_Employee[Email == input.empEmail];
				sendmail
				[
					from :zoho.adminuserid
					to :empEmail
					subject :"Invitation to access Time Tracker App"
					message :("Hi&nbsp;" + empRec.Name) + ",<div><br></div><div>You have been added as member to log your working hours. And you are reporting to&nbsp;" + empRec.Reporting_To + ".</div><div><br></div><div>Click <a href=\"" + "https://app.zohocreator.com" + zoho.appuri + "\"" + " target=\"_blank\">here</a> to access \"Time Tracker App\"</div><div><br></div><div>Regards,</div><div>" + zoho.adminuser + "<br></div>"
				]
			}
 			bool TimeCalculations.timeValidation(string timeVal)
			{
				//Validating the time format here
				hrsVal = timeVal.getPrefix(":");
				minsVal = timeVal.getSuffix(":");
				if(isNumber(hrsVal) && isNumber(minsVal))
				{
					hrsValInt = hrsVal.toLong();
					minsValInt = minsVal.toLong();
					if(hrsValInt <= 24 && minsValInt < 60)
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				else
				{
					return false;
				}
			}
 			bool TimeCalculations.timeVal(string timeVal)
			{
				//Validating the time format here
				hrsVal = timeVal.getPrefix(":");
				minsVal = timeVal.getSuffix(":");
				if(isNumber(hrsVal) && isNumber(minsVal))
				{
					hrsValInt = hrsVal.toLong();
					minsValInt = minsVal.toLong();
					if(hrsValInt < 24 && minsValInt < 60)
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				else
				{
					return false;
				}
			}
 			void MailTasks.sendToAssignees(int recID, list:int assigneeList)
			{
				jobRec = Add_Job[ID == input.recID];
				endDate = jobRec.End_Date.toString();
				if(jobRec.End_Date == null)
				{
					endDate = "-";
				}
				projectName = jobRec.Project.Title;
				if(jobRec.Project == null)
				{
					projectName = "-";
				}
				for each  eachAssignee in assigneeList
				{
					empRec = Add_Employee[ID == eachAssignee];
					sendmail
					[
						from :zoho.loginuserid
						to :empRec.Email
						subject :"New job in " + projectName
						message :("Hi " + empRec.Name) + ",<div><br></div><div>New job \"" + jobRec.Job_Title + "\"" + " is assigned to you.</div><div><br></div><div>Please find the details below,</div><div><br></div><div><table cellpadding=\"2\" cellspacing=\"2\" border=\"1\" style=\"width: 100%; font-size: 10pt;\"><tbody><tr><td>Job Title</td><td>" + jobRec.Job_Title + "<br></td></tr><tr><td>Project Name</td><td>" + projectName + "<br></td></tr><tr><td>Start Date</td><td>" + jobRec.Start_Date + "<br></td></tr><tr><td>End Date</td><td>" + endDate + "<br></td></tr><tr><td>Description</td><td>" + jobRec.Description + "<br></td></tr></tbody></table><br>Click <a href=\"" + "https://app.zohocreator.com" + zoho.appuri + "#Form:Add_Time_Logs?JobID=" + jobRec.ID + "\"" + " target=\"_blank\">here</a> to add time logs.<br><br>Regards,</div><div>" + zoho.adminuser + "<br></div>"
					]
				}
			}
	}



	workflow
	{
		form
		{
			Run_Scripts_On_Click_of_S as "Run Scripts - On Click of 'Stop' Button"
			{
				type =  form
				form = Stop_Timer
				button = Stop
				on click
				{
					actions 
					{
					on click
					(
						thisapp.CustomAction.manualStopTimer(input.recID);
										openUrl(zoho.appuri + "view-embed/Timer","iframe","TimerForm");
					)
					}
				}
			}
			Run_Scripts_On_Click_of_S1 as "Run Scripts - On Click of 'Start Timer' Button"
			{
				type =  form
				form = Start_Timer
				button = Start_Timer
				on click
				{
					actions 
					{
					on click
					(
						logHoursList = Add_Time_Logs[Log_Date == zoho.currentdate && Added_User == zoho.loginuser].Hours.getAll();
										totalTime = thisapp.TimeCalculations.totalHours(zoho.currentdate,logHoursList);
										loggedDate = zoho.currentdate.addDay(1).toTime();
										logRec = Add_Time_Logs[Project_Name == input.Project_Name && Job_Name == input.Job_Name && Task == input.Task && Log_Date == zoho.currentdate && Added_User == zoho.loginuser];
										if(logRec.count() > 0)
										{
											alert "You have already added this task";
										}
										else if(loggedDate < totalTime)
										{
											alert "Your log time has exceeded 24 hours";
										}
										else
										{
											PM = Add_Project[ID == input.Project_Name].Project_Manager;
											logHoursList = Add_Time_Logs[Log_Date == zoho.currentdate && Added_User == zoho.loginuser].Hours.getAll();
											totalTime = thisapp.TimeCalculations.totalHours(zoho.currentdate,logHoursList);
											todaysRemainingTime = thisapp.TimeCalculations.getDifference(zoho.currenttime,zoho.currentdate.addDay(1).toTime());
											addedTimeVal = thisapp.TimeCalculations.addHoursToDate(totalTime,todaysRemainingTime);
											timerStopAt = zoho.currentdate.addHour(23).addMinutes(59).addSeconds(59);
											if(zoho.currentdate != addedTimeVal.toDate())
											{
												activeHrs = thisapp.TimeCalculations.getDifference(totalTime,zoho.currentdate.addDay(1).toTime());
												stopAt = thisapp.TimeCalculations.addHoursToDate(zoho.currenttime,activeHrs);
												timerStopAt = stopAt;
											}
											currentHrs = zoho.currenttime.getHour();
											currentMins = zoho.currenttime.getMinutes();
											start_Time = thisapp.TimeCalculations.getStringTime(currentHrs,currentMins);
											insert into Add_Time_Logs
											[
												Status="Tracking Time"
												Log_Date=zoho.currentdate
												Job_Name=input.Job_Name
												Track_as="Start Timer"
												Added_User=zoho.loginuser
												Project_Name=input.Project_Name
												Task=input.Task
												Hours="00:00"
												Start_Time=start_Time
												End_Time="00:00"
												Submitted_By=Add_Employee[Email == zoho.loginuserid].ID
												Project_Manager=PM
												TimerStopAt=timerStopAt
											]
											openUrl(zoho.appuri + "view-embed/Timer","iframe","TimerForm");
										}
					)
					}
				}
			}
			Run_Scripts_On_Click_of_C as "Run Scripts - On Click of 'Complete' Button"
			{
				type =  form
				form = Add_Remarks
				button = Complete
				on click
				{
					actions 
					{
					on click
					(
						jobrec = Add_Job[ID == input.recID];
										if(input.Completed_on < jobrec.Start_Date)
										{
											alert "Please specify the correct date";
										}
										else
										{
											jobrec.End_Date=input.Completed_on;
											jobrec.Status="Completed";
											jobrec.Remarks=input.Remarks;
										}
										openUrl("#Script:page.refresh","same window");
					)
					}
				}
			}
			Run_Scripts_While_Adding_8 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Project
				record event = on add

	field rules
	{
					actions 
					{
						hide Jobs,Project_Members;
					}
	}

			}
			Run_Scripts_While_Adding_11 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Project
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											input.Project_Manager = Add_Employee[Email == zoho.loginuserid].ID;
										if(zoho.loginuserid != zoho.adminuserid)
										{
											disable Project_Manager;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_12 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Project
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											openUrl("#Form:Add_Job","same window");
						)
					}
	}

			}
			Run_Scripts_While_Editing5 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Project
				record event = on edit

	field rules
	{
					actions 
					{
						hide Jobs,Project_Members;
					}
	}

			}
			Run_Scripts_While_Editing6 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Project
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											disable Project_Manager;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_13 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Job
				record event = on add

	field rules
	{
					actions 
					{
						hide Remarks,Status;
					}
	}

			}
			Run_Scripts_While_Adding_14 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Job
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											emp = Add_Employee[Email == zoho.loginuserid];
										Assignees.select(emp.ID);
										input.Start_Date = zoho.currentdate;
										if(zoho.loginuserid == zoho.adminuserid)
										{
											Assignees_Admin.select(emp.ID);
											hide Assignees;
										}
										if(emp.Designation == "Member")
										{
											hide Assignees;
											hide Project;
										}
										else
										{
											input.Project = Add_Project[Project_Manager == emp.ID].ID sort by Added_Time desc;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_15 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Job
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											emp = Add_Employee[Email == zoho.loginuserid];
										if(emp.Designation == "Manager" && input.Project == null)
										{
											alert "Please specify the project name";
											cancel submit;
										}
										//Mandate the 'End_Date_Time' field when set reminder is enabled
										if(input.Set_Reminder && input.End_Date == null)
										{
											alert "Please specify the end date for reminders";
											cancel submit;
										}
										//Validating the Date field
										if(input.End_Date < zoho.currentdate || input.Start_Date < zoho.currentdate)
										{
											alert "Please specify the future dates";
											cancel submit;
										}
										if(input.End_Date < input.Start_Date)
										{
											alert "Please specify the correct date";
											cancel submit;
										}
										if(!Assignees.contains(emp.ID))
										{
											input.Assignees.add(emp.ID);
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_16 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Job
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											if(input.Project != null)
										{
											projectRec = Add_Project[ID == input.Project];
											projectRec.Project_Members=input.Assignees;
										}
										//Notify the assignees regarding newly assigned job
										thisapp.MailTasks.sendToAssignees(input.ID,input.Assignees);
						)
					}
	}

			}
			Run_Scripts_While_Editing7 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Job
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											emp = Add_Employee[Email == zoho.loginuserid];
										if(zoho.loginuserid == zoho.adminuserid)
										{
											hide Assignees;
										}
										if(emp.Designation == "Member")
										{
											hide Assignees;
											hide Project;
										}
						)
					}
	}

			}
			Run_Scripts_While_Editing8 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Job
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(input.Added_User == zoho.loginuser)
										{
											emp = Add_Employee[Email == zoho.loginuserid];
											if(emp.Designation == "Manager" && input.Project == null)
											{
												alert "Please specify the project name";
												cancel submit;
											}
											//Mandate the 'End_Date' field when set reminder is enabled
											if(input.Set_Reminder && input.End_Date == null)
											{
												alert "Please specify the end date for reminders";
												cancel submit;
											}
											//Validating the 'Date' fields
											if(input.End_Date < input.Start_Date)
											{
												alert "Please specify the correct date";
												cancel submit;
											}
											if(!Assignees.contains(emp.ID))
											{
												input.Assignees.add(emp.ID);
											}
											if(old.Project != input.Project && input.Project != null)
											{
												//Reassigning the project members
												projectRec = Add_Project[ID == input.Project];
												projectRec.Project_Members=input.Assignees;
											}
										}
										else
										{
											//Restricting the employee to modify others record
											alert "Sorry,You don't have permission to edit this record";
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_While_Deletin2 as "Run Scripts - While Deleting a Record"
			{
				type =  form
				form = Add_Job
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(input.Added_User != zoho.loginuser)
										{
											//Restricting the employee to delete others record
											alert "Sorry,You don't have permission to delete this record";
											cancel delete;
										}
						)
					}
	}

			}
			Run_Scripts_While_Deletin3 as "Run Scripts - While Deleting a Record"
			{
				type =  form
				form = Add_Job
				record event = on delete

	on success
	{
					actions 
					{
					delete from Add_Task[Job is null];
					delete from Add_Time_Logs[Job_Name is null];
					}
	}

			}
			Run_Scripts_On_Always6 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Job
				record event = on add or edit

	on user input of Assignees_Admin
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid == zoho.adminuserid)
										{
											Assignees.select(input.Assignees_Admin);
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_17 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Task
				record event = on add

	field rules
	{
					actions 
					{
						hide Task_AddedBy;
					}
	}

			}
			Run_Scripts_While_Adding_18 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Task
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											//Prefilling the "Job" field with recently added/assigned job
										input.Job = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID sort by Added_Time desc;
						)
					}
	}

			}
			Run_Scripts_While_Adding_19 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Task
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											//Mandate the 'End_Date_Time' field when set reminder is enabled
										if(input.Set_Reminder && input.End_Date_Time == null)
										{
											alert "Please specify the end date for reminders";
											cancel submit;
										}
										if(input.Set_Reminder && input.Start_Date_Time == null)
										{
											input.Start_Date_Time = zoho.currenttime;
										}
										input.Task_AddedBy = zoho.loginuserid;
										//Validating the 'Date-Time' field
										if(input.End_Date_Time < zoho.currenttime || input.Start_Date_Time < zoho.currenttime)
										{
											alert "Please specify the future dates";
											cancel submit;
										}
										if(input.End_Date_Time < input.Start_Date_Time)
										{
											alert "Please specify the correct date";
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_While_Editing9 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Task
				record event = on edit

	field rules
	{
					actions 
					{
						hide Task_AddedBy;
					}
	}

			}
			Run_Scripts_While_Editing10 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Task
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											//Validating the 'Date-Time' field
										if(input.End_Date_Time < input.Start_Date_Time)
										{
											alert "Please specify the correct date";
											cancel submit;
										}
										//Mandate the 'End_Date_Time' field when set reminder is enabled
										if(input.Set_Reminder && input.End_Date_Time == null)
										{
											alert "Please specify the end date for reminders";
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_20 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Stop_Timer
				record event = on add

	field rules
	{
					actions 
					{
						hide recID;
						disable Task,Job_Name,Project_Name;
					}
	}

			}
			Run_Scripts_While_Adding_21 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Stop_Timer
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											//Autofilling the fields with currently running timer data
										runningRec = Add_Time_Logs[ID == input.recID];
										input.Project_Name = runningRec.Project_Name;
										input.Job_Name = runningRec.Job_Name;
										input.Task = runningRec.Task;
						)
					}
	}

			}
			Run_Scripts_While_Adding_22 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Start_Timer
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide plain;
										logHoursList = Add_Time_Logs[Log_Date == zoho.currentdate && Added_User == zoho.loginuser].Hours.getAll();
										totalTime = thisapp.TimeCalculations.totalHours(zoho.currentdate,logHoursList);
										todaysRemainingTime = thisapp.TimeCalculations.getDifference(zoho.currenttime,zoho.currentdate.addDay(1).toTime());
										addedTimeVal = thisapp.TimeCalculations.addHoursToDate(totalTime,todaysRemainingTime);
										if(zoho.currentdate != addedTimeVal.toDate())
										{
											activeHrs = thisapp.TimeCalculations.getDifference(totalTime,zoho.currentdate.addDay(1).toTime());
											stopAt = thisapp.TimeCalculations.addHoursToDate(zoho.currenttime,activeHrs);
											show plain;
											//Highlight the remaining trackable hours 
											input.plain = "<font color='#ff0000'>You have already tracked log for " + totalTime.getHour() + ":" + totalTime.getMinutes() + "<br>So your timer will be active till " + stopAt + "</font>";
										}
										//Prefilling the "Job Name" field with recently added/assigned job
										input.Job_Name = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID sort by Added_Time desc;
						)
					}
	}

			}
			Run_Scripts_On_Always7 as "Run Scripts - On Always"
			{
				type =  form
				form = Start_Timer
				record event = on add or edit

	on user input of Job_Name
	{
					actions 
					{
						custom deluge script
						(
											//Dynamically adding the picklist with respective values
										if(input.Job_Name != null)
										{
											projectID = Add_Project[Jobs == input.Job_Name].ID;
											if(projectID != null)
											{
												input.Project_Name = projectID;
											}
											taskList = Add_Task[Job == input.Job_Name].ID.getAll();
											input.Task:ui.add(taskList);
										}
										else
										{
											projectList = Add_Project[Project_Manager.Email == zoho.loginuserid || Project_Members.Email == zoho.loginuserid].ID.getAll();
											input.Project_Name:ui.add(projectList);
											taskList = Add_Task[Added_User == zoho.loginuser].ID.getAll();
											input.Task:ui.add(taskList);
											jobsList = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID.getAll();
											input.Job_Name:ui.add(jobsList);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always8 as "Run Scripts - On Always"
			{
				type =  form
				form = Start_Timer
				record event = on add or edit

	on user input of Project_Name
	{
					actions 
					{
						custom deluge script
						(
											//Dynamically adding the picklist 'Job_Name' with respective jobs
										if(input.Project_Name != null)
										{
											jobsList = Add_Job[Project == input.Project_Name && Assignees.Email == zoho.loginuserid && Status == "Active"].ID.getAll();
											if(!jobsList.contains(input.Job_Name) || input.Job_Name == null)
											{
												input.Job_Name:ui.add(jobsList);
											}
										}
										else
										{
											jobsList = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID.getAll();
											input.Job_Name:ui.add(jobsList);
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_23 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Remarks
				record event = on add

	field rules
	{
					actions 
					{
						hide recID;
					}
	}

			}
			Run_Scripts_While_Adding_24 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Remarks
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											//Autofilling the 'Completed on' field with current date
										input.Completed_on = zoho.currentdate;
						)
					}
	}

			}
			Run_Scripts_While_Adding_25 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Time_Logs
				record event = on add

	field rules
	{
					actions 
					{
						hide JobID,End_Time,plain,Status,Submitted_By,Project_Manager,Start_Time,TimerStopAt;
					}
	}

			}
			Run_Scripts_While_Adding_26 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Time_Logs
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											input.Log_Date = null;
										//Autofilling the log date with current date
										runningRec = Add_Time_Logs[Status == "Tracking Time" && Added_User == zoho.loginuser && Log_Date == zoho.currentdate];
										if(runningRec.count() == 0)
										{
											input.Log_Date = zoho.currentdate;
										}
										//Autofilling the Job Name with assigned job
										if(input.JobID == null)
										{
											input.Job_Name = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID sort by Added_Time desc;
										}
										else
										{
											input.Job_Name = input.JobID;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_27 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Time_Logs
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											//Validating the log time here
										logHoursList = Add_Time_Logs[Log_Date == input.Log_Date && Added_User == zoho.loginuser].Hours.getAll();
										logHoursList.add(input.Hours);
										loggedDate = input.Log_Date.addDay(1).toTime();
										totalTime = thisapp.TimeCalculations.totalHours(input.Log_Date,logHoursList);
										runningRec = Add_Time_Logs[Status == "Tracking Time" && Added_User == zoho.loginuser && Log_Date == input.Log_Date];
										logRec = Add_Time_Logs[Project_Name == input.Project_Name && Job_Name == input.Job_Name && Task == input.Task && Log_Date == input.Log_Date && Added_User == zoho.loginuser];
										hoursVal = thisapp.TimeCalculations.timeValidation(input.Hours);
										startTimeVal = thisapp.TimeCalculations.timeVal(input.Start_Time);
										endTimeVal = thisapp.TimeCalculations.timeVal(input.End_Time);
										//Validating the 'Log_Date' field
										if(input.Log_Date > zoho.currentdate)
										{
											alert "You are not allowed to add log for future date";
											cancel submit;
										}
										else if(loggedDate < totalTime)
										{
											alert "Your log time has exceeded 24 hours";
											cancel submit;
										}
										else if(runningRec.count() > 0)
										{
											alert "Please stop the currently running timer";
											cancel submit;
										}
										else if(logRec.count() > 0)
										{
											alert "You have already added this task";
											cancel submit;
										}
										else if(!hoursVal || !startTimeVal || !endTimeVal)
										{
											alert "Please enter time in 24 hours format";
											cancel submit;
										}
										if(input.Track_as == "Start Timer")
										{
											if(input.Log_Date != zoho.currentdate)
											{
												alert "Timer can be added only for the current day";
												cancel submit;
											}
										}
										else
										{
											if(input.Hours == "00:00")
											{
												alert "Please update the log time";
												cancel submit;
											}
											if(input.Track_as == "Hours")
											{
												input.Start_Time = "00:00";
												input.End_Time = "00:00";
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_28 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Time_Logs
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											input.Submitted_By = Add_Employee[Email == zoho.loginuserid].ID;
										if(input.Project_Name != null)
										{
											input.Project_Manager = input.Project_Name.Project_Manager;
										}
										if(input.Track_as == "Start Timer")
										{
											logHoursList = Add_Time_Logs[Log_Date == input.Log_Date && Added_User == zoho.loginuser].Hours.getAll();
											totalTime = thisapp.TimeCalculations.totalHours(input.Log_Date,logHoursList);
											todaysRemainingTime = thisapp.TimeCalculations.getDifference(zoho.currenttime,zoho.currentdate.addDay(1).toTime());
											addedTimeVal = thisapp.TimeCalculations.addHoursToDate(totalTime,todaysRemainingTime);
											//Autocalculate the timer stop time from user log time
											input.TimerStopAt = input.Log_Date.addHour(23).addMinutes(59).addSeconds(59);
											if(zoho.currentdate != addedTimeVal.toDate())
											{
												activeHrs = thisapp.TimeCalculations.getDifference(totalTime,zoho.currentdate.addDay(1).toTime());
												stopAt = thisapp.TimeCalculations.addHoursToDate(zoho.currenttime,activeHrs);
												//Notify the employee's remaining trackable hours
												success message "You have already tracked log for " + totalTime.getHour() + ":" + totalTime.getMinutes() + "<br>So your timer will be active till " + stopAt;
												input.TimerStopAt = stopAt;
											}
											currentHrs = zoho.currenttime.getHour();
											currentMins = zoho.currenttime.getMinutes();
											input.Start_Time = thisapp.TimeCalculations.getStringTime(currentHrs,currentMins);
											input.Status = "Tracking Time";
											input.End_Time = "00:00";
											input.Hours = "00:00";
										}
						)
					}
	}

			}
			Run_Scripts_While_Editing11 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Time_Logs
				record event = on edit

	field rules
	{
					actions  (Track_as == "Hours")
					{
						hide End_Time,Start_Time;
					}
					actions  (Track_as == "Start Timer")
					{
						hide Hours,End_Time,Start_Time;
					}
					actions 
					{
						hide JobID,plain,Status,Submitted_By,Project_Manager,TimerStopAt;
					}
	}

			}
			Run_Scripts_While_Editing12 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Time_Logs
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(input.Track_as == "Start & End")
										{
											disable Hours;
										}
						)
					}
	}

			}
			Run_Scripts_While_Editing13 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Time_Logs
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											//Validating the log time here
										logHoursList = Add_Time_Logs[ID != input.ID && Log_Date == input.Log_Date && Added_User == zoho.loginuser].Hours.getAll();
										logHoursList.add(input.Hours);
										loggedDate = input.Log_Date.addDay(1).toTime();
										totalTime = thisapp.TimeCalculations.totalHours(input.Log_Date,logHoursList);
										runningRec = Add_Time_Logs[Status == "Tracking Time" && Added_User == zoho.loginuser && Log_Date == input.Log_Date];
										logRec = Add_Time_Logs[ID != input.ID && Project_Name == input.Project_Name && Job_Name == input.Job_Name && Task == input.Task && Log_Date == input.Log_Date && Added_User == zoho.loginuser];
										hoursVal = thisapp.TimeCalculations.timeValidation(input.Hours);
										startTimeVal = thisapp.TimeCalculations.timeVal(input.Start_Time);
										endTimeVal = thisapp.TimeCalculations.timeVal(input.End_Time);
										//Validating the 'Log_Date' field
										if(loggedDate < totalTime)
										{
											alert "Your log time has exceeded 24 hours";
											cancel submit;
										}
										else if(runningRec.count() > 0)
										{
											alert "Please stop the currently running timer";
											cancel submit;
										}
										else if(logRec.count() > 0)
										{
											alert "You have already added this task";
											cancel submit;
										}
										else if(!hoursVal || !startTimeVal || !endTimeVal)
										{
											alert "Please enter time in 24 hours format";
											cancel submit;
										}
										if(input.Track_as == "Start Timer")
										{
											alert "Sorry,Timer will not start from edit.please select other tracking option";
											cancel submit;
										}
										else
										{
											if(input.Hours == "00:00")
											{
												alert "Please update the log time";
												cancel submit;
											}
											if(input.Track_as == "Hours")
											{
												input.Start_Time = "00:00";
												input.End_Time = "00:00";
											}
										}
										if(old.Project_Name != input.Project_Name && input.Project_Name != null)
										{
											projectManager = Add_Project[ID == input.Project_Name].Project_Manager;
											input.Project_Manager = projectManager;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always9 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Time_Logs
				record event = on add or edit

	on user input of Start_Time
	{
					actions 
					{
						custom deluge script
						(
											if(input.Log_Date != null)
										{
											//Validating the time here
											if(thisapp.TimeCalculations.timeVal(input.End_Time) && thisapp.TimeCalculations.timeVal(input.Start_Time))
											{
												hrsVal = input.Start_Time.getPrefix(":");
												minsVal = input.Start_Time.getSuffix(":");
												if(hrsVal.length() < 2 || minsVal.length() < 2)
												{
													input.Start_Time = thisapp.TimeCalculations.getStringTime(hrsVal.toLong(),minsVal.toLong());
												}
												input.Hours = thisapp.TimeCalculations.hoursCalculation(input.Start_Time,input.End_Time,input.Log_Date);
											}
											else
											{
												input.Hours = "00:00";
												alert "Please enter time in 24 hours format";
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always10 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Time_Logs
				record event = on add or edit

	on user input of Job_Name
	{
					actions 
					{
						custom deluge script
						(
											//Dynamically adding the picklist with respective values
										if(input.Job_Name != null)
										{
											projectID = Add_Project[Jobs == input.Job_Name].ID;
											if(projectID != null)
											{
												input.Project_Name = projectID;
											}
											taskList = Add_Task[Job == input.Job_Name && Added_User == zoho.loginuser].ID.getAll();
											input.Task:ui.add(taskList);
										}
										else
										{
											projectList = Add_Project[Project_Manager.Email == zoho.loginuserid || Project_Members.Email == zoho.loginuserid].ID.getAll();
											input.Project_Name:ui.add(projectList);
											taskList = Add_Task[Added_User == zoho.loginuser].ID.getAll();
											input.Task:ui.add(taskList);
											jobsList = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID.getAll();
											input.Job_Name:ui.add(jobsList);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always11 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Time_Logs
				record event = on add or edit

	on user input of End_Time
	{
					actions 
					{
						custom deluge script
						(
											if(input.Log_Date != null)
										{
											//Validating the time here
											if(thisapp.TimeCalculations.timeVal(input.End_Time) && thisapp.TimeCalculations.timeVal(input.Start_Time))
											{
												hrsVal = input.End_Time.getPrefix(":");
												minsVal = input.End_Time.getSuffix(":");
												if(hrsVal.length() < 2 || minsVal.length() < 2)
												{
													input.End_Time = thisapp.TimeCalculations.getStringTime(hrsVal.toLong(),minsVal.toLong());
												}
												input.Hours = thisapp.TimeCalculations.hoursCalculation(input.Start_Time,input.End_Time,input.Log_Date);
											}
											else
											{
												input.Hours = "00:00";
												alert "Please enter time in 24 hours format";
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always12 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Time_Logs
				record event = on add or edit

	on user input of Hours
	{
					actions 
					{
						custom deluge script
						(
											//Validating the time here
										if(thisapp.TimeCalculations.timeValidation(input.Hours))
										{
											hrsVal = input.Hours.getPrefix(":");
											minsVal = input.Hours.getSuffix(":");
											if(hrsVal.length() < 2 || minsVal.length() < 2)
											{
												input.Hours = thisapp.TimeCalculations.getStringTime(hrsVal.toLong(),minsVal.toLong());
											}
										}
										else
										{
											alert "Please enter time in 24 hours format";
										}
						)
					}
	}

			}
			Run_Scripts_On_Always13 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Time_Logs
				record event = on add or edit

	on user input of Log_Date
	{
					actions 
					{
						custom deluge script
						(
											if(input.Log_Date > zoho.currentdate)
										{
											alert "You are not allowed to add log for future date";
										}
										else if(input.Log_Date != null)
										{
											runningRec = Add_Time_Logs[Status == "Tracking Time" && Added_User == zoho.loginuser && Log_Date == input.Log_Date];
											if(runningRec.count() > 0)
											{
												//Restricting the employee to add logs when timer is active
												alert "You are not allowed to add log for current date while timer is activated";
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always14 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Time_Logs
				record event = on add or edit

	on user input of Track_as
	{
					actions 
					{
						custom deluge script
						(
											//Displaying the necessary fields according to the user's input
										if(input.Track_as == "Start Timer")
										{
											hide Start_Time;
											hide End_Time;
											hide Hours;
											if(input.Log_Date == zoho.currentdate)
											{
												logHoursList = Add_Time_Logs[Log_Date == input.Log_Date && Added_User == zoho.loginuser].Hours.getAll();
												totalTime = thisapp.TimeCalculations.totalHours(input.Log_Date,logHoursList);
												todaysRemainingTime = thisapp.TimeCalculations.getDifference(zoho.currenttime,zoho.currentdate.addDay(1).toTime());
												addedTimeVal = thisapp.TimeCalculations.addHoursToDate(totalTime,todaysRemainingTime);
												//Autocalculate the timer stop time from log date
												input.TimerStopAt = input.Log_Date.addHour(23).addMinutes(59).addSeconds(59);
												if(zoho.currentdate != addedTimeVal.toDate())
												{
													activeHrs = thisapp.TimeCalculations.getDifference(totalTime,zoho.currentdate.addDay(1).toTime());
													stopAt = thisapp.TimeCalculations.addHoursToDate(zoho.currenttime,activeHrs);
													show plain;
													input.plain = "<font color='#ff0000'>You have already tracked log for " + totalTime.getHour() + ":" + totalTime.getMinutes() + "<br>So your timer will be active till " + stopAt + "</font>";
													input.TimerStopAt = stopAt;
												}
											}
										}
										else if(input.Track_as == "Hours")
										{
											hide Start_Time;
											hide End_Time;
											enable Hours;
											show Hours;
											hide plain;
											input.TimerStopAt = null;
										}
										else
										{
											show Start_Time;
											show End_Time;
											disable Hours;
											hide plain;
											input.TimerStopAt = null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always15 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Time_Logs
				record event = on add or edit

	on user input of Project_Name
	{
					actions 
					{
						custom deluge script
						(
											//Dynamically adding the picklist 'Job_Name' with respective jobs
										if(input.Project_Name != null)
										{
											jobsList = Add_Job[Project == input.Project_Name && Assignees.Email == zoho.loginuserid && Status == "Active"].ID.getAll();
											if(!jobsList.contains(input.Job_Name) || input.Job_Name == null)
											{
												input.Job_Name:ui.add(jobsList);
											}
										}
										else
										{
											jobsList = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID.getAll();
											input.Job_Name:ui.add(jobsList);
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_29 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Daily_Logs
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											//Autofilling the 'Log_Date_Daily' field with current date when there is no active timer
										runningRec = Add_Time_Logs[Status == "Tracking Time" && Added_User == zoho.loginuser && Log_Date == zoho.currentdate];
										if(runningRec.count() == 0)
										{
											input.Log_Date_Daily = zoho.currentdate;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_30 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Daily_Logs
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											//Validating the 'Log_Date_Daily' field
										if(input.Log_Date_Daily > zoho.currentdate)
										{
											alert "You are not allowed to add log for future date";
											cancel submit;
										}
										//Restricting the employee to add daily logs if the logs already added for the same date
										dailyLogCount = Add_Daily_Logs[Added_User == zoho.loginuser && Log_Date_Daily == input.Log_Date_Daily].count();
										if(dailyLogCount > 0)
										{
											alert "You have already added time logs for this day";
											cancel submit;
										}
										//Restricting the employee to add daily logs if the timer is active
										runningRec = Add_Time_Logs[Status == "Tracking Time" && Added_User == zoho.loginuser && Log_Date == input.Log_Date_Daily];
										if(runningRec.count() > 0)
										{
											alert "Please stop the currently running timer";
											cancel submit;
										}
										loggedDate = input.Log_Date_Daily.addDay(1).toTime();
										timeValid = true;
										totalHrs = input.Log_Date_Daily;
										comninationList = {};
										combinationExist = false;
										for each  eachLog in Logs
										{
											combinationString = eachLog.Project_Name + "-" + eachLog.Job_Name + "-" + eachLog.Task;
											if(comninationList.contains(combinationString))
											{
												combinationExist = true;
											}
											else
											{
												comninationList.add(combinationString);
											}
											if(!thisapp.TimeCalculations.timeValidation(eachLog.Hours))
											{
												timeValid = false;
											}
											else
											{
												totalHrs = thisapp.TimeCalculations.addHoursToDate(totalHrs,eachLog.Hours);
											}
										}
										//Validating the Log time 
										if(!timeValid)
										{
											alert "Please enter time in 24 hours format";
											cancel submit;
										}
										if(loggedDate < totalHrs)
										{
											alert "Your log time has exceeded 24 hours";
											cancel submit;
										}
										if(combinationExist)
										{
											alert "Duplicate time log exist,please check";
											cancel submit;
										}
										trackedCombinationExist = false;
										trackedLogsCombination = {};
										trackedLogsForDay = Add_Time_Logs[Log_Date = input.Log_Date_Daily && Added_User == zoho.loginuser];
										alertString = "<table align='center' style='border: 1px solid black;border-collapse: collapse;'><tr><th style='border: 1px solid black;border-collapse: collapse;padding:10px;'>Project Name</th><th style='border: 1px solid black;border-collapse: collapse;padding:10px;'>Job Name</th><th style='border: 1px solid black;border-collapse: collapse;padding:10px;'>Task</th><th style='border: 1px solid black;border-collapse: collapse;padding:10px;'>Hours</th></tr>";
										for each  eachTrackedLogsForDay in trackedLogsForDay
										{
											trackedCombinationString = eachTrackedLogsForDay.Project_Name + "-" + eachTrackedLogsForDay.Job_Name + "-" + eachTrackedLogsForDay.Task;
											if(!comninationList.contains(trackedCombinationString))
											{
												projectName = "-";
												if(eachTrackedLogsForDay.Project_Name != null)
												{
													projectName = eachTrackedLogsForDay.Project_Name.Title;
												}
												taskName = "-";
												if(eachTrackedLogsForDay.Task != null)
												{
													taskName = eachTrackedLogsForDay.Task.Task;
												}
												trackedLogsCombination.add(trackedCombinationString);
												alertString = alertString + "<tr><td style='border: 1px solid black;border-collapse: collapse;padding:10px;'>" + projectName + "</td><td style='border: 1px solid black;border-collapse: collapse;padding:10px;'>" + eachTrackedLogsForDay.Job_Name.Job_Title + "</td><td style='border: 1px solid black;border-collapse: collapse;padding:10px;'>" + taskName + "</td><td style='border: 1px solid black;border-collapse: collapse;padding:10px;'>" + eachTrackedLogsForDay.Hours + "</td></tr>";
											}
										}
										alertString = alertString + "</table>";
										if(trackedLogsCombination.size() > 0)
										{
											//Notify the missing logs 
											alert "Tracked logs are missing for this date<br>Please add the below logs<br>" + alertString;
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_31 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Daily_Logs
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											//Inserting the newly added logs into 'Add_Time_Logs' form
										for each  eachRow in input.Logs
										{
											existingLog = Add_Time_Logs[Project_Name == eachRow.Project_Name && Job_Name == eachRow.Job_Name && Task == eachRow.Task && Log_Date == input.Log_Date_Daily && Added_User == zoho.loginuser];
											if(existingLog.count() > 0)
											{
												if(existingLog.Hours != eachRow.Hours)
												{
													existingLog.Hours=eachRow.Hours;
												}
											}
											else
											{
												if(eachRow.Project_Name != null)
												{
													projectManager = eachRow.Project_Name.Project_Manager;
												}
												else
												{
													projectManager = null;
												}
												insert into Add_Time_Logs
												[
													Status="Tracked"
													Log_Date=input.Log_Date_Daily
													Job_Name=eachRow.Job_Name
													Track_as="Hours"
													Added_User=zoho.loginuser
													Project_Name=eachRow.Project_Name
													Task=eachRow.Task
													Description=eachRow.Description
													Hours=eachRow.Hours
													Start_Time="00:00"
													End_Time="00:00"
													Submitted_By=Add_Employee[Email == zoho.loginuserid].ID
													Project_Manager=projectManager
												]
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always16 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Daily_Logs
				record event = on add or edit

	on user input of Logs.Hours
	{
					actions 
					{
						custom deluge script
						(
											//Validating the time here
										if(thisapp.TimeCalculations.timeValidation(row.Hours))
										{
											hrsVal = row.Hours.getPrefix(":");
											minsVal = row.Hours.getSuffix(":");
											if(hrsVal.length() < 2 || minsVal.length() < 2)
											{
												row.Hours=thisapp.TimeCalculations.getStringTime(hrsVal.toLong(),minsVal.toLong());
											}
										}
										else
										{
											alert "Please enter time in 24 hours format";
										}
						)
					}
	}

			}
			Run_Scripts_On_Always17 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Daily_Logs
				record event = on add or edit

	on user input of Logs.Job_Name
	{
					actions 
					{
						custom deluge script
						(
											//Dynamically adding the picklist with respective values
										if(row.Job_Name != null)
										{
											projectID = Add_Project[Jobs == row.Job_Name].ID;
											if(projectID != null)
											{
												row.Project_Name=projectID;
											}
											taskList = Add_Task[Job == row.Job_Name && Added_User == zoho.loginuser].ID.getAll();
											row.Task:ui.add(taskList);
										}
										else
										{
											projectList = Add_Project[Project_Manager.Email == zoho.loginuserid || Project_Members.Email == zoho.loginuserid].ID.getAll();
											row.Project_Name:ui.add(projectList);
											taskList = Add_Task[Added_User == zoho.loginuser].ID.getAll();
											row.Task:ui.add(taskList);
											jobsList = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID.getAll();
											row.Job_Name:ui.add(jobsList);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always18 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Daily_Logs
				record event = on add or edit

	on user input of Log_Date_Daily
	{
					actions 
					{
						custom deluge script
						(
											if(input.Log_Date_Daily > zoho.currentdate)
										{
											alert "You are not allowed to add log for future date";
										}
										else if(input.Log_Date_Daily != null)
										{
											//Restricting the employee to add logs when timer is active
											runningRec = Add_Time_Logs[Status == "Tracking Time" && Added_User == zoho.loginuser && Log_Date == input.Log_Date_Daily];
											if(runningRec.count() > 0)
											{
												alert "You are not allowed to add log for current date while timer is activated";
												input.Log_Date_Daily = null;
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always19 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Daily_Logs
				record event = on add or edit

	on user input of Logs.Project_Name
	{
					actions 
					{
						custom deluge script
						(
											//Dynamically adding the picklist 'Job_Name' with respective jobs
										if(row.Project_Name != null)
										{
											jobsList = Add_Job[Project == row.Project_Name && Assignees.Email == zoho.loginuserid && Status == "Active"].ID.getAll();
											if(!jobsList.contains(row.Job_Name) || row.Job_Name == null)
											{
												row.Job_Name:ui.add(jobsList);
											}
										}
										else
										{
											jobsList = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID.getAll();
											row.Job_Name:ui.add(jobsList);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always20 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Daily_Logs
				record event = on add or edit

	on add row of Logs
	{
					actions 
					{
						custom deluge script
						(
											if(input.Log_Date_Daily != null)
										{
											trackedLogsForDay = Add_Time_Logs[Log_Date = input.Log_Date_Daily && Added_User == zoho.loginuser].ID.getAll();
											logCount = 0;
											for each  eachRow in Logs
											{
												logCount = logCount + 1;
											}
											if(logCount > 0)
											{
												for each  eachRow in Logs
												{
													sameLogs = Add_Time_Logs[Project_Name == eachRow.Project_Name && Job_Name == eachRow.Job_Name && Task == eachRow.Task && Log_Date = input.Log_Date_Daily && Added_User == zoho.loginuser].ID;
													trackedLogsForDay.removeelement(sameLogs);
												}
											}
											//Prefilling the log details with tracked time logs
											if(trackedLogsForDay.size() > 0)
											{
												trackedLogs = Add_Time_Logs[ID == trackedLogsForDay.get(0)];
												row.Project_Name=trackedLogs.Project_Name;
												row.Job_Name=trackedLogs.Job_Name;
												row.Task=trackedLogs.Task;
												row.Hours=trackedLogs.Hours;
												row.Description=trackedLogs.Description;
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_32 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_weekly_Logs
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											input.From_Date = null;
										//Autofilling the 'From Date' field with start date of current week
										runningRec = Add_Time_Logs[Status == "Tracking Time" && Added_User == zoho.loginuser && Log_Date >= toStartOfWeek(zoho.currentdate) && Log_Date <= toStartOfWeek(zoho.currentdate).addDay(6)];
										if(runningRec.count() == 0)
										{
											input.From_Date = toStartOfWeek(zoho.currentdate);
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_33 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_weekly_Logs
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											//Validating the 'From_Date' field
										if(input.From_Date > zoho.currentdate)
										{
											alert "You are not allowed to add log for future dates";
											cancel submit;
										}
										//Restricting the employee to add weekly logs if the logs already added for the same week
										WeeklyLogCount = Add_weekly_Logs[Added_User == zoho.loginuser && From_Date == input.From_Date].count();
										if(WeeklyLogCount > 0)
										{
											alert "You have already added time logs for this week";
											cancel submit;
										}
										//Restricting the employee to add daily logs if the timer is active
										runningRec = Add_Time_Logs[Status == "Tracking Time" && Added_User == zoho.loginuser && Log_Date >= input.From_Date && Log_Date <= input.To_Date];
										if(runningRec.count() > 0)
										{
											alert "Please stop the currently running timer";
											cancel submit;
										}
										timeValid = true;
										weekDates = {input.From_Date,input.From_Date.addDay(1),input.From_Date.addDay(2),input.From_Date.addDay(3),input.From_Date.addDay(4),input.From_Date.addDay(5),input.From_Date.addDay(6)};
										sunHrs = weekDates.get(0);
										monHrs = weekDates.get(1);
										tueHrs = weekDates.get(2);
										wedHrs = weekDates.get(3);
										thuHrs = weekDates.get(4);
										friHrs = weekDates.get(5);
										satHrs = weekDates.get(6);
										loggedDates = {input.From_Date.addDay(1).toTime(),input.From_Date.addDay(2).toTime(),input.From_Date.addDay(3).toTime(),input.From_Date.addDay(4).toTime(),input.From_Date.addDay(5).toTime(),input.From_Date.addDay(6).toTime(),input.From_Date.addDay(7).toTime()};
										comninationList = {};
										combinationExist = false;
										for each  eachLog in Logs
										{
											combinationString = eachLog.Project_Name + "-" + eachLog.Job_Name + "-" + eachLog.Task;
											if(comninationList.contains(combinationString))
											{
												combinationExist = true;
											}
											else
											{
												comninationList.add(combinationString);
											}
											if(!thisapp.TimeCalculations.timeValidation(eachLog.Sunday) || !thisapp.TimeCalculations.timeValidation(eachLog.Monday) || !thisapp.TimeCalculations.timeValidation(eachLog.Tuesday) || !thisapp.TimeCalculations.timeValidation(eachLog.Wednesday) || !thisapp.TimeCalculations.timeValidation(eachLog.Thursday) || !thisapp.TimeCalculations.timeValidation(eachLog.Friday) || !thisapp.TimeCalculations.timeValidation(eachLog.Saturday))
											{
												timeValid = false;
											}
											else
											{
												sunHrs = thisapp.TimeCalculations.addHoursToDate(sunHrs,eachLog.Sunday);
												monHrs = thisapp.TimeCalculations.addHoursToDate(monHrs,eachLog.Monday);
												tueHrs = thisapp.TimeCalculations.addHoursToDate(tueHrs,eachLog.Tuesday);
												wedHrs = thisapp.TimeCalculations.addHoursToDate(wedHrs,eachLog.Wednesday);
												thuHrs = thisapp.TimeCalculations.addHoursToDate(thuHrs,eachLog.Thursday);
												friHrs = thisapp.TimeCalculations.addHoursToDate(friHrs,eachLog.Friday);
												satHrs = thisapp.TimeCalculations.addHoursToDate(satHrs,eachLog.Saturday);
											}
										}
										//Validating the Log time 
										if(!timeValid)
										{
											alert "Please enter time in 24 hours format";
											cancel submit;
										}
										if(sunHrs > loggedDates.get(0) || monHrs > loggedDates.get(1) || tueHrs > loggedDates.get(2) || wedHrs > loggedDates.get(3) || thuHrs > loggedDates.get(4) || friHrs > loggedDates.get(5) || satHrs > loggedDates.get(6))
										{
											alert "Your log time has exceeded 24 hours";
											cancel submit;
										}
										if(combinationExist)
										{
											alert "Duplicate time log exist,please check";
											cancel submit;
										}
										trackedLogsCombination = {};
										alertString = "<table align='center' style='border: 1px solid black;border-collapse: collapse;'><tr><th style='border: 1px solid black;border-collapse: collapse;padding:10px;'>Log Date</th><th style='border: 1px solid black;border-collapse: collapse;padding:10px;'>Project Name</th><th style='border: 1px solid black;border-collapse: collapse;padding:10px;'>Job Name</th><th style='border: 1px solid black;border-collapse: collapse;padding:10px;'>Task</th><th style='border: 1px solid black;border-collapse: collapse;padding:10px;'>Hours</th></tr>";
										for each  eachDate in weekDates
										{
											trackedLogsForDay = Add_Time_Logs[Log_Date = eachDate && Added_User == zoho.loginuser];
											for each  eachTrackedLogsForDay in trackedLogsForDay
											{
												trackedCombinationString = eachTrackedLogsForDay.Project_Name + "-" + eachTrackedLogsForDay.Job_Name + "-" + eachTrackedLogsForDay.Task;
												if(!comninationList.contains(trackedCombinationString))
												{
													trackedLogsCombination.add(trackedCombinationString);
													projectName = "-";
													if(eachTrackedLogsForDay.Project_Name != null)
													{
														projectName = eachTrackedLogsForDay.Project_Name.Title;
													}
													taskName = "-";
													if(eachTrackedLogsForDay.Task != null)
													{
														taskName = eachTrackedLogsForDay.Task.Task;
													}
													alertString = alertString + "<tr><td style='border: 1px solid black;border-collapse: collapse;padding:10px;'>" + eachDate + "</td><td style='border: 1px solid black;border-collapse: collapse;padding:10px;'>" + projectName + "</td><td style='border: 1px solid black;border-collapse: collapse;padding:10px;'>" + eachTrackedLogsForDay.Job_Name.Job_Title + "</td><td style='border: 1px solid black;border-collapse: collapse;padding:10px;'>" + taskName + "</td><td style='border: 1px solid black;border-collapse: collapse;padding:10px;'>" + eachTrackedLogsForDay.Hours + "</td></tr>";
												}
											}
										}
										alertString = alertString + "</table>";
										if(trackedLogsCombination.size() > 0)
										{
											//Notify the missing logs
											alert "Tracked logs are missing<br>Please add the below logs<br>" + alertString;
											cancel submit;
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_34 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_weekly_Logs
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											//Inserting the newly added logs into 'Add_Time_Logs' form
										weekDates = {input.From_Date,input.From_Date.addDay(1),input.From_Date.addDay(2),input.From_Date.addDay(3),input.From_Date.addDay(4),input.From_Date.addDay(5),input.From_Date.addDay(6)};
										for each  eachDate in weekDates
										{
											for each  eachRow in input.Logs
											{
												existingLog = Add_Time_Logs[Project_Name == eachRow.Project_Name && Job_Name == eachRow.Job_Name && Task == eachRow.Task && Log_Date == eachDate && Added_User == zoho.loginuser];
												if(weekDates.indexOf(eachDate) == 0)
												{
													hrs = eachRow.Sunday;
												}
												else if(weekDates.indexOf(eachDate) == 1)
												{
													hrs = eachRow.Monday;
												}
												else if(weekDates.indexOf(eachDate) == 2)
												{
													hrs = eachRow.Tuesday;
												}
												else if(weekDates.indexOf(eachDate) == 3)
												{
													hrs = eachRow.Wednesday;
												}
												else if(weekDates.indexOf(eachDate) == 4)
												{
													hrs = eachRow.Thursday;
												}
												else if(weekDates.indexOf(eachDate) == 5)
												{
													hrs = eachRow.Friday;
												}
												else if(weekDates.indexOf(eachDate) == 6)
												{
													hrs = eachRow.Saturday;
												}
												if(existingLog.count() > 0)
												{
													if(existingLog.Hours != hrs)
													{
														existingLog.Hours=hrs;
													}
												}
												else
												{
													if(hrs != "00:00")
													{
														if(eachRow.Project_Name != null)
														{
															projectManager = eachRow.Project_Name.Project_Manager;
														}
														else
														{
															projectManager = null;
														}
														insert into Add_Time_Logs
														[
															Status="Tracked"
															Log_Date=eachDate
															Job_Name=eachRow.Job_Name
															Track_as="Hours"
															Added_User=zoho.loginuser
															Project_Name=eachRow.Project_Name
															Task=eachRow.Task
															Hours=hrs
															Start_Time="00:00"
															End_Time="00:00"
															Submitted_By=Add_Employee[Email == zoho.loginuserid].ID
															Project_Manager=projectManager
														]
													}
												}
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always21 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_weekly_Logs
				record event = on add or edit

	on user input of Logs.Job_Name
	{
					actions 
					{
						custom deluge script
						(
											//Dynamically adding the picklist with respective values
										if(row.Job_Name != null)
										{
											projectID = Add_Project[Jobs == row.Job_Name].ID;
											if(projectID != null)
											{
												row.Project_Name=projectID;
											}
											taskList = Add_Task[Job == row.Job_Name && Added_User == zoho.loginuser].ID.getAll();
											row.Task:ui.add(taskList);
										}
										else
										{
											projectList = Add_Project[Project_Manager.Email == zoho.loginuserid || Project_Members.Email == zoho.loginuserid].ID.getAll();
											row.Project_Name:ui.add(projectList);
											taskList = Add_Task[Added_User == zoho.loginuser].ID.getAll();
											row.Task:ui.add(taskList);
											jobsList = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID.getAll();
											row.Job_Name:ui.add(jobsList);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always22 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_weekly_Logs
				record event = on add or edit

	on user input of Logs.Wednesday
	{
					actions 
					{
						custom deluge script
						(
											//Validating the time here
										if(thisapp.TimeCalculations.timeValidation(row.Wednesday))
										{
											hrsVal = row.Wednesday.getPrefix(":");
											minsVal = row.Wednesday.getSuffix(":");
											if(hrsVal.length() < 2 || minsVal.length() < 2)
											{
												row.Wednesday=thisapp.TimeCalculations.getStringTime(hrsVal.toLong(),minsVal.toLong());
											}
										}
										else
										{
											alert "Please enter time in 24 hours format";
										}
						)
					}
	}

			}
			Run_Scripts_On_Always23 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_weekly_Logs
				record event = on add or edit

	on user input of Logs.Project_Name
	{
					actions 
					{
						custom deluge script
						(
											//Dynamically adding the picklist 'Job_Name' with respective jobs
										if(row.Project_Name != null)
										{
											jobsList = Add_Job[Project == row.Project_Name && Assignees.Email == zoho.loginuserid && Status == "Active"].ID.getAll();
											if(!jobsList.contains(row.Job_Name) || row.Job_Name == null)
											{
												row.Job_Name:ui.add(jobsList);
											}
										}
										else
										{
											jobsList = Add_Job[Assignees.Email == zoho.loginuserid || Added_User == zoho.loginuser && Status == "Active"].ID.getAll();
											row.Job_Name:ui.add(jobsList);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always24 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_weekly_Logs
				record event = on add or edit

	on user input of Logs.Tuesday
	{
					actions 
					{
						custom deluge script
						(
											//Validating the time here
										if(thisapp.TimeCalculations.timeValidation(row.Tuesday))
										{
											hrsVal = row.Tuesday.getPrefix(":");
											minsVal = row.Tuesday.getSuffix(":");
											if(hrsVal.length() < 2 || minsVal.length() < 2)
											{
												row.Tuesday=thisapp.TimeCalculations.getStringTime(hrsVal.toLong(),minsVal.toLong());
											}
										}
										else
										{
											alert "Please enter time in 24 hours format";
										}
						)
					}
	}

			}
			Run_Scripts_On_Always25 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_weekly_Logs
				record event = on add or edit

	on user input of Logs.Monday
	{
					actions 
					{
						custom deluge script
						(
											//Validating the time here
										if(thisapp.TimeCalculations.timeValidation(row.Monday))
										{
											hrsVal = row.Monday.getPrefix(":");
											minsVal = row.Monday.getSuffix(":");
											if(hrsVal.length() < 2 || minsVal.length() < 2)
											{
												row.Monday=thisapp.TimeCalculations.getStringTime(hrsVal.toLong(),minsVal.toLong());
											}
										}
										else
										{
											alert "Please enter time in 24 hours format";
										}
						)
					}
	}

			}
			Run_Scripts_On_Always26 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_weekly_Logs
				record event = on add or edit

	on user input of Logs.Saturday
	{
					actions 
					{
						custom deluge script
						(
											//Validating the time here
										if(thisapp.TimeCalculations.timeValidation(row.Saturday))
										{
											hrsVal = row.Saturday.getPrefix(":");
											minsVal = row.Saturday.getSuffix(":");
											if(hrsVal.length() < 2 || minsVal.length() < 2)
											{
												row.Saturday=thisapp.TimeCalculations.getStringTime(hrsVal.toLong(),minsVal.toLong());
											}
										}
										else
										{
											alert "Please enter time in 24 hours format";
										}
						)
					}
	}

			}
			Run_Scripts_On_Always27 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_weekly_Logs
				record event = on add or edit

	on user input of Logs.Sunday
	{
					actions 
					{
						custom deluge script
						(
											//Validating the time here
										if(thisapp.TimeCalculations.timeValidation(row.Sunday))
										{
											hrsVal = row.Sunday.getPrefix(":");
											minsVal = row.Sunday.getSuffix(":");
											if(hrsVal.length() < 2 || minsVal.length() < 2)
											{
												row.Sunday=thisapp.TimeCalculations.getStringTime(hrsVal.toLong(),minsVal.toLong());
											}
										}
										else
										{
											alert "Please enter time in 24 hours format";
										}
						)
					}
	}

			}
			Run_Scripts_On_Always28 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_weekly_Logs
				record event = on add or edit

	on user input of Logs.Friday
	{
					actions 
					{
						custom deluge script
						(
											//Validating the time here
										if(thisapp.TimeCalculations.timeValidation(row.Friday))
										{
											hrsVal = row.Friday.getPrefix(":");
											minsVal = row.Friday.getSuffix(":");
											if(hrsVal.length() < 2 || minsVal.length() < 2)
											{
												row.Friday=thisapp.TimeCalculations.getStringTime(hrsVal.toLong(),minsVal.toLong());
											}
										}
										else
										{
											alert "Please enter time in 24 hours format";
										}
						)
					}
	}

			}
			Run_Scripts_On_Always29 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_weekly_Logs
				record event = on add or edit

	on user input of From_Date
	{
					actions 
					{
						custom deluge script
						(
											if(input.From_Date != null)
										{
											input.To_Date = input.From_Date.addDay(6);
											disable To_Date;
											runningRec = Add_Time_Logs[Status == "Tracking Time" && Added_User == zoho.loginuser && Log_Date >= input.From_Date && Log_Date <= input.To_Date];
											if(runningRec.count() > 0)
											{
												//Restricting the employee to add logs when timer is active
												alert "You are not allowed to add log for current week while timer is activated";
												input.From_Date = null;
											}
											else
											{
												enable Logs.Sunday;
												enable Logs.Monday;
												enable Logs.Tuesday;
												enable Logs.Wednesday;
												enable Logs.Thursday;
												enable Logs.Friday;
												enable Logs.Saturday;
												if(input.From_Date > zoho.currentdate)
												{
													alert "You are not allowed to add log for future dates";
													disable Logs.Sunday;
												}
												if(From_Date.addDay(1) > zoho.currentdate)
												{
													disable Logs.Monday;
												}
												if(From_Date.addDay(2) > zoho.currentdate)
												{
													disable Logs.Tuesday;
												}
												if(From_Date.addDay(3) > zoho.currentdate)
												{
													disable Logs.Wednesday;
												}
												if(From_Date.addDay(4) > zoho.currentdate)
												{
													disable Logs.Thursday;
												}
												if(From_Date.addDay(5) > zoho.currentdate)
												{
													disable Logs.Friday;
												}
												if(From_Date.addDay(6) > zoho.currentdate)
												{
													disable Logs.Saturday;
												}
											}
										}
										else
										{
											enable To_Date;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always30 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_weekly_Logs
				record event = on add or edit

	on user input of Logs.Thursday
	{
					actions 
					{
						custom deluge script
						(
											//Validating the time here
										if(thisapp.TimeCalculations.timeValidation(row.Thursday))
										{
											hrsVal = row.Thursday.getPrefix(":");
											minsVal = row.Thursday.getSuffix(":");
											if(hrsVal.length() < 2 || minsVal.length() < 2)
											{
												row.Thursday=thisapp.TimeCalculations.getStringTime(hrsVal.toLong(),minsVal.toLong());
											}
										}
										else
										{
											alert "Please enter time in 24 hours format";
										}
						)
					}
	}

			}
			Run_Scripts_On_Always31 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_weekly_Logs
				record event = on add or edit

	on add row of Logs
	{
					actions 
					{
						custom deluge script
						(
											if(input.From_Date != null && input.To_Date != null)
										{
											if(input.From_Date > zoho.currentdate)
											{
												row.Sunday="00:00";
											}
											if(From_Date.addDay(1) > zoho.currentdate)
											{
												row.Monday="00:00";
											}
											if(From_Date.addDay(2) > zoho.currentdate)
											{
												row.Tuesday="00:00";
											}
											if(From_Date.addDay(3) > zoho.currentdate)
											{
												row.Wednesday="00:00";
											}
											if(From_Date.addDay(4) > zoho.currentdate)
											{
												row.Thursday="00:00";
											}
											if(From_Date.addDay(5) > zoho.currentdate)
											{
												row.Friday="00:00";
											}
											if(From_Date.addDay(6) > zoho.currentdate)
											{
												row.Saturday="00:00";
											}
											trackedLogsForWeek = Add_Time_Logs[Log_Date >= input.From_Date && Log_Date <= input.To_Date && Added_User == zoho.loginuser].ID.getAll();
											logCount = 0;
											for each  eachRow in Logs
											{
												logCount = logCount + 1;
											}
											if(logCount > 0)
											{
												for each  eachRow in Logs
												{
													sameLogs = Add_Time_Logs[Project_Name == eachRow.Project_Name && Job_Name == eachRow.Job_Name && Task == eachRow.Task && Log_Date >= input.From_Date && Log_Date <= input.To_Date && Added_User == zoho.loginuser].ID.getAll();
													trackedLogsForWeek.removeall(sameLogs);
												}
											}
											if(trackedLogsForWeek.size() > 0)
											{
												//Prefilling the log details with tracked time logs
												trackedLogs = Add_Time_Logs[ID == trackedLogsForWeek.get(0)];
												row.Project_Name=trackedLogs.Project_Name;
												row.Job_Name=trackedLogs.Job_Name;
												row.Task=trackedLogs.Task;
												repeatedLogs = Add_Time_Logs[Project_Name == trackedLogs.Project_Name && Job_Name == trackedLogs.Job_Name && Task == trackedLogs.Task && Log_Date >= input.From_Date && Log_Date <= input.To_Date && Added_User == zoho.loginuser];
												for each  eachSameLog in repeatedLogs
												{
													dayVal = eachSameLog.Log_Date.getDayOfWeek();
													if(dayVal == 1)
													{
														row.Sunday=eachSameLog.Hours;
													}
													else if(dayVal == 2)
													{
														row.Monday=eachSameLog.Hours;
													}
													else if(dayVal == 3)
													{
														row.Tuesday=eachSameLog.Hours;
													}
													else if(dayVal == 4)
													{
														row.Wednesday=eachSameLog.Hours;
													}
													else if(dayVal == 5)
													{
														row.Thursday=eachSameLog.Hours;
													}
													else if(dayVal == 6)
													{
														row.Friday=eachSameLog.Hours;
													}
													else if(dayVal == 7)
													{
														row.Saturday=eachSameLog.Hours;
													}
												}
											}
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_35 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Employee
				record event = on add

	field rules
	{
					actions 
					{
						hide Reporting_To;
					}
	}

			}
			Run_Scripts_While_Adding_36 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Employee
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(input.Designation != "Member")
										{
											input.Reporting_To = "";
										}
						)
					}
	}

			}
			Run_Scripts_While_Adding_37 as "Run Scripts - While Adding a Record"
			{
				type =  form
				form = Add_Employee
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											//share the application with employee
										thisapp.permissions.assignUserInProfile(input.Email,input.Designation);
										//Send notification mail with link to access the application
										if(input.Designation == "Member")
										{
											thisapp.MailTasks.sendToMember(input.Email);
										}
										else
										{
											thisapp.MailTasks.sendToManager(input.Email);
										}
						)
					}
	}

			}
			Run_Scripts_While_Editing14 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Employee
				record event = on edit

	field rules
	{
					actions  (Designation == "Manager")
					{
						hide Reporting_To;
					}
	}

			}
			Run_Scripts_While_Editing15 as "Run Scripts - While Editing a Record"
			{
				type =  form
				form = Add_Employee
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(old.Email != input.Email || old.Designation != input.Designation)
										{
											//Share the application with employee and unshare the old privileges if the employee email id or Job Title change
											thisapp.permissions.deleteuser(old.Email);
											thisapp.permissions.assignUserInProfile(input.Email,input.Designation);
											//Send notification mail with link to access the application
											if(input.Designation == "Member")
											{
												thisapp.MailTasks.sendToMember(input.Email);
											}
											else
											{
												thisapp.MailTasks.sendToManager(input.Email);
											}
										}
										if(input.Designation != "Member")
										{
											input.Reporting_To = "";
										}
						)
					}
	}

			}
			Run_Scripts_While_Deletin4 as "Run Scripts - While Deleting a Record"
			{
				type =  form
				form = Add_Employee
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											//Here we are restricting to delete administrator's record.
										if(input.Email == zoho.adminuserid)
										{
											alert "Sorry deletion is not possible for admin record!";
											cancel delete;
										}
										else
										{
											//Unshare the privileges.
											thisapp.permissions.deleteuser(input.Email);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always32 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Employee
				record event = on add or edit

	field rules
	{
					actions  (Designation == "Member")
					{
						show Reporting_To;
					}
	}

			}
			Run_Scripts_On_Always33 as "Run Scripts - On Always"
			{
				type =  form
				form = Add_Employee
				record event = on add or edit

	on user input of Designation
	{
					actions  (Designation == "Member")
					{
						custom deluge script
						(
											//Dynamically adding the manager's email under 'Reporting To' field
										input.Reporting_To:ui.add(Add_Employee[Designation == "Manager"].Email.getAll());
						)
					}
	}

			}
		}
		schedule
		{
			Auto_Timer_Stop as "Auto_Timer_Stop"
			{
				type =  schedule
				form = Add_Time_Logs
				start = TimerStopAt
				time zone = "Asia/Kolkata"
				on start
				{
					actions  (Status == "Tracking Time")
					{
					on load
					(
						thisapp.TimeCalculations.autoStopTimer(input.ID);
										if(input.TimerStopAt == input.Log_Date.addHour(23).addMinutes(59).addSeconds(59))
										{
											insert into Add_Time_Logs
											[
												Status="Tracking Time"
												Log_Date=input.Log_Date.addDay(1)
												Job_Name=input.Job_Name
												Track_as="Start Timer"
												Added_User=zoho.loginuser
												Project_Name=input.Project_Name
												Task=input.Task
												Description="TimerContinues:" + input.Description
												Hours="00:00"
												Start_Time="00:00"
												End_Time="00:00"
												TimerStopAt=zoho.currentdate.addDay(1).addHour(23).addMinutes(59).addSeconds(59)
											]
										}
					)
					}
				}
			}
			Job_Reminder as "Job_Reminder"
			{
				type =  schedule
				form = Add_Job
				start = before 1 days from End_Date at "09:00:00"
				time zone = "Asia/Kolkata"
				on start
				{
					actions 
					{
					on load
					(
						projectName = input.Project.Title;
										if(input.Project == null)
										{
											projectName = "-";
										}
										for each  eachAssignee in input.Assignees
										{
											assigneeMailID = Add_Employee[ID == eachAssignee].Email;
											sendmail
											[
												from :zoho.adminuserid
												to :assigneeMailID
												subject :"Gentle reminder for job completion"
												message :"Hi,<div><br></div><div>Reminder to complete the " + input.Job_Title + " job on/before&nbsp;" + input.End_Date + ".</div><div><br></div><div>Please find the details below,</div><div><br></div><div><table cellpadding=\"2\" cellspacing=\"2\" border=\"1\" style=\"width: 100%; font-size: 10pt;\"><tbody><tr><td>Job Title</td><td>" + input.Job_Title + "<br></td></tr><tr><td>Project Name</td><td>" + projectName + "<br></td></tr><tr><td>Start Date</td><td>" + input.Start_Date + "<br></td></tr><tr><td>End Date</td><td>" + input.End_Date + "<br></td></tr><tr><td>Description</td><td>" + input.Description + "<br></td></tr></tbody></table><br>Regards,</div><div>" + zoho.adminuser + "<br></div>"
											]
										}
					)
					}
				}
			}
			Task_Reminder as "Task_Reminder"
			{
				type =  schedule
				form = Add_Task
				start = before 1 hours from End_Date_Time
				time zone = "Asia/Kolkata"
				on start
				{
					actions 
					{
					on load
					(
						sendmail
										[
											from :zoho.adminuserid
											to :input.Task_AddedBy
											subject :"Gentle  reminder for task completion"
											message :"Hi,<div><br></div><div>Reminder to complete the " + input.Task + " task before&nbsp;" + input.End_Date_Time + ".&nbsp;</div><div><br></div><div>Please find the task details below,</div><div><br></div><div><table cellpadding=\"2\" cellspacing=\"2\" border=\"1\" style=\"width: 100%; font-size: 10pt;\"><tbody><tr><td>Task Name</td><td>" + input.Task + "<br></td></tr><tr><td>Job Name</td><td>" + input.Job.Job_Title + "<br></td></tr><tr><td>Start Date-Time</td><td>" + input.Start_Date_Time + "<br></td></tr><tr><td>End Date-Time</td><td>" + input.End_Date_Time + "<br></td></tr><tr><td>Description</td><td>" + input.Description + "<br></td></tr></tbody></table><br>Regards,</div><div>" + zoho.adminuser + "<br></div>"
										]
					)
					}
				}
			}
		}
		functions
		{
			Stop_Timer as "Stop Timer"
			{
				type =  functions
				form = Add_Time_Logs
				on start
				{
					actions 
					{
					CustomAction.manualStopTimer(ID);
					}
				}
			}
			Complete as "Complete"
			{
				type =  functions
				form = Add_Job
				on start
				{
					actions 
					{
					CustomAction.jobStatusChange(ID);
					}
				}
			}
		}
	}
	share_settings
	{
			"Administrator"
			{
				name = "Administrator"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true}
				description = "This profile will have all the permissions.\n"
			}
			"Manager"
			{
				name = "Manager"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false}
				description = "This profile will have manager permissions.\n"
				ModulePermissions
				{
					Add_Task
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Tasks={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							End_Date_Time{visibility:true,readonly:false}
							Task{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Start_Date_Time{visibility:true,readonly:false}
							Task_AddedBy{visibility:true,readonly:false}
							Job{visibility:true,readonly:false}
							Set_Reminder{visibility:true,readonly:false}
						}
					}
					Stop_Timer
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Job_Name{visibility:true,readonly:false}
							Task{visibility:true,readonly:false}
							Project_Name{visibility:true,readonly:false}
							recID{visibility:true,readonly:false}
						}
					}
					Add_Daily_Logs
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Logs{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Log_Date_Daily{visibility:true,readonly:false}
						}
					}
					Add_Remarks
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Completed_on{visibility:true,readonly:false}
							Remarks{visibility:true,readonly:false}
							recID{visibility:true,readonly:false}
						}
					}
					Add_Job
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Jobs={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Project{visibility:true,readonly:false}
							Assignees_Admin{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Remarks{visibility:true,readonly:false}
							Assignees{visibility:true,readonly:false}
							Job_Title{visibility:true,readonly:false}
							Start_Date{visibility:true,readonly:false}
							End_Date{visibility:true,readonly:false}
							Set_Reminder{visibility:true,readonly:false}
						}
					}
					Start_Timer
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Job_Name{visibility:true,readonly:false}
							Task{visibility:true,readonly:false}
							Project_Name{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Add_weekly_Logs
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							From_Date{visibility:true,readonly:false}
							To_Date{visibility:true,readonly:false}
							Logs{visibility:true,readonly:false}
						}
					}
					Add_Time_Logs
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Team_Logs={"View"}
							My_Logs={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Task{visibility:true,readonly:false}
							Log_Date{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Hours{visibility:true,readonly:false}
							Submitted_By{visibility:true,readonly:false}
							Job_Name{visibility:true,readonly:false}
							Project_Name{visibility:true,readonly:false}
							Project_Manager{visibility:true,readonly:false}
							Track_as{visibility:true,readonly:false}
							End_Time{visibility:true,readonly:false}
							Start_Time{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							TimerStopAt{visibility:true,readonly:false}
							JobID{visibility:true,readonly:false}
						}
					}
					Add_Project
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Projects={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Title{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Jobs{visibility:true,readonly:false}
							Project_Members{visibility:true,readonly:false}
							Project_Manager{visibility:true,readonly:false}
						}
					}
					Add_Employee
					{
						FieldPermissions
						{
							Designation{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Name{visibility:false,readonly:false}
							Reporting_To{visibility:true,readonly:false}
						}
					}
					Weekly_progress_bar
					{
						enabled = tab
					}
					Member_View
					{
						enabled = tab
					}
					DayChart
					{
						enabled = tab
					}
					CalendarPage
					{
						enabled = tab
					}
					Timer
					{
						enabled = tab
					}
					Dashboard
					{
						enabled = tab
					}
					Dashboard_Mobile
					{
						enabled = tab
					}
				}
			}
			"Member"
			{
				name = "Member"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false}
				description = "This profile will have member permissions.\n"
				ModulePermissions
				{
					Add_Task
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Tasks={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							End_Date_Time{visibility:true,readonly:false}
							Task{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Start_Date_Time{visibility:true,readonly:false}
							Task_AddedBy{visibility:true,readonly:false}
							Job{visibility:true,readonly:false}
							Set_Reminder{visibility:true,readonly:false}
						}
					}
					Stop_Timer
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Job_Name{visibility:true,readonly:false}
							Task{visibility:true,readonly:false}
							Project_Name{visibility:true,readonly:false}
							recID{visibility:true,readonly:false}
						}
					}
					Add_Daily_Logs
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Logs{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Log_Date_Daily{visibility:true,readonly:false}
						}
					}
					Add_Remarks
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Completed_on{visibility:true,readonly:false}
							Remarks{visibility:true,readonly:false}
							recID{visibility:true,readonly:false}
						}
					}
					Add_Job
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							Jobs={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Project{visibility:true,readonly:false}
							Assignees_Admin{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Remarks{visibility:true,readonly:false}
							Assignees{visibility:true,readonly:false}
							Job_Title{visibility:true,readonly:false}
							Start_Date{visibility:true,readonly:false}
							End_Date{visibility:true,readonly:false}
							Set_Reminder{visibility:true,readonly:false}
						}
					}
					Start_Timer
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Job_Name{visibility:true,readonly:false}
							Task{visibility:true,readonly:false}
							Project_Name{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Add_weekly_Logs
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							From_Date{visibility:true,readonly:false}
							To_Date{visibility:true,readonly:false}
							Logs{visibility:true,readonly:false}
						}
					}
					Add_Time_Logs
					{
						enabled= Create,Viewall,Import,Export,Tab 
						ReportPermissions
						{
							My_Logs={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Task{visibility:true,readonly:false}
							Log_Date{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Hours{visibility:true,readonly:false}
							Submitted_By{visibility:true,readonly:false}
							Job_Name{visibility:true,readonly:false}
							Project_Name{visibility:true,readonly:false}
							Project_Manager{visibility:true,readonly:false}
							Track_as{visibility:true,readonly:false}
							End_Time{visibility:true,readonly:false}
							Start_Time{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							TimerStopAt{visibility:true,readonly:false}
							JobID{visibility:true,readonly:false}
						}
					}
					Add_Project
					{
						FieldPermissions
						{
							Title{visibility:true,readonly:false}
							Description{visibility:true,readonly:false}
							Jobs{visibility:true,readonly:false}
							Project_Members{visibility:true,readonly:false}
							Project_Manager{visibility:true,readonly:false}
						}
					}
					Add_Employee
					{
						FieldPermissions
						{
							Designation{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Name{visibility:false,readonly:false}
							Reporting_To{visibility:true,readonly:false}
						}
					}
					Weekly_progress_bar
					{
						enabled = tab
					}
					DayChart
					{
						enabled = tab
					}
					CalendarPage
					{
						enabled = tab
					}
					Timer
					{
						enabled = tab
					}
					Dashboard
					{
						enabled = tab
					}
					Dashboard_Mobile
					{
						enabled = tab
					}
				}
			}
			roles
			{
				"CEO"
				{
					description = "User belonging to this role can access data of all other users."
				}
			}
	}

	customize
	{
		
		layout = "tab"
		color = "black"
		base theme = "professional"
		new theme = 1
		new theme color = 7
		icons = true
    	icon type = 1
    	icon name = "zc-ab-project-mgmt3"
    	icon theme = "yellow"
		icons style = outline
	}

	phone
	{
		section  Hidden
		{
			hide = true
			form  Add_Project
			{
				layout = left
				hide = true
			}
			form  Add_Job
			{
				layout = left
				hide = true
			}
			form  Add_Task
			{
				layout = left
				hide = true
			}
			form  Stop_Timer
			{
				layout = left
				hide = true
			}
			form  Start_Timer
			{
				layout = left
				hide = true
			}
			page Weekly_progress_bar
			{
				hide = true
			}
			page Member_View
			{
				hide = true
			}
			page DayChart
			{
				hide = true
			}
			form  Add_Remarks
			{
				layout = left
				hide = true
			}
			list Weekly_Logs
			{
				hide = true
			}
			list Daily_Logs
			{
				hide = true
			}
			list All_projects
			{
				hide = true
			}
			list All_jobs
			{
				hide = true
			}
			list All_task
			{
				hide = true
			}
		}
		section  Dashboard
		{
			page Dashboard
			{
				hide = true
			}
			page Dashboard_Mobile
			{
				icon = "ui-1-dashboard-half"
			}
		}
		section  Logs
		{
			form  Add_Time_Logs
			{
				layout = left
			}
			form  Add_Daily_Logs
			{
				layout = left
			}
			form  Add_weekly_Logs
			{
				layout = left
			}
			calendar My_Logs
			{
				quickview
				(
					layout
					(
		 				type = 12
						datablock1
						(
			 				layout type = 35
		     				title = "Overview"
							fields
							(
								Log_Date as "Date"
								Job_Name as "Job Name"
								Start_Time as "Start Time"
								Status
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Add 
    		 				Print 
    		 				Import 
    		 				Export 
    	 				)
									record
									(
										Edit   	   
										Duplicate   	   
										Print   	   
										Delete   	   
    								)
    				)
    				action
    				(
									on tap
									(
										View Record   	   
    								)
									on long press
									(
										"Stop Timer"
										Duplicate   	   
										Print   	   
										View Record   	   
    								)
									on left swipe
									(
										"Stop Timer"
    								)
									on right swipe
									(
										Edit   	   
										Delete   	   
    								)
     				)
				)
				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
			 				layout type = -2
		     				title = "Overview"
							fields
							(
								Log_Date as "Date"
								Project_Name as "Project Name"
								Job_Name as "Job Name"
								Task
								Description
								Track_as as "Track as"
								Start_Time as "Start Time"
								End_Time as "End Time"
								Hours
								Status
								Submitted_By as "Submitted By"
								Project_Manager as "Project Manager"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
			 				"Stop Timer"
    		 				Edit 
    		 				Duplicate 
    		 				Print 
    		 				Delete 
    	 				)
    				)
				)
			}
			list Team_Logs
			{
				quickview
				(
					layout
					(
		 				type = 9
						datablock1
						(
			 				layout type = 31
		     				title = "Overview"
							fields
							(
								Job_Name as "Job Name"
								Submitted_By as "Submitted By"
								Status
								Hours
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    		 				Add 
    		 				Print 
    		 				Import 
    		 				Export 
    	 				)
									record
									(
										Edit   	   
										Duplicate   	   
										Print   	   
										Delete   	   
    								)
    				)
    				action
    				(
									on tap
									(
										View Record   	   
    								)
									on long press
									(
										Duplicate   	   
										Print   	   
										View Record   	   
    								)
									on right swipe
									(
										Edit   	   
										Delete   	   
    								)
     				)
				)
				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
			 				layout type = -2
		     				title = "Overview"
							fields
							(
								Log_Date as "Date"
								Project_Name as "Project Name"
								Job_Name as "Job Name"
								Task
								Description
								Track_as as "Track as"
								Start_Time as "Start Time"
								End_Time as "End Time"
								Hours
								Status
								Submitted_By as "Submitted By"
								Project_Manager as "Project Manager"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Print 
    		 				Delete 
    	 				)
    				)
				)
			}
			list All_Logs
			{
				quickview
				(
					layout
					(
		 				type = 9
						datablock1
						(
			 				layout type = 31
		     				title = "Overview"
							fields
							(
								Job_Name as "Job Name"
								Submitted_By as "Submitted By"
								Status
								Hours
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    		 				Add 
    		 				Print 
    		 				Import 
    		 				Export 
    	 				)
									record
									(
										Edit   	   
										Duplicate   	   
										Print   	   
										Delete   	   
    								)
    				)
    				action
    				(
									on tap
									(
										View Record   	   
    								)
									on long press
									(
										Duplicate   	   
										Print   	   
										View Record   	   
    								)
									on right swipe
									(
										Edit   	   
										Delete   	   
    								)
     				)
				)
				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
			 				layout type = -2
		     				title = "Overview"
							fields
							(
								Log_Date as "Date"
								Project_Name as "Project Name"
								Job_Name as "Job Name"
								Task
								Description
								Track_as as "Track as"
								Start_Time as "Start Time"
								End_Time as "End Time"
								Hours
								Status
								Submitted_By as "Submitted By"
								Project_Manager as "Project Manager"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Print 
    		 				Delete 
    	 				)
    				)
				)
			}
		}
		section  Jobs_Tasks
		{
			displayname= "Jobs/Tasks"
			list Projects
			{
				quickview
				(
					layout
					(
		 				type = 2
						datablock1
						(
			 				layout type = 4
		     				title = "Overview"
							fields
							(
								Title
								Description
								Project_Manager as "Project Manager"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    		 				Add 
    		 				Print 
    		 				Import 
    		 				Export 
    	 				)
									record
									(
										Edit   	   
										Duplicate   	   
										Print   	   
										Delete   	   
    								)
    				)
    				action
    				(
									on tap
									(
										View Record   	   
    								)
									on long press
									(
										Duplicate   	   
										Print   	   
										View Record   	   
    								)
									on right swipe
									(
										Edit   	   
										Delete   	   
    								)
     				)
				)
				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
			 				layout type = -2
		     				title = "Overview"
							fields
							(
								Title
								Description
								Project_Manager as "Project Manager"
								Project_Members as "Project Members"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Print 
    		 				Delete 
    	 				)
    				)
				)
			}
			list Jobs
			{
				quickview
				(
					layout
					(
		 				type = 9
						datablock1
						(
			 				layout type = 31
		     				title = "Overview"
							fields
							(
								Job_Title as "Job Title"
								Project
								Start_Date as "Start Date"
								End_Date as "End Date"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    		 				Add 
    		 				Print 
    		 				Import 
    		 				Export 
    	 				)
									record
									(
										Edit   	   
										Duplicate   	   
										Print   	   
										Delete   	   
    								)
    				)
    				action
    				(
									on tap
									(
										View Record   	   
    								)
									on long press
									(
										"Complete"
										Duplicate   	   
										Print   	   
										View Record   	   
    								)
									on left swipe
									(
										"Complete"
    								)
									on right swipe
									(
										Edit   	   
										Delete   	   
    								)
     				)
				)
				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
			 				layout type = -2
		     				title = "Overview"
							fields
							(
								Job_Title as "Job Title"
								Project
								Description
								Start_Date as "Start Date"
								End_Date as "End Date"
								Set_Reminder as "Reminder"
								Assignees
								Status
								Remarks
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
			 				"Complete"
    		 				Edit 
    		 				Duplicate 
    		 				Print 
    		 				Delete 
    	 				)
    				)
				)
			}
			list Tasks
			{
				quickview
				(
					layout
					(
		 				type = 9
						datablock1
						(
			 				layout type = 31
		     				title = "Overview"
							fields
							(
								Task
								Job
								Start_Date_Time as "Start Date-Time"
								End_Date_Time as "End Date-Time"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    		 				Add 
    		 				Print 
    		 				Import 
    		 				Export 
    	 				)
									record
									(
										Edit   	   
										Duplicate   	   
										Print   	   
										Delete   	   
    								)
    				)
    				action
    				(
									on tap
									(
										View Record   	   
    								)
									on long press
									(
										Duplicate   	   
										Print   	   
										View Record   	   
    								)
									on right swipe
									(
										Edit   	   
										Delete   	   
    								)
     				)
				)
				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
			 				layout type = -2
		     				title = "Overview"
							fields
							(
								Task
								Job
								Start_Date_Time as "Start Date-Time"
								End_Date_Time as "End Date-Time"
								Description
								Set_Reminder as "Reminder"
								Job.Status as "Status"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Print 
    		 				Delete 
    	 				)
    				)
				)
			}
		}
		section  Admin
		{
			list Employees
			{
				quickview
				(
					layout
					(
		 				type = 9
						datablock1
						(
			 				layout type = 31
		     				title = "Overview"
							fields
							(
								Name
								Email
								Designation
								Reporting_To as "Reporting To"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    		 				Add 
    		 				Print 
    		 				Import 
    		 				Export 
    	 				)
									record
									(
										Edit   	   
										Duplicate   	   
										Print   	   
										Delete   	   
    								)
    				)
    				action
    				(
									on long press
									(
										Duplicate   	   
										Print   	   
										View Record   	   
    								)
									on right swipe
									(
										Edit   	   
										Delete   	   
    								)
     				)
				)
				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
			 				layout type = -2
		     				title = "Overview"
							fields
							(
								Email
								Designation
								Reporting_To as "Reporting To"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Print 
    		 				Delete 
    	 				)
    				)
				)
			}
			form  Add_Employee
			{
				layout = left
			}
		}
		customize
		{
			colour = yellow
        	layout = onecolumn
		 	icons style = outline
		}
	}
	tablet
	{
		section  Hidden
		{
			hide = true
			form  Add_Project
			{
				layout = left
				hide = true
			}
			form  Add_Job
			{
				layout = left
				hide = true
			}
			form  Add_Task
			{
				layout = left
				hide = true
			}
			form  Stop_Timer
			{
				layout = left
				hide = true
			}
			form  Start_Timer
			{
				layout = left
				hide = true
			}
			page Weekly_progress_bar
			{
				hide = true
			}
			page Member_View
			{
				hide = true
			}
			page DayChart
			{
				hide = true
			}
			form  Add_Remarks
			{
				layout = left
				hide = true
			}
			list Weekly_Logs
			{
				hide = true
			}
			list Daily_Logs
			{
				hide = true
			}
			list All_projects
			{
				hide = true
			}
			list All_jobs
			{
				hide = true
			}
			list All_task
			{
				hide = true
			}
		}
		section  Dashboard
		{
			page Dashboard
			{
				hide = true
			}
			page Dashboard_Mobile
			{
			}
		}
		section  Logs
		{
			form  Add_Time_Logs
			{
				layout = left
			}
			form  Add_Daily_Logs
			{
				layout = left
			}
			form  Add_weekly_Logs
			{
				layout = left
			}
			calendar My_Logs
			{
			}
			list Team_Logs
			{
			}
			list All_Logs
			{
			}
		}
		section  Jobs_Tasks
		{
			displayname= "Jobs/Tasks"
			list Projects
			{
			}
			list Jobs
			{
			}
			list Tasks
			{
			}
		}
		section  Admin
		{
			list Employees
			{
			}
			form  Add_Employee
			{
				layout = left
			}
		}
		customize
		{
			colour = blue
        	layout = slidingpane
		 	icons style = outline
		}
	}
	translation
{
"{\"de\":{\"FormField.Stop_Timer.Task\":\" Aufgabe \",\"FormField.Add_Project.Jobs\":\" Arbeitsplätze \",\"FormField.Add_Remarks.Added_Time\":\" Zeit hinzugefügt \",\"ReportField.All_jobs.Description\":\" Beschreibung \",\"ReportField.Tasks.Description\":\" Beschreibung \",\"PicklistOption.Add_Time_Logs.Track_as.1\":\" Std \",\"ReportField.All_projects.Project_Manager\":\" Projektmanager \",\"ReportField.Jobs.Description\":\" Beschreibung \",\"PicklistOption.Add_Time_Logs.Track_as.2\":\" Start Ende \",\"ReportField.All_jobs.Assignees_Admin\":\" Beauftragte \",\"FormField.Add_Time_Logs.Job_Name\":\" Berufsbezeichnung \",\"ReportField.My_Logs.Status\":\" Status \",\"ReportField.All_jobs.Project\":\" Projekt \",\"FormButton.Add_Daily_Logs.cancel\":\" Stornieren \",\"FormField.Stop_Timer.Job_Name\":\" Berufsbezeichnung \",\"PicklistOption.Add_Time_Logs.Track_as.3\":\" Timer starten \",\"Report.Projects\":\" Projekte \",\"FormField.Add_weekly_Logs.Added_Time\":\" Zeit hinzugefügt \",\"Languages List.zh-TW\":\" Chinesische Tradition \",\"ReportField.Team_Logs.Project_Name\":\" Projektname \",\"FormField.Add_Project.Record_Status\":\" Aufnahmestatus \",\"Languages List.ja\":\" japanisch \",\"FormField.Add_Task.Modified_Time\":\" Geänderte Zeit \",\"Page.Dashboard\":\" Instrumententafel \",\"FormField.Add_Task.Start_Date_Time\":\" Start Datum-Uhrzeit \",\"FormField.Start_Timer.Task\":\" Aufgabe \",\"ReportField.All_task.Start_Date_Time\":\" Start Datum-Uhrzeit \",\"FormButton.Add_weekly_Logs.update\":\" Aktualisieren \",\"FormField.Add_Job.Modified_User_IP_Address\":\" Geänderte Benutzer-IP-Adresse \",\"ReportField.All_Logs.Job_Name\":\" Berufsbezeichnung \",\"ReportField.Weekly_Logs.Logs.Project_Name\":\" Projektname \",\"Languages List.ku\":\" kurdisch \",\"ReportField.Employees.first_name\":\" Name \",\"Report.All_projects\":\" Alle Projekte \",\"FormButton.Add_Job.cancel\":\" Stornieren \",\"Languages List.km\":\" Khmer \",\"Languages List.ko\":\" Koreanisch \",\"Languages List.kn\":\" Kannada \",\"FormField.Add_Job.Project\":\" Projekt \",\"Languages List.ka\":\" georgisch \",\"ReportField.Weekly_Logs.To_Date\":\" Zu \",\"ReportField.All_projects.Description\":\" Beschreibung \",\"FormField.Add_Daily_Logs.Added_User\":\" Benutzer hinzugefügt \",\"FormField.Add_Project.Modified_Time\":\" Geänderte Zeit \",\"CompositeSubFields.Add_Employee.Name.suffix\":\" Suffix \",\"Languages List.hu\":\" ungarisch \",\"FormField.Add_weekly_Logs.To_Date\":\" Zu \",\"Languages List.yi\":\" Jiddisch \",\"FormButton.Add_Project.update\":\" Aktualisieren \",\"FormField.Start_Timer.Added_User_IP_Address\":\" Benutzer-IP-Adresse hinzugefügt \",\"Languages List.hy\":\" Armenisch \",\"FormField.Add_Time_Logs.Modified_Time\":\" Geänderte Zeit \",\"FormButton.Add_Remarks.Complete\":\" Komplett \",\"FormField.Add_Daily_Logs.Modified_User\":\" Geänderter Benutzer \",\"ReportField.Tasks.Task\":\" Aufgabe \",\"Form.Stop_Timer\":\" Stoppuhr \",\"Report.All_task\":\" Alle Aufgabe \",\"FormField.Add_Daily_Logs.Logs.Task\":\" Aufgabe \",\"ReportField.My_Logs.Job_Name\":\"Berufsbezeichnung\",\"Languages List.hr\":\" kroatisch \",\"FormField.Add_Task.Task\":\" Aufgabe \",\"ReportField.All_jobs.End_Date\":\" Endtermin \",\"ReportField.All_Logs.Description\":\" Beschreibung \",\"FormButton.Add_Project.submit\":\" einreichen \",\"ReportField.Projects.Description\":\" Beschreibung \",\"FormField.Add_Time_Logs.Record_Status\":\" Aufnahmestatus \",\"ReportField.All_jobs.Job_Title\":\" Berufsbezeichnung \",\"ReportField.My_Logs.Hours\":\" Std \",\"ReportField.Team_Logs.Submitted_By\":\" Eingereicht von \",\"Languages List.hi\":\" Hindi \",\"ReportField.Projects.Project_Manager\":\" Projektmanager \",\"ReportField.Jobs.Job_Title\":\" Berufsbezeichnung \",\"FormField.Start_Timer.Modified_User_IP_Address\":\" Geänderte Benutzer-IP-Adresse \",\"FormField.Add_weekly_Logs.From_Date\":\" Von \",\"FormField.Add_Daily_Logs.Logs.Job_Name\":\" Berufsbezeichnung \",\"FormField.Add_Job.Added_Time\":\" Zeit hinzugefügt \",\"FormField.Add_Daily_Logs.Section\":\"Sektion\",\"FormField.Start_Timer.Added_Time\":\" Zeit hinzugefügt \",\"Languages List.zh\":\" Chinesisch \",\"Languages List.iw\":\" hebräisch \",\"ReportField.Daily_Logs.Logs.Project_Name\":\" Projektname \",\"Form.Add_Project\":\" Projekt hinzufügen \",\"FormField.Add_Time_Logs.Project_Manager\":\" Projektmanager \",\"FormField.Add_Remarks.ID\":\" ICH WÜRDE \",\"FormButton.Start_Timer.Start_Timer\":\" Timer starten \",\"ReportField.Team_Logs.End_Time\":\" Endzeit \",\"FormField.Add_Employee.Designation\":\" Bezeichnung \",\"ReportField.Jobs.Start_Date\":\" Anfangsdatum \",\"Languages List.is\":\" isländisch \",\"ReportField.Team_Logs.Task\":\" Aufgabe \",\"FormField.Add_Daily_Logs.ID\":\" ICH WÜRDE \",\"FormField.Add_Task.Added_Time\":\" Zeit hinzugefügt \",\"Languages List.it\":\" Italienisch \",\"FormField.Add_weekly_Logs.Record_Status\":\" Aufnahmestatus \",\"Form.Add_Employee\":\" Mitarbeiter hinzufügen \",\"FormField.Add_Task.Job\":\" Job \",\"FormField.Add_Project.Added_User\":\" Benutzer hinzugefügt \",\"ReportField.Tasks.Start_Date_Time\":\" Start Datum-Uhrzeit \",\"ReportField.All_Logs.Log_Date\":\" Datum \",\"ReportField.Jobs.End_Date\":\" Endtermin \",\"FormButton.Stop_Timer.Stop\":\" Halt \",\"ReportField.All_Logs.Hours\":\" Std \",\"Report.Tasks\":\" Aufgaben \",\"FormField.Add_weekly_Logs.Modified_User_IP_Address\":\" Geänderte Benutzer-IP-Adresse \",\"ReportField.Jobs.Assignees\":\" Beauftragte \",\"ReportField.Tasks.Job\":\" Job \",\"FormField.Add_Job.Record_Status\":\" Aufnahmestatus \",\"FormField.Add_weekly_Logs.ID\":\" ICH WÜRDE \",\"FormField.Add_Remarks.Record_Status\":\" Aufnahmestatus \",\"ReportField.My_Logs.End_Time\":\" Endzeit \",\"FormField.Add_Remarks.Modified_User\":\" Geänderter Benutzer \",\"FormField.Add_Project.Description\":\" Beschreibung \",\"Languages List.nl\":\" Niederländisch \",\"FormButton.Add_Time_Logs.update\":\" Aktualisieren \",\"Section.Logs\":\" Protokolle \",\"FormField.Start_Timer.Record_Status\":\" Aufnahmestatus \",\"Languages List.no\":\" norwegisch \",\"FormField.Add_Project.Title\":\" Titel \",\"Report.Weekly_Logs\":\" Wöchentliche Protokolle \",\"FormField.Stop_Timer.Modified_User_IP_Address\":\" Geänderte Benutzer-IP-Adresse \",\"FormField.Add_Employee.Modified_User\":\" Geänderter Benutzer \",\"FormField.Add_weekly_Logs.Modified_Time\":\" Geänderte Zeit \",\"ReportField.Team_Logs.Hours\":\" Std \",\"FormField.Add_Project.ID\":\" ICH WÜRDE \",\"FormField.Add_Remarks.recID\":\" Anrufbeantworter \",\"FormField.Add_Time_Logs.Track_as\":\" Verfolgen als \",\"FormButton.Add_Task.update\":\" Aktualisieren \",\"FormField.Add_Time_Logs.Log_Date\":\" Datum \",\"FormField.Start_Timer.Modified_Time\":\" Geänderte Zeit \",\"FormField.Add_weekly_Logs.Logs.Sunday\":\" Sonntag \",\"FormField.Add_Job.Assignees_Admin\":\" Beauftragte \",\"FormField.Add_Remarks.Completed_on\":\" Vervollständigt am \",\"FormField.Add_Employee.last_name\":\" Familienname, Nachname \",\"FormField.Add_Job.Status\":\" Status \",\"ReportField.Team_Logs.Description\":\" Beschreibung \",\"FormField.Add_Time_Logs.Modified_User\":\" Geänderter Benutzer \",\"ReportField.All_jobs.Start_Date\":\" Anfangsdatum \",\"Section.Dashboard\":\" Instrumententafel \",\"ReportField.My_Logs.Description\":\" Beschreibung \",\"ReportField.Jobs.Status\":\" Status \",\"ReportField.All_task.Set_Reminder\":\" Erinnerung \",\"FormField.Add_Time_Logs.Added_User\":\" Benutzer hinzugefügt \",\"Report.Team_Logs\":\" Team Logs \",\"FormField.Add_Job.Start_Date\":\" Anfangsdatum \",\"ReportField.All_task.Task_AddedBy\":\" Aufgabe HinzugefügtBy \",\"ReportField.Jobs.Set_Reminder\":\" Erinnerung \",\"FormField.Stop_Timer.Added_User\":\" Benutzer hinzugefügt \",\"Languages List.lt\":\" litauisch \",\"FormButton.Add_weekly_Logs.submit\":\" einreichen \",\"Languages List.lv\":\" lettisch \",\"FormField.Start_Timer.ID\":\" ICH WÜRDE \",\"Languages List.lo\":\" Laothian \",\"FormField.Add_Employee.Added_Time\":\" Zeit hinzugefügt \",\"FormField.Add_Job.Set_Reminder\":\" Erinnerung einstellen (Mail wird 1 Tag vor dem Enddatum ausgelöst) \",\"Languages List.la\":\" Latein \",\"ReportField.My_Logs.Project_Name\":\" Projektname \",\"FormField.Stop_Timer.Project_Name\":\" Projektname \",\"FormField.Add_Task.Modified_User_IP_Address\":\" Geänderte Benutzer-IP-Adresse \",\"FormField.Add_Daily_Logs.Added_User_IP_Address\":\" Benutzer-IP-Adresse hinzugefügt \",\"FormField.Add_Time_Logs.Project_Name\":\" Projektname \",\"FormField.Stop_Timer.Modified_Time\":\" Geänderte Zeit \",\"ReportField.Weekly_Logs.From_Date\":\" Von \",\"ReportField.All_Logs.Project_Manager\":\" Projektmanager \",\"FormButton.Add_Time_Logs.submit\":\" einreichen \",\"ReportField.Team_Logs.Project_Manager\":\" Projektmanager \",\"ReportField.All_task.Job\":\" Job \",\"ReportField.All_projects.Jobs\":\" Arbeitsplätze \",\"CustomAction.My_Logs.Stop_Timer\":\" Stoppuhr \",\"FormField.Add_Employee.first_name\":\" Vorname \",\"FormField.Add_weekly_Logs.Logs.Task\":\" Aufgabe \",\"FormField.Stop_Timer.Record_Status\":\" Aufnahmestatus \",\"Languages List.ms\":\" malaiisch \",\"Languages List.mr\":\" Marathi \",\"FormButton.Add_Time_Logs.cancel\":\" Stornieren \",\"FormField.Add_Job.Modified_Time\":\" Geänderte Zeit \",\"Languages List.mt\":\" maltesisch \",\"FormField.Add_Task.ID\":\" ICH WÜRDE \",\"CompositeSubFields.Add_Employee.Name.first_name\":\" Vorname \",\"Languages List.mk\":\" mazedonisch \",\"FormField.Add_Time_Logs.Submitted_By\":\" Eingereicht von \",\"ReportField.All_task.Task\":\" Aufgabe \",\"PicklistOption.Add_Job.Status.2\":\" Abgeschlossen \",\"PicklistOption.Add_Job.Status.1\":\" Aktiv \",\"FormField.Add_Time_Logs.ID\":\" ICH WÜRDE \",\"ReportField.Employees.Email\":\" Email \",\"FormButton.Add_Task.cancel\":\" Stornieren \",\"FormField.Add_Project.Added_User_IP_Address\":\" Benutzer-IP-Adresse hinzugefügt \",\"Report.Daily_Logs\":\" Tägliche Protokolle \",\"FormButton.Add_Task.submit\":\" einreichen \",\"ReportField.Tasks.End_Date_Time\":\" Enddatum-Uhrzeit \",\"FormField.Add_Task.Modified_User\":\" Geänderter Benutzer \",\"FormField.Add_Task.Added_User_IP_Address\":\" Benutzer-IP-Adresse hinzugefügt \",\"FormField.Add_Remarks.Added_User\":\" Benutzer hinzugefügt \",\"Form.Add_Job\":\" Job hinzufügen \",\"FormField.Stop_Timer.recID\":\" Anrufbeantworter \",\"FormField.Add_Task.Description\":\" Beschreibung \",\"Page.Member_View\":\" Mitgliederansicht \",\"ReportField.Team_Logs.Track_as\":\" Verfolgen als \",\"Form.Add_Task\":\" Aufgabe hinzufügen \",\"ReportField.All_jobs.Assignees\":\" Beauftragte \",\"ReportField.All_Logs.Task\":\" Aufgabe \",\"Languages List.bg\":\" bulgarisch \",\"ReportField.Team_Logs.Log_Date\":\" Datum \",\"Languages List.bn\":\" Bengali \",\"Languages List.ro\":\" rumänisch \",\"FormButton.Add_weekly_Logs.cancel\":\" Stornieren \",\"FormButton.Add_Project.cancel\":\" Stornieren \",\"FormField.Add_weekly_Logs.Added_User\":\" Benutzer hinzugefügt \",\"ReportField.Projects.Project_Members\":\" Projektmitglieder \",\"ReportField.Employees.Designation\":\" Bezeichnung \",\"Languages List.be\":\" Belarussisch \",\"Languages List.ru\":\" Russisch \",\"FormField.Add_Employee.Reporting_To\":\" Berichterstattung an \",\"Languages List.az\":\" Aserbaidschanisch \",\"FormField.Add_Job.Description\":\" Beschreibung \",\"Report.Jobs\":\" Arbeitsplätze \",\"Languages List.ta\":\" Tamilisch \",\"Languages List.cs\":\" Tschechisch \",\"FormField.Add_Employee.Email\":\" Email \",\"ReportField.All_Logs.End_Time\":\" Endzeit \",\"Languages List.te\":\" Telugu \",\"ReportField.Employees.Reporting_To\":\" Berichterstattung an \",\"Languages List.th\":\" Thai \",\"App.time-tracker\":\"Stoppuhr \",\"FormField.Add_Remarks.Modified_User_IP_Address\":\" Geänderte Benutzer-IP-Adresse \",\"Report.My_Logs\":\" Meine Protokolle \",\"Languages List.sq\":\" albanisch \",\"Languages List.ca\":\" katalanisch \",\"FormField.Add_Project.Modified_User\":\" Geänderter Benutzer \",\"FormField.Add_Time_Logs.Hours\":\" Std \",\"FormField.Start_Timer.Job_Name\":\" Berufsbezeichnung \",\"FormField.Add_Job.Added_User_IP_Address\":\" Benutzer-IP-Adresse hinzugefügt \",\"ReportField.Daily_Logs.Log_Date_Daily\":\" Protokolldatum \",\"Languages List.sw\":\" Swahili \",\"Languages List.sv\":\" Schwedisch \",\"FormField.Add_Daily_Logs.Added_Time\":\" Zeit hinzugefügt \",\"ReportField.All_task.End_Date_Time\":\" Enddatum-Uhrzeit \",\"Languages List.sk\":\" slowakisch \",\"Report.All_jobs\":\" Alle Jobs \",\"FormField.Add_Job.End_Date\":\" Endtermin \",\"Languages List.sl\":\" Slowenisch \",\"FormButton.Add_Daily_Logs.update\":\" Aktualisieren \",\"FormField.Add_weekly_Logs.Logs.Tuesday\":\" Dienstag \",\"ReportField.All_Logs.Project_Name\":\" Projektname \",\"ReportField.Tasks.Set_Reminder\":\" Erinnerung \",\"CompositeSubFields.Add_Employee.Name.prefix\":\" Präfix \",\"FormField.Add_Task.Task_AddedBy\":\" Aufgabe HinzugefügtBy \",\"ReportField.My_Logs.Submitted_By\":\" Eingereicht von \",\"FormField.Start_Timer.Project_Name\":\" Projektname \",\"FormButton.Add_Employee.reset\":\" Zurücksetzen \",\"FormField.Start_Timer.Added_User\":\" Benutzer hinzugefügt \",\"FormField.Stop_Timer.ID\":\" ICH WÜRDE \",\"FormButton.Add_Daily_Logs.submit\":\" einreichen \",\"PicklistOption.Add_Employee.prefix.1\":\" Herr. \",\"PicklistOption.Add_Time_Logs.Status.2\":\" Aufgespürt \",\"PicklistOption.Add_Time_Logs.Status.1\":\" Verfolgungszeit \",\"PicklistOption.Add_Employee.prefix.3\":\" Frau. \",\"Languages List.pt\":\" Portugiesisch \",\"PicklistOption.Add_Employee.prefix.2\":\" Frau. \",\"ReportField.All_Logs.Status\":\" Status \",\"ReportField.All_projects.Project_Members\":\" Projektmitglieder \",\"FormButton.Add_Employee.update\":\" Aktualisieren \",\"ReportField.All_task.Description\":\" Beschreibung \",\"FormField.Add_Job.Added_User\":\" Benutzer hinzugefügt \",\"Languages List.pl\":\" Polieren \",\"FormButton.Add_Daily_Logs.reset\":\" Zurücksetzen \",\"ReportField.Jobs.Remarks\":\" Bemerkungen \",\"ReportField.All_Logs.Submitted_By\":\" Eingereicht von \",\"Languages List.ar\":\" Arabisch \",\"FormField.Add_Daily_Logs.Record_Status\":\" Aufnahmestatus \",\"FormField.Add_Employee.Name\":\" Name \",\"FormField.Add_Task.Set_Reminder\":\" Set Reminder (Mail wird 1 Stunde vor Endzeit ausgelöst) \",\"FormField.Add_Remarks.Added_User_IP_Address\":\" Benutzer-IP-Adresse hinzugefügt \",\"Languages List.af\":\" Afrikaans \",\"FormField.Add_Task.Added_User\":\" Benutzer hinzugefügt \",\"ReportField.My_Logs.Log_Date\":\"Datum\",\"FormField.Add_Time_Logs.TimerStopAt\":\" TimerStopAt \",\"ReportField.Team_Logs.Job_Name\":\" Berufsbezeichnung \",\"FormField.Add_Employee.suffix\":\" Suffix \",\"Form.Add_weekly_Logs\":\" Fügen Sie wöchentliche Protokolle hinzu \",\"FormField.Add_Project.Added_Time\":\" Zeit hinzugefügt \",\"FormField.Add_Daily_Logs.Modified_Time\":\" Geänderte Zeit \",\"FormField.Add_Employee.Added_User_IP_Address\":\" Benutzer-IP-Adresse hinzugefügt \",\"FormField.Add_weekly_Logs.Logs.Thursday\":\" Donnerstag \",\"CustomAction.Jobs.Complete\":\" Komplett \",\"FormButton.Add_Project.reset\":\" Zurücksetzen \",\"FormField.Add_weekly_Logs.Logs.Job_Name\":\" Berufsbezeichnung \",\"FormField.Add_weekly_Logs.Logs.Monday\":\" Montag \",\"FormField.Add_Employee.prefix\":\" Präfix \",\"CompositeSubFields.Add_Employee.Name.last_name\":\" Familienname, Nachname \",\"FormField.Add_Project.Project_Manager\":\" Projektmanager \",\"FormButton.Add_Task.reset\":\" Zurücksetzen \",\"ReportField.All_jobs.Set_Reminder\":\" Erinnerung \",\"FormField.Add_Employee.Modified_User_IP_Address\":\" Geänderte Benutzer-IP-Adresse \",\"FormButton.Add_weekly_Logs.reset\":\" Zurücksetzen \",\"FormField.Add_Job.Remarks\":\" Bemerkungen \",\"FormButton.Add_Employee.cancel\":\" Stornieren \",\"FormField.Add_Remarks.Modified_Time\":\" Geänderte Zeit \",\"Form.Add_Time_Logs\":\" Fügen Sie Zeitprotokolle hinzu \",\"ReportField.My_Logs.Start_Time\":\"Startzeit\",\"Languages List.fr\":\" Französisch \",\"FormField.Add_Time_Logs.JobID\":\" Job-ID \",\"Form.Add_Daily_Logs\":\" Tägliche Protokolle hinzufügen \",\"FormField.Add_Daily_Logs.Logs.Description\":\" Beschreibung \",\"FormField.Add_Employee.Modified_Time\":\" Geänderte Zeit \",\"FormField.Add_Time_Logs.Start_Time\":\" Startzeit \",\"Languages List.fi\":\" Finnese \",\"FormField.Add_Time_Logs.Added_User_IP_Address\":\" Benutzer-IP-Adresse hinzugefügt \",\"FormField.Add_weekly_Logs.Modified_User\":\" Geänderter Benutzer \",\"FormField.Add_weekly_Logs.Added_User_IP_Address\":\" Benutzer-IP-Adresse hinzugefügt \",\"FormField.Add_Project.Modified_User_IP_Address\":\" Geänderte Benutzer-IP-Adresse \",\"Languages List.fa\":\" persisch \",\"FormField.Add_Time_Logs.Added_Time\":\" Zeit hinzugefügt \",\"Languages List.gu\":\" Gujarati \",\"FormField.Add_weekly_Logs.Logs.Saturday\":\" Samstag \",\"FormButton.Add_Job.reset\":\" Zurücksetzen \",\"Report.All_Logs\":\" Alle Protokolle \",\"FormField.Add_Employee.Record_Status\":\" Aufnahmestatus \",\"ReportField.All_Logs.Start_Time\":\" Startzeit \",\"Languages List.gl\":\" galizisch \",\"ReportField.Team_Logs.Start_Time\":\" Startzeit \",\"FormField.Add_Time_Logs.Description\":\" Beschreibung \",\"FormField.Start_Timer.Modified_User\":\" Geänderter Benutzer \",\"ReportField.My_Logs.Project_Manager\":\" Projektmanager \",\"FormField.Add_Time_Logs.Status\":\" Status \",\"FormField.Start_Timer.Section\":\" Sektion \",\"Languages List.ga\":\" irisch \",\"FormField.Add_Job.Assignees\":\" Beauftragte \",\"Form.Start_Timer\":\" Timer starten \",\"Section.Hidden\":\" Versteckt \",\"FormField.Add_Daily_Logs.Modified_User_IP_Address\":\" Geänderte Benutzer-IP-Adresse \",\"ReportField.All_Logs.Track_as\":\" Verfolgen als \",\"ReportField.Projects.Title\":\" Titel \",\"FormField.Add_Daily_Logs.Logs\":\" Protokolle \",\"FormField.Add_Daily_Logs.Logs.Project_Name\":\" Projektname \",\"FormButton.Add_Employee.submit\":\" einreichen \",\"ReportField.My_Logs.Task\":\" Aufgabe \",\"FormButton.Add_Job.submit\":\" einreichen \",\"FormField.Add_weekly_Logs.Logs\":\" Protokolle \",\"FormField.Stop_Timer.Added_Time\":\" Zeit hinzugefügt \",\"ReportField.Jobs.Project\":\" Projekt \",\"FormField.Add_Time_Logs.End_Time\":\" Endzeit \",\"FormField.Add_Employee.ID\":\" ICH WÜRDE \",\"FormField.Add_weekly_Logs.Logs.Project_Name\":\" Projektname \",\"Languages List.tr\":\" Türkisch \",\"FormField.Add_Job.Job_Title\":\" Berufsbezeichnung \",\"Languages List.da\":\" dänisch \",\"Languages List.de\":\" Deutsche \",\"Languages List.cy\":\" Walisisch \",\"FormField.Add_Employee.Added_User\":\" Benutzer hinzugefügt \",\"Form.Add_Remarks\":\" Anmerkungen hinzufügen \",\"Languages List.tl\":\" Filipino \",\"FormField.Add_Daily_Logs.Logs.Hours\":\" Std \",\"FormField.Stop_Timer.Modified_User\":\" Geänderter Benutzer \",\"ReportField.All_projects.Title\":\" Titel \",\"ReportField.Team_Logs.Status\":\" Status \",\"Languages List.es\":\" Spanisch \",\"Languages List.eu\":\" baskisch \",\"Languages List.et\":\" estnisch \",\"Section.Jobs_Tasks\":\"Jobs / Aufgaben \",\"FormField.Add_Job.ID\":\" ICH WÜRDE \",\"FormField.Add_Remarks.Remarks\":\" Bemerkungen \",\"FormField.Stop_Timer.Added_User_IP_Address\":\" Benutzer-IP-Adresse hinzugefügt \",\"FormButton.Add_Time_Logs.reset\":\" Zurücksetzen \",\"ReportField.My_Logs.Track_as\":\" Verfolgen als \",\"Languages List.vi\":\" Vietnamesisch \",\"FormButton.Add_Job.update\":\" Aktualisieren \",\"FormField.Add_Project.Project_Members\":\" Projektmitglieder \",\"Section.Admin\":\" Administrator \",\"Languages List.el\":\" griechisch \",\"PicklistOption.Add_Employee.Designation.1\":\" Mitglied \",\"Languages List.eo\":\" Esperanto \",\"PicklistOption.Add_Employee.Designation.2\":\" Manager \",\"FormField.Add_Job.Modified_User\":\" Geänderter Benutzer \",\"Languages List.en\":\" Englisch \",\"FormField.Add_Daily_Logs.Log_Date_Daily\":\" Datum \",\"FormField.Add_Task.End_Date_Time\":\" Enddatum-Uhrzeit \",\"FormField.Add_Time_Logs.Modified_User_IP_Address\":\" Geänderte Benutzer-IP-Adresse \",\"Languages List.ur\":\" Urdu \",\"FormField.Add_Time_Logs.Task\":\" Aufgabe \",\"Report.Employees\":\" Angestellte \",\"FormField.Add_Task.Record_Status\":\" Aufnahmestatus \",\"FormField.Add_weekly_Logs.Logs.Wednesday\":\" Mittwoch \",\"FormField.Add_weekly_Logs.Logs.Friday\":\" Freitag \"},\"fr\":{\"FormField.Stop_Timer.Task\":\" Tâche \",\"FormField.Add_Project.Jobs\":\" Emplois \",\"FormField.Add_Remarks.Added_Time\":\" Temps ajouté \",\"ReportField.All_jobs.Description\":\" La description \",\"ReportField.Tasks.Description\":\" La description \",\"PicklistOption.Add_Time_Logs.Track_as.1\":\" Heures \",\"ReportField.All_projects.Project_Manager\":\" Chef de projet \",\"ReportField.Jobs.Description\":\" La description \",\"PicklistOption.Add_Time_Logs.Track_as.2\":\" Début Fin \",\"ReportField.All_jobs.Assignees_Admin\":\" Cessionnaires \",\"FormField.Add_Time_Logs.Job_Name\":\" Nom du travail \",\"ReportField.My_Logs.Status\":\" Statut \",\"ReportField.All_jobs.Project\":\" Projet \",\"FormButton.Add_Daily_Logs.cancel\":\" Annuler \",\"FormField.Stop_Timer.Job_Name\":\" Nom du travail \",\"PicklistOption.Add_Time_Logs.Track_as.3\":\" Démarrer le minuteur \",\"Report.Projects\":\" Projets \",\"FormField.Add_weekly_Logs.Added_Time\":\" Temps ajouté \",\"Languages List.zh-TW\":\" Chinois traditionnel \",\"ReportField.Team_Logs.Project_Name\":\" nom du projet \",\"FormField.Add_Project.Record_Status\":\" Statut d'enregistrement \",\"Languages List.ja\":\" Japonais \",\"FormField.Add_Task.Modified_Time\":\" Heure modifiée \",\"Page.Dashboard\":\" Tableau de bord \",\"FormField.Add_Task.Start_Date_Time\":\" Date de début \",\"FormField.Start_Timer.Task\":\" Tâche \",\"ReportField.All_task.Start_Date_Time\":\" Date de début \",\"FormButton.Add_weekly_Logs.update\":\" Mettre à jour \",\"FormField.Add_Job.Modified_User_IP_Address\":\" Adresse IP de l'utilisateur modifié \",\"ReportField.All_Logs.Job_Name\":\" Nom du travail \",\"ReportField.Weekly_Logs.Logs.Project_Name\":\" nom du projet \",\"Languages List.ku\":\" kurde \",\"ReportField.Employees.first_name\":\" prénom \",\"Report.All_projects\":\" Tous les projets \",\"FormButton.Add_Job.cancel\":\" Annuler \",\"Languages List.km\":\" Khmer \",\"Languages List.ko\":\" coréen \",\"Languages List.kn\":\" Kannada \",\"FormField.Add_Job.Project\":\" Projet \",\"Languages List.ka\":\" géorgien \",\"ReportField.Weekly_Logs.To_Date\":\" À \",\"ReportField.All_projects.Description\":\" La description \",\"FormField.Add_Daily_Logs.Added_User\":\" Utilisateur ajouté \",\"FormField.Add_Project.Modified_Time\":\" Heure modifiée \",\"CompositeSubFields.Add_Employee.Name.suffix\":\" Suffixe \",\"Languages List.hu\":\" hongrois \",\"FormField.Add_weekly_Logs.To_Date\":\" À \",\"Languages List.yi\":\" yiddish \",\"FormButton.Add_Project.update\":\" Mettre à jour \",\"FormField.Start_Timer.Added_User_IP_Address\":\" Adresse IP de l'utilisateur ajouté \",\"Languages List.hy\":\" arménien \",\"FormField.Add_Time_Logs.Modified_Time\":\" Heure modifiée \",\"FormButton.Add_Remarks.Complete\":\" Achevée \",\"FormField.Add_Daily_Logs.Modified_User\":\" Utilisateur modifié \",\"ReportField.Tasks.Task\":\" Tâche \",\"Form.Stop_Timer\":\" Arrêter le minuteur \",\"Report.All_task\":\" Toutes les tâches \",\"FormField.Add_Daily_Logs.Logs.Task\":\" Tâche \",\"ReportField.My_Logs.Job_Name\":\"Nom du travail\",\"Languages List.hr\":\" croate \",\"FormField.Add_Task.Task\":\" Tâche \",\"ReportField.All_jobs.End_Date\":\" Date de fin \",\"ReportField.All_Logs.Description\":\" La description \",\"FormButton.Add_Project.submit\":\" Soumettre \",\"ReportField.Projects.Description\":\" La description \",\"FormField.Add_Time_Logs.Record_Status\":\" Statut d'enregistrement \",\"ReportField.All_jobs.Job_Title\":\" Profession \",\"ReportField.My_Logs.Hours\":\" Heures \",\"ReportField.Team_Logs.Submitted_By\":\" Proposé par \",\"Languages List.hi\":\" hindi \",\"ReportField.Projects.Project_Manager\":\" Chef de projet \",\"ReportField.Jobs.Job_Title\":\" Profession \",\"FormField.Start_Timer.Modified_User_IP_Address\":\" Adresse IP de l'utilisateur modifié \",\"FormField.Add_weekly_Logs.From_Date\":\" De \",\"FormField.Add_Daily_Logs.Logs.Job_Name\":\" Nom du travail \",\"FormField.Add_Job.Added_Time\":\" Temps ajouté \",\"FormField.Add_Daily_Logs.Section\":\"Section\",\"FormField.Start_Timer.Added_Time\":\" Temps ajouté \",\"Languages List.zh\":\" chinois \",\"Languages List.iw\":\" hébreu \",\"ReportField.Daily_Logs.Logs.Project_Name\":\" nom du projet \",\"Form.Add_Project\":\" Ajouter un projet \",\"FormField.Add_Time_Logs.Project_Manager\":\" Chef de projet \",\"FormField.Add_Remarks.ID\":\" ID \",\"FormButton.Start_Timer.Start_Timer\":\" Démarrer le minuteur \",\"ReportField.Team_Logs.End_Time\":\" Heure de fin \",\"FormField.Add_Employee.Designation\":\" La désignation \",\"ReportField.Jobs.Start_Date\":\" Date de début \",\"Languages List.is\":\" islandais \",\"ReportField.Team_Logs.Task\":\" Tâche \",\"FormField.Add_Daily_Logs.ID\":\" ID \",\"FormField.Add_Task.Added_Time\":\" Temps ajouté \",\"Languages List.it\":\" italien \",\"FormField.Add_weekly_Logs.Record_Status\":\" Statut d'enregistrement \",\"Form.Add_Employee\":\" Ajouter un employé \",\"FormField.Add_Task.Job\":\" Emploi \",\"FormField.Add_Project.Added_User\":\" Utilisateur ajouté \",\"ReportField.Tasks.Start_Date_Time\":\" Date de début \",\"ReportField.All_Logs.Log_Date\":\" Rendez-vous amoureux \",\"ReportField.Jobs.End_Date\":\" Date de fin \",\"FormButton.Stop_Timer.Stop\":\" Arrêtez \",\"ReportField.All_Logs.Hours\":\" Heures \",\"Report.Tasks\":\" les tâches \",\"FormField.Add_weekly_Logs.Modified_User_IP_Address\":\" Adresse IP de l'utilisateur modifié \",\"ReportField.Jobs.Assignees\":\" Cessionnaires \",\"ReportField.Tasks.Job\":\" Emploi \",\"FormField.Add_Job.Record_Status\":\" Statut d'enregistrement \",\"FormField.Add_weekly_Logs.ID\":\" ID \",\"FormField.Add_Remarks.Record_Status\":\" Statut d'enregistrement \",\"ReportField.My_Logs.End_Time\":\" Heure de fin \",\"FormField.Add_Remarks.Modified_User\":\" Utilisateur modifié \",\"FormField.Add_Project.Description\":\" La description \",\"Languages List.nl\":\" néerlandais \",\"FormButton.Add_Time_Logs.update\":\" Mettre à jour \",\"Section.Logs\":\" Journaux \",\"FormField.Start_Timer.Record_Status\":\" Statut d'enregistrement \",\"Languages List.no\":\" norvégien \",\"FormField.Add_Project.Title\":\" Titre \",\"Report.Weekly_Logs\":\" Journaux hebdomadaires \",\"FormField.Stop_Timer.Modified_User_IP_Address\":\" Adresse IP de l'utilisateur modifié \",\"FormField.Add_Employee.Modified_User\":\" Utilisateur modifié \",\"FormField.Add_weekly_Logs.Modified_Time\":\" Heure modifiée \",\"ReportField.Team_Logs.Hours\":\" Heures \",\"FormField.Add_Project.ID\":\" ID \",\"FormField.Add_Remarks.recID\":\" recID \",\"FormField.Add_Time_Logs.Track_as\":\" Suivre comme \",\"FormButton.Add_Task.update\":\" Mettre à jour \",\"FormField.Add_Time_Logs.Log_Date\":\" Rendez-vous amoureux \",\"FormField.Start_Timer.Modified_Time\":\" Heure modifiée \",\"FormField.Add_weekly_Logs.Logs.Sunday\":\" dimanche \",\"FormField.Add_Job.Assignees_Admin\":\" Cessionnaires \",\"FormField.Add_Remarks.Completed_on\":\" Terminé le \",\"FormField.Add_Employee.last_name\":\" Nom de famille \",\"FormField.Add_Job.Status\":\" Statut \",\"ReportField.Team_Logs.Description\":\" La description \",\"FormField.Add_Time_Logs.Modified_User\":\" Utilisateur modifié \",\"ReportField.All_jobs.Start_Date\":\" Date de début \",\"Section.Dashboard\":\" Tableau de bord \",\"ReportField.My_Logs.Description\":\" La description \",\"ReportField.Jobs.Status\":\" Statut \",\"ReportField.All_task.Set_Reminder\":\" Rappel \",\"FormField.Add_Time_Logs.Added_User\":\" Utilisateur ajouté \",\"Report.Team_Logs\":\" Journaux d'équipe \",\"FormField.Add_Job.Start_Date\":\" Date de début \",\"ReportField.All_task.Task_AddedBy\":\" Tâche ajoutée \",\"ReportField.Jobs.Set_Reminder\":\" Rappel \",\"FormField.Stop_Timer.Added_User\":\" Utilisateur ajouté \",\"Languages List.lt\":\" lituanien \",\"FormButton.Add_weekly_Logs.submit\":\" Soumettre \",\"Languages List.lv\":\" letton \",\"FormField.Start_Timer.ID\":\" ID \",\"Languages List.lo\":\" Laothian \",\"FormField.Add_Employee.Added_Time\":\" Temps ajouté \",\"FormField.Add_Job.Set_Reminder\":\" Définir un rappel (le courrier sera déclenché 1 jour avant la date de fin) \",\"Languages List.la\":\" Latin \",\"ReportField.My_Logs.Project_Name\":\" nom du projet \",\"FormField.Stop_Timer.Project_Name\":\" nom du projet \",\"FormField.Add_Task.Modified_User_IP_Address\":\" Adresse IP de l'utilisateur modifié \",\"FormField.Add_Daily_Logs.Added_User_IP_Address\":\" Adresse IP de l'utilisateur ajouté \",\"FormField.Add_Time_Logs.Project_Name\":\" nom du projet \",\"FormField.Stop_Timer.Modified_Time\":\" Heure modifiée \",\"ReportField.Weekly_Logs.From_Date\":\" De \",\"ReportField.All_Logs.Project_Manager\":\" Chef de projet \",\"FormButton.Add_Time_Logs.submit\":\" Soumettre \",\"ReportField.Team_Logs.Project_Manager\":\" Chef de projet \",\"ReportField.All_task.Job\":\" Emploi \",\"ReportField.All_projects.Jobs\":\" Emplois \",\"CustomAction.My_Logs.Stop_Timer\":\" Arrêter le minuteur \",\"FormField.Add_Employee.first_name\":\" Prénom \",\"FormField.Add_weekly_Logs.Logs.Task\":\" Tâche \",\"FormField.Stop_Timer.Record_Status\":\" Statut d'enregistrement \",\"Languages List.ms\":\" malais \",\"Languages List.mr\":\" Marathi \",\"FormButton.Add_Time_Logs.cancel\":\" Annuler \",\"FormField.Add_Job.Modified_Time\":\" Heure modifiée \",\"Languages List.mt\":\" maltais \",\"FormField.Add_Task.ID\":\" ID \",\"CompositeSubFields.Add_Employee.Name.first_name\":\" Prénom \",\"Languages List.mk\":\" Macédonien \",\"FormField.Add_Time_Logs.Submitted_By\":\" Proposé par \",\"ReportField.All_task.Task\":\" Tâche \",\"PicklistOption.Add_Job.Status.2\":\" Terminé \",\"PicklistOption.Add_Job.Status.1\":\" actif \",\"FormField.Add_Time_Logs.ID\":\" ID \",\"ReportField.Employees.Email\":\" Email \",\"FormButton.Add_Task.cancel\":\" Annuler \",\"FormField.Add_Project.Added_User_IP_Address\":\" Adresse IP de l'utilisateur ajouté \",\"Report.Daily_Logs\":\" Journaux quotidiens \",\"FormButton.Add_Task.submit\":\" Soumettre \",\"ReportField.Tasks.End_Date_Time\":\" Date de fin \",\"FormField.Add_Task.Modified_User\":\" Utilisateur modifié \",\"FormField.Add_Task.Added_User_IP_Address\":\" Adresse IP de l'utilisateur ajouté \",\"FormField.Add_Remarks.Added_User\":\" Utilisateur ajouté \",\"Form.Add_Job\":\" Ajouter un travail \",\"FormField.Stop_Timer.recID\":\" recID \",\"FormField.Add_Task.Description\":\" La description \",\"Page.Member_View\":\" Membre Voir \",\"ReportField.Team_Logs.Track_as\":\" Suivre comme \",\"Form.Add_Task\":\" Ajouter une tâche \",\"ReportField.All_jobs.Assignees\":\" Cessionnaires \",\"ReportField.All_Logs.Task\":\" Tâche \",\"Languages List.bg\":\" bulgare \",\"ReportField.Team_Logs.Log_Date\":\" Rendez-vous amoureux \",\"Languages List.bn\":\" bengali \",\"Languages List.ro\":\" roumain \",\"FormButton.Add_weekly_Logs.cancel\":\" Annuler \",\"FormButton.Add_Project.cancel\":\" Annuler \",\"FormField.Add_weekly_Logs.Added_User\":\" Utilisateur ajouté \",\"ReportField.Projects.Project_Members\":\" Les membres du projet \",\"ReportField.Employees.Designation\":\" La désignation \",\"Languages List.be\":\" Biélorusse \",\"Languages List.ru\":\" russe \",\"FormField.Add_Employee.Reporting_To\":\" Signaler à \",\"Languages List.az\":\" azerbaïdjanais \",\"FormField.Add_Job.Description\":\" La description \",\"Report.Jobs\":\" Emplois \",\"Languages List.ta\":\" Tamil \",\"Languages List.cs\":\" tchèque \",\"FormField.Add_Employee.Email\":\" Email \",\"ReportField.All_Logs.End_Time\":\" Heure de fin \",\"Languages List.te\":\" Telugu \",\"ReportField.Employees.Reporting_To\":\" Signaler à \",\"Languages List.th\":\" thaïlandais \",\"App.time-tracker\":\"Suivi du temps \",\"FormField.Add_Remarks.Modified_User_IP_Address\":\" Adresse IP de l'utilisateur modifié \",\"Report.My_Logs\":\" Mes journaux \",\"Languages List.sq\":\" albanais \",\"Languages List.ca\":\" catalan \",\"FormField.Add_Project.Modified_User\":\" Utilisateur modifié \",\"FormField.Add_Time_Logs.Hours\":\" Heures \",\"FormField.Start_Timer.Job_Name\":\" Nom du travail \",\"FormField.Add_Job.Added_User_IP_Address\":\" Adresse IP de l'utilisateur ajouté \",\"ReportField.Daily_Logs.Log_Date_Daily\":\" Date du journal \",\"Languages List.sw\":\" Swahili \",\"Languages List.sv\":\" suédois \",\"FormField.Add_Daily_Logs.Added_Time\":\" Temps ajouté \",\"ReportField.All_task.End_Date_Time\":\" Date de fin \",\"Languages List.sk\":\" slovaque \",\"Report.All_jobs\":\" Tous les emplois \",\"FormField.Add_Job.End_Date\":\" Date de fin \",\"Languages List.sl\":\" slovène \",\"FormButton.Add_Daily_Logs.update\":\" Mettre à jour \",\"FormField.Add_weekly_Logs.Logs.Tuesday\":\" Mardi \",\"ReportField.All_Logs.Project_Name\":\" nom du projet \",\"ReportField.Tasks.Set_Reminder\":\" Rappel \",\"CompositeSubFields.Add_Employee.Name.prefix\":\" Préfixe \",\"FormField.Add_Task.Task_AddedBy\":\" Tâche ajoutée \",\"ReportField.My_Logs.Submitted_By\":\" Proposé par \",\"FormField.Start_Timer.Project_Name\":\" nom du projet \",\"FormButton.Add_Employee.reset\":\" Réinitialiser \",\"FormField.Start_Timer.Added_User\":\" Utilisateur ajouté \",\"FormField.Stop_Timer.ID\":\" ID \",\"FormButton.Add_Daily_Logs.submit\":\" Soumettre \",\"PicklistOption.Add_Employee.prefix.1\":\" M. \",\"PicklistOption.Add_Time_Logs.Status.2\":\" Suivi \",\"PicklistOption.Add_Time_Logs.Status.1\":\" Temps de suivi \",\"PicklistOption.Add_Employee.prefix.3\":\" Mme. \",\"Languages List.pt\":\" Portugais \",\"PicklistOption.Add_Employee.prefix.2\":\" Madame. \",\"ReportField.All_Logs.Status\":\" Statut \",\"ReportField.All_projects.Project_Members\":\" Les membres du projet \",\"FormButton.Add_Employee.update\":\" Mettre à jour \",\"ReportField.All_task.Description\":\" La description \",\"FormField.Add_Job.Added_User\":\" Utilisateur ajouté \",\"Languages List.pl\":\" polonais \",\"FormButton.Add_Daily_Logs.reset\":\" Réinitialiser \",\"ReportField.Jobs.Remarks\":\" Remarques \",\"ReportField.All_Logs.Submitted_By\":\" Proposé par \",\"Languages List.ar\":\" arabe \",\"FormField.Add_Daily_Logs.Record_Status\":\" Statut d'enregistrement \",\"FormField.Add_Employee.Name\":\" prénom \",\"FormField.Add_Task.Set_Reminder\":\" Définir un rappel (le courrier sera déclenché 1 heure avant la fin) \",\"FormField.Add_Remarks.Added_User_IP_Address\":\" Adresse IP de l'utilisateur ajouté \",\"Languages List.af\":\" afrikaans \",\"FormField.Add_Task.Added_User\":\" Utilisateur ajouté \",\"ReportField.My_Logs.Log_Date\":\"Rendez-vous amoureux\",\"FormField.Add_Time_Logs.TimerStopAt\":\" TimerStopAt \",\"ReportField.Team_Logs.Job_Name\":\" Nom du travail \",\"FormField.Add_Employee.suffix\":\" Suffixe \",\"Form.Add_weekly_Logs\":\" Ajouter des journaux hebdomadaires \",\"FormField.Add_Project.Added_Time\":\" Temps ajouté \",\"FormField.Add_Daily_Logs.Modified_Time\":\" Heure modifiée \",\"FormField.Add_Employee.Added_User_IP_Address\":\" Adresse IP de l'utilisateur ajouté \",\"FormField.Add_weekly_Logs.Logs.Thursday\":\" Jeudi \",\"CustomAction.Jobs.Complete\":\" Achevée \",\"FormButton.Add_Project.reset\":\" Réinitialiser \",\"FormField.Add_weekly_Logs.Logs.Job_Name\":\" Nom du travail \",\"FormField.Add_weekly_Logs.Logs.Monday\":\" Lundi \",\"FormField.Add_Employee.prefix\":\" Préfixe \",\"CompositeSubFields.Add_Employee.Name.last_name\":\" Nom de famille \",\"FormField.Add_Project.Project_Manager\":\" Chef de projet \",\"FormButton.Add_Task.reset\":\" Réinitialiser \",\"ReportField.All_jobs.Set_Reminder\":\" Rappel \",\"FormField.Add_Employee.Modified_User_IP_Address\":\" Adresse IP de l'utilisateur modifié \",\"FormButton.Add_weekly_Logs.reset\":\" Réinitialiser \",\"FormField.Add_Job.Remarks\":\" Remarques \",\"FormButton.Add_Employee.cancel\":\" Annuler \",\"FormField.Add_Remarks.Modified_Time\":\" Heure modifiée \",\"Form.Add_Time_Logs\":\" Ajouter des journaux de temps \",\"ReportField.My_Logs.Start_Time\":\" Heure de début \",\"Languages List.fr\":\" français \",\"FormField.Add_Time_Logs.JobID\":\" JobID \",\"Form.Add_Daily_Logs\":\" Ajouter des journaux quotidiens \",\"FormField.Add_Daily_Logs.Logs.Description\":\" La description \",\"FormField.Add_Employee.Modified_Time\":\" Heure modifiée \",\"FormField.Add_Time_Logs.Start_Time\":\" Heure de début \",\"Languages List.fi\":\" Finnois \",\"FormField.Add_Time_Logs.Added_User_IP_Address\":\" Adresse IP de l'utilisateur ajouté \",\"FormField.Add_weekly_Logs.Modified_User\":\" Utilisateur modifié \",\"FormField.Add_weekly_Logs.Added_User_IP_Address\":\" Adresse IP de l'utilisateur ajouté \",\"FormField.Add_Project.Modified_User_IP_Address\":\" Adresse IP de l'utilisateur modifié \",\"Languages List.fa\":\" persan \",\"FormField.Add_Time_Logs.Added_Time\":\" Temps ajouté \",\"Languages List.gu\":\" Gujarati \",\"FormField.Add_weekly_Logs.Logs.Saturday\":\" samedi \",\"FormButton.Add_Job.reset\":\" Réinitialiser \",\"Report.All_Logs\":\" Tous les journaux \",\"FormField.Add_Employee.Record_Status\":\" Statut d'enregistrement \",\"ReportField.All_Logs.Start_Time\":\" Heure de début \",\"Languages List.gl\":\" Galicien \",\"ReportField.Team_Logs.Start_Time\":\" Heure de début \",\"FormField.Add_Time_Logs.Description\":\" La description \",\"FormField.Start_Timer.Modified_User\":\" Utilisateur modifié \",\"ReportField.My_Logs.Project_Manager\":\" Chef de projet \",\"FormField.Add_Time_Logs.Status\":\" Statut \",\"FormField.Start_Timer.Section\":\" Section \",\"Languages List.ga\":\" irlandais \",\"FormField.Add_Job.Assignees\":\" Cessionnaires \",\"Form.Start_Timer\":\" Démarrer le minuteur \",\"Section.Hidden\":\" Caché \",\"FormField.Add_Daily_Logs.Modified_User_IP_Address\":\" Adresse IP de l'utilisateur modifié \",\"ReportField.All_Logs.Track_as\":\" Suivre comme \",\"ReportField.Projects.Title\":\" Titre \",\"FormField.Add_Daily_Logs.Logs\":\" Journaux \",\"FormField.Add_Daily_Logs.Logs.Project_Name\":\" nom du projet \",\"FormButton.Add_Employee.submit\":\" Soumettre \",\"ReportField.My_Logs.Task\":\" Tâche \",\"FormButton.Add_Job.submit\":\" Soumettre \",\"FormField.Add_weekly_Logs.Logs\":\" Journaux \",\"FormField.Stop_Timer.Added_Time\":\" Temps ajouté \",\"ReportField.Jobs.Project\":\" Projet \",\"FormField.Add_Time_Logs.End_Time\":\" Heure de fin \",\"FormField.Add_Employee.ID\":\" ID \",\"FormField.Add_weekly_Logs.Logs.Project_Name\":\" nom du projet \",\"Languages List.tr\":\" turc \",\"FormField.Add_Job.Job_Title\":\" Profession \",\"Languages List.da\":\" danois \",\"Languages List.de\":\" allemand \",\"Languages List.cy\":\" gallois \",\"FormField.Add_Employee.Added_User\":\" Utilisateur ajouté \",\"Form.Add_Remarks\":\" Ajouter des remarques \",\"Languages List.tl\":\" Philippin \",\"FormField.Add_Daily_Logs.Logs.Hours\":\" Heures \",\"FormField.Stop_Timer.Modified_User\":\" Utilisateur modifié \",\"ReportField.All_projects.Title\":\" Titre \",\"ReportField.Team_Logs.Status\":\" Statut \",\"Languages List.es\":\" Espanol \",\"Languages List.eu\":\" basque \",\"Languages List.et\":\" estonien \",\"Section.Jobs_Tasks\":\"Emplois / Tâches \",\"FormField.Add_Job.ID\":\" ID \",\"FormField.Add_Remarks.Remarks\":\" Remarques \",\"FormField.Stop_Timer.Added_User_IP_Address\":\" Adresse IP de l'utilisateur ajouté \",\"FormButton.Add_Time_Logs.reset\":\" Réinitialiser \",\"ReportField.My_Logs.Track_as\":\" Suivre comme \",\"Languages List.vi\":\" vietnamien \",\"FormButton.Add_Job.update\":\" Mettre à jour \",\"FormField.Add_Project.Project_Members\":\" Les membres du projet \",\"Section.Admin\":\" Admin \",\"Languages List.el\":\" grec \",\"PicklistOption.Add_Employee.Designation.1\":\" Membre \",\"Languages List.eo\":\" espéranto \",\"PicklistOption.Add_Employee.Designation.2\":\" Directeur \",\"FormField.Add_Job.Modified_User\":\" Utilisateur modifié \",\"Languages List.en\":\" Anglais \",\"FormField.Add_Daily_Logs.Log_Date_Daily\":\" Rendez-vous amoureux \",\"FormField.Add_Task.End_Date_Time\":\" Date de fin \",\"FormField.Add_Time_Logs.Modified_User_IP_Address\":\" Adresse IP de l'utilisateur modifié \",\"Languages List.ur\":\" Urdu \",\"FormField.Add_Time_Logs.Task\":\" Tâche \",\"Report.Employees\":\" Des employés \",\"FormField.Add_Task.Record_Status\":\" Statut d'enregistrement \",\"FormField.Add_weekly_Logs.Logs.Wednesday\":\" Mercredi \",\"FormField.Add_weekly_Logs.Logs.Friday\":\" Vendredi \"}}"
}
}