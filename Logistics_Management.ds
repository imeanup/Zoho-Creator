/*
 * Author       : app.zohocreator
 * Generated on : 06-May-2020 23:09:56
 * Version      : 1.0
 */
 application "Logistics Management"
 {
 	date format = "dd-MMM-yyyy"
 	time zone = "Asia/Kolkata"
 	time format = "24-hr"
	section Homepage
	{
		icon = "ui-1-home-52"
				 page Mobile_Dashboard 
	 	 { 
 	 	 displayname = "Mobile Dashboard" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<form    \t\t appLinkName = 'thisapp'\n   \t\t linkName = 'Track_Shipment_Mobile'\n   \t\t zc_Header = 'true'\n\n\/>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"33%\"\n   \t>\n\t<panel    \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = 'fill'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = '50px'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t bgColor = '#FAFAFA'\n   \t\t hAlign = 'center'\n   \t\t vAlign = 'middle'\n   \t\t title = 'Title'\n\n>\n\t<text    \t\t type = 'Text'\n   \t\t value = 'Total Orders'\n   \t\t size = '4'\n   \t\t color = '#2D2D2D'\n   \t\t marginLeft = '20px'\n   \t\t marginRight = '20px'\n   \t\t textAlign = 'center'\n   \t\t title = 'Title'\n\n>\n<\/text>\n\n\n<\/pc>\n<\/pr><pr    \t\t height = 'fill'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t bgColor = '#FFFFFF'\n   \t\t padding = '20px'\n   \t\t hAlign = 'center'\n   \t\t vAlign = 'middle'\n   \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = 'auto'\n   \t\t width = 'auto'\n\n>\n\t<pc    \t\t title = 'Title'\n\n>\n\t<text    \t\t type = 'Form Data'\n   \t\t value = 'thisapp.Booking.ID.count'\n   \t\t size = '9'\n   \t\t color = '#962FFF'\n   \t\t bold = 'true'\n   \t\t textAlign = 'center'\n   \t\t displayType = 'actual'\n   \t\t title = 'Title'\n\n>\n<\/text>\n\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column><column\n   \t\t width=\"33%\"\n   \t>\n\t<panel    \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = 'fill'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = '50px'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t bgColor = '#FAFAFA'\n   \t\t hAlign = 'center'\n   \t\t vAlign = 'middle'\n   \t\t title = 'Title'\n\n>\n\t<text    \t\t type = 'Text'\n   \t\t value = 'Total Earnings'\n   \t\t size = '4'\n   \t\t color = '#2D2D2D'\n   \t\t marginLeft = '20px'\n   \t\t marginRight = '20px'\n   \t\t textAlign = 'center'\n   \t\t title = 'Title'\n\n>\n<\/text>\n\n\n<\/pc>\n<\/pr><pr    \t\t height = 'fill'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t bgColor = '#FFFFFF'\n   \t\t padding = '20px'\n   \t\t hAlign = 'center'\n   \t\t vAlign = 'middle'\n   \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = 'auto'\n   \t\t width = 'auto'\n\n>\n\t<pc    \t\t title = 'Title'\n\n>\n\t<text    \t\t type = 'Form Data'\n   \t\t value = 'thisapp.Booking.Freight.sum'\n   \t\t size = '9'\n   \t\t color = '#962FFF'\n   \t\t bold = 'true'\n   \t\t textAlign = 'center'\n   \t\t displayType = 'actual'\n   \t\t title = 'Title'\n\n>\n<\/text>\n\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column><column\n   \t\t width=\"34%\"\n   \t>\n\t<panel    \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = 'fill'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = '50px'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t bgColor = '#FAFAFA'\n   \t\t hAlign = 'center'\n   \t\t vAlign = 'middle'\n   \t\t title = 'Title'\n\n>\n\t<text    \t\t type = 'Text'\n   \t\t value = 'Pending Orders'\n   \t\t size = '4'\n   \t\t color = '#2D2D2D'\n   \t\t marginLeft = '20px'\n   \t\t marginRight = '20px'\n   \t\t textAlign = 'center'\n   \t\t title = 'Title'\n\n>\n<\/text>\n\n\n<\/pc>\n<\/pr><pr    \t\t height = 'fill'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t bgColor = '#FFFFFF'\n   \t\t padding = '20px'\n   \t\t hAlign = 'center'\n   \t\t vAlign = 'middle'\n   \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = 'auto'\n   \t\t width = 'auto'\n\n>\n\t<pc    \t\t title = 'Title'\n\n>\n\t<text    \t\t type = 'Form Data'\n   \t\t value = 'thisapp.Booking.ID.count'\n   \t\t criteria = '(((Status != &quot;Delivered To Customer&quot;)))'\n   \t\t size = '9'\n   \t\t color = '#962FFF'\n   \t\t bold = 'true'\n   \t\t textAlign = 'center'\n   \t\t displayType = 'actual'\n   \t\t title = 'Title'\n\n>\n<\/text>\n\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"33%\"\n   \t>\n\t<panel    \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = 'fill'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = '50px'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t bgColor = '#FAFAFA'\n   \t\t hAlign = 'center'\n   \t\t vAlign = 'middle'\n   \t\t title = 'Title'\n\n>\n\t<text    \t\t type = 'Text'\n   \t\t value = 'In Transit Orders'\n   \t\t size = '4'\n   \t\t color = '#2D2D2D'\n   \t\t marginLeft = '20px'\n   \t\t marginRight = '20px'\n   \t\t textAlign = 'center'\n   \t\t title = 'Title'\n\n>\n<\/text>\n\n\n<\/pc>\n<\/pr><pr    \t\t height = 'fill'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t bgColor = '#FFFFFF'\n   \t\t padding = '20px'\n   \t\t hAlign = 'center'\n   \t\t vAlign = 'middle'\n   \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = 'auto'\n   \t\t width = 'auto'\n\n>\n\t<pc    \t\t title = 'Title'\n\n>\n\t<text    \t\t type = 'Form Data'\n   \t\t value = 'thisapp.Booking.ID.count'\n   \t\t criteria = '((((Status == &quot;Dispatched&quot;)||(Status == &quot;Dispatched for Out-Bound Delivery&quot;))))'\n   \t\t size = '9'\n   \t\t color = '#962FFF'\n   \t\t bold = 'true'\n   \t\t textAlign = 'center'\n   \t\t displayType = 'actual'\n   \t\t title = 'Title'\n\n>\n<\/text>\n\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column><column\n   \t\t width=\"33%\"\n   \t>\n\t<panel    \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = 'fill'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = '50px'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t bgColor = '#FAFAFA'\n   \t\t hAlign = 'center'\n   \t\t vAlign = 'middle'\n   \t\t title = 'Title'\n\n>\n\t<text    \t\t type = 'Text'\n   \t\t value = 'Returned Orders'\n   \t\t size = '4'\n   \t\t color = '#2D2D2D'\n   \t\t marginLeft = '20px'\n   \t\t marginRight = '20px'\n   \t\t textAlign = 'center'\n   \t\t title = 'Title'\n\n>\n<\/text>\n\n\n<\/pc>\n<\/pr><pr    \t\t height = 'fill'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t bgColor = '#FFFFFF'\n   \t\t padding = '20px'\n   \t\t hAlign = 'center'\n   \t\t vAlign = 'middle'\n   \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = 'auto'\n   \t\t width = 'auto'\n\n>\n\t<pc    \t\t title = 'Title'\n\n>\n\t<text    \t\t type = 'Form Data'\n   \t\t value = 'thisapp.Booking.ID.count'\n   \t\t criteria = '(((Status == &quot;Delivery Attempted (Failed)&quot;)))'\n   \t\t size = '9'\n   \t\t color = '#962FFF'\n   \t\t bold = 'true'\n   \t\t textAlign = 'center'\n   \t\t displayType = 'actual'\n   \t\t title = 'Title'\n\n>\n<\/text>\n\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column><column\n   \t\t width=\"34%\"\n   \t>\n\t<panel    \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = 'fill'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = '50px'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t bgColor = '#FAFAFA'\n   \t\t hAlign = 'center'\n   \t\t vAlign = 'middle'\n   \t\t title = 'Title'\n\n>\n\t<text    \t\t type = 'Text'\n   \t\t value = 'Delivered Orders'\n   \t\t size = '4'\n   \t\t color = '#2D2D2D'\n   \t\t marginLeft = '20px'\n   \t\t marginRight = '20px'\n   \t\t textAlign = 'center'\n   \t\t title = 'Title'\n\n>\n<\/text>\n\n\n<\/pc>\n<\/pr><pr    \t\t height = 'fill'\n   \t\t width = 'fill'\n\n>\n\t<pc    \t\t width = '100%'\n   \t\t bgColor = '#FFFFFF'\n   \t\t padding = '20px'\n   \t\t hAlign = 'center'\n   \t\t vAlign = 'middle'\n   \t\t title = 'Title'\n\n>\n\t<pr    \t\t height = 'auto'\n   \t\t width = 'auto'\n\n>\n\t<pc    \t\t title = 'Title'\n\n>\n\t<text    \t\t type = 'Form Data'\n   \t\t value = 'thisapp.Booking.ID.count'\n   \t\t criteria = '(((Status == &quot;Delivered To Customer&quot;)))'\n   \t\t size = '9'\n   \t\t color = '#962FFF'\n   \t\t bold = 'true'\n   \t\t textAlign = 'center'\n   \t\t displayType = 'actual'\n   \t\t thousandsSeperator = 'undefined'\n   \t\t decimalSeperator = '.'\n   \t\t numberScale = 'none'\n   \t\t title = 'Title'\n\n>\n<\/text>\n\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page Track 
	 	 { 
 	 	 displayname = "Track" 

 	 	 icon = "" 
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Track1'>\n\t<![CDATA[htmlpage Track1()\ncontent\n&lt;%{\n\ttotalOrder = Booking[ID != 0].count();\n\ttotalEarning = Booking[ID != 0].sum(Freight);\n\tif(totalEarning == null)\n\t{\n\t\ttotalEarning = 0;\n\t}\n\tpendingOrders = Booking[Status != &quot;Delivered To Customer&quot;].count();\n\tinTransitOrders = Booking[Status == &quot;Dispatched&quot; || Status == &quot;Dispatched for Out-Bound Delivery&quot;].count();\n\tdeliveredOrders = Booking[Status == &quot;Delivered To Customer&quot;].count();\n\treturnedOrders = Booking[Status == &quot;Delivery Attempted (Failed)&quot;].count();\n\t%&gt;\n&lt;style&gt;\n\t\t\t\t\t\t.divEmbedContainer{\n\t\t\t\t\t\t\t box-sizing: border-box;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t.view-outer-wrapper .reportfullwidth div {\n\t\t\t\t\t\t    margin: 0px !important;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t.view-outer-wrapper .reportfullwidth {\n\t\t\t\t\t\t    height: 100%;\n\t\t\t\t\t\t    width: 100%;\n\t\t\t\t\t\t    box-sizing: border-box;\n\t\t\t\t\t\t margin: 0px !important;\n\t\t\t\t\t\t }\n\t\t\t\t\t\t  #zohoreportel {\n\t\t\t\t\t\t    height: 100% !important;\n\t\t\t\t\t\t    position: absolute;\n\t\t\t\t\t\t    overflow: hidden;\n\t\t\t\t\t\tleft: 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t  .page_content_wrapper {\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .main{\n\t\t\t\t\t\t  position: relative;\n\t\t\t\t\t\t  margin: 10px auto;\n\t\t\t\t\t\t  width: 100%;\n\t\t\t\t\t\t  background: white;\n\t\t\t\t\t\t  height: 100%;\n\t\t\t\t\t\t  border-top-left-radius: 5px;\n\t\t\t\t\t\t  border-top-right-radius: 5px;\n\t\t\t\t\t\t  box-sizing: border-box;\n\t\t\t\t\t\t  border:2px solid #313949;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .headerBar{\n\t\t\t\t\t\t  height: 50px;\n\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\tbackground-color: #313949;\n\t\t\t\t\t\tcolor: #ccc;\n\t\t\t\t\t\tfont-size: 29px;\n\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\tpadding-left: 20px;\n\t\t\t\t\t\tbox-sizing: border-box;\n\t\t\t\t\t\tpadding-top: 4px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .zc-dialog-border-top{\n\t\t\t\t\t\t\t  border-top:none;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t .zc-formheader {\n\t\t\t\t\t\t     background-color: none;\n\t\t\t\t\t\t     border-top:none; \n\t\t\t\t\t\t     border-left:none; \n\t\t\t\t\t\t     border-right:none; \n\t\t\t\t\t\t\t box-shadow:none;\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t  \t.zc-button-row{\n\t\t\t\t\t\t\t  background-color:none;\n\t\t\t\t\t\t\t  border-top:none;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .test{\n\t\t\t\t\t\t\t  display:inline-block;\n\t\t\t\t\t\t  box-sizing: border-box;\n\t\t\t\t\t\t  \/\/height: 153px;\n\t\t\t\t\t\t  background: white none repeat scroll 0% 0%;\n\t\t\t\t\t\t  width:390px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .resultDiv{\n\t\t\t\t\t\t\t  width: 716px;\n\t\t\t\t\t\t\tfloat: right;\n\t\t\t\t\t\t\t  padding-top: 30px;\n\t\t\t\t\t\t    box-sizing: border-box;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .topMainContent{\n\t\t\t\t\t\t  width: 100%;\n\t\t\t\t\t\t  height: 400px;\n\t\t\t\t\t\t  background-color: White;\n\t\t\t\t\t\t  Padding: 10px 10px;\n\t\t\t\t\t\t  overflow: hidden;\n\t\t\t\t\t\t  box-sizing: border-box;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .generalInfo1{\n\t\t\t\t\t\t  margin: 0px auto;\n\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\theight: 100%;\n\t\t\t\t\t\tpadding: 10px;\n\t\t\t\t\t\tbox-sizing: border-box;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t   .generalInfo\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t  box-sizing: border-box;\n\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t  .generalInfoBlocks{\n\t\t\t\t\t\t  height: 157px;\n\t\t\t\t\t\t  width: 339px;\n\t\t\t\t\t\t  background-color: White;\n\t\t\t\t\t\t  display: inline-block;\n\t\t\t\t\t\t  margin: 10px;\n\t\t\t\t\t\t  box-sizing: border-box;\n\t\t\t\t\t\t  padding: 0px;\n\t\t\t\t\t\t  overflow:hidden;\n\t\t\t\t\t\t  border-top-left-radius: 5px;\n\t\t\t\t\t\t  border-top-right-radius: 5px;\n\t\t\t\t\t\t  box-shadow: 0px 0px 05px #3d556e;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .infoTop{\n\t\t\t\t\t\t  height: 40px;\n\t\t\t\t\t\t  display: block; \n\t\t\t\t\t\t  background-color: #3d556e;\n\t\t\t\t\t\t  box-sizing: border-box;\n\t\t\t\t\t\t  padding-top: 6px;\n\t\t\t\t\t\tpadding-left: 6px;\n\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .infoTopSpan{\n\t\t\t\t\t\t  color: white;\n\t\t\t\t\t\t  font-size: 20px;  \n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .infoBottom{\n\t\t\t\t\t\t  font-weight: bold;\n\t\t\t\t\t\tfont-size: 45px;\n\t\t\t\t\t\tcolor: #272e3a;\n\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\tpadding-top: 20px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .clear{\n\t\t\t\t\t\t\t  clear:both;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .bottomMainContent{\n\t\t\t\t\t\t  padding:10px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .chartFrame{\n\t\t\t\t\t\tborder: 1px solid #eaeaea;\n\t\t\t\t\t\t    display: inline-block;\n\t\t\t\t\t\t    box-sizing: border-box;\n\t\t\t\t\t\t\tpadding-bottom: 10px;\n\t\t\t\t\t\t\tmargin-top: 10px;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t.chartInfoTop{\n\t\t\t\t\t\t  height: 40px;\n\t\t\t\t\t\t  display: block; \n\t\t\t\t\t\t  background-color: #3d556e;\n\t\t\t\t\t\t  box-sizing: border-box;\n\t\t\t\t\t\t  padding-top: 6px;\n\t\t\t\t\t\tpadding-left: 6px;\n\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t     text-align: center;\n\t\t\t\t\t\t\t     border-top-left-radius: 5px;\n\t\t\t\t\t\t    border-top-right-radius: 5px;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .chartInfoTopSpan{\n\t\t\t\t\t\t  color: white;\n\t\t\t\t\t\t  font-size: 20px;  \n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .dailyBookFrame{\n\t\t\t\t\t\t  display:inline-block;\n\t\t\t\t\t\t  width: 100%;\n\t\t\t\t\t\t  height: 350px !important;\n\t\t\t\t\t\t padding-left: 10px;\n\t\t\t\t\t\t    padding-right: 10px;\n\t\t\t\t\t\t    padding-top: 8px;\n\t\t\t\t\t\t    padding-bottom: 10px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .monthRevenueFrame{\n\t\t\t\t\t\t  display:inline-block;\n\t\t\t\t\t\t  width: 100%;\n\t\t\t\t\t\t  height: 350px !important;\n\t\t\t\t\t\t  padding-left: 10px;\n\t\t\t\t\t\t  padding-right: 10px;\n\t\t\t\t\t\t  padding-top: 8px;\n\t\t\t\t\t\t  padding-bottom: 10px;  \n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .branchesChartFrame{\n\t\t\t\t\t\t  display:block;\n\t\t\t\t\t\t  width: 100%;\n\t\t\t\t\t\t  height: 350px !important;\n\t\t\t\t\t\t  margin:0px auto;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .trackForm{\n\t\t\t\t\t\t  \n\t\t\t\t\t\t   }\n\t\t\t\t\t\t   \n\t\t\t\t\t\t   .frm{\n\t\t\t\t\t\t\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .zc-footer-wrapper {\n\t\t\t\t\t\t    border-top: none;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .zc-appformcontent{\n\t\t\t\t\t\t  background-color: inherit;\n\t\t\t\t\t\t  border: none;\n\t\t\t\t\t\t  box-shadow: none;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .zc-labelheader label{\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  font-family: lucida serif;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .zc-dropdown{\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  font-size: 12px;\n\t\t\t\t\t\t  font-weight: normal;\n\t\t\t\t\t\t  width: 206px;\n\t\t\t\t\t\t  font-family: Arial;\n\t\t\t\t\t\t  padding: 3px;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  font-family: lucida serif;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  &lt;\/style&gt;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  &lt;div class=&quot;main&quot;&gt;\n\t\t\t\t\t\t  &lt;div style=&quot;&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;test&quot;&gt;\n\t\t\t\t\t\t  &lt;h2 style=&quot;margin-left: 24px; margin-bottom: 0px;&quot;&gt;Track Shipment&lt;\/h2&gt;\n\t\t\t\t\t\t &lt;div class=&quot;frm&quot; elname=&quot;zc-component&quot; formlinkname=&quot;Track_Shipment&quot; params=&quot;zc_Header=false&quot;&gt;&lt;\/div&gt;\n\t\t\t\t\t\t\n\t\t\t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t &lt;div class=&quot;resultDiv&quot;&gt;\n\t\t\t\t\t\t &lt;!--&lt;iframe name=&apos;resultFrame&apos; scrolling=&apos;Auto&apos; style=&quot;display:inline-block; border:none; margin:0px auto; width:700px; height:263px;&quot; src=&apos;&lt;%=zoho.appuri%&gt;view-embed\/Track_Shipment_Result&apos;&gt;&lt;\/iframe&gt;--&gt;\n\t\t\t\t\t\t &lt;iframe name=&apos;resultFrame&apos; scrolling=&apos;Auto&apos; style=&quot;display:inline-block; border:none; margin:0px auto; width:700px; height:210px;&quot; src=&apos;&apos;&gt;&lt;\/iframe&gt;\n\t\t\t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t &lt;\/div&gt; \n\t\t\t\t\t\t &lt;div style=&quot;clear:both&quot;&gt;&lt;\/div&gt;\n\t\t\t\t\t\t \n\t\t\t\t\t\t  &lt;div class=&quot;topMainContent&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;generalInfo&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;generalInfoBlocks&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;infoTop&quot;&gt;&lt;span class=&quot;infoTopSpan&quot;&gt;Total Orders&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;infoBottom&quot;&gt;&lt;%=totalOrder%&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;generalInfoBlocks&quot;&gt;&lt;div class=&quot;infoTop&quot;&gt;&lt;span class=&quot;infoTopSpan&quot;&gt;Total Earning&lt;\/span&gt;&lt;\/div&gt;&lt;div class=&quot;infoBottom&quot;&gt;$&lt;%=totalEarning%&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;generalInfoBlocks&quot;&gt;&lt;div class=&quot;infoTop&quot;&gt;&lt;span class=&quot;infoTopSpan&quot;&gt;Pending Orders&lt;\/span&gt;&lt;\/div&gt;&lt;div class=&quot;infoBottom&quot;&gt;&lt;%=pendingOrders%&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;generalInfoBlocks&quot;&gt;&lt;div class=&quot;infoTop&quot;&gt;&lt;span class=&quot;infoTopSpan&quot;&gt;In-Transit Orders&lt;\/span&gt;&lt;\/div&gt;&lt;div class=&quot;infoBottom&quot;&gt;&lt;%=inTransitOrders%&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;generalInfoBlocks&quot;&gt;&lt;div class=&quot;infoTop&quot;&gt;&lt;span class=&quot;infoTopSpan&quot;&gt;Returned Orders&lt;\/span&gt;&lt;\/div&gt;&lt;div class=&quot;infoBottom&quot;&gt;&lt;%=returnedOrders%&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;generalInfoBlocks&quot;&gt;&lt;div class=&quot;infoTop&quot;&gt;&lt;span class=&quot;infoTopSpan&quot;&gt;Delivered Orders&lt;\/span&gt;&lt;\/div&gt;&lt;div class=&quot;infoBottom&quot;&gt;&lt;%=deliveredOrders%&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;clear&quot;&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;bottomMainContent&quot;&gt;\n\t\t\t\t\t\t\n\t\t\t\t\t\t  &lt;div class=&quot;chartFrame&quot; style=&quot;width: 49.2%;&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;chartInfoTop&quot;&gt;&lt;span class=&quot;chartInfoTopSpan&quot;&gt;Daily Booking Chart&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&apos;dailyBookFrame&apos; style=&quot;&quot; elName=&apos;zc-component&apos; zc_mobileView=&apos;inline&apos; reportLinkName=&apos;Daily_Booking_Chart&apos; params=&apos;zc_Header=false&apos;&gt;&lt;\/div&gt;\n\t\t\t\t\t\t \n\t\t\t\t\t\t  \n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t  &lt;div class=&quot;chartFrame&quot; style=&quot;width: 49.2%;&quot;&gt;\n\t\t\t\t\t\t   &lt;div class=&quot;chartInfoTop&quot;&gt;&lt;span class=&quot;chartInfoTopSpan&quot;&gt;Monthly Revenue Chart&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t   &lt;div class=&apos;monthRevenueFrame&apos; style=&quot;&quot; elName=&apos;zc-component&apos; zc_mobileView=&apos;inline&apos; reportLinkName=&apos;Monthly_Revenue_Report&apos; params=&apos;zc_Header=false&apos;&gt;&lt;\/div&gt;\n\t\t\t\t\t\t\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t\n\t\t\t\t\t\t  &lt;div class=&quot;chartFrame&quot; style=&quot;width: 100%;&quot;&gt;\n\t\t\t\t\t\t   &lt;div class=&quot;chartInfoTop&quot;&gt;&lt;span class=&quot;chartInfoTopSpan&quot;&gt;Bookings Statistics by Branches&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t   &lt;div class=&apos;branchesChartFrame&apos; style=&quot;&quot; elName=&apos;zc-component&apos; zc_mobileView=&apos;inline&apos; reportLinkName=&apos;branches_Chart&apos; params=&apos;zc_Header=false&apos;&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  &lt;div style=&quot;clear:both;&quot;&gt;&lt;\/div&gt;  \n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t &lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
	}
	section Booking
	{
		icon = "files-edit"
		form Booking
		{
			success message = "Shipment Booked Successfully!\n\n"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Docket_No
			(
    			type = text
				displayname = "Docket No."
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Select_Customer_Type
			(
				type = picklist
				displayname = "Select Customer Type"
				values = {"Accounted Customer", "Walkin Customer"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			Accounted_Customers
			(
				type = picklist
				displayname = "Accounted Customers"
				values  = Accounted_Customers.ID
    			displayformat = [Company_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			plain
			(
    			type = plaintext
				value = "<div><h2 style=\"color: rgb(0, 172, 146); font-weight: normal\">Sender Details..</h2></div>"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Sender_Name
			(
    			type = name
				displayname = "Name"
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Sender_Email
			(
    			type = email
				displayname = "Email"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Sender_Phone_Number
			(
    			type = phonenumber
				displayname = "Phone Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Origin
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Origin_Service_Location
			(
				type = picklist
				displayname = "Origin Service Location"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			plain1
			(
    			type = plaintext
				value = "<div><h2 style=\"color: rgb(0, 172, 146); font-weight: normal\">Receiver Details..</h2></div>"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Receiver_Name1
			(
    			type = name
				displayname = "Name"
     			prefix1
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name1
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name1
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix1
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Receiver_s_Email
			(
    			type = email
				displayname = "Email"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Receiver_Phone_Number
			(
    			type = phonenumber
				displayname = "Phone Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Delivery_Address
			(
    			type = address
				displayname = "Delivery Address"
     			capture_coordinates = true
     			adjust_using_map = true
     			address_line_12
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_22
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city2
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province2
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code2
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country2
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude2
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude2
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Region
			(
				type = picklist
				displayname = "Delivery Region"
				values  = Regions.ID
    			displayformat = [Region]
				allow new entries = true
				[
					displayname = "Add New"
				]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Dest_City
			(
				type = picklist
				displayname = "City (Nearest to Service Location Available)"
				values  = Cities[Region == input.Region].ID
    			displayformat = [City]
				allow new entries = true
				[
					displayname = "Add New"
				]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Destination_Service_Location
			(
				type = picklist
				displayname = "Service Location Nearest to Destination"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Shipment_Details
			(
				type = grid
				displayname = "Shipment Details"
				values  = Booking_Commodity_Subform.ID
    			bidirectional = Booking_Lookup
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Total_Weight
			(
				type = decimal
				displayname = "Total Weight"
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Rate_KG
			(
				type = decimal
				displayname = "Rate/KG"
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Date_field
			(
    			type = date
				displayname = "Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Expected_Delivery_Date
			(
    			type = date
				displayname = "Expected Delivery Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Service_Tax
			(
    			type = percentage
				displayname = "Service Tax"
				initial value = 12.5%
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Freight
			(
				type = decimal
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Status
			(
				type = picklist
				values = {"Unsent", "Dispatched", "Received At Destination Hub", "Dispatched for Out-Bound Delivery", "Delivered To Customer", "Delivery Attempted (Failed)"}
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Location
			(
				type = picklist
				values = {"Origin Hub", "Loaded in Truck", "Destination Hub", "Delivered"}
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Last_Location_Service_Locations_Hubs
			(
				type = picklist
				displayname = "Last Location (Service Locations/Hubs)"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 2   
				width = medium
			)
			Access_Hubs
			(
				type = list
				displayname = "Access Hubs"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				searchable = true
				sortorder = ascending
				height = 60px
				private = true
	 			row = 1
	 			column = 2   
				width = medium
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list All_Bookings
		{
			displayName = "All Bookings"
			show all rows from Booking  [Access_Hubs.Employee_Emails.contains(zoho.loginuserid)]  
			(
				Select_Customer_Type as "Customer Type"
				Sender_Email as "Sender Email"
				Receiver_s_Email as "Receiver's Email"
				Region as "Delivery Region"
				Dest_City as "City (Nearest to Service Location Available)"
				Shipment_Details.Commodity as "Shipment Details"
				(
					view = Booking_Commodity_Subform_Report
				)
				Shipment_Details.Weight as "Shipment Details.Weight"
				Date_field as "Date"
				Expected_Delivery_Date as "Expected Delivery Date"
				Total_Weight as "Weight"
				Rate_KG as "Rate/KG"
				Freight
				Service_Tax as "Service Tax"
				Status
				Location
				Accounted_Customers as "Accounted Customers"
				Last_Location_Service_Locations_Hubs as "Last Location (Service Locations/Hubs)"
				Receiver_Name1  as "Receiver Name"
	 			(
	      			displayformat = [first_name1+""+prefix1+""+last_name1+""+suffix1]
	 			)
				Origin
				Docket_No as "Docket No."
				Destination_Service_Location as "Destination Service Location"
				Origin_Service_Location as "Origin Service Location"
				Sender_Name  as "Sender Name"
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
			)
			filters
			(
				Status
			)
			options
			(
				icon = "ui-2-grid-49"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Docket_No as "Docket No."
							Sender_Name as "Sender Name"
							Sender_Email as "Sender Email"
							Receiver_Name1 as "Receiver Name"
							Origin_Service_Location as "Origin Service Location"
							Destination_Service_Location as "Destination Service Location"
							Origin
							Receiver_s_Email as "Receiver's Email"
							Region as "Delivery Region"
							Dest_City as "City (Nearest to Service Location Available)"
							Date_field as "Date"
							Select_Customer_Type as "Customer Type"
							Expected_Delivery_Date as "Expected Delivery Date"
							Total_Weight as "Weight"
							Rate_KG as "Rate/KG"
							Freight
							Service_Tax as "Service Tax"
							Status
							Location
							Accounted_Customers as "Accounted Customers"
							Last_Location_Service_Locations_Hubs as "Last Location (Service Locations/Hubs)"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Select_Customer_Type as "Customer Type"
							Docket_No as "Docket No."
							Sender_Email as "Sender Email"
							Origin
							Origin_Service_Location as "Origin Service Location"
							Receiver_s_Email as "Receiver's Email"
							Region as "Delivery Region"
							Dest_City as "City (Nearest to Service Location Available)"
							Destination_Service_Location as "Destination Service Location"
							Date_field as "Date"
							Expected_Delivery_Date as "Expected Delivery Date"
							Total_Weight as "Weight"
							Rate_KG as "Rate/KG"
							Freight
							Service_Tax as "Service Tax"
							Status
							Location
							Accounted_Customers as "Accounted Customers"
							Last_Location_Service_Locations_Hubs as "Last Location (Service Locations/Hubs)"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Dispatch
	{
		icon = "transportation-truck-front"
		form In_Bound_Dispatch
		{
			displayname = "In-Bound Dispatch"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Dispatch_Type
			(
				type = picklist
				displayname = "Dispatch Type"
				values = {"Full Truck Load", "Part Load"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			In_Challan_No
			(
    			type = text
				displayname = "In-Challan No."
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Vehicle_No
			(
				type = picklist
				displayname = "Vehicle No."
				values  = Truck_Details.ID
    			displayformat = [Vehicle_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Region
			(
				type = picklist
				values  = Regions.ID
    			displayformat = [Region]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Route_Cities
			(
				type = list
				displayname = "Route/Cities"
				values  = Cities.ID
    			displayformat = [City]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Dispatch_Date_Time
			(
    			type = datetime
				displayname = "Dispatch Date-Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 2   
				width = 200px
			)
			Current_Status
			(
				type = picklist
				displayname = "Current Status"
				values = {"Transporting", "Transported", "Returned"}
				initial value = "Transporting"
	 			row = 1
	 			column = 2   
				width = 206px
			)
			Trip_No
			(
    			type = text
				displayname = "Trip No."
	 			row = 1
	 			column = 2   
				width = 200px
			)
			must have Route_Service_Locations
			(
				type = list
				displayname = "Route Service Locations"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 2   
				width = 206px
			)
			must have Origin_Service_Locations
			(
				type = picklist
				displayname = "Origin Service Location"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 2   
				width = 206px
			)
			Access_Hubs
			(
				type = list
				displayname = "Access Hubs"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				searchable = true
				sortorder = ascending
				height = 60px
				private = true
	 			row = 1
	 			column = 2   
				width = 206px
			)
			must have Shipment_Details
			(
				type = grid
				displayname = "Shipment Details"
				values  = In_Bound_Shipment_Details_Subform.ID
    			bidirectional = In_Bound_Dispatch_Lookup
	 			row = 3
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Out_Bound_Dispatch
		{
			displayname = "Out-Bound Dispatch"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			must have Dispatch_Type
			(
				type = picklist
				displayname = "Dispatch Type"
				values = {"Full Truck Load", "Part Load"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Dispatch_Date_Time
			(
    			type = datetime
				displayname = "Dispatch Date-Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 2   
				width = 200px
			)
			Current_Status
			(
				type = picklist
				displayname = "Current Status"
				values = {"Transporting", "Transported", "Returned"}
				initial value = "Transporting"
	 			row = 1
	 			column = 2   
				width = 206px
			)
			Out_Challan_No
			(
    			type = text
				displayname = "Out-Challan No."
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Origin_Service_Location_Hub
			(
				type = picklist
				displayname = "Origin Service Location Hub"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 2   
				width = 206px
			)
			must have Vehicle_No
			(
				type = picklist
				displayname = "Vehicle No."
				values  = Truck_Details.ID
    			displayformat = [Vehicle_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have City
			(
				type = picklist
				values  = Cities.ID
    			displayformat = [City]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Access_Hub
			(
				type = picklist
				displayname = "Access Hub"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				searchable = true
				sortorder = ascending
				private = true
	 			row = 1
	 			column = 2   
				width = 206px
			)
			must have Shipment_Details
			(
				type = grid
				displayname = "Shipment Details"
				values  = Out_Bound_Shipment_Details_Subform.ID
    			bidirectional = Out_Bound_Dispatch_Lookup
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list In_Bound_Dispatch_Report
		{
			displayName = "In-Bound Dispatch Report"
			show all rows from In_Bound_Dispatch  [Access_Hubs.Employee_Emails.contains(zoho.loginuserid)]  
			(
				In_Challan_No as "Challan No."
				Origin_Service_Locations as "Origin Service Locations"
				Region
				Route_Service_Locations as "Route Service Locations"
				Shipment_Details.Docket_No as "Shipment Details"
				(
					view = In_Bound_Shipment_Details_Subform_Report
				)
				Vehicle_No as "Vehicle No."
				Route_Cities as "Route/Cities"
				Dispatch_Type as "Dispatch Type"
				Dispatch_Date_Time as "Dispatch Date-Time"
				Current_Status as "Current Status"
			)
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							In_Challan_No as "Challan No."
							Origin_Service_Locations as "Origin Service Locations"
							Region
							Route_Service_Locations as "Route Service Locations"
							Vehicle_No as "Vehicle No."
							Route_Cities as "Route/Cities"
							Dispatch_Type as "Dispatch Type"
							Dispatch_Date_Time as "Dispatch Date-Time"
							Current_Status as "Current Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							In_Challan_No as "Challan No."
							Origin_Service_Locations as "Origin Service Locations"
							Region
							Route_Service_Locations as "Route Service Locations"
							Vehicle_No as "Vehicle No."
							Route_Cities as "Route/Cities"
							Dispatch_Type as "Dispatch Type"
							Dispatch_Date_Time as "Dispatch Date-Time"
							Current_Status as "Current Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Out_Bound_Dispatch_Report
		{
			displayName = "Out-Bound Dispatch Report"
			show all rows from Out_Bound_Dispatch  [Access_Hub.Employee_Emails.contains(zoho.loginuserid)]  
			(
				Out_Challan_No as "Out-Chhallan No."
				Origin_Service_Location_Hub as "Dispatched From"
				Shipment_Details.Docket_No as "Shipment Details"
				(
					view = Out_Bound_Shipment_Details_Subform_Report
				)
				City
				Vehicle_No as "Vehicle No."
				Current_Status as "Current Status"
				Dispatch_Date_Time as "Dispatch Date-Time"
			)
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Out_Challan_No as "Out-Chhallan No."
							Origin_Service_Location_Hub as "Dispatched From"
							City
							Vehicle_No as "Vehicle No."
							Current_Status as "Current Status"
							Dispatch_Date_Time as "Dispatch Date-Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Out_Challan_No as "Out-Chhallan No."
							Origin_Service_Location_Hub as "Dispatched From"
							City
							Vehicle_No as "Vehicle No."
							Current_Status as "Current Status"
							Dispatch_Date_Time as "Dispatch Date-Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Delivery_Receives
	{
		displayname= "Delivery/Receives"
		icon = "transportation-bus-front-12"
		form In_Bound_Delivery
		{
			displayname = "In-Bound Delivery"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Challan_No
			(
				type = picklist
				displayname = "Challan No."
				values  = In_Bound_Dispatch[Current_Status == "Transporting"].ID
    			displayformat = [In_Challan_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Vehicle_No
			(
				type = picklist
				displayname = "Vehicle No."
				values  = Truck_Details.ID
    			displayformat = [Vehicle_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Arrival_Time
			(
    			type = datetime
				displayname = "Arrival Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Current_Service_Locations_Hubs
			(
				type = picklist
				displayname = "Current Service Locations/Hubs"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Received_Shipment_Details1
			(
				type = grid
				displayname = "Received Shipment Details"
				values  = In_Bound_Received_Shipments_Subform.ID
    			bidirectional = In_Bound_Delivery_Lookup
	 			row = 1
	 			column = 1   
				width = medium
			)
			Access_Hub
			(
				type = list
				displayname = "Access Hub"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				searchable = true
				sortorder = ascending
				height = 60px
				private = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Out_Bound_Delivery
		{
			displayname = "Out-Bound Delivery"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			Delivery_Date_Time
			(
    			type = datetime
				displayname = "Delivery Date-Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 2   
				width = 200px
			)
			must have Out_Challan_No
			(
				type = picklist
				displayname = "Out-Challan No."
				values  = Out_Bound_Dispatch.ID
    			displayformat = [Out_Challan_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Vehicle_No
			(
				type = picklist
				displayname = "Vehicle No."
				values  = Truck_Details.ID
    			displayformat = [Vehicle_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Current_Service_Locations_Hubs
			(
				type = picklist
				displayname = "Current Service Locations/Hubs"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 2   
				width = 206px
			)
			must have Delivered_Shipment_Details
			(
				type = grid
				displayname = "Delivered Shipment Details"
				values  = Out_Bound_Delivery_Subform.ID
    			bidirectional = Out_Bound_Delivery_Lookup
	 			row = 1
	 			column = 1   
				width = medium
			)
			Access_Hubs
			(
				type = list
				displayname = "Access Hubs"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				searchable = true
				sortorder = ascending
				height = 60px
				private = true
	 			row = 1
	 			column = 2   
				width = 206px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list In_Bound_Delivery_Report
		{
			displayName = "In-Bound Delivery Report"
			show all rows from In_Bound_Delivery  [Access_Hub.Employee_Emails.contains(zoho.loginuserid)]  
			(
				Current_Service_Locations_Hubs as "Received at"
				Challan_No as "Challon No."
				Received_Shipment_Details1.Docket_No as "Received Shipment Details"
				(
					view = In_Bound_Received_Shipments_Subform_Report
				)
				Arrival_Time as "Arrival Time"
				Vehicle_No as "Vehicle No."
			)
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Current_Service_Locations_Hubs as "Received at"
							Challan_No as "Challon No."
							Arrival_Time as "Arrival Time"
							Vehicle_No as "Vehicle No."
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Current_Service_Locations_Hubs as "Received at"
							Challan_No as "Challon No."
							Arrival_Time as "Arrival Time"
							Vehicle_No as "Vehicle No."
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Out_Bound_Delivery_Report
		{
			displayName = "Out-Bound Delivery Report"
			show all rows from Out_Bound_Delivery  [Access_Hubs.Employee_Emails.contains(zoho.loginuserid)]  
			(
				Out_Challan_No as "Out"
				Delivery_Date_Time as "Delivery Date-Time"
				Vehicle_No as "Vehicle No."
				Current_Service_Locations_Hubs as "Current Service Locations/Hubs"
			)
			options
			(
				icon = "ui-2-grid-49"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Out_Challan_No as "Out"
							Delivery_Date_Time as "Delivery Date-Time"
							Vehicle_No as "Vehicle No."
							Current_Service_Locations_Hubs as "Current Service Locations/Hubs"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Out_Challan_No as "Out"
							Delivery_Date_Time as "Delivery Date-Time"
							Vehicle_No as "Vehicle No."
							Current_Service_Locations_Hubs as "Current Service Locations/Hubs"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Run_Sheet
	{
		displayname= "Run Sheet"
		icon = "transportation-bus-front-12"
		form Run_Sheet
		{
			displayname = "Run Sheet"
			success message = "Run Sheet Updated Successfully!"
			field alignment = left
			feature property = 32
			must have Challan_No
			(
				type = picklist
				displayname = "Challan No."
				values  = In_Bound_Dispatch[Current_Status == "Transporting"].ID
    			displayformat = [In_Challan_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Service_Location_Hub
			(
				type = picklist
				displayname = "Service Location/Hub"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have City
			(
				type = picklist
				values  = Cities.ID
    			displayformat = [City]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Arrival_Date_Time
			(
    			type = datetime
				displayname = "Arrival Date-Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Vehicle_No
			(
				type = picklist
				displayname = "Vehicle No."
				values  = Truck_Details.ID
    			displayformat = [Vehicle_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Trip_No
			(
				type = picklist
				displayname = "Trip No."
				values  = In_Bound_Dispatch.ID
    			displayformat = [Trip_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Run_Sheet_Report
		{
			displayName = "Run Sheet Report"
			show all rows from Run_Sheet    
			(
				Vehicle_No as "Vehicle No."
				Service_Location_Hub as "Service Location/Hub"
				City
				Arrival_Date_Time as "Arrival Date-Time"
				Trip_No as "Trip No."
				Challan_No as "Challon"
			)
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Vehicle_No as "Vehicle No."
							Service_Location_Hub as "Service Location/Hub"
							City
							Arrival_Date_Time as "Arrival Date-Time"
							Trip_No as "Trip No."
							Challan_No as "Challon"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Vehicle_No as "Vehicle No."
							Service_Location_Hub as "Service Location/Hub"
							City
							Arrival_Date_Time as "Arrival Date-Time"
							Trip_No as "Trip No."
							Challan_No as "Challon"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Warehouse
	{
		icon = "business-building"
		list Hubs_Inventory
		{
			displayName = "Hubs Inventory"
			show all rows from Booking  [Status == "Unsent" || Status == "Received At Destination Hub"]  
			(
				Docket_No as "Docket No."
				Sender_Email as "Sender Email"
				Origin
				Origin_Service_Location as "Origin Service Location"
				Receiver_s_Email as "Receiver's Email"
				Region as "Delivery Region"
				Dest_City as "City (Nearest to Service Location Available)"
				Destination_Service_Location as "Service Location Nearest to Destination"
				Total_Weight as "Total Weight"
				Rate_KG as "Rate/KG"
				Service_Tax as "Service Tax"
				Freight
				Date_field as "Date"
				Expected_Delivery_Date as "Expected Delivery Date"
				Status
				Last_Location_Service_Locations_Hubs as "Last Location (Service Locations/Hubs)"
			)
			filters
			(
				Last_Location_Service_Locations_Hubs
				Origin_Service_Location
			)
			group by
			(
				properties
    			(
  	    			display record count = true
   				)
				Last_Location_Service_Locations_Hubs ascending
			)
			options
			(
				icon = "ui-2-grid-49"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Docket_No as "Docket No."
							Sender_Email as "Sender Email"
							Origin
							Origin_Service_Location as "Origin Service Location"
							Receiver_s_Email as "Receiver's Email"
							Region as "Delivery Region"
							Dest_City as "City (Nearest to Service Location Available)"
							Destination_Service_Location as "Service Location Nearest to Destination"
							Total_Weight as "Total Weight"
							Rate_KG as "Rate/KG"
							Service_Tax as "Service Tax"
							Freight
							Date_field as "Date"
							Expected_Delivery_Date as "Expected Delivery Date"
							Status
							Last_Location_Service_Locations_Hubs as "Last Location (Service Locations/Hubs)"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Docket_No as "Docket No."
							Sender_Email as "Sender Email"
							Origin
							Origin_Service_Location as "Origin Service Location"
							Receiver_s_Email as "Receiver's Email"
							Region as "Delivery Region"
							Dest_City as "City (Nearest to Service Location Available)"
							Destination_Service_Location as "Service Location Nearest to Destination"
							Total_Weight as "Total Weight"
							Rate_KG as "Rate/KG"
							Service_Tax as "Service Tax"
							Freight
							Date_field as "Date"
							Expected_Delivery_Date as "Expected Delivery Date"
							Status
							Last_Location_Service_Locations_Hubs as "Last Location (Service Locations/Hubs)"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Truck_Details
	{
		displayname= "Truck Details"
		icon = "transportation-truck-front"
		form Truck_Details
		{
			displayname = "Add New Truck Details"
			success message = "Truck Details Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Vehicle_Provider
			(
				type = picklist
				displayname = "Vehicle Provider"
				values = {"Owned By Company", "Third Pary Carrier"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Third_Party_Carriers_Contracted_Carrier_Name
			(
				type = picklist
				displayname = "Third Party Carriers(Contracted) - Carrier Name"
				values  = Third_Party_Carriers.ID
    			bidirectional = Vehicle_No
    			displayformat = [Carrier_Name]
				allow new entries = true
				[
					displayname = ""
				]
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Work_Service_Location
			(
				type = picklist
				displayname = "Work Service Location"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have unique Vehicle_No
			(
    			type = text
				displayname = "Vehicle No."
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Transportation_Type
			(
				type = picklist
				displayname = "Transportation Type"
				values = {"In-Bound", "Out-Bound"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Vehicle_Details
			(
    			type = textarea
				displayname = "Vehicle Details"
				height = 100px
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Permit_of_States1
			(
				type = list
				displayname = "Permit of States"
				values = {"Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"}
				height = 60px
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Permit_Expiry_Date
			(
    			type = date
				displayname = "Permit Expiry Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 130px
			)
			Current_Status
			(
				type = picklist
				displayname = "Current Status"
				values = {"Transporting", "Transported (Returning)", "Free (Ready To Transport)"}
				initial value = "Free (Ready To Transport)"
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Truck_Details_Report
		{
			displayName = "All Trucks"
			show all rows from Truck_Details  [Work_Service_Location.Employee_Emails.contains(zoho.loginuserid)]  
			(
				Work_Service_Location as "Work Service Location"
				Vehicle_No as "Vehicle No."
				Transportation_Type as "Transportation Type"
				Vehicle_Provider as "Vehicle Provider"
				Third_Party_Carriers_Contracted_Carrier_Name as "Third Party Carriers(Contracted) - Carrier Name"
				Current_Status as "Current Status"
				Vehicle_Details as "Vehicle Details"
				Permit_of_States1 as "Permit of States"
				custom action "Ready To Transport"
				(
	  			workflow = Ready_To_Transport
				column header = "Ready To Transport"
				success message = "This vehicle is ready to transport another shipment."
				condition = (Current_Status == "Transported (Returning)")
				)
				Permit_Expiry_Date as "Permit Expiry Date"
			)
			filters
			(
				Transportation_Type
			)
			options
			(
				icon = "ui-2-grid-49"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Work_Service_Location as "Work Service Location"
							Vehicle_No as "Vehicle No."
							Transportation_Type as "Transportation Type"
							Vehicle_Provider as "Vehicle Provider"
							Third_Party_Carriers_Contracted_Carrier_Name as "Third Party Carriers(Contracted) - Carrier Name"
							Current_Status as "Current Status"
							Vehicle_Details as "Vehicle Details"
				"Ready To Transport"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Work_Service_Location as "Work Service Location"
							Vehicle_No as "Vehicle No."
							Vehicle_Details as "Vehicle Details"
							Transportation_Type as "Transportation Type"
							Vehicle_Provider as "Vehicle Provider"
							Third_Party_Carriers_Contracted_Carrier_Name as "Third Party Carriers(Contracted) - Carrier Name"
							Current_Status as "Current Status"
							Permit_of_States1 as "Permit of States"
							Permit_Expiry_Date as "Permit Expiry Date"
				"Ready To Transport"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Pick_Up
	{
		displayname= "Pick-Up"
		icon = "arrows-4-launch-47"
		form Pick_Up_Request
		{
			displayname = "Pick-Up Request"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Name1
			(
    			type = name
				displayname = "Name"
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			Pick_Up_Request_Number
			(
    			type = text
				displayname = "Pick-Up Request Number"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Email
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Contact_Number1
			(
    			type = phonenumber
				displayname = "Contact Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Address1
			(
    			type = address
				displayname = "Address"
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_12
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_22
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city2
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province2
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code2
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country2
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude2
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude2
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have City
			(
				type = picklist
				values  = Cities.ID
    			displayformat = [City]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Status
			(
				type = picklist
				values = {"Approved", "Pending", "Rejected"}
				initial value = "Pending"
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Pick_up_Date
			(
    			type = date
				displayname = "Pick-up Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 2   
				width = 130px
			)
			must have Commodity_Details
			(
				type = grid
				displayname = "Commodity Details"
	    
				must have Commodity
				(
    				type = text
					width = 200px
				)
				must have Approx_Weight_KGs
				(
					type = number
					displayname = "Approx. Weight (KGs)"
					maxchar = 5
					width = 100px
				)
				must have Width_in_Cms
				(
					type = decimal
					displayname = "Width in Cms"
					width = 100px
				)
				must have Height_in_Cms
				(
					type = decimal
					displayname = "Height in Cms"
					width = 100px
				)
				must have Length_in_Cms
				(
					type = decimal
					displayname = "Length in Cms"
					width = 100px
				)
	 			row = 1
	 			column = 2   
				width = medium
			)
			Nearest_Service_Locations
			(
				type = list
				displayname = "Nearest Service Locations"
				values  = Service_Locations_Hubs.ID
    			displayformat = [Service_Location_Name]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 2   
				width = 206px
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Pick_Up_Request_Report
		{
			displayName = "All Pick-Up Requests"
			show all rows from Pick_Up_Request  [Nearest_Service_Locations.Employee_Emails.contains(zoho.loginuserid)]  
			(
				Email
				City
				Commodity_Details.Commodity
				Pick_Up_Request_Number as "Pick-Up Request Number"
				Status
				Pick_up_Date as "Pick-up Date"
				Nearest_Service_Locations as "Nearest Service Locations"
				custom action "Approve Pick-Up Request"
				(
	  			workflow = Approve_Pick_Up_Request
				column header = "Approve Pick-Up Request"
				success message = "Pick-Up Request has been approved"
				condition = (Status == "Pending")
				)
				custom action "Reject Pick-Up Request"
				(
	  			workflow = Reject_Pick_Up_Request
				column header = "Reject Pick-Up Request"
				success message = "Pick-Up Request has been rejected."
				condition = (Status == "Pending")
				)
			)
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Email
							City
							Pick_Up_Request_Number as "Pick-Up Request Number"
							Status
							Pick_up_Date as "Pick-up Date"
				"Approve Pick-Up Request"
				"Reject Pick-Up Request"
							Nearest_Service_Locations as "Nearest Service Locations"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Email
							City
							Pick_Up_Request_Number as "Pick-Up Request Number"
							Status
							Pick_up_Date as "Pick-up Date"
				"Approve Pick-Up Request"
				"Reject Pick-Up Request"
							Nearest_Service_Locations as "Nearest Service Locations"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Service_Locations_Hubs
	{
		displayname= "Service Locations/Hubs"
		icon = "location-pin"
		form Service_Locations_Hubs
		{
			displayname = "Service Locations/Hubs"
			success message = "Location Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Service_Location_Name
			(
    			type = text
				displayname = "Service Location Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Select_Region
			(
				type = picklist
				displayname = "Select Region"
				values  = Regions.ID
    			displayformat = [Region]
				allow new entries = true
				[
					displayname = "Add Region"
				]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Select_City
			(
				type = picklist
				displayname = "Select City"
				values  = Cities[Region == input.Select_Region].ID
    			displayformat = [City]
				allow new entries = true
				[
					displayname = "Add City"
				]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			City
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = medium
			)
			Address
			(
    			type = address
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_12
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_22
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city2
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province2
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code2
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country2
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude2
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude2
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			Employees_Employee_Name
			(
				type = list
				displayname = "Employees - Employee Name"
				values  = Employees.ID
    			bidirectional = Service_Locations_Hub
    			displayformat = [Employee_Name1.first_name + " " + Employee_Name1.last_name]
				height = 60px
	 			row = 1
	 			column = 1   
				width = medium
			)
			Employee_Emails
			(
    			type = textarea
				displayname = "Employee Emails"
				height = 100px
				private = true
	 			row = 1
	 			column = 1   
				width = 200px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Service_Locations_Hubs_Report
		{
			displayName = "Service Locations/Hubs Report"
			show all rows from Service_Locations_Hubs    
			(
				Service_Location_Name as "Service Location Name"
				Select_Region as "Region"
				Select_City as "City"
				Address 
	 			(
	      			displayformat = [address_line_12+""+address_line_22+""+district_city2+""+state_province2+""+postal_Code2+""+country2]
	      			enable = Show_As_Text
	 			)
			)
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Service_Location_Name as "Service Location Name"
							Select_Region as "Region"
							Select_City as "City"
							Address
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Service_Location_Name as "Service Location Name"
							Select_Region as "Region"
							Select_City as "City"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Add_Admin_Data
	{
		displayname= "Add Admin Data"
		icon = "ui-1-lock-circle"
		form Employees
		{
			success message = "Employee Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			plain
			(
    			type = plaintext
				value = "<font color=\"#999999\"><span style=\"background-color: rgb(255, 255, 255)\"><font face=\"times new roman,times,serif\" size=\"4\">Please register here to give access to this application.</font></span></font>"
	 			row = 1
	 			column = 1   
				width = medium
			)
			plain1
			(
    			type = plaintext
				value = "<font color=\"#999999\"><span style=\"background-color: rgb(255, 255, 255)\"><font face=\"times new roman,times,serif\" size=\"4\">Please register here first to access this application.</font></span></font>"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Employee_Name1
			(
    			type = name
				displayname = "Employee Name"
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Email
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Service_Locations_Hub
			(
				type = picklist
				displayname = "Work Service Locations/Hub"
				values  = Service_Locations_Hubs.ID
    			bidirectional = Employees_Employee_Name
    			displayformat = [Service_Location_Name]
				allow new entries = true
				[
					displayname = "Add New Service Location"
				]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "users-multiple-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Regions
		{
			success message = "Region Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Region
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			plain
			(
    			type = plaintext
				value = "<font color=\"#ff0000\">ex: South, North, East, West</font>"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "location-pin"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Cities
		{
			success message = "City Added Successfully!"
			field alignment = left
			feature property = 32
			must have Region
			(
				type = picklist
				values  = Regions.ID
    			displayformat = [Region]
				allow new entries = true
				[
					displayname = ""
				]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have City
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
	
			customize
			(
				icon = "business-pin"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Third_Party_Carriers
		{
			displayname = "Third Party Carriers(Contracted)"
			success message = "Third Party Carrier Details Added Successfully!"
			field alignment = left
			feature property = 32
			must have Carrier_Name
			(
    			type = text
				displayname = "Carrier Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Contract_End_Date
			(
    			type = date
				displayname = "Contract End Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 130px
			)
			must have Authorization_Number
			(
    			type = text
				displayname = "Authorization Number"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Vehicle_No
			(
				type = list
				displayname = "Vehicle No."
				values  = Truck_Details.ID
    			bidirectional = Third_Party_Carriers_Contracted_Carrier_Name
    			displayformat = [Vehicle_No]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Accounted_Customers
		{
			displayname = "Accounted Customers"
			success message = "Accounted Customers Details Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Company_Name
			(
    			type = text
				displayname = "Company Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Customer_Name
			(
    			type = name
				displayname = "Customer Name"
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Email
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Address
			(
    			type = address
     			capture_coordinates = true
     			adjust_using_map = true
     			address_line_12
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_22
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city2
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province2
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code2
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country2
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude2
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude2
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Select_Region
			(
				type = picklist
				displayname = "Select Region"
				values  = Regions.ID
    			displayformat = [Region]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Select_City
			(
				type = picklist
				displayname = "Select City"
				values  = Cities[Region == input.Select_Region].ID
    			displayformat = [City]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "users-multiple-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section View_Admin_Data
	{
		displayname= "View Admin Data"
		icon = "text-list-bullet"
		list Employees_Report
		{
			displayName = "Employees Report"
			show all rows from Employees    
			(
				Service_Locations_Hub as "Work Service Locations/Hub"
				Email
			)
			options
			(
				icon = "users-multiple-11"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Service_Locations_Hub as "Work Service Locations/Hub"
							Email
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Service_Locations_Hub as "Work Service Locations/Hub"
							Email
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Regions_Report
		{
			displayName = "Regions Report"
			show all rows from Regions    
			(
				Region as "State"
			)
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Region as "State"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Region as "State"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Cities_Report
		{
			displayName = "Cities Report"
			show all rows from Cities    
			(
				Region as "State"
				City
			)
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Region as "State"
							City
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Region as "State"
							City
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Third_Party_Carriers_Report
		{
			displayName = "Third Party Carriers Report"
			show all rows from Third_Party_Carriers    
			(
				Carrier_Name as "Carrier Name"
				Contract_End_Date as "Contract End Date"
				Authorization_Number as "Authorization Number"
				Vehicle_No as "Vehicle No."
			)
			options
			(
				icon = "ui-2-grid-49"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Carrier_Name as "Carrier Name"
							Contract_End_Date as "Contract End Date"
							Authorization_Number as "Authorization Number"
							Vehicle_No as "Vehicle No."
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Carrier_Name as "Carrier Name"
							Contract_End_Date as "Contract End Date"
							Authorization_Number as "Authorization Number"
							Vehicle_No as "Vehicle No."
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Accounted_Customers_Report
		{
			displayName = "Accounted Customers Report"
			show all rows from Accounted_Customers    
			(
				Company_Name as "Company Name"
				Email
				Select_Region as "Select Region"
				Select_City as "Select City"
			)
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Company_Name as "Company Name"
							Email
							Select_Region as "Select Region"
							Select_City as "Select City"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Company_Name as "Company Name"
							Email
							Select_Region as "Select Region"
							Select_City as "Select City"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Reference_Forms
	{
		displayname= "Reference Forms"
		hide = true
		icon = "ui-2-menu-bold"
				 page Track_Shipment_Result(trackid,tracktype) 
	 	 { 
 	 	 displayname = "Track Shipment Result" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Track_Shipment_Result1'>\n\t<![CDATA[htmlpage Track_Shipment_Result1(trackid,tracktype)\ncontent\n&lt;%{\n\t%&gt;\n&lt;style&gt;\n\t\t\t\t\t\t  .mainResult{\n\t\t\t\t\t\t  min-width: 500px;\n\t\t\t\t\t\t  width:94%;\n\t\t\t\t\t\t  margin:auto;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .allContent{\n\t\t\t\t\t\t  margin:0px auto;\n\t\t\t\t\t\t  text-align: center;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t    h3{\n\t\t\t\t\t\t\t  margin:0px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  #zc-component #zc-pane{\n\t\t\t\t\t\t  margin:auto;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .sections{\n\t\t\t\t\t\t  position: relative;\n\t\t\t\t\t\twidth: 98%;\n\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\theight: 60px;  \n\t\t\t\t\t\t  margin:auto;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section0{\n\t\t\t\t\t\t  height: 35px;\n\t\t\t\t\t\twidth: 0%;\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\tz-index: 11;\n\t\t\t\t\t\tborder-right: 2px solid rgb(204, 204, 204);\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section0info{\n\t\t\t\t\t\t  font-size: 11px;\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\tbottom: -17px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section25{\n\t\t\t\t\t\t  height: 35px;\n\t\t\t\t\t\twidth: 25%;\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\tz-index: 10;\n\t\t\t\t\t\tborder-right: 2px solid rgb(204, 204, 204);\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section25info{\n\t\t\t\t\t\t  position: absolute;\n\t\t\t\t\t\tfont-size: 11px;\n\t\t\t\t\t\tright: -26px;\n\t\t\t\t\t\tbottom: -17px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section50{\n\t\t\t\t\t\t  width: 50%;\n\t\t\t\t\t\tz-index: 9;\n\t\t\t\t\t\tborder-right: 2px solid rgb(204, 204, 204);\n\t\t\t\t\t\theight: 35px;\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section50info{\n\t\t\t\t\t\t position: absolute;\n\t\t\t\t\t\tfont-size: 11px;\n\t\t\t\t\t\tbottom: -17px;\n\t\t\t\t\t\tright: -39px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section75{\n\t\t\t\t\t\t  height: 35px;\n\t\t\t\t\t\tz-index: 8;\n\t\t\t\t\t\twidth: 75%;\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\tborder-right:2px solid rgb(204, 204, 204);\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section75info{\n\t\t\t\t\t\t position: absolute;\n\t\t\t\t\t\tfont-size: 11px;\n\t\t\t\t\t\tbottom: -17px;\n\t\t\t\t\t\tright: -39px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section100{\n\t\t\t\t\t\t  height: 35px;\n\t\t\t\t\t\tz-index: 7;\n\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\tborder-right: 2px solid rgb(204, 204, 204);\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section100info{\n\t\t\t\t\t\t  position: absolute;\n\t\t\t\t\t\tfont-size: 11px;\n\t\t\t\t\t\tbottom: -17px;\n\t\t\t\t\t\tright: -13px;;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  h2{\n\t\t\t\t\t\t        margin-bottom: 0px;\n\t\t\t\t\t\t    margin-top: 18px\n\t\t\t\t\t\t  }  \n\t\t\t\t\t\t  p{\n\t\t\t\t\t\t  margin-top: 15px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  #progressbar {\n\t\t\t\t\t\t  position:relative;\n\t\t\t\t\t\t  top:15;  \n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    background-color: #eee;\n\t\t\t\t\t\t    padding: 2px;\n\t\t\t\t\t\t    margin: .6em auto;\n\t\t\t\t\t\t    border: 1px #000 double;\n\t\t\t\t\t\t  \tborder-right:none;\n\t\t\t\t\t\t  \tborder-left:none;\n\t\t\t\t\t\t    clear: both;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t#progress1 {\n\t\t\t\t\t\t    background: #f2b01e; \n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    width: 0%;\n\t\t\t\t\t\t    max-width: 100%;\n\t\t\t\t\t\t    float: left;\n\t\t\t\t\t\t    animation: progress1 2s 1 forwards;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#progress {\n\t\t\t\t\t\t    background: #f27011;\n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    width: 0%;\n\t\t\t\t\t\t    max-width: 100%;\n\t\t\t\t\t\t    float: left;\n\t\t\t\t\t\t    animation: progress 2s 1 forwards;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t#progress2 {\n\t\t\t\t\t\t    background: #f2d31b; \n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    width: 0%;\n\t\t\t\t\t\t    max-width: 100%;\n\t\t\t\t\t\t    float: left;\n\t\t\t\t\t\t    animation: progress2 2s 1 forwards;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t#progress3 {\n\t\t\t\t\t\t    background: #A1C969;\n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    width: 0%;\n\t\t\t\t\t\t    max-width: 100%;\n\t\t\t\t\t\t    float: left;\n\t\t\t\t\t\t    animation: progress3 2s 1 forwards;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#progressfail{\n\t\t\t\t\t\t\tbackground: #c00;\n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    width: 0%;\n\t\t\t\t\t\t    max-width: 100%;\n\t\t\t\t\t\t    float: left;\n\t\t\t\t\t\t    animation: progress3 2s 1 forwards;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  #progressunsent{\n\t\t\t\t\t\t  background: #c00;\n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    width: 0%;\n\t\t\t\t\t\t    max-width: 100%;\n\t\t\t\t\t\t    float: left;\n\t\t\t\t\t\t    animation: progressunsent 2s 1 forwards;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t#pbaranim {\n\t\t\t\t\t\t\tcolor: #0F00FF;\n\t\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    width: 100%;\n\t\t\t\t\t\t    overflow: hidden;\n\t\t\t\t\t\t    background: url(&apos;http:\/\/www.cssdeck.com\/uploads\/media\/items\/7\/7uo1osj.gif&apos;) repeat-x;   \n\t\t\t\t\t\t    opacity: 0.25;\n\t\t\t\t\t\t    filter: alpha(opacity=25);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t  @keyframes  progressunsent { \n\t\t\t\t\t\t    from { }\n\t\t\t\t\t\t    to { width: 2% }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t@keyframes progress { \n\t\t\t\t\t\t    from { }\n\t\t\t\t\t\t    to { width: 25% }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t@keyframes progress1 { \n\t\t\t\t\t\t    from { }\n\t\t\t\t\t\t    to { width: 50% }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t@keyframes progress2 { \n\t\t\t\t\t\t    from { }\n\t\t\t\t\t\t    to { width: 75% }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t@keyframes progress3 { \n\t\t\t\t\t\t    from { }\n\t\t\t\t\t\t    to { width: 100% }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t.dettable{\n\t\t\t\t\t\t  border: 1px solid black;\n\t\t\t\t\t\t  border-collapse: collapse;\n\t\t\t\t\t\t  margin: 0 auto;\n\t\t\t\t\t\t  text-align:center;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t .detheader{\n\t\t\t\t\t\t  border: 1px solid black;\n\t\t\t\t\t\t  border-collapse: collapse;\n\t\t\t\t\t\t  padding:10px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .detdiv{\n\t\t\t\t\t\t  padding:10px;\n\t\t\t\t\t\t  border: 1px solid black;\n\t\t\t\t\t\t  border-collapse: collapse;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t&lt;\/style&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;mainResult&quot;&gt;\n\t\t\t\t\t\t\n\t\t\t\t\t\t  &lt;div class=&quot;allContent&quot;&gt;\n&lt;%\n\tif(input.tracktype == &quot;Track Shipping Route&quot;)\n\t{\n\t\t%&gt;\n&lt;span style=&quot;text-align:left;&quot;&gt;&lt;h3&gt;Tracking Details&lt;\/h3&gt;&lt;\/span&gt;\n&lt;%\n\t\tif(trackid.startsWith(&quot;CH&quot;))\n\t\t{\n\t\t\tre = In_Bound_Dispatch[In_Challan_No == input.trackid];\n\t\t\tserloc = re.Origin_Service_Locations;\n\t\t\tct = Service_Locations_Hubs[ID == serloc];\n\t\t\tstr = re.Added_Time.toString();\n\t\t\tdte = re.Added_Time.toDate();\n\t\t\tdt = dte.toString();\n\t\t\ttym = str.remove(dt);\n\t\t\tstatu = re.Current_Status;\n\t\t\t%&gt;\n&lt;div class=&quot;dispatchresult&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;  \n\t\t\t\t\t\t  &lt;div id=&quot;progressbar&quot;&gt;\n&lt;%\n\t\t\tif(statu == &quot;Transporting&quot;)\n\t\t\t{\n\t\t\t\tvar = &quot;Your item has been dispatched for the destination service location&quot;;\n\t\t\t\t%&gt;\n&lt;div id=&quot;progress1&quot;&gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(statu == &quot;Transported&quot;)\n\t\t\t{\n\t\t\t\tvar = &quot;Your item has been received at the destination service location&quot;;\n\t\t\t\t%&gt;\n&lt;div id=&quot;progress3&quot;&gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;div id=&quot;pbaranim&quot;&gt;\n\t\t\t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t  &lt;p&gt;  &lt;%=var%&gt;  &lt;\/p&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;trackdetails&quot;&gt;\n\t\t\t\t\t\t  &lt;table class=&quot;dettable&quot;&gt;\n\t\t\t\t\t\t  &lt;tr&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Date&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Time&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Location&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Status&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;\/tr&gt;\n\t\t\t\t\t\t  &lt;tr&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=dte%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=tym%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=ct.Select_City.City%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;Dispatched&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t\tif(Run_Sheet[Challan_No == re.ID].count() == 0)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;\/table&gt;\n\t\t\t\t\t\t    &lt;\/div&gt;\n&lt;%\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trunSheetCount = 0;\n\t\t\t\tcont = Run_Sheet[Challan_No == re.ID].count();\n\t\t\t\tcnt = cont;\n\t\t\t\tfor each  recc in Run_Sheet[Challan_No == re.ID] sort by Arrival_Date_Time\n\t\t\t\t{\n\t\t\t\t\trunSheetCount = runSheetCount + 1;\n\t\t\t\t\tstr = recc.Added_Time.toString();\n\t\t\t\t\tdte = recc.Added_Time.toDate();\n\t\t\t\t\tdt = dte.toString();\n\t\t\t\t\ttym = str.remove(dt);\n\t\t\t\t\tif(cont == 1 &amp;&amp; statu == &quot;Transporting&quot;)\n\t\t\t\t\t{\n\t\t\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=dte%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=tym%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=recc.City.City%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;Dispatched&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=dte%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=tym%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=recc.City.City%&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\tif(runSheetCount != cnt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t%&gt;\n&lt;td class=&quot;detdiv&quot;&gt;Dispatched&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(runSheetCount == cnt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t%&gt;\n&lt;td class=&quot;detdiv&quot;&gt;Received&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t}\n\t\t\t\t\t\t%&gt;\n&lt;\/tr&gt;\n&lt;%\n\t\t\t\t\t}\n\t\t\t\t\tcont = cont - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/table&gt;\n\t\t\t\t\t\t    &lt;\/div&gt;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  &lt;\/div&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = 0;\n\t\t\tcoll = Booking[Docket_No == input.trackid];\n\t\t\tstat = coll.Status;\n\t\t\tcit = Cities[ID == Service_Locations_Hubs[ID == coll.Origin_Service_Location].Select_City].City;\n\t\t\tif(stat != &quot;Unsent&quot;)\n\t\t\t{\n\t\t\t\trec = In_Bound_Shipment_Details_Subform[Docket_No == coll.ID];\n\t\t\t\tre = In_Bound_Dispatch[ID == rec.In_Bound_Dispatch_Lookup];\n\t\t\t\tstr = re.Added_Time.toString();\n\t\t\t\tdte = re.Added_Time.toDate();\n\t\t\t\tdt = dte.toString();\n\t\t\t\ttym = str.remove(dt);\n\t\t\t}\n\t\t\t%&gt;\n&lt;div class=&quot;dispatchresult&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section25&quot;&gt;&lt;span class=&quot;section25info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section75&quot;&gt;&lt;span class=&quot;section75info&quot;&gt;Out-Bound Dispatch&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Delivery&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div id=&quot;progressbar&quot;&gt;\n&lt;%\n\t\t\tif(stat == &quot;Unsent&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div id=&quot;progressunsent&quot; &gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(stat == &quot;Dispatched&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div id=&quot;progress&quot; &gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(stat == &quot;Received At Destination Hub&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div id=&quot;progress1&quot;&gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(stat == &quot;Dispatched for Out-Bound Delivery&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div id=&quot;progress2&quot; &gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(stat == &quot;Delivered To Customer&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div id=&quot;progress3&quot; &gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(stat == &quot;Delivery Attempted (Failed)&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div id=&quot;progressfail&quot; &gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;div id=&quot;pbaranim&quot;&gt;\n\t\t\t\t\t\t\n\t\t\t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t&lt;p&gt;\n&lt;%\n\t\t\tif(stat != &quot;Delivery Attempted (Failed)&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\nYour item has been &lt;%=stat%&gt; &lt;\/p&gt;\n&lt;%\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t%&gt;\nDelivery attempt failed.&lt;\/p&gt;\n&lt;%\n\t\t\t}\n\t\t\tif(stat != &quot;Unsent&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div class=&quot;trackdetails&quot;&gt;\n\t\t\t\t\t\t  &lt;table class=&quot;dettable&quot;&gt;\n\t\t\t\t\t\t  &lt;tr&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Date&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Time&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Location&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Status&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;\/tr&gt;\n\t\t\t\t\t\t  &lt;tr&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=dte%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=tym%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=cit%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;Dispatched&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t\t\tif(Run_Sheet[Challan_No == re.ID].count() == 0)\n\t\t\t\t{\n\t\t\t\t\t%&gt;\n&lt;\/table&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfor each  recc in Run_Sheet[Challan_No == re.ID] sort by Arrival_Date_Time\n\t\t\t\t\t{\n\t\t\t\t\t\ttimeAdded = recc.Added_Time.toString();\n\t\t\t\t\t\tdateAdded = recc.Added_Time.toDate();\n\t\t\t\t\t\tdatString = dateAdded.toString();\n\t\t\t\t\t\ttimeString = timeAdded.remove(datString);\n\t\t\t\t\t\tif(flag == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(recc.City == coll.Dest_City)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tflag = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=datString%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=timeString%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=recc.City.City%&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t\tif(flag != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t%&gt;\n&lt;td class=&quot;detdiv&quot;&gt;Received&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t%&gt;\n&lt;td class=&quot;detdiv&quot;&gt;Dispatched&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t%&gt;\n&lt;\/tr&gt;\n&lt;%\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(coll.Status == &quot;Dispatched&quot; || coll.Status == &quot;Received At Destination Hub&quot;)\n\t\t\t\t\t{\n\t\t\t\t\t\t%&gt;\n&lt;\/table&gt;\n\t\t\t\t\t\t\t\t  \t&lt;\/div&gt;\n\t\t\t\t\t\t  \t\t\t&lt;\/div&gt;\n&lt;%\n\t\t\t\t\t}\n\t\t\t\t\telse if(coll.Status == &quot;Dispatched for Out-Bound Delivery&quot;)\n\t\t\t\t\t{\n\t\t\t\t\t\treec = Out_Bound_Shipment_Details_Subform[Docket_No == coll.ID];\n\t\t\t\t\t\tree = Out_Bound_Dispatch[ID == reec.Out_Bound_Dispatch_Lookup];\n\t\t\t\t\t\tstr = ree.Added_Time.toString();\n\t\t\t\t\t\tdte = ree.Added_Time.toDate();\n\t\t\t\t\t\tdt = dte.toString();\n\t\t\t\t\t\ttym = str.remove(dt);\n\t\t\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=dte%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=tym%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=ree.City.City%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=coll.Status%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;\/tr&gt;\n\t\t\t\t\t\t  \t\t\t\t&lt;\/table&gt;\n\t\t\t\t\t\t\t\t  \t&lt;\/div&gt;\n\t\t\t\t\t\t  \t\t\t&lt;\/div&gt;\n&lt;%\n\t\t\t\t\t}\n\t\t\t\t\telse if(coll.Status == &quot;Delivered To Customer&quot; || coll.Status == &quot;Delivery Attempted (Failed)&quot;)\n\t\t\t\t\t{\n\t\t\t\t\t\treec = Out_Bound_Shipment_Details_Subform[Docket_No == coll.ID];\n\t\t\t\t\t\tree = Out_Bound_Dispatch[ID == reec.Out_Bound_Dispatch_Lookup];\n\t\t\t\t\t\tstr = ree.Added_Time.toString();\n\t\t\t\t\t\tdte = ree.Added_Time.toDate();\n\t\t\t\t\t\tdt = dte.toString();\n\t\t\t\t\t\ttym = str.remove(dt);\n\t\t\t\t\t\tdelsub = Out_Bound_Delivery_Subform[Docket_No == coll.ID];\n\t\t\t\t\t\tdel = Out_Bound_Delivery[ID == delsub.Out_Bound_Delivery_Lookup];\n\t\t\t\t\t\tstrr = delsub.Added_Time.toString();\n\t\t\t\t\t\tdtee = delsub.Added_Time.toDate();\n\t\t\t\t\t\tdtt = dtee.toString();\n\t\t\t\t\t\ttymm = strr.remove(dt);\n\t\t\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=dte%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=tym%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=ree.City.City%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;Dispatched for Out-Bound Delivery&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;\/tr&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;tr&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=dtee%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=tymm%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=reec.City.City%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=coll.Status%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;\/tr&gt;\n\t\t\t\t\t\t\n\t\t\t\t\t\t  \t\t\t\t&lt;\/table&gt;\n\t\t\t\t\t\t\t\t  \t&lt;\/div&gt;\n\t\t\t\t\t\t  \t\t\t&lt;\/div&gt;\n&lt;%\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(input.tracktype == &quot;Track Shipment&quot;)\n\t{\n\t\t%&gt;\n&lt;span style=&quot;text-align:left;&quot;&gt;&lt;h3&gt;Tracking Details&lt;\/h3&gt;&lt;\/span&gt;\n&lt;%\n\t\tcoll = Booking[Docket_No == input.trackid];\n\t\tcol = Service_Locations_Hubs[ID == coll.Last_Location_Service_Locations_Hubs];\n\t\tif(coll.Status == &quot;Unsent&quot;)\n\t\t{\n\t\t\t%&gt;\n&lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section25&quot;&gt;&lt;span class=&quot;section25info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section75&quot;&gt;&lt;span class=&quot;section75info&quot;&gt;Out-Bound Dispatch&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Delivery&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t&lt;div id=&quot;progressbar&quot;&gt;&lt;div id=&quot;progressunsent&quot; &gt;&lt;div id=&quot;pbaranim&quot;&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t\t&lt;p&gt;Your Item has Not Yet Dispatched.&lt;\/p&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(coll.Status == &quot;Dispatched&quot;)\n\t\t\t{\n\t\t\t\trec = In_Bound_Shipment_Details_Subform[Docket_No == coll.ID];\n\t\t\t\tre = In_Bound_Dispatch[ID == rec.In_Bound_Dispatch_Lookup];\n\t\t\t\tif(Run_Sheet[Challan_No == re.ID].count() != 0)\n\t\t\t\t{\n\t\t\t\t\trec = In_Bound_Shipment_Details_Subform[Docket_No == coll.ID];\n\t\t\t\t\tre = In_Bound_Dispatch[ID == rec.In_Bound_Dispatch_Lookup];\n\t\t\t\t\tlastUpdate = Run_Sheet[Challan_No == re.ID] sort by Added_Time desc;\n\t\t\t\t\tCity = lastUpdate.City.City;\n\t\t\t\t\taddedDateStr = lastUpdate.Added_Time;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\trec = In_Bound_Shipment_Details_Subform[Docket_No == coll.ID];\n\t\t\t\t\tre = In_Bound_Dispatch[ID == rec.In_Bound_Dispatch_Lookup];\n\t\t\t\t\taddedDateStr = re.Added_Time;\n\t\t\t\t\tCity = col.Select_City.City;\n\t\t\t\t}\n\t\t\t\t%&gt;\n&lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section25&quot;&gt;&lt;span class=&quot;section25info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section75&quot;&gt;&lt;span class=&quot;section75info&quot;&gt;Out-Bound Dispatch&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Delivery&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t&lt;div id=&quot;progressbar&quot;&gt;&lt;div id=&quot;progress&quot; &gt;&lt;div id=&quot;pbaranim&quot;&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t\t&lt;p&gt;Your Item has been &lt;%=coll.Status%&gt;&lt;\/p&gt;\t\t\n\t\t\t\t\t\t            &lt;div style=&apos;color:black;&apos;&gt;&lt;h2&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt;Date-Time: &lt;\/span&gt;&lt;%=addedDateStr%&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt; Reached at: &lt;\/span&gt;&lt;%=City%&gt;&lt;\/h2&gt;&lt;\/div&gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(coll.Status == &quot;Received At Destination Hub&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div class=&quot;allContent&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section25&quot;&gt;&lt;span class=&quot;section25info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section75&quot;&gt;&lt;span class=&quot;section75info&quot;&gt;Out-Bound Dispatch&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Delivery&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t&lt;div id=&quot;progressbar&quot;&gt;&lt;div id=&quot;progress1&quot; &gt;&lt;div id=&quot;pbaranim&quot;&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;p&gt;Your Item has been &lt;%=coll.Status%&gt;&lt;\/p&gt;\n\t\t\t\t\t\t                          &lt;div style=&apos;color:black;&apos;&gt;&lt;h2&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt;Date-Time: &lt;\/span&gt;&lt;%=coll.Modified_Time%&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt; Reached at: &lt;\/span&gt;&lt;%=col.Select_City.City%&gt;&lt;\/h2&gt;&lt;\/div&gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(coll.Status == &quot;Dispatched for Out-Bound Delivery&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section25&quot;&gt;&lt;span class=&quot;section25info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section75&quot;&gt;&lt;span class=&quot;section75info&quot;&gt;Out-Bound Dispatch&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Delivery&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t&lt;div id=&quot;progressbar&quot;&gt;&lt;div id=&quot;progress2&quot; &gt;&lt;div id=&quot;pbaranim&quot;&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t&lt;p&gt;Your Item has been &lt;%=coll.Status%&gt;&lt;\/p&gt;\n\t\t\t\t\t\t  &lt;div style=&apos;color:black;&apos;&gt;&lt;h2&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt;Date-Time: &lt;\/span&gt;&lt;%=coll.Modified_Time%&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt; Dispatched from: &lt;\/span&gt;&lt;%=col.Select_City.City%&gt;&lt;\/h2&gt;&lt;\/div&gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(coll.Status == &quot;Delivered To Customer&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section25&quot;&gt;&lt;span class=&quot;section25info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section75&quot;&gt;&lt;span class=&quot;section75info&quot;&gt;Out-Bound Dispatch&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Delivery&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t &lt;div id=&quot;progressbar&quot;&gt;&lt;div id=&quot;progress3&quot; &gt;&lt;div id=&quot;pbaranim&quot;&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t&lt;p&gt;Your Item has been Delivered to the Receiver&lt;\/p&gt;\n\t\t\t\t\t\t&lt;div style=&apos;color:black;&apos;&gt;&lt;h2&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt;On Date-Time: &lt;\/span&gt;&lt;%=coll.Modified_Time%&gt;&lt;\/h2&gt;&lt;\/div&gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(coll.Status == &quot;Delivery Attempted (Failed)&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section25&quot;&gt;&lt;span class=&quot;section25info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section75&quot;&gt;&lt;span class=&quot;section75info&quot;&gt;Out-Bound Dispatch&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Delivery&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div id=&quot;progressbar&quot;&gt;&lt;div id=&quot;progressfail&quot; &gt;&lt;div id=&quot;pbaranim&quot;&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t&lt;p&gt; Delivery Attempt failed for your Item  &lt;\/p&gt;\n\t\t\t\t\t\t&lt;div style=&apos;color:black;&apos;&gt;&lt;h2&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt;Date-Time: &lt;\/span&gt;&lt;%=coll.Modified_Time%&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt; Returned at: &lt;\/span&gt;&lt;%=col.Select_City.City%&gt;&lt;\/h2&gt;&lt;\/div&gt;\n&lt;%\n\t\t\t}\n\t\t}\n\t}\n\t%&gt;\n&lt;\/div&gt;\n\t\t\t\t\t\t&lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
		form Booking_Commodity_Subform
		{
			displayname = "Booking Commodity Subform"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have Commodity
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Weight
			(
				type = decimal
				displayname = "Weight in KGs"
	 			row = 1
	 			column = 1   
				width = 100px
			)
			Booking_Lookup
			(
				type = picklist
				displayname = "Booking-Lookup"
				values  = Booking.ID
    			bidirectional = Shipment_Details
    			displayformat = [Docket_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Out_Bound_Shipment_Details_Subform
		{
			displayname = "Out-Bound Shipment Details Subform"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have Docket_No
			(
				type = picklist
				displayname = "Docket No."
				values  = Booking.ID
    			displayformat = [Docket_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have City
			(
				type = picklist
				values  = Cities.ID
    			displayformat = [City]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Commodity
			(
				type = list
				values  = Booking_Commodity_Subform.ID
    			displayformat = [Commodity]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Current_Status
			(
				type = picklist
				displayname = "Current Status"
				values = {"Shipping", "Returned", "Delivered to Customer"}
				initial value = "Shipping"
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Location_Inside_Container
			(
    			type = textarea
				displayname = "Location Inside Container/Comment"
				height = 100px
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Out_Bound_Dispatch_Lookup
			(
				type = picklist
				displayname = "Out-Bound Dispatch - Lookup"
				values  = Out_Bound_Dispatch.ID
    			bidirectional = Shipment_Details
    			displayformat = [Out_Challan_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form In_Bound_Shipment_Details_Subform
		{
			displayname = "In-Bound Shipment Details Subform"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Docket_No
			(
				type = picklist
				displayname = "Docket No."
				values  = Booking.ID
    			displayformat = [Docket_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Destination_City
			(
				type = picklist
				displayname = "Destination City"
				values  = Cities.ID
    			displayformat = [City]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Delivery_Address
			(
    			type = address
				displayname = "Delivery Address"
     			capture_coordinates = true
     			adjust_using_map = true
     			address_line_12
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_22
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city2
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province2
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code2
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country2
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude2
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude2
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
			)
			Status
			(
				type = picklist
				values = {"Reached the Destination Hub", "Shipping", "Returned"}
				initial value = "Shipping"
	 			row = 1
	 			column = 1   
				width = medium
			)
			In_Bound_Dispatch_Lookup
			(
				type = picklist
				displayname = "In-Bound Dispatch-Lookup"
				values  = In_Bound_Dispatch.ID
    			bidirectional = Shipment_Details
    			displayformat = [In_Challan_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form In_Bound_Received_Shipments_Subform
		{
			displayname = "In-Bound Received Shipments Subform"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have Docket_No
			(
				type = picklist
				displayname = "Docket No"
				values  = Booking.ID
    			displayformat = [Docket_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Condition_field
			(
				type = picklist
				displayname = "Condition"
				values = {"Fine", "Damaged", "Incomplete", "Lost"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have In_Bound_Delivery_Lookup
			(
				type = picklist
				displayname = "In-Bound Delivery-Lookup"
				values  = In_Bound_Delivery.ID
    			bidirectional = Received_Shipment_Details1
    			displayformat = [ID]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Out_Bound_Delivery_Subform
		{
			displayname = "Out-Bound Delivery Subform"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have Docket_No
			(
				type = picklist
				displayname = "Docket No."
				values  = Booking.ID
    			displayformat = [Docket_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Delivery_Status
			(
				type = picklist
				displayname = "Delivery Status"
				values = {"Delivered To Customer", "Delivery Attempted (Failed)"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Received_By
			(
    			type = text
				displayname = "Received By"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Relation_With_Addresee
			(
				type = picklist
				displayname = "Relation With Addressee"
				values = {"Self", "Brother", "Sister", "Wife", "Father", "Mother", "Neighbour"}
				others option = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Comment
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Out_Bound_Delivery_Lookup
			(
				type = picklist
				displayname = "Out-Bound Delivery-Lookup"
				values  = Out_Bound_Delivery.ID
    			bidirectional = Delivered_Shipment_Details
    			displayformat = [ID]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Trucks_Status_Update
		{
			displayname = "Trucks Status Update"
			store data in zc = false
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have Vehicle_No
			(
				type = picklist
				displayname = "Vehicle No."
				values  = Truck_Details.ID
    			displayformat = [Vehicle_No]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Current_Status
			(
				type = picklist
				displayname = "Current Status"
				values = {"Transporting", "Transported (Returning)", "Free (Ready To Transport)"}
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				Update
				(
   					type = button
   					displayname = "Update"
				)
			}
		}
				 page Track_Shipment_Result_Public(trackid,tracktype) 
	 	 { 
 	 	 displayname = "Track Shipment Result (Public)" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Track_Shipment_Result_Public1'>\n\t<![CDATA[htmlpage Track_Shipment_Result_Public1(trackid,tracktype)\ncontent\n&lt;%{\n\t%&gt;\n&lt;style&gt;\n\t\t\t\t\t\t  .mainResult{\n\t\t\t\t\t\t  width:700px;\n\t\t\t\t\t\t  background: #fafafa;\n\t\t\t\t\t\tpadding: 10px 0px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .allContent{\n\t\t\t\t\t\t  margin:0px auto;\n\t\t\t\t\t\t  text-align: center;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t    h3{\n\t\t\t\t\t\t  \t  margin:0px;\n\t\t\t\t\t\t\t  margin-bottom:18px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .sections{\n\t\t\t\t\t\t  position: relative;\n\t\t\t\t\t\twidth: 95%;\n\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\theight: 60px;\n\t\t\t\t\t\t  margin:auto;  \n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section0{\n\t\t\t\t\t\t  height: 35px;\n\t\t\t\t\t\twidth: 0%;\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\tz-index: 11;\n\t\t\t\t\t\tborder-right: 2px solid rgb(204, 204, 204);\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section0info{\n\t\t\t\t\t\t  font-size: 11px;\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\tbottom: -17px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section25{\n\t\t\t\t\t\t  height: 35px;\n\t\t\t\t\t\twidth: 25%;\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\tz-index: 10;\n\t\t\t\t\t\tborder-right: 2px solid rgb(204, 204, 204);\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section25info{\n\t\t\t\t\t\t  position: absolute;\n\t\t\t\t\t\tfont-size: 11px;\n\t\t\t\t\t\tright: -26px;\n\t\t\t\t\t\tbottom: -17px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section50{\n\t\t\t\t\t\t  width: 50%;\n\t\t\t\t\t\tz-index: 9;\n\t\t\t\t\t\tborder-right: 2px solid rgb(204, 204, 204);\n\t\t\t\t\t\theight: 35px;\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section50info{\n\t\t\t\t\t\t position: absolute;\n\t\t\t\t\t\tfont-size: 11px;\n\t\t\t\t\t\tbottom: -17px;\n\t\t\t\t\t\tright: -39px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section75{\n\t\t\t\t\t\t  height: 35px;\n\t\t\t\t\t\tz-index: 8;\n\t\t\t\t\t\twidth: 75%;\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\tborder-right:2px solid rgb(204, 204, 204);\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section75info{\n\t\t\t\t\t\t position: absolute;\n\t\t\t\t\t\tfont-size: 11px;\n\t\t\t\t\t\tbottom: -17px;\n\t\t\t\t\t\tright: -39px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section100{\n\t\t\t\t\t\t  height: 35px;\n\t\t\t\t\t\tz-index: 7;\n\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\tborder-right: 2px solid rgb(204, 204, 204);\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .section100info{\n\t\t\t\t\t\t  position: absolute;\n\t\t\t\t\t\tfont-size: 11px;\n\t\t\t\t\t\tbottom: -17px;\n\t\t\t\t\t\tright: -13px;;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  h2{\n\t\t\t\t\t\t        margin-bottom: 0px;\n\t\t\t\t\t\t    margin-top: 18px\n\t\t\t\t\t\t  }  \n\t\t\t\t\t\t  p{\n\t\t\t\t\t\t  margin-top: 15px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  #progressbar {\n\t\t\t\t\t\t  position:relative;\n\t\t\t\t\t\t  top:15;  \n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    background-color: #eee;\n\t\t\t\t\t\t    padding: 2px;\n\t\t\t\t\t\t    margin: .6em auto;\n\t\t\t\t\t\t    border: 1px #000 double;\n\t\t\t\t\t\t  \tborder-right:none;\n\t\t\t\t\t\t  \tborder-left:none;\n\t\t\t\t\t\t    clear: both;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t#progress1 {\n\t\t\t\t\t\t    background: #f2b01e; \n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    width: 0%;\n\t\t\t\t\t\t    max-width: 100%;\n\t\t\t\t\t\t    float: left;\n\t\t\t\t\t\t    animation: progress1 2s 1 forwards;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#progress {\n\t\t\t\t\t\t    background: #f27011;\n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    width: 0%;\n\t\t\t\t\t\t    max-width: 100%;\n\t\t\t\t\t\t    float: left;\n\t\t\t\t\t\t    animation: progress 2s 1 forwards;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t#progress2 {\n\t\t\t\t\t\t    background: #f2d31b; \n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    width: 0%;\n\t\t\t\t\t\t    max-width: 100%;\n\t\t\t\t\t\t    float: left;\n\t\t\t\t\t\t    animation: progress2 2s 1 forwards;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t#progress3 {\n\t\t\t\t\t\t    background: #A1C969;\n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    width: 0%;\n\t\t\t\t\t\t    max-width: 100%;\n\t\t\t\t\t\t    float: left;\n\t\t\t\t\t\t    animation: progress3 2s 1 forwards;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#progressfail{\n\t\t\t\t\t\t\tbackground: #c00;\n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    width: 0%;\n\t\t\t\t\t\t    max-width: 100%;\n\t\t\t\t\t\t    float: left;\n\t\t\t\t\t\t    animation: progress3 2s 1 forwards;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  #progressunsent{\n\t\t\t\t\t\t  background: #c00;\n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    width: 0%;\n\t\t\t\t\t\t    max-width: 100%;\n\t\t\t\t\t\t    float: left;\n\t\t\t\t\t\t    animation: progressunsent 2s 1 forwards;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t#pbaranim {\n\t\t\t\t\t\t\tcolor: #0F00FF;\n\t\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t    height: 15px;\n\t\t\t\t\t\t    width: 100%;\n\t\t\t\t\t\t    overflow: hidden;\n\t\t\t\t\t\t    background: url(&apos;http:\/\/www.cssdeck.com\/uploads\/media\/items\/7\/7uo1osj.gif&apos;) repeat-x;   \n\t\t\t\t\t\t    opacity: 0.25;\n\t\t\t\t\t\t    filter: alpha(opacity=25);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t  @keyframes  progressunsent { \n\t\t\t\t\t\t    from { }\n\t\t\t\t\t\t    to { width: 2% }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t@keyframes progress { \n\t\t\t\t\t\t    from { }\n\t\t\t\t\t\t    to { width: 25% }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t@keyframes progress1 { \n\t\t\t\t\t\t    from { }\n\t\t\t\t\t\t    to { width: 50% }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t@keyframes progress2 { \n\t\t\t\t\t\t    from { }\n\t\t\t\t\t\t    to { width: 75% }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t@keyframes progress3 { \n\t\t\t\t\t\t    from { }\n\t\t\t\t\t\t    to { width: 100% }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t.dettable{\n\t\t\t\t\t\t  border: 1px solid black;\n\t\t\t\t\t\t  border-collapse: collapse;\n\t\t\t\t\t\t  margin: 0 auto;\n\t\t\t\t\t\t  text-align:center;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t .detheader{\n\t\t\t\t\t\t  border: 1px solid black;\n\t\t\t\t\t\t  border-collapse: collapse;\n\t\t\t\t\t\t  padding:10px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .detdiv{\n\t\t\t\t\t\t  padding:10px;\n\t\t\t\t\t\t  border: 1px solid black;\n\t\t\t\t\t\t  border-collapse: collapse;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t&lt;\/style&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;mainResult&quot;&gt;\n\t\t\t\t\t\t\n\t\t\t\t\t\t  &lt;div class=&quot;allContent&quot;&gt;\n&lt;%\n\tif(input.tracktype == &quot;Track Shipping Route&quot;)\n\t{\n\t\t%&gt;\n&lt;span style=&quot;text-align:left;&quot;&gt;&lt;h3&gt;Tracking Details&lt;\/h3&gt;&lt;\/span&gt;\n&lt;%\n\t\tif(trackid.startsWith(&quot;CH&quot;))\n\t\t{\n\t\t\tre = In_Bound_Dispatch[In_Challan_No == input.trackid];\n\t\t\tserloc = re.Origin_Service_Locations;\n\t\t\tct = Service_Locations_Hubs[ID == serloc];\n\t\t\tstr = re.Added_Time.toString();\n\t\t\tdte = re.Added_Time.toDate();\n\t\t\tdt = dte.toString();\n\t\t\ttym = str.remove(dt);\n\t\t\tstatu = re.Current_Status;\n\t\t\t%&gt;\n&lt;div class=&quot;dispatchresult&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;  \n\t\t\t\t\t\t  &lt;div id=&quot;progressbar&quot;&gt;\n&lt;%\n\t\t\tif(statu == &quot;Transporting&quot;)\n\t\t\t{\n\t\t\t\tvar = &quot;Your Item Has been Dispatched for The Destination Service Location&quot;;\n\t\t\t\t%&gt;\n&lt;div id=&quot;progress1&quot;&gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(statu == &quot;Transported&quot;)\n\t\t\t{\n\t\t\t\tvar = &quot;Your Item Has been Received at The Destination Service Location&quot;;\n\t\t\t\t%&gt;\n&lt;div id=&quot;progress3&quot;&gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;div id=&quot;pbaranim&quot;&gt;\n\t\t\t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t  &lt;p&gt;  &lt;%=var%&gt;  &lt;\/p&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;trackdetails&quot;&gt;\n\t\t\t\t\t\t  &lt;table class=&quot;dettable&quot;&gt;\n\t\t\t\t\t\t  &lt;tr&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Date&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Time&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Location&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Status&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;\/tr&gt;\n\t\t\t\t\t\t  &lt;tr&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=dte%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=tym%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=ct.Select_City.City%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;Dispatched&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t\tif(Run_Sheet[Challan_No == re.ID].count() == 0)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;\/table&gt;\n\t\t\t\t\t\t    &lt;\/div&gt;\n&lt;%\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trunSheetCount = 0;\n\t\t\t\tcont = Run_Sheet[Challan_No == re.ID].count();\n\t\t\t\tcnt = cont;\n\t\t\t\tfor each  recc in Run_Sheet[Challan_No == re.ID] sort by Arrival_Date_Time\n\t\t\t\t{\n\t\t\t\t\trunSheetCount = runSheetCount + 1;\n\t\t\t\t\tstr = recc.Added_Time.toString();\n\t\t\t\t\tdte = recc.Added_Time.toDate();\n\t\t\t\t\tdt = dte.toString();\n\t\t\t\t\ttym = str.remove(dt);\n\t\t\t\t\tif(cont == 1 &amp;&amp; statu == &quot;Transporting&quot;)\n\t\t\t\t\t{\n\t\t\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=dte%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=tym%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=recc.City.City%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;Dispatched&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=dte%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=tym%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=recc.City.City%&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\tif(runSheetCount != cnt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t%&gt;\n&lt;td class=&quot;detdiv&quot;&gt;Dispatched&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(runSheetCount == cnt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t%&gt;\n&lt;td class=&quot;detdiv&quot;&gt;Received&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t}\n\t\t\t\t\t\t%&gt;\n&lt;\/tr&gt;\n&lt;%\n\t\t\t\t\t}\n\t\t\t\t\tcont = cont - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/table&gt;\n\t\t\t\t\t\t    &lt;\/div&gt;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  &lt;\/div&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = 0;\n\t\t\tcoll = Booking[Docket_No == input.trackid];\n\t\t\tstat = coll.Status;\n\t\t\tcit = Cities[ID == Service_Locations_Hubs[ID == coll.Origin_Service_Location].Select_City].City;\n\t\t\tif(stat != &quot;Unsent&quot;)\n\t\t\t{\n\t\t\t\trec = In_Bound_Shipment_Details_Subform[Docket_No == coll.ID];\n\t\t\t\tre = In_Bound_Dispatch[ID == rec.In_Bound_Dispatch_Lookup];\n\t\t\t\tstr = re.Added_Time.toString();\n\t\t\t\tdte = re.Added_Time.toDate();\n\t\t\t\tdt = dte.toString();\n\t\t\t\ttym = str.remove(dt);\n\t\t\t}\n\t\t\t%&gt;\n&lt;div class=&quot;dispatchresult&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section25&quot;&gt;&lt;span class=&quot;section25info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section75&quot;&gt;&lt;span class=&quot;section75info&quot;&gt;Out-Bound Dispatch&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Delivery&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div id=&quot;progressbar&quot;&gt;\n&lt;%\n\t\t\tif(stat == &quot;Unsent&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div id=&quot;progressunsent&quot; &gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(stat == &quot;Dispatched&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div id=&quot;progress&quot; &gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(stat == &quot;Received At Destination Hub&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div id=&quot;progress1&quot;&gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(stat == &quot;Dispatched for Out-Bound Delivery&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div id=&quot;progress2&quot; &gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(stat == &quot;Delivered To Customer&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div id=&quot;progress3&quot; &gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(stat == &quot;Delivery Attempted (Failed)&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div id=&quot;progressfail&quot; &gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;div id=&quot;pbaranim&quot;&gt;\n\t\t\t\t\t\t\n\t\t\t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t&lt;p&gt;\n&lt;%\n\t\t\tif(stat != &quot;Delivery Attempted (Failed)&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\nYour Item Has been &lt;%=stat%&gt; &lt;\/p&gt;\n&lt;%\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t%&gt;\nDelivery attempt failed.&lt;\/p&gt;\n&lt;%\n\t\t\t}\n\t\t\tif(stat != &quot;Unsent&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div class=&quot;trackdetails&quot;&gt;\n\t\t\t\t\t\t  &lt;table class=&quot;dettable&quot;&gt;\n\t\t\t\t\t\t  &lt;tr&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Date&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Time&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Location&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;th class=&quot;detheader&quot;&gt;Status&lt;\/th&gt;\n\t\t\t\t\t\t  &lt;\/tr&gt;\n\t\t\t\t\t\t  &lt;tr&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=dte%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=tym%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;&lt;%=cit%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;td class=&quot;detdiv&quot;&gt;Dispatched&lt;\/td&gt;\n\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t\t\tif(Run_Sheet[Challan_No == re.ID].count() == 0)\n\t\t\t\t{\n\t\t\t\t\t%&gt;\n&lt;\/table&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t  &lt;\/div&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfor each  recc in Run_Sheet[Challan_No == re.ID] sort by Arrival_Date_Time\n\t\t\t\t\t{\n\t\t\t\t\t\ttimeAdded = recc.Added_Time.toString();\n\t\t\t\t\t\tdateAdded = recc.Added_Time.toDate();\n\t\t\t\t\t\tdatString = dateAdded.toString();\n\t\t\t\t\t\ttimeString = timeAdded.remove(datString);\n\t\t\t\t\t\tif(flag == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(recc.City == coll.Dest_City)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tflag = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=datString%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=timeString%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=recc.City.City%&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t\tif(flag != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t%&gt;\n&lt;td class=&quot;detdiv&quot;&gt;Received&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t%&gt;\n&lt;td class=&quot;detdiv&quot;&gt;Dispatched&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t%&gt;\n&lt;\/tr&gt;\n&lt;%\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(coll.Status == &quot;Dispatched&quot; || coll.Status == &quot;Received At Destination Hub&quot;)\n\t\t\t\t\t{\n\t\t\t\t\t\t%&gt;\n&lt;\/table&gt;\n\t\t\t\t\t\t\t\t  \t&lt;\/div&gt;\n\t\t\t\t\t\t  \t\t\t&lt;\/div&gt;\n&lt;%\n\t\t\t\t\t}\n\t\t\t\t\telse if(coll.Status == &quot;Dispatched for Out-Bound Delivery&quot;)\n\t\t\t\t\t{\n\t\t\t\t\t\treec = Out_Bound_Shipment_Details_Subform[Docket_No == coll.ID];\n\t\t\t\t\t\tree = Out_Bound_Dispatch[ID == reec.Out_Bound_Dispatch_Lookup];\n\t\t\t\t\t\tstr = ree.Added_Time.toString();\n\t\t\t\t\t\tdte = ree.Added_Time.toDate();\n\t\t\t\t\t\tdt = dte.toString();\n\t\t\t\t\t\ttym = str.remove(dt);\n\t\t\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=dte%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=tym%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=ree.City.City%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=coll.Status%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;\/tr&gt;\n\t\t\t\t\t\t  \t\t\t\t&lt;\/table&gt;\n\t\t\t\t\t\t\t\t  \t&lt;\/div&gt;\n\t\t\t\t\t\t  \t\t\t&lt;\/div&gt;\n&lt;%\n\t\t\t\t\t}\n\t\t\t\t\telse if(coll.Status == &quot;Delivered To Customer&quot; || coll.Status == &quot;Delivery Attempted (Failed)&quot;)\n\t\t\t\t\t{\n\t\t\t\t\t\treec = Out_Bound_Shipment_Details_Subform[Docket_No == coll.ID];\n\t\t\t\t\t\tree = Out_Bound_Dispatch[ID == reec.Out_Bound_Dispatch_Lookup];\n\t\t\t\t\t\tstr = ree.Added_Time.toString();\n\t\t\t\t\t\tdte = ree.Added_Time.toDate();\n\t\t\t\t\t\tdt = dte.toString();\n\t\t\t\t\t\ttym = str.remove(dt);\n\t\t\t\t\t\tdelsub = Out_Bound_Delivery_Subform[Docket_No == coll.ID];\n\t\t\t\t\t\tdel = Out_Bound_Delivery[ID == delsub.Out_Bound_Delivery_Lookup];\n\t\t\t\t\t\tstrr = delsub.Added_Time.toString();\n\t\t\t\t\t\tdtee = delsub.Added_Time.toDate();\n\t\t\t\t\t\tdtt = dtee.toString();\n\t\t\t\t\t\ttymm = strr.remove(dt);\n\t\t\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=dte%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=tym%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=ree.City.City%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;Dispatched for Out-Bound Delivery&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;\/tr&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;tr&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=dtee%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=tymm%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=reec.City.City%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;td class=&quot;detdiv&quot;&gt;&lt;%=coll.Status%&gt;&lt;\/td&gt;\n\t\t\t\t\t\t  \t\t\t\t\t&lt;\/tr&gt;\n\t\t\t\t\t\t\n\t\t\t\t\t\t  \t\t\t\t&lt;\/table&gt;\n\t\t\t\t\t\t\t\t  \t&lt;\/div&gt;\n\t\t\t\t\t\t  \t\t\t&lt;\/div&gt;\n&lt;%\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(input.tracktype == &quot;Track Shipment&quot;)\n\t{\n\t\t%&gt;\n&lt;span style=&quot;text-align:left;&quot;&gt;&lt;h3&gt;Tracking Details&lt;\/h3&gt;&lt;\/span&gt;\n&lt;%\n\t\tcoll = Booking[Docket_No == input.trackid];\n\t\tcol = Service_Locations_Hubs[ID == coll.Last_Location_Service_Locations_Hubs];\n\t\tif(coll.Status == &quot;Unsent&quot;)\n\t\t{\n\t\t\t%&gt;\n&lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section25&quot;&gt;&lt;span class=&quot;section25info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section75&quot;&gt;&lt;span class=&quot;section75info&quot;&gt;Out-Bound Dispatch&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Delivery&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t&lt;div id=&quot;progressbar&quot;&gt;&lt;div id=&quot;progressunsent&quot; &gt;&lt;div id=&quot;pbaranim&quot;&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t\t&lt;p&gt;Your Item has Not Yet Dispatched.&lt;\/p&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(coll.Status == &quot;Dispatched&quot;)\n\t\t\t{\n\t\t\t\trec = In_Bound_Shipment_Details_Subform[Docket_No == coll.ID];\n\t\t\t\tre = In_Bound_Dispatch[ID == rec.In_Bound_Dispatch_Lookup];\n\t\t\t\tif(Run_Sheet[Challan_No == re.ID].count() != 0)\n\t\t\t\t{\n\t\t\t\t\trec = In_Bound_Shipment_Details_Subform[Docket_No == coll.ID];\n\t\t\t\t\tre = In_Bound_Dispatch[ID == rec.In_Bound_Dispatch_Lookup];\n\t\t\t\t\tlastUpdate = Run_Sheet[Challan_No == re.ID] sort by Added_Time desc;\n\t\t\t\t\tCity = lastUpdate.City.City;\n\t\t\t\t\taddedDateStr = lastUpdate.Added_Time;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\trec = In_Bound_Shipment_Details_Subform[Docket_No == coll.ID];\n\t\t\t\t\tre = In_Bound_Dispatch[ID == rec.In_Bound_Dispatch_Lookup];\n\t\t\t\t\taddedDateStr = re.Added_Time;\n\t\t\t\t\tCity = col.Select_City.City;\n\t\t\t\t}\n\t\t\t\t%&gt;\n&lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section25&quot;&gt;&lt;span class=&quot;section25info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section75&quot;&gt;&lt;span class=&quot;section75info&quot;&gt;Out-Bound Dispatch&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Delivery&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t&lt;div id=&quot;progressbar&quot;&gt;&lt;div id=&quot;progress&quot; &gt;&lt;div id=&quot;pbaranim&quot;&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t\t&lt;p&gt;Your Item has been &lt;%=coll.Status%&gt;&lt;\/p&gt;\t\t\n\t\t\t\t\t\t            &lt;div style=&apos;color:black;&apos;&gt;&lt;h2&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt;Date-Time: &lt;\/span&gt;&lt;%=addedDateStr%&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt; Reached at: &lt;\/span&gt;&lt;%=City%&gt;&lt;\/h2&gt;&lt;\/div&gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(coll.Status == &quot;Received At Destination Hub&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div class=&quot;allContent&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section25&quot;&gt;&lt;span class=&quot;section25info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section75&quot;&gt;&lt;span class=&quot;section75info&quot;&gt;Out-Bound Dispatch&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Delivery&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t&lt;div id=&quot;progressbar&quot;&gt;&lt;div id=&quot;progress1&quot; &gt;&lt;div id=&quot;pbaranim&quot;&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;p&gt;Your Item has been &lt;%=coll.Status%&gt;&lt;\/p&gt;\n\t\t\t\t\t\t                          &lt;div style=&apos;color:black;&apos;&gt;&lt;h2&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt;Date-Time: &lt;\/span&gt;&lt;%=coll.Modified_Time%&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt; Reached at: &lt;\/span&gt;&lt;%=col.Select_City.City%&gt;&lt;\/h2&gt;&lt;\/div&gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(coll.Status == &quot;Dispatched for Out-Bound Delivery&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section25&quot;&gt;&lt;span class=&quot;section25info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section75&quot;&gt;&lt;span class=&quot;section75info&quot;&gt;Out-Bound Dispatch&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Delivery&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t&lt;div id=&quot;progressbar&quot;&gt;&lt;div id=&quot;progress2&quot; &gt;&lt;div id=&quot;pbaranim&quot;&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t&lt;p&gt;Your Item has been &lt;%=coll.Status%&gt;&lt;\/p&gt;\n\t\t\t\t\t\t  &lt;div style=&apos;color:black;&apos;&gt;&lt;h2&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt;Date-Time: &lt;\/span&gt;&lt;%=coll.Modified_Time%&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt; Dispatched from: &lt;\/span&gt;&lt;%=col.Select_City.City%&gt;&lt;\/h2&gt;&lt;\/div&gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(coll.Status == &quot;Delivered To Customer&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section25&quot;&gt;&lt;span class=&quot;section25info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section75&quot;&gt;&lt;span class=&quot;section75info&quot;&gt;Out-Bound Dispatch&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Delivery&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t &lt;div id=&quot;progressbar&quot;&gt;&lt;div id=&quot;progress3&quot; &gt;&lt;div id=&quot;pbaranim&quot;&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t&lt;p&gt;Your Item has been Delivered to the Receiver&lt;\/p&gt;\n\t\t\t\t\t\t&lt;div style=&apos;color:black;&apos;&gt;&lt;h2&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt;On Date-Time: &lt;\/span&gt;&lt;%=coll.Modified_Time%&gt;&lt;\/h2&gt;&lt;\/div&gt;\n&lt;%\n\t\t\t}\n\t\t\telse if(coll.Status == &quot;Delivery Attempted (Failed)&quot;)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div class=&quot;sections&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section0&quot;&gt;&lt;span class=&quot;section0info&quot;&gt;Unsent&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;section25&quot;&gt;&lt;span class=&quot;section25info&quot;&gt;Dispatched&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t    &lt;div class=&quot;section50&quot;&gt;&lt;span class=&quot;section50info&quot;&gt;Destination Hub&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section75&quot;&gt;&lt;span class=&quot;section75info&quot;&gt;Out-Bound Dispatch&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t      &lt;div class=&quot;section100&quot;&gt;&lt;span class=&quot;section100info&quot;&gt;Delivery&lt;\/span&gt;&lt;\/div&gt;\n\t\t\t\t\t\t  &lt;div id=&quot;progressbar&quot;&gt;&lt;div id=&quot;progressfail&quot; &gt;&lt;div id=&quot;pbaranim&quot;&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;\n\t\t\t\t\t\t&lt;p&gt; Delivery Attempt failed for your Item  &lt;\/p&gt;\n\t\t\t\t\t\t&lt;div style=&apos;color:black;&apos;&gt;&lt;h2&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt;Date-Time: &lt;\/span&gt;&lt;%=coll.Modified_Time%&gt;&lt;span style=&apos;color:black; font-weight:normal;&apos;&gt; Returned at: &lt;\/span&gt;&lt;%=col.Select_City.City%&gt;&lt;\/h2&gt;&lt;\/div&gt;\n&lt;%\n\t\t\t}\n\t\t}\n\t}\n\t%&gt;\n&lt;\/div&gt;\n\t\t\t\t\t\t&lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page Track_Shipment_Public_Page(Docket_Challan_No) 
	 	 { 
 	 	 displayname = "Track Shipment (Public) Page" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Track_Shipment_Public_Page1'>\n\t<![CDATA[htmlpage Track_Shipment_Public_Page1(Docket_Challan_No)\ncontent\n&lt;%{\n\tTrackShipmentPublicFormPrivatlink1 = &quot;Enter publish link of &apos;Track_Shipment_Public_Form&apos; here&quot;;\n\tTrackShipmentPublicFormPrivatlink = TrackShipmentPublicFormPrivatlink1.getSuffix(&quot;Track_Shipment_Public_Form\/&quot;);\n\t%&gt;\n&lt;style&gt;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t@font-face {\n\t\t\t\t\t\t  font-family: &apos;Tangerine&apos;;\n\t\t\t\t\t\t  font-style: normal;\n\t\t\t\t\t\t  font-weight: 400;\n\t\t\t\t\t\t  src: local(&apos;Tangerine&apos;), url(&apos;http:\/\/fonts.gstatic.com\/s\/tangerine\/v7\/HGfsyCL5WASpHOFnouG-RFtXRa8TVwTICgirnJhmVJw.woff2&apos;) format(&apos;woff2&apos;);\n\t\t\t\t\t\t  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2212, U+2215, U+E0FF, U+EFFD, U+F000;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t   @font-face {\n\t\t\t\t\t\t    font-family: &quot;ProximaNova Light&quot;;\n\t\t\t\t\t\t    src: url(&apos;fonts\/ProximaNova Light.otf&apos;) format(&apos;opentype&apos;);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t   @font-face {\n\t\t\t\t\t\t    font-family: &quot;Open Sans&quot;;\n\t\t\t\t\t\t    src: url(&apos;fonts\/Open Sans.otf&apos;) format(&apos;opentype&apos;);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t  .page_content_wrapper {\n\t\t\t\t\t\t    position: relative;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .main{\n\t\t\t\t\t\t  overflow: auto;\n\t\t\t\t\t\t    position: relative;\n\t\t\t\t\t\t    margin: 10px auto;\n\t\t\t\t\t\t    width: 1000px;\n\t\t\t\t\t\t    background: #ededed;\n\t\t\t\t\t\t\theight: 710px;\n\t\t\t\t\t\t    border-top-left-radius: 5px;\n\t\t\t\t\t\t    border-top-right-radius: 5px;\n\t\t\t\t\t\t    box-sizing: border-box;\n\t\t\t\t\t\t    border: 2px solid #313949;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t  .headerBar{\n\t\t\t\t\t\t  height: 50px;\n\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\tbackground-color: #313949;\n\t\t\t\t\t\tcolor: #ccc;\n\t\t\t\t\t\tfont-size: 29px;\n\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\tpadding-left: 20px;\n\t\t\t\t\t\tbox-sizing: border-box;\n\t\t\t\t\t\tpadding-top: 4px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .zc-dialog-border-top{\n\t\t\t\t\t\t\t  border-top:none;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t .zc-formheader {\n\t\t\t\t\t\t     background-color: none;\n\t\t\t\t\t\t     border-top:none; \n\t\t\t\t\t\t     border-left:none; \n\t\t\t\t\t\t     border-right:none; \n\t\t\t\t\t\t\t box-shadow:none;\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t  \t.zc-button-row{\n\t\t\t\t\t\t\t  background-color:none;\n\t\t\t\t\t\t\t  border-top:none;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .test{\n\t\t\t\t\t\t    display: inline-block;\n\t\t\t\t\t\t    box-sizing: border-box;\n\t\t\t\t\t\t    height: 260px;\n\t\t\t\t\t\t    background: #ededed;\n\t\t\t\t\t\t    width: 100%;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t  .resultDiv{\n\t\t\t\t\t\t\twidth: 700px;\n\t\t\t\t\t\t    box-sizing: border-box;\n\t\t\t\t\t\t    margin: auto;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t  .topMainContent{\n\t\t\t\t\t\t  width: 100%;\n\t\t\t\t\t\t  height: 400px;\n\t\t\t\t\t\t  background-color: White;\n\t\t\t\t\t\t  Padding: 10px 10px;\n\t\t\t\t\t\t  overflow: hidden;\n\t\t\t\t\t\t  box-sizing: border-box;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .generalInfo1{\n\t\t\t\t\t\t  margin: 0px auto;\n\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\theight: 100%;\n\t\t\t\t\t\tpadding: 10px;\n\t\t\t\t\t\tbox-sizing: border-box;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t   .generalInfo\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t  box-sizing: border-box;\n\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t  .generalInfoBlocks{\n\t\t\t\t\t\t  height: 169px;\n\t\t\t\t\t\t  width: 354px;\n\t\t\t\t\t\t  background-color: White;\n\t\t\t\t\t\t  display: inline-block;\n\t\t\t\t\t\t  margin: 10px;\n\t\t\t\t\t\t  box-sizing: border-box;\n\t\t\t\t\t\t  padding: 0px;\n\t\t\t\t\t\t  overflow:hidden;\n\t\t\t\t\t\t  border-top-left-radius: 5px;\n\t\t\t\t\t\t  border-top-right-radius: 5px;\n\t\t\t\t\t\t  box-shadow: 0px 0px 05px #313949;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .infoTop{\n\t\t\t\t\t\t  height: 40px;\n\t\t\t\t\t\t  display: block; \n\t\t\t\t\t\t  background-color: #313949;\n\t\t\t\t\t\t  box-sizing: border-box;\n\t\t\t\t\t\t  padding-top: 6px;\n\t\t\t\t\t\tpadding-left: 6px;\n\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .infoTopSpan{\n\t\t\t\t\t\t  color: #ccc;\n\t\t\t\t\t\t  font-size: 20px;  \n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .infoBottom{\n\t\t\t\t\t\t  font-weight: bold;\n\t\t\t\t\t\tfont-size: 55px;\n\t\t\t\t\t\tcolor: #272e3a;\n\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\tpadding-top: 20px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .clear{\n\t\t\t\t\t\t\t  clear:both;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .bottomMainContent{\n\t\t\t\t\t\t  padding:10px;\n\t\t\t\t\t\t  margin-top:7px;\n\t\t\t\t\t\t  text-align:center;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .chartFrame{\n\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t  .dailyBookFrame{\n\t\t\t\t\t\t  display:inline-block;\n\t\t\t\t\t\t  width: 550px;\n\t\t\t\t\t\t  height: 350px;\n\t\t\t\t\t\t  margin-left: 10px;\n\t\t\t\t\t\t  margin-right: 10px;\n\t\t\t\t\t\t  margin-top: 8px;\n\t\t\t\t\t\t  margin-bottom: 10px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .monthRevenueFrame{\n\t\t\t\t\t\t  display:inline-block;\n\t\t\t\t\t\t  width: 550px;\n\t\t\t\t\t\t  height: 350px;\n\t\t\t\t\t\t  margin-left: 10px;\n\t\t\t\t\t\t  margin-right: 10px;\n\t\t\t\t\t\t  margin-top: 8px;\n\t\t\t\t\t\t  margin-bottom: 10px;  \n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .branchesChartFrame{\n\t\t\t\t\t\t  display:block;\n\t\t\t\t\t\t  width: 1150px;\n\t\t\t\t\t\t  height: 350px;\n\t\t\t\t\t\t  margin:0px auto;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .trackForm{\n\t\t\t\t\t\t  \n\t\t\t\t\t\t   }\n\t\t\t\t\t\t   .frm{\n\t\t\t\t\t\t       background: #ededed;\n\t\t\t\t\t\t   }\n\t\t\t\t\t\t   .frm table{\n\t\t\t\t\t\t\t   margin:auto;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .frm .zc-labelheader label{\n\t\t\t\t\t\t\t  white-space:nowrap !important;\n\t\t\t\t\t\t    font-family:Open Sans !important;\n\t\t\t\t\t\t    font-weight: bold !important;\n\t\t\t\t\t\t\tfont-size: 16px;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t    .frm .zc-radiolabel{\n\t\t\t\t\t\t\t\t\tfont-size: 14px;\n\t\t\t\t\t\t    font-family:Open Sans !important;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .frm .zc-inputtext{\n\t\t\t\t\t\t\t  \tfont-size: 14px;\n\t\t\t\t\t\t    font-family:Open Sans !important;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t.frm .zc-formbutton {\n\t\t\t\t\t\t\tborder: none !important;\n\t\t\t\t\t\t    color: #fff !important;\n\t\t\t\t\t\t    font-family: inherit;\n\t\t\t\t\t\t    font-size: inherit;\n\t\t\t\t\t\t    background: #0e83cd !important;\n\t\t\t\t\t\t    cursor: pointer !important;\n\t\t\t\t\t\t    padding: 10px 30px !important;\n\t\t\t\t\t\t    display: inline-block !important;\n\t\t\t\t\t\t    margin: 15px 30px !important;\n\t\t\t\t\t\t    text-transform: uppercase !important;\n\t\t\t\t\t\t    letter-spacing: 1px !important;\n\t\t\t\t\t\t    font-weight: 700 !important;\n\t\t\t\t\t\t    outline: none;\n\t\t\t\t\t\t    position: relative;\n\t\t\t\t\t\t    transition: all 1.3s;\n\t\t\t\t\t\t    background-image: none !important;\n\t\t\t\t\t\t    text-shadow:  none !important;\n\t\t\t\t\t\t    box-shadow:  none !important;\n\t\t\t\t\t\t    border-radius:  none !important;\n\t\t\t\t\t\t    \n\t\t\t\t\t\t}\n\t\t\t\t\t\t.frm .zc-formbutton-hover {\n\t\t\t\t\t\t\t border: none !important;\n\t\t\t\t\t\t    color: #fff !important;\n\t\t\t\t\t\t    font-family: inherit;\n\t\t\t\t\t\t    font-size: inherit;\n\t\t\t\t\t\t    background: #0e83cd !important;\n\t\t\t\t\t\t    cursor: pointer !important;\n\t\t\t\t\t\tpadding: 10px 30px !important;\n\t\t\t\t\t\t    display: inline-block !important;\n\t\t\t\t\t\t    margin: 15px 30px !important;    text-transform: uppercase !important;\n\t\t\t\t\t\t    letter-spacing: 1px !important;\n\t\t\t\t\t\t    font-weight: 700 !important;\n\t\t\t\t\t\t    outline: none;\n\t\t\t\t\t\t    position: relative;\n\t\t\t\t\t\t    background-image: none !important;\n\t\t\t\t\t\t    text-shadow:  none !important;\n\t\t\t\t\t\t    box-shadow:  none !important;\n\t\t\t\t\t\t    border-radius:  none !important;\n\t\t\t\t\t\t\ttransform: rotate(360deg) scale(1.1);\n\t\t\t\t\t\t   }\n\t\t\t\t\t\t \n\t\t\t\t\t\t  .zc-footer-wrapper {\n\t\t\t\t\t\t    border-top: none;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  .zc-appformcontent{\n\t\t\t\t\t\t  background-color: inherit;\n\t\t\t\t\t\t  border: none;\n\t\t\t\t\t\t  box-shadow: none;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .zc-labelheader label{\n\t\t\t\t\t\t  font-family: lucida serif;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  .zc-dropdown{\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  font-size: 12px;\n\t\t\t\t\t\t  font-weight: normal;\n\t\t\t\t\t\t  width: 206px;\n\t\t\t\t\t\t  font-family: Arial;\n\t\t\t\t\t\t  padding: 3px;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  font-family: lucida serif;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  &lt;\/style&gt;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  &lt;div class=&quot;main&quot;&gt;\n\t\t\t\t\t\t  &lt;div style=&quot;&quot;&gt;\n\t\t\t\t\t\t  &lt;div class=&quot;test&quot;&gt;\n\t\t\t\t\t\t  &lt;h2 style=&quot;background:rgba(76,175,80,0.85);padding-left: 24px;padding-top:20px;color:white; margin: 0px;&quot;&gt;Track Shipment&lt;\/h2&gt;\n&lt;%\n\tif(input.Docket_Challan_No == &quot;null&quot; || input.Docket_Challan_No == &quot;&quot; || input.Docket_Challan_No == null)\n\t{\n\t\t%&gt;\n&lt;div class=&quot;frm&quot; elname=&quot;zc-component&quot; formlinkname=&quot;Track_Shipment_Public_Form&quot; params=&quot;privatelink=&lt;%=TrackShipmentPublicFormPrivatlink%&gt;&amp;zc_Header=false&quot;&gt;&lt;\/div&gt;\n&lt;%\n\t}\n\telse\n\t{\n\t\t%&gt;\n&lt;div class=&quot;frm&quot; elname=&quot;zc-component&quot; formlinkname=&quot;Track_Shipment_Public_Form&quot; params=&quot;privatelink=&lt;%=TrackShipmentPublicFormPrivatlink%&gt;&amp;Docket_Challan_No=&lt;%=Docket_Challan_No%&gt;&amp;zc_Header=false&quot;&gt;&lt;\/div&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;\/div&gt;\n\t\t\t\t\t\t &lt;div class=&quot;resultDiv&quot;&gt;\n\t\t\t\t\t\t &lt;iframe name=&apos;resultFrame&apos; scrolling=&apos;Auto&apos; style=&quot;display:inline-block; border:none; margin:0px auto; width:700px; height:430px;&quot; src=&apos;&apos;&gt;&lt;\/iframe&gt;\n\t\t\t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t &lt;\/div&gt; \n\t\t\t\t\t\t &lt;div style=&quot;clear:both&quot;&gt;&lt;\/div&gt;\n\t\t\t\t\t\t \n\t\t\t\t\t\t &lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
		form Track_Shipment_Public_Form
		{
			displayname = "Track Shipment (Public Form)"
			store data in zc = false
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Select_Tracking
			(
				type = radiobuttons
				displayname = "Tracking Type"
				values = {"Track Shipping Route", "Track Shipment"}
				initial value = "Track Shipment"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Docket_Challan_No
			(
    			type = text
				displayname = "Docket/Challan No."
	 			row = 1
	 			column = 2   
				width = 200px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				Track
				(
   					type = button
   					displayname = "Track"
				)
			}
		}
		list Booking_Commodity_Subform_Report
		{
			displayName = "Booking Commodity Subform Report"
   			hide = true
			show all rows from Booking_Commodity_Subform    
			(
				Commodity
				Weight
				Booking_Lookup as "Booking-Lookup"
			)
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Commodity
							Weight
							Booking_Lookup as "Booking-Lookup"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Commodity
							Weight
							Booking_Lookup as "Booking-Lookup"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Out_Bound_Shipment_Details_Subform_Report
		{
			displayName = "Out Bound Shipment Details Subform Report"
   			hide = true
			show all rows from Out_Bound_Shipment_Details_Subform    
			(
				Docket_No as "Docket No."
				City
				Commodity
				Location_Inside_Container as "Comment/Handling Description"
				Out_Bound_Dispatch_Lookup as "Out-Bound Dispatch - Lookup"
				Current_Status as "Current Status"
			)
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Docket_No as "Docket No."
							City
							Commodity
							Location_Inside_Container as "Comment/Handling Description"
							Out_Bound_Dispatch_Lookup as "Out-Bound Dispatch - Lookup"
							Current_Status as "Current Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Docket_No as "Docket No."
							City
							Commodity
							Location_Inside_Container as "Comment/Handling Description"
							Out_Bound_Dispatch_Lookup as "Out-Bound Dispatch - Lookup"
							Current_Status as "Current Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list In_Bound_Shipment_Details_Subform_Report
		{
			displayName = "In-Bound Shipment Details Subform Report"
   			hide = true
			show all rows from In_Bound_Shipment_Details_Subform    
			(
				Docket_No as "Docket No."
				Destination_City as "Destination City"
				Status
				In_Bound_Dispatch_Lookup as "In-Bound Dispatch-Lookup"
				ID
			)
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Docket_No as "Docket No."
							Destination_City as "Destination City"
							Status
							In_Bound_Dispatch_Lookup as "In-Bound Dispatch-Lookup"
							ID
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Docket_No as "Docket No."
							Destination_City as "Destination City"
							Status
							In_Bound_Dispatch_Lookup as "In-Bound Dispatch-Lookup"
							ID
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list In_Bound_Received_Shipments_Subform_Report
		{
			displayName = "In-Bound Received Shipments Subform Report"
   			hide = true
			show all rows from In_Bound_Received_Shipments_Subform    
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Out_Bound_Delivery_Subform_Report
		{
			displayName = "Out-Bound Delivery Subform Report"
   			hide = true
			show all rows from Out_Bound_Delivery_Subform    
			(
				Docket_No as "Docket No."
				Received_By as "Received By"
				Comment
				Relation_With_Addresee as "Relation with"
				Out_Bound_Delivery_Lookup as "Out-Bound Delivery-Lookup"
				Delivery_Status as "Delivery Status"
			)
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Docket_No as "Docket No."
							Received_By as "Received By"
							Comment
							Relation_With_Addresee as "Relation with"
							Out_Bound_Delivery_Lookup as "Out-Bound Delivery-Lookup"
							Delivery_Status as "Delivery Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Docket_No as "Docket No."
							Received_By as "Received By"
							Comment
							Relation_With_Addresee as "Relation with"
							Out_Bound_Delivery_Lookup as "Out-Bound Delivery-Lookup"
							Delivery_Status as "Delivery Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		pivotchart Daily_Booking_Chart
		{ 
			displayname = "Daily Booking Chart"
			based on Autoview_1455201311099_Booking
					hide = true
							icon = "ui-3-chart-bars"				show all rows from Booking
				(
 					Sender_Name.last_name  as "Name.Last Name"
 					Total_Weight  as "Total Weight"
 					Delivery_Address.longitude2  as "Address.longitude"
 					Rate_KG  as "Rate/KG"
 					Expected_Delivery_Date  as "Expected Delivery Date"
 					Receiver_Name1.prefix1  as "Name.Prefix"
 					Destination_Service_Location  as "Service Location Nearest to Destination"
 					Sender_Name.prefix  as "Name.Prefix"
 					Date_field  as "Date"
 					Delivery_Address.address_line_12  as "Address"
 					Delivery_Address.state_province2  as "Address.State / Province"
 					Last_Location_Service_Locations_Hubs  as "Last Location (Service Locations/Hubs)"
 					Origin_Service_Location  as "Origin Service Location"
 					Delivery_Address.postal_Code2  as "Address.Postal Code"
 					Dest_City  as "City (Nearest to Service Location Available)"
 					Delivery_Address.country2  as "Address.Country"
 					Receiver_Name1.last_name1  as "Name.Last Name"
 					Select_Customer_Type  as "Select Customer Type"
 					Status 
 					Sender_Email  as "Sender Email"
 					Delivery_Address.address_line_22  as "Address.Address Line 2"
 					Receiver_s_Email  as "Receiver's Email"
 					Accounted_Customers  as "Accounted Customers"
 					Delivery_Address.latitude2  as "Address.latitude"
 					Origin 
 					Delivery_Address.district_city2  as "Address.City / District"
 					Sender_Name.first_name  as "Name"
 					Receiver_Name1.suffix1  as "Name.Suffix"
 					Docket_No  as "Docket No."
 					Location 
 					Freight 
 					Receiver_Name1.first_name1  as "Name"
 					Receiver_Phone_Number  as "Phone Number"
 					Service_Tax  as "Service Tax"
 					Sender_Name.suffix  as "Name.Suffix"
 					Sender_Phone_Number  as "Phone Number"
 					Region  as "Delivery Region"
				)
		}
		pivotchart Monthly_Revenue_Report
		{ 
			displayname = "Monthly Revenue Report"
			based on Autoview_1455201311099_Booking
					hide = true
							icon = "health-pulse-chart"				show all rows from Booking
				(
 					Sender_Name.last_name  as "Name.Last Name"
 					Total_Weight  as "Total Weight"
 					Delivery_Address.longitude2  as "Address.longitude"
 					Rate_KG  as "Rate/KG"
 					Expected_Delivery_Date  as "Expected Delivery Date"
 					Receiver_Name1.prefix1  as "Name.Prefix"
 					Destination_Service_Location  as "Service Location Nearest to Destination"
 					Sender_Name.prefix  as "Name.Prefix"
 					Date_field  as "Date"
 					Delivery_Address.address_line_12  as "Address"
 					Delivery_Address.state_province2  as "Address.State / Province"
 					Last_Location_Service_Locations_Hubs  as "Last Location (Service Locations/Hubs)"
 					Origin_Service_Location  as "Origin Service Location"
 					Delivery_Address.postal_Code2  as "Address.Postal Code"
 					Dest_City  as "City (Nearest to Service Location Available)"
 					Delivery_Address.country2  as "Address.Country"
 					Receiver_Name1.last_name1  as "Name.Last Name"
 					Select_Customer_Type  as "Select Customer Type"
 					Status 
 					Sender_Email  as "Sender Email"
 					Delivery_Address.address_line_22  as "Address.Address Line 2"
 					Receiver_s_Email  as "Receiver's Email"
 					Accounted_Customers  as "Accounted Customers"
 					Delivery_Address.latitude2  as "Address.latitude"
 					Origin 
 					Delivery_Address.district_city2  as "Address.City / District"
 					Sender_Name.first_name  as "Name"
 					Receiver_Name1.suffix1  as "Name.Suffix"
 					Docket_No  as "Docket No."
 					Location 
 					Freight 
 					Receiver_Name1.first_name1  as "Name"
 					Receiver_Phone_Number  as "Phone Number"
 					Service_Tax  as "Service Tax"
 					Sender_Name.suffix  as "Name.Suffix"
 					Sender_Phone_Number  as "Phone Number"
 					Region  as "Delivery Region"
				)
		}
		pivotchart branches_Chart
		{ 
			displayname = "Branches Chart"
			based on Autoview_1455201311099_Booking
					hide = true
							icon = "health-pulse-chart"				show all rows from Booking
				(
 					Sender_Name.last_name  as "Name.Last Name"
 					Total_Weight  as "Total Weight"
 					Delivery_Address.longitude2  as "Address.longitude"
 					Rate_KG  as "Rate/KG"
 					Expected_Delivery_Date  as "Expected Delivery Date"
 					Receiver_Name1.prefix1  as "Name.Prefix"
 					Destination_Service_Location  as "Service Location Nearest to Destination"
 					Sender_Name.prefix  as "Name.Prefix"
 					Date_field  as "Date"
 					Delivery_Address.address_line_12  as "Address"
 					Delivery_Address.state_province2  as "Address.State / Province"
 					Last_Location_Service_Locations_Hubs  as "Last Location (Service Locations/Hubs)"
 					Origin_Service_Location  as "Origin Service Location"
 					Delivery_Address.postal_Code2  as "Address.Postal Code"
 					Dest_City  as "City (Nearest to Service Location Available)"
 					Delivery_Address.country2  as "Address.Country"
 					Receiver_Name1.last_name1  as "Name.Last Name"
 					Select_Customer_Type  as "Select Customer Type"
 					Status 
 					Sender_Email  as "Sender Email"
 					Delivery_Address.address_line_22  as "Address.Address Line 2"
 					Receiver_s_Email  as "Receiver's Email"
 					Accounted_Customers  as "Accounted Customers"
 					Delivery_Address.latitude2  as "Address.latitude"
 					Origin 
 					Delivery_Address.district_city2  as "Address.City / District"
 					Sender_Name.first_name  as "Name"
 					Receiver_Name1.suffix1  as "Name.Suffix"
 					Docket_No  as "Docket No."
 					Location 
 					Freight 
 					Receiver_Name1.first_name1  as "Name"
 					Receiver_Phone_Number  as "Phone Number"
 					Service_Tax  as "Service Tax"
 					Sender_Name.suffix  as "Name.Suffix"
 					Sender_Phone_Number  as "Phone Number"
 					Region  as "Delivery Region"
				)
		}
	}
	section Track_Shipment
	{
		displayname= "Track Shipment"
		hide = true
		icon = "ui-2-menu-bold"
		form Track_Shipment
		{
			displayname = "Track Shipment"
			store data in zc = false
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Select_Tracking
			(
				type = picklist
				displayname = "Select Tracking"
				values = {"Track Shipping Route", "Track Shipment"}
				initial value = "Track Shipment"
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Docket_Challan_No
			(
    			type = text
				displayname = "Docket/Challan No."
	 			row = 1
	 			column = 1   
				width = 200px
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				Track
				(
   					type = button
   					displayname = "Track"
				)
			}
		}
	}
	section Track_Shipments
	{
		displayname= "Track Shipments"
		form Track_Shipment_Mobile
		{
			displayname = "Track Shipment"
			success message = "Track Shipment Added Successfully"
			field alignment = left
			feature property = 32
					hide = true
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Docket_Challan_No
			(
    			type = text
				displayname = "Docket/Challan No."
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					Track
					(
   						type = submit
   						displayname = "Track"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list All_Track_Shipments
		{
			displayName = "All Track Shipments"
   			hide = true
			show all rows from Track_Shipment_Mobile    
			(
				Docket_Challan_No as "Docket/Challan No."
			)
			options
			(
				icon = "design-bullet-list-67"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Docket_Challan_No as "Docket/Challan No."
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Docket_Challan_No as "Docket/Challan No."
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	functions
	{
 			void trucksReadyToTransport(int id)
			{
				rec = Truck_Details[ID == input.id];
				rec.Current_Status="Free (Ready To Transport)";
			}
 			void approvePickUp(int id)
			{
				rec = Pick_Up_Request[ID == input.id];
				rec.Status="Approved";
				sendmail
				[
					from :zoho.adminuserid
					to :rec.Email
					subject :"Pick Request Approved."
					message :("Dear " + rec.Name1) + ", <br><br> Your Pick-Up request with reference number " + rec.Pick_Up_Request_Number + " has been approved. Our representative will come and collect the shipment.<br><br>Please keep your phone reachable so that our representative can contact you and let you know the timing.<br><br>Thank You."
				]
			}
 			void rejectPickUp(int id)
			{
				rec = Pick_Up_Request[ID == input.id];
				rec.Status="Rejected";
				sendmail
				[
					from :zoho.adminuserid
					to :rec.Email
					subject :"Pick Request Denied."
					message :("Dear " + rec.Name1) + ", <br><br> Your Pick-Up request with reference number " + rec.Pick_Up_Request_Number + " has not been approved due to some reasons.<br><br>Thank You."
				]
			}
 			void accessEmployees()
			{
				for each  serviceHub in Service_Locations_Hubs
				{
					emailList = Employees[Service_Locations_Hub == serviceHub.ID].Email.getAll();
					emailStr = "," + emailList + ",";
					serviceHub.Employee_Emails=emailStr;
				}
			}
	}



	workflow
	{
		form
		{
			Track_Actions as "Track"
			{
				type =  form
				form = Track_Shipment_Public_Form
				button = Track
				on click
				{
					actions 
					{
					on click
					(
						TrackShipmentResultPublicURL1 = "Please enter publish link of 'Track_Shipment_Result_Public' here";
										TrackShipmentResultPublicURL = TrackShipmentResultPublicURL1.remove("/undefined");
										if(input.Select_Tracking == "Track Shipping Route")
										{
											if(Docket_Challan_No.startsWith("CH"))
											{
												if(In_Bound_Dispatch[In_Challan_No == input.Docket_Challan_No].count() == 0)
												{
													alert "Please Enter Valid Docket/Challan Number.";
												}
												else
												{
													openUrl(TrackShipmentResultPublicURL + "/?trackid=" + input.Docket_Challan_No + "&tracktype=" + input.Select_Tracking,"iframe","resultFrame");
												}
											}
											else
											{
												if(Booking[Docket_No == input.Docket_Challan_No].count() == 0)
												{
													alert "Please Enter Valid Docket/Challan Number.";
												}
												else
												{
													openUrl(TrackShipmentResultPublicURL + "/?trackid=" + input.Docket_Challan_No + "&tracktype=" + input.Select_Tracking,"iframe","resultFrame");
												}
											}
										}
										else if(input.Select_Tracking == "Track Shipment")
										{
											if(Booking[Docket_No == input.Docket_Challan_No].count() == 0)
											{
												alert "Please Enter Valid Docket/Challan Number.";
											}
											else
											{
												openUrl(TrackShipmentResultPublicURL + "/?trackid=" + input.Docket_Challan_No + "&tracktype=" + input.Select_Tracking,"iframe","resultFrame");
											}
										}
					)
					}
				}
			}
			Track_Actions1 as "Track"
			{
				type =  form
				form = Track_Shipment
				button = Track
				on click
				{
					actions 
					{
					on click
					(
						if(input.Select_Tracking == "Track Shipping Route")
										{
											if(Docket_Challan_No.startsWith("CH"))
											{
												if(In_Bound_Dispatch[In_Challan_No == input.Docket_Challan_No].count() == 0)
												{
													alert "Please Enter Valid Docket/Challan Number.";
												}
												else
												{
													openUrl("#Page:Track_Shipment_Result?trackid=" + input.Docket_Challan_No + "&tracktype=" + input.Select_Tracking,"popup window");
													openUrl("https://creator.zoho.com" + zoho.appuri + "view-embed/Track_Shipment_Result","iframe","resultFrame");
												}
											}
											else
											{
												if(Booking[Docket_No == input.Docket_Challan_No].count() == 0)
												{
													alert "Please Enter Valid Docket/Challan Number.";
												}
												else
												{
													openUrl("#Page:Track_Shipment_Result?trackid=" + input.Docket_Challan_No + "&tracktype=" + input.Select_Tracking,"popup window");
													openUrl("https://creator.zoho.com" + zoho.appuri + "view-embed/Track_Shipment_Result","iframe","resultFrame");
												}
											}
										}
										else if(input.Select_Tracking == "Track Shipment")
										{
											if(Booking[Docket_No == input.Docket_Challan_No].count() == 0)
											{
												alert "Please Enter Valid Docket/Challan Number.";
											}
											else
											{
												openUrl("https://creator.zoho.com" + zoho.appuri + "view-embed/Track_Shipment_Result?trackid=" + input.Docket_Challan_No + "&tracktype=" + input.Select_Tracking,"iframe","resultFrame");
											}
										}
					)
					}
				}
			}
			Update_Actions as "Update"
			{
				type =  form
				form = Trucks_Status_Update
				button = Update
				on click
				{
					actions 
					{
					on click
					(
						rec = Truck_Details[ID == input.Vehicle_No];
										rec.Current_Status=input.Current_Status;
					)
					}
				}
			}
			Edit_record_scripts18 as "Edit record scripts"
			{
				type =  form
				form = Regions
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											/* if (Employees[Email == zoho.loginuserid].count()  ==  0)
																																														{
																																														    alert("Please Register yourself first and select your Service Location");
																																														    openUrl("#Form:Employees", "same window");
																																														}
																																														 */
						)
					}
	}

			}
			Edit_record_scripts19 as "Edit record scripts"
			{
				type =  form
				form = Cities
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											/* if (Employees[Email == zoho.loginuserid].count()  ==  0)
																																														{
																																														    alert("Please Register yourself first and select your Service Location");
																																														    openUrl("#Form:Employees", "same window");
																																														}
																																														 */
						)
					}
	}

			}
			Run_Scripts_On_Always10 as "Run Scripts - On Always"
			{
				type =  form
				form = Out_Bound_Dispatch
				record event = on add or edit

	on user input of City
	{
					actions 
					{
						custom deluge script
						(
											clear Shipment_Details.Docket_No;
										list1 = List:Int();
										emp = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
										rec = Service_Locations_Hubs[ID == emp].ID;
										for each  booking in Booking[Dest_City == input.City && Status == "Received At Destination Hub" || Status == "Delivery Attempted (Failed)" && Destination_Service_Location == rec]
										{
											list1.add(booking.ID);
										}
										for each  shipment in Shipment_Details
										{
											list1.removeelement(shipment.Docket_No);
										}
										if(!list1.isEmpty())
										{
											Shipment_Details.Docket_No:ui.add(list1);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always11 as "Run Scripts - On Always"
			{
				type =  form
				form = Out_Bound_Dispatch
				record event = on add or edit

	on user input of Shipment_Details.Docket_No
	{
					actions 
					{
						custom deluge script
						(
											rec = Booking[ID == row.Docket_No];
										ct = Cities[ID == rec.Dest_City];
										row.City=ct.ID;
										col = Booking_Commodity_Subform[Booking_Lookup == rec.ID].ID.getAll();
										row.Commodity=col;
						)
					}
	}

			}
			Run_Scripts_On_Always12 as "Run Scripts - On Always"
			{
				type =  form
				form = Out_Bound_Dispatch
				record event = on add or edit

	on add row of Shipment_Details
	{
					actions 
					{
						custom deluge script
						(
											clear row.Docket_No;
										list1 = List:Int();
										/* if (input.City  ==  null)
																																														{
																																														    alert("Please select City first");
																																														} */
										emp = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
										rec = Service_Locations_Hubs[ID == emp].ID;
										/* for each  rrr in Booking [Destination_Service_Location == rec && Status == "Received At Destination Hub"]
																																														{
																																															list1.add(rrr.ID);
																																														} */
										for each  booking in Booking[Dest_City == input.City && Status == "Received At Destination Hub" || Status == "Delivery Attempted (Failed)" && Destination_Service_Location == rec]
										{
											list1.add(booking.ID);
										}
										for each  shipment in Shipment_Details
										{
											list1.removeelement(shipment.Docket_No);
										}
										if(!list1.isEmpty())
										{
											row.Docket_No:ui.append(list1);
										}
										/* else
																																														{
																																														    alert("All shipments selected");
																																														}
																																														 */
						)
					}
	}

			}
			Run_Scripts_On_Always13 as "Run Scripts - On Always"
			{
				type =  form
				form = Track_Shipment
				record event = on add or edit

	on user input of Docket_Challan_No
	{
					actions 
					{
						custom deluge script
						(
											/* 
																																														if (input.Select_Tracking  ==  "Track Shipping Route")
																																														{
																																														    if (input.Docket_Challan_No.startsWith("CH"))
																																														    {
																																														        re  =  In_Bound_Dispatch  [In_Challan_No == input.Docket_Challan_No];
																																														        //col = Booking[Docket_No == input.Docket_No].ID;
																																														        //re = In_Bound_Shipment_Details_Subform[Docket_No == col].In_Bound_Dispatch_Lookup;
																																														        //rec=In_Bound_Dispatch[ID == re].In_Challan_No;
																																														        //recc=Run_Sheet[Challan_No==rec.ID].ID.getall();
																																														        if (Run_Sheet[Challan_No == re.ID].count()  ==  0)
																																														        {
																																														            alert("Please Enter Valid Docket/Challan Number.");
																																														            input.Track_Details = "<div><br></div>";
																																														        }
																																														        else
																																														        {
																																														            for each recc in Run_Sheet  [Challan_No == re.ID] sort by  Arrival_Date_Time 
																																														            {
																																														                if (input.Track_Details  ==  null)
																																														                {
																																														                    input.Track_Details = "<div style='color:#68AD31'><h2><span style='color:black; font-weight:normal;'>Date-Time: </span>" + re.Added_Time + "<span style='color:black; font-weight:normal;'> Location: </span>" + recc.City.City + "<span style='color:#eee; font-weight:normal;'> Your Item Has been Dispatched</span></h2></div>";
																																														                }
																																														                else
																																														                {
																																														                    input.Track_Details = input.Track_Details + "<div style='color:#68AD31'><h2><span style='color:black; font-weight:normal;'>Date-Time: </span>" + recc.Added_Time + "<span style='color:black; font-weight:normal;'> Reached at: </span>" + recc.City.City + "</h2></div>";
																																														                }
																																														            }
																																														        }
																																														        //input.Track_Details = "<div style='color:blue'><h2>Hi</h2></div>";
																																														    }
																																														    else
																																														    {
																																														        flag = 0;
																																														        coll  =  Booking  [Docket_No == input.Docket_Challan_No];
																																														        rec  =  In_Bound_Shipment_Details_Subform  [Docket_No == coll.ID];
																																														        re  =  In_Bound_Dispatch  [ID == rec.In_Bound_Dispatch_Lookup];
																																														        if (Run_Sheet[Challan_No == re.ID].count()  ==  0)
																																														        {
																																														            alert("Please Enter Valid Docket/Challan Number.");
																																														        }
																																														        else
																																														        {
																																														            for each recc in Run_Sheet  [Challan_No == re.ID] sort by  Arrival_Date_Time 
																																														            {
																																														                if (flag  ==  0)
																																														                {
																																														                    if (recc.City  ==  coll.Dest_City)
																																														                    {
																																														                        flag = 1;
																																														                    }
																																														                    if (input.Track_Details  ==  null)
																																														                    {
																																														                        input.Track_Details = "<div style='color:#68AD31'><h2><span style='color:black; font-weight:normal;'>Date-Time: </span>" + re.Added_Time + "<span style='color:black; font-weight:normal;'> Location: </span>" + recc.City.City + "<span style='color:#eee; font-weight:normal;'> Your Item Has been Dispatched</span></h2></div>";
																																														                    }
																																														                    else
																																														                    {
																																														                        input.Track_Details = input.Track_Details + "<div style='color:#68AD31'><h2><span style='color:black; font-weight:normal;'>Date-Time: </span>" + recc.Added_Time + "<span style='color:black; font-weight:normal;'> Reached at: </span>" + recc.City.City + "</h2></div>";
																																														                    }
																																														                }
																																														            }
																																														        }
																																														    }
																																														}
																																														else if (input.Select_Tracking  ==  "Track Shipment")
																																														{
																																														    if (Booking[Docket_No == input.Docket_Challan_No].count()  ==  0)
																																														    {
																																														        alert("Please Enter Valid Docket/Challan Number.");
																																														    }
																																														    else
																																														    {
																																														        coll  =  Booking  [Docket_No == input.Docket_Challan_No];
																																														        col  =  Service_Locations_Hubs  [ID == coll.Last_Location_Service_Locations_Hubs];
																																														        //re = In_Bound_Shipment_Details_Subform[Docket_No == col].In_Bound_Dispatch_Lookup;
																																														        //rec=In_Bound_Dispatch[ID == re].In_Challan_No;
																																														        //recc=Run_Sheet[Challan_No==rec.ID].ID.getall();
																																														        //for each recc in Run_Sheet  [Challan_No == re] sort by  Arrival_Date_Time 
																																														        //{
																																														        if (coll.Last_Location_Service_Locations_Hubs  ==  coll.Origin_Service_Location)
																																														        {
																																														            input.Track_Details = "<div style='color:#68AD31'><h2>Your Item Has Not Yet Dispatched.</h2></div>";
																																														        }
																																														        else
																																														        {
																																														            input.Track_Details = "<div style='color:#68AD31'><h2>Your Item Has been  " + coll.Status + ". </h2></div>";
																																														            input.Track_Details = input.Track_Details + "<div style='color:#68AD31'><h2><span style='color:black; font-weight:normal;'>Date-Time: </span>" + coll.Modified_Time + "<span style='color:black; font-weight:normal;'> Reached at: </span>" + col.Select_City.City + "</h2></div>";
																																														        }
																																														        //input.Track_Details = "<div style='color:blue'><h2>Hi</h2></div>";
																																														    }
																																														}
																																														 */
						)
					}
	}

			}
			Run_Scripts_On_Always14 as "Run Scripts - On Always"
			{
				type =  form
				form = Track_Shipment
				record event = on add or edit

	on user input of Select_Tracking
	{
					actions 
					{
						custom deluge script
						(
											//input.Docket_Challan_No="";
						)
					}
	}

			}
			Delete_record_scripts18 as "Delete record scripts"
			{
				type =  form
				form = Booking
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
						)
					}
	}

			}
			Delete_record_scripts19 as "Delete record scripts"
			{
				type =  form
				form = Booking
				record event = on delete

	on success
	{
					actions 
					{
						custom deluge script
						(
											for each  rec in Shipment_Details
										{
											delete from Booking_Commodity_Subform[ID == rec.ID];
										}
										//var=input.Shipment_Details;
										//delete from Booking_Commodity_Subform[ ID == var.ID ];
						)
					}
	}

			}
			Run_Scripts_On_Always15 as "Run Scripts - On Always"
			{
				type =  form
				form = Truck_Details
				record event = on add or edit

	on user input of Vehicle_Provider
	{
					actions 
					{
						custom deluge script
						(
											if(input.Vehicle_Provider == "Owned By Company")
										{
											hide Third_Party_Carriers_Contracted_Carrier_Name;
											input.Third_Party_Carriers_Contracted_Carrier_Name = null;
										}
										else if(input.Vehicle_Provider == "Third Pary Carrier")
										{
											show Third_Party_Carriers_Contracted_Carrier_Name;
										}
										else
										{
											hide Third_Party_Carriers_Contracted_Carrier_Name;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always16 as "Run Scripts - On Always"
			{
				type =  form
				form = Truck_Details
				record event = on add or edit

	on user input of Permit_Expiry_Date
	{
					actions 
					{
						custom deluge script
						(
											if(input.Permit_Expiry_Date < zoho.currentdate)
										{
											alert "Please Select Valid Date.";
											input.Permit_Expiry_Date = null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always17 as "Run Scripts - On Always"
			{
				type =  form
				form = Track_Shipment_Public_Form
				record event = on add or edit

	on user input of Docket_Challan_No
	{
					actions 
					{
						custom deluge script
						(
											
						)
					}
	}

			}
			Run_Scripts_On_Always18 as "Run Scripts - On Always"
			{
				type =  form
				form = Track_Shipment_Public_Form
				record event = on add or edit

	on user input of Select_Tracking
	{
					actions 
					{
						custom deluge script
						(
											
						)
					}
	}

			}
			Run_Scripts_On_Always19 as "Run Scripts - On Always"
			{
				type =  form
				form = In_Bound_Delivery
				record event = on add or edit

	on user input of Challan_No
	{
					actions 
					{
						custom deluge script
						(
											rec = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
										if(In_Bound_Delivery[Challan_No == input.Challan_No && Current_Service_Locations_Hubs == rec].count() != 0)
										{
											id = In_Bound_Delivery[Challan_No == input.Challan_No && Current_Service_Locations_Hubs == rec].ID;
											openUrl("#Form:In_Bound_Delivery?recLinkID=" + id + "&viewLinkName=In_Bound_Delivery_Report","same window");
										}
										else
										{
											clear Vehicle_No;
											input.Vehicle_No = In_Bound_Dispatch[ID == input.Challan_No].Vehicle_No;
											clear Received_Shipment_Details1.Docket_No;
											recc = In_Bound_Shipment_Details_Subform[In_Bound_Dispatch_Lookup == input.Challan_No && Status == "Shipping"].Docket_No.getAll();
											reec = Booking[ID in recc && Destination_Service_Location == input.Current_Service_Locations_Hubs].ID.getAll();
											for each  docket in Received_Shipment_Details1
											{
												reec.removeelement(docket.Docket_No);
											}
											if(!reec.isEmpty())
											{
												Received_Shipment_Details1.Docket_No:ui.add(reec);
												input.Received_Shipment_Details1.Docket_No = reec.get(0);
											}
										}
						)
					}
	}

			}
			Run_Scripts_On_Always20 as "Run Scripts - On Always"
			{
				type =  form
				form = In_Bound_Delivery
				record event = on add or edit

	on add row of Received_Shipment_Details1
	{
					actions 
					{
						custom deluge script
						(
											clear row.Docket_No;
										rec = In_Bound_Shipment_Details_Subform[In_Bound_Dispatch_Lookup == input.Challan_No && Status == "Shipping"].Docket_No.getAll();
										//col = Employees [Email == zoho.loginuserid].Service_Locations_Hub;
										//coll = Service_Locations_Hubs [ID == col];
										reec = Booking[ID in rec && Destination_Service_Location == input.Current_Service_Locations_Hubs].ID.getAll();
										//reec = Booking [ID in rec && Dest_City == coll.Select_City].ID.getAll();
										for each  recc in Received_Shipment_Details1
										{
											reec.removeelement(recc.Docket_No);
										}
										if(!reec.isEmpty())
										{
											row.Docket_No:ui.add(reec);
											row.Docket_No=reec.get(0);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always21 as "Run Scripts - On Always"
			{
				type =  form
				form = Out_Bound_Delivery_Subform
				record event = on add or edit

	on user input of Delivery_Status
	{
					actions 
					{
						custom deluge script
						(
											if(input.Delivery_Status == "Delivery Attempted (Failed)")
										{
											disable Received_By;
											disable Relation_With_Addresee;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always22 as "Run Scripts - On Always"
			{
				type =  form
				form = In_Bound_Dispatch
				record event = on add or edit

	on user input of Route_Cities
	{
					actions 
					{
						custom deluge script
						(
											if(input.Region == null)
										{
											alert "Select Region.";
											input.Route_Cities = null;
										}
										else
										{
											lst = Service_Locations_Hubs[Select_City in input.Route_Cities].ID.getAll();
											input.Route_Service_Locations = lst;
											clear Shipment_Details.Docket_No;
											list1 = List:Int();
											destServiceLocns = Service_Locations_Hubs[Select_City in input.Route_Cities].ID.getAll();
											originSerLocn = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
											for each  docket in Booking[Destination_Service_Location in destServiceLocns && Status == "Unsent" && Origin_Service_Location == originSerLocn]
											{
												list1.add(docket.ID);
											}
											for each  recc in Shipment_Details
											{
												list1.removeelement(recc.Docket_No);
											}
											Shipment_Details.Docket_No:ui.add(list1);
										}
						)
					}
	}

			}
			Run_Scripts_On_Always23 as "Run Scripts - On Always"
			{
				type =  form
				form = In_Bound_Dispatch
				record event = on add or edit

	on user input of Region
	{
					actions 
					{
						custom deluge script
						(
											currentCity = Service_Locations_Hubs[ID == input.Origin_Service_Locations].Select_City;
										cities = Service_Locations_Hubs[Select_Region == input.Region].Select_City.getAll();
										cities.removeelement(currentCity);
										input.Route_Cities:ui.add(cities);
						)
					}
	}

			}
			Run_Scripts_On_Always24 as "Run Scripts - On Always"
			{
				type =  form
				form = In_Bound_Dispatch
				record event = on add or edit

	on user input of Shipment_Details.Docket_No
	{
					actions 
					{
						custom deluge script
						(
											rec = Booking[ID == row.Docket_No];
										ct = Cities[ID == rec.Dest_City];
										row.Destination_City=ct.ID;
										row.Delivery_Address.address_line_12=rec.Delivery_Address.address_line_12;
										row.Delivery_Address.address_line_22=rec.Delivery_Address.address_line_22;
										row.Delivery_Address.district_city2=rec.Delivery_Address.district_city2;
										row.Delivery_Address.state_province2=rec.Delivery_Address.state_province2;
										row.Delivery_Address.postal_Code2=rec.Delivery_Address.postal_Code2;
										row.Delivery_Address.country2=rec.Delivery_Address.country2;
										row.Delivery_Address.latitude2=rec.Delivery_Address.latitude2;
										row.Delivery_Address.longitude2=rec.Delivery_Address.longitude2;
						)
					}
	}

			}
			Run_Scripts_On_Always25 as "Run Scripts - On Always"
			{
				type =  form
				form = In_Bound_Dispatch
				record event = on add or edit

	on user input of Current_Status
	{
					actions 
					{
						custom deluge script
						(
											/* for each rec in Shipment_Details
																																																			{
																																																			    var = rec.Docket_No;
																																																			    lst  =  Booking  [ID == var];
																																																			    alert(lst.Docket_No);
																																																			} */
										/* lst = (Booking[ID == Shipment_Details.Docket_No].ID).getall();
																																																			alert(lst);
																																																			for each coll in Booking  [ID in lst]
																																																			{
																																																			    alert(coll.Docket_No);
																																																			    //     coll.Status = "Dispatched";
																																																			    //     coll.Location = "Loaded in Truck"; */
						)
					}
	}

			}
			Run_Scripts_On_Always26 as "Run Scripts - On Always"
			{
				type =  form
				form = In_Bound_Dispatch
				record event = on add or edit

	on user input of Vehicle_No
	{
					actions 
					{
						custom deluge script
						(
											//tn=Trip_No.removeAllAlpha();
										//alert tn.tolong();
						)
					}
	}

			}
			Run_Scripts_On_Always27 as "Run Scripts - On Always"
			{
				type =  form
				form = In_Bound_Dispatch
				record event = on add or edit

	on add row of Shipment_Details
	{
					actions 
					{
						custom deluge script
						(
											clear row.Docket_No;
										list1 = List:Int();
										/* if (input.Region  ==  null)
																																																			{
																																																			    alert("Please select region first");
																																																			} */
										destServiceLocns = Service_Locations_Hubs[Select_City in input.Route_Cities].ID.getAll();
										originSerLocn = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
										for each  docket in Booking[Destination_Service_Location in destServiceLocns && Status == "Unsent" && Origin_Service_Location == originSerLocn]
										{
											list1.add(docket.ID);
										}
										for each  recc in Shipment_Details
										{
											list1.removeelement(recc.Docket_No);
										}
										row.Docket_No:ui.append(list1);
						)
					}
	}

			}
			Run_Scripts_On_Always28 as "Run Scripts - On Always"
			{
				type =  form
				form = Run_Sheet
				record event = on add or edit

	on user input of Challan_No
	{
					actions 
					{
						custom deluge script
						(
											if(Run_Sheet[Challan_No == input.Challan_No].count() != 0)
										{
											recID = Run_Sheet[Challan_No == input.Challan_No].ID;
											openUrl(zoho.appuri + "Run_Sheet/record-edit/Run_Sheet_Report/" + recID + "/","same window");
										}
										else
										{
											rec = In_Bound_Dispatch[ID == input.Challan_No];
											input.Vehicle_No = rec.Vehicle_No;
											disable Vehicle_No;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always29 as "Run Scripts - On Always"
			{
				type =  form
				form = Run_Sheet
				record event = on add or edit

	on user input of Vehicle_No
	{
					actions 
					{
						custom deluge script
						(
											rec = In_Bound_Dispatch[Vehicle_No == input.Vehicle_No];
										input.Trip_No = rec.ID;
						)
					}
	}

			}
			Run_Scripts_On_Always30 as "Run Scripts - On Always"
			{
				type =  form
				form = Booking
				record event = on add or edit

	on user input of Shipment_Details.Weight
	{
					actions 
					{
						custom deluge script
						(
											input.Total_Weight = 0;
										for each  rec in Shipment_Details
										{
											if(rec.Weight == null)
											{
												rec.Weight=0;
											}
											input.Total_Weight = input.Total_Weight + rec.Weight;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always31 as "Run Scripts - On Always"
			{
				type =  form
				form = Booking
				record event = on add or edit

	on user input of Dest_City
	{
					actions 
					{
						custom deluge script
						(
											//a = (Service_Locations_Hubs[Select_Region == input.Region].ID).getall();
										//alert(a);
										//Destination_Service_Location:ui.add
						)
					}
	}

			}
			Run_Scripts_On_Always32 as "Run Scripts - On Always"
			{
				type =  form
				form = Booking
				record event = on add or edit

	on user input of Region
	{
					actions 
					{
						custom deluge script
						(
											currentSerLocn = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
										serviceLocns = Service_Locations_Hubs[Select_Region == input.Region].ID.getAll();
										serviceLocns.removeelement(currentSerLocn);
										input.Destination_Service_Location:ui.add(serviceLocns);
										cities = Cities[Region == input.Region].ID.getAll();
										currentCity = Service_Locations_Hubs[ID == currentSerLocn].Select_City;
										cities.removeelement(currentCity);
										input.Dest_City:ui.add(cities);
						)
					}
	}

			}
			Run_Scripts_On_Always33 as "Run Scripts - On Always"
			{
				type =  form
				form = Booking
				record event = on add or edit

	on user input of Rate_KG
	{
					actions 
					{
						custom deluge script
						(
											var = input.Total_Weight * input.Rate_KG * input.Service_Tax;
										var = var / 100;
										input.Freight = input.Total_Weight * input.Rate_KG + var;
						)
					}
	}

			}
			Run_Scripts_On_Always34 as "Run Scripts - On Always"
			{
				type =  form
				form = Booking
				record event = on add or edit

	on user input of Service_Tax
	{
					actions 
					{
						custom deluge script
						(
											if(input.Service_Tax == null)
										{
											input.Service_Tax = 0.0;
										}
										var = input.Total_Weight * input.Rate_KG * input.Service_Tax;
										var = var / 100;
										input.Freight = input.Total_Weight * input.Rate_KG + var;
						)
					}
	}

			}
			Run_Scripts_On_Always35 as "Run Scripts - On Always"
			{
				type =  form
				form = Booking
				record event = on add or edit

	on user input of Expected_Delivery_Date
	{
					actions 
					{
						custom deluge script
						(
											if(input.Expected_Delivery_Date < zoho.currentdate)
										{
											alert "Please Select Valid Date.";
											input.Expected_Delivery_Date = null;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always36 as "Run Scripts - On Always"
			{
				type =  form
				form = Booking
				record event = on add or edit

	on user input of Accounted_Customers
	{
					actions 
					{
						custom deluge script
						(
											rec = Accounted_Customers[ID == input.Accounted_Customers];
										input.Sender_Name = rec.Customer_Name;
										//input.Sender = rec.Customer_Company_Name;
										input.Sender_Email = rec.Email;
										input.Origin = rec.Select_City.City;
						)
					}
	}

			}
			Run_Scripts_On_Always37 as "Run Scripts - On Always"
			{
				type =  form
				form = Booking
				record event = on add or edit

	on user input of Select_Customer_Type
	{
					actions 
					{
						custom deluge script
						(
											if(input.Select_Customer_Type = "Accounted Customer")
										{
											show Accounted_Customers;
											hide Sender_Name;
										}
										else if(input.Select_Customer_Type = "Walkin Customer")
										{
											input.Sender_Name = null;
											input.Sender_Email = null;
											input.Origin = null;
											show Sender_Name;
											hide Accounted_Customers;
										}
										else
										{
											hide Sender_Name;
											hide Accounted_Customers;
										}
						)
					}
	}

			}
			Run_Scripts_On_Always38 as "Run Scripts - On Always"
			{
				type =  form
				form = Booking
				record event = on add or edit

	on delete row of Shipment_Details
	{
					actions 
					{
						custom deluge script
						(
											input.Total_Weight = input.Total_Weight - row.Weight;
						)
					}
	}

			}
			Edit_record_scripts20 as "Edit record scripts"
			{
				type =  form
				form = Booking_Commodity_Subform
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
						)
					}
	}

			}
			Edit_record_scripts21 as "Edit record scripts"
			{
				type =  form
				form = Out_Bound_Shipment_Details_Subform
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
						)
					}
	}

			}
			Edit_record_scripts22 as "Edit record scripts"
			{
				type =  form
				form = Third_Party_Carriers
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Vehicle_No;
										if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
						)
					}
	}

			}
			Edit_record_scripts23 as "Edit record scripts"
			{
				type =  form
				form = Accounted_Customers
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
						)
					}
	}

			}
			Edit_record_scripts24 as "Edit record scripts"
			{
				type =  form
				form = In_Bound_Shipment_Details_Subform
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
						)
					}
	}

			}
			Edit_record_scripts25 as "Edit record scripts"
			{
				type =  form
				form = Out_Bound_Delivery_Subform
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
						)
					}
	}

			}
			Create_record_scripts20 as "Create record scripts"
			{
				type =  form
				form = Booking
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											openUrl("#Form:Employees","same window");
										}
										else
										{
											hide Access_Hubs;
											disable Date_field;
											disable Total_Weight;
											col = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
											ls = Service_Locations_Hubs[ID != col].ID.getAll();
											input.Destination_Service_Location:ui.add(ls);
											str = Booking[ID != 0].count();
											disable Last_Location_Service_Locations_Hubs;
											hide Sender_Name;
											hide Accounted_Customers;
											input.Total_Weight = 0;
											input.Date_field = zoho.currentdate;
											disable Docket_No;
											hide Docket_No;
											disable Origin_Service_Location;
											input.Last_Location_Service_Locations_Hubs = Employees[Email = zoho.loginuserid].Service_Locations_Hub;
											input.Origin_Service_Location = Employees[Email = zoho.loginuserid].Service_Locations_Hub;
											input.Status = "Unsent";
											input.Location = "Origin Hub";
											hide Status;
											hide Location;
											hide Last_Location_Service_Locations_Hubs;
										}
						)
					}
	}

			}
			Create_record_scripts21 as "Create record scripts"
			{
				type =  form
				form = Booking
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(Booking[ID != 0].count() == 0)
										{
											input.Docket_No = "0000";
										}
										else
										{
											str = Booking[ID != 0].Docket_No sort by Added_Time desc;
											str = str.removeAllAlpha();
											strr1 = str.toLong() + 1;
											strr = strr1.toString();
											if(strr.length() < 4)
											{
												strr = 0 + strr;
												if(strr.length() < 4)
												{
													strr = 0 + strr;
													if(strr.length() < 4)
													{
														strr = 0 + strr;
														if(strr.length() < 4)
														{
															strr = 0 + strr;
															if(strr.length() < 4)
															{
																strr = 0 + strr;
															}
														}
													}
												}
											}
											input.Docket_No = strr;
										}
										input.Access_Hubs = {input.Origin_Service_Location,input.Destination_Service_Location};
										sendmail
										[
											from :zoho.adminuserid
											to :input.Sender_Email,input.Receiver_s_Email
											subject :"Shipment Booked Successfully!"
											message :"Dear Customer, <br> Thank You for booking parcel with.<br><br> Your parcel will be delivered before " + input.Expected_Delivery_Date
										]
						)
					}
	}

			}
			Create_record_scripts22 as "Create record scripts"
			{
				type =  form
				form = Booking
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											success message "Please note down the Docket Number for future reference: " + input.Docket_No;
						)
					}
	}

			}
			Run_Scripts_On_Always39 as "Run Scripts - On Always"
			{
				type =  form
				form = Out_Bound_Delivery
				record event = on add or edit

	on user input of Out_Challan_No
	{
					actions 
					{
						custom deluge script
						(
											clear Vehicle_No;
										input.Vehicle_No:ui.add(Out_Bound_Dispatch[ID == input.Out_Challan_No].Vehicle_No);
										clear Delivered_Shipment_Details.Docket_No;
										rec = Out_Bound_Shipment_Details_Subform[Out_Bound_Dispatch_Lookup == input.Out_Challan_No && Current_Status == "Shipping"].Docket_No.getAll();
										col = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
										coll = Service_Locations_Hubs[ID == col];
										reec = Booking[ID in rec && Dest_City == coll.Select_City].ID.getAll();
										for each  recc in Delivered_Shipment_Details
										{
											reec.removeelement(recc.Docket_No);
										}
										Delivered_Shipment_Details.Docket_No:ui.add(reec);
						)
					}
	}

			}
			Run_Scripts_On_Always40 as "Run Scripts - On Always"
			{
				type =  form
				form = Out_Bound_Delivery
				record event = on add or edit

	on add row of Delivered_Shipment_Details
	{
					actions 
					{
						custom deluge script
						(
											clear row.Docket_No;
										rec = Out_Bound_Shipment_Details_Subform[Out_Bound_Dispatch_Lookup == input.Out_Challan_No && Current_Status == "Shipping"].Docket_No.getAll();
										col = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
										coll = Service_Locations_Hubs[ID == col];
										reec = Booking[ID in rec && Dest_City == coll.Select_City].ID.getAll();
										for each  recc in Delivered_Shipment_Details
										{
											reec.removeelement(recc.Docket_No);
										}
										row.Docket_No:ui.add(reec);
										/* clear row.Docket_No;
																																														rec = (In_Bound_Shipment_Details_Subform[In_Bound_Dispatch_Lookup == input.Challon_No].Docket_No).getall();
																																														for each recc in Received_Shipment_Details
																																														{
																																														    rec.removeelement(recc.Docket_No);
																																														}
																																														row.Docket_No:ui.add(rec);
																																														 */
						)
					}
	}

			}
			Create_record_scripts23 as "Create record scripts"
			{
				type =  form
				form = In_Bound_Shipment_Details_Subform
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
						)
					}
	}

			}
			Create_record_scripts24 as "Create record scripts"
			{
				type =  form
				form = Out_Bound_Delivery_Subform
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
						)
					}
	}

			}
			Create_record_scripts25 as "Create record scripts"
			{
				type =  form
				form = Booking_Commodity_Subform
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
						)
					}
	}

			}
			Create_record_scripts26 as "Create record scripts"
			{
				type =  form
				form = Out_Bound_Shipment_Details_Subform
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
						)
					}
	}

			}
			Create_record_scripts27 as "Create record scripts"
			{
				type =  form
				form = Trucks_Status_Update
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
										else
										{
											col = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
											rec = Truck_Details[Current_Status == "Transported (Returning)" && Work_Service_Location == col].ID.getAll();
											input.Vehicle_No:ui.add(rec);
										}
						)
					}
	}

			}
			Create_record_scripts28 as "Create record scripts"
			{
				type =  form
				form = Track_Shipment_Public_Form
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(input.Docket_Challan_No != "")
										{
											TrackShipmentResultPublicURL1 = "Enter publish link of 'Track_Shipment_Result_Public' here";
											TrackShipmentResultPublicURL = TrackShipmentResultPublicURL1.remove("/undefined");
											if(input.Select_Tracking == "Track Shipping Route")
											{
												if(Docket_Challan_No.startsWith("CH"))
												{
													if(In_Bound_Dispatch[In_Challan_No == input.Docket_Challan_No].count() == 0)
													{
														alert "Please Enter Valid Docket/Challan Number.";
													}
													else
													{
														openUrl(TrackShipmentResultPublicURL + "/?trackid=" + input.Docket_Challan_No + "&tracktype=" + input.Select_Tracking,"iframe","resultFrame");
													}
												}
												else
												{
													if(Booking[Docket_No == input.Docket_Challan_No].count() == 0)
													{
														alert "Please Enter Valid Docket/Challan Number.";
													}
													else
													{
														openUrl(TrackShipmentResultPublicURL + "/?trackid=" + input.Docket_Challan_No + "&tracktype=" + input.Select_Tracking,"iframe","resultFrame");
													}
												}
											}
											else if(input.Select_Tracking == "Track Shipment")
											{
												if(Booking[Docket_No == input.Docket_Challan_No].count() == 0)
												{
													alert "Please Enter Valid Docket/Challan Number.";
												}
												else
												{
													openUrl(TrackShipmentResultPublicURL + "/?trackid=" + input.Docket_Challan_No + "&tracktype=" + input.Select_Tracking,"iframe","resultFrame");
												}
											}
										}
						)
					}
	}

			}
			Delete_record_scripts20 as "Delete record scripts"
			{
				type =  form
				form = Run_Sheet
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
						)
					}
	}

			}
			Delete_record_scripts21 as "Delete record scripts"
			{
				type =  form
				form = Out_Bound_Delivery
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
										/* else
																																														{
																																															for each  r in Out_Bound_Shipment_Details_Subform [Out_Bound_Dispatch_Lookup == input.Out_Challan_No]
																																															{
																																																r.Current_Status="Shipping";
																																															}
																																															outDIspatch = Out_Bound_Dispatch [ID == input.Out_Challan_No];
																																															outDIspatch.Current_Status="Transporting";
																																														}
																																														 */
						)
					}
	}

			}
			Delete_record_scripts22 as "Delete record scripts"
			{
				type =  form
				form = Out_Bound_Delivery
				record event = on delete

	on success
	{
					actions 
					{
						custom deluge script
						(
											for each  r in Out_Bound_Shipment_Details_Subform[Out_Bound_Dispatch_Lookup == input.Out_Challan_No]
										{
											r.Current_Status="Shipping";
										}
										outDIspatch = Out_Bound_Dispatch[ID == input.Out_Challan_No];
										outDIspatch.Current_Status="Transporting";
										for each  removedDockets in Out_Bound_Delivery_Subform[Out_Bound_Delivery_Lookup is null]
										{
											booking = Booking[ID == removedDockets.Docket_No];
											booking.Status="Dispatched for Out-Bound Delivery";
											booking.Location="Loaded in Truck";
										}
										delete from Out_Bound_Delivery_Subform[Out_Bound_Delivery_Lookup is null];
						)
					}
	}

			}
			Delete_record_scripts23 as "Delete record scripts"
			{
				type =  form
				form = In_Bound_Delivery
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
										else
										{
											deliveredDockets = In_Bound_Received_Shipments_Subform[In_Bound_Delivery_Lookup == input.ID].Docket_No.getAll();
											if(Out_Bound_Shipment_Details_Subform[Docket_No in deliveredDockets].count() != 0)
											{
												alert "This entry cannot be deleted as some shipments are dispatched for out-bound delivery.";
												cancel delete;
											}
											/* 	docket = list:int();
																																															InBound = In_Bound_Delivery [ID == input.ID];
																																															for each  shipment in InBound.Received_Shipment_Details1 
																																															{
																																																docket.add(shipment.Docket_No);
																																															}
																																															for each  r in In_Bound_Shipment_Details_Subform [In_Bound_Dispatch_Lookup == input.Challan_No && Docket_No in docket]
																																															{
																																																r.Status="Shipping";
																																															}
																																															InDIspatch = In_Bound_Dispatch [ID == input.Challan_No];
																																															InDIspatch.Current_Status="Transporting"; */
										}
						)
					}
	}

			}
			Delete_record_scripts24 as "Delete record scripts"
			{
				type =  form
				form = In_Bound_Delivery
				record event = on delete

	on success
	{
					actions 
					{
						custom deluge script
						(
											docket = List:Int();
										InBound = In_Bound_Delivery[ID == input.ID];
										for each  shipment in InBound.Received_Shipment_Details1
										{
											docket.add(shipment.Docket_No);
										}
										for each  r in In_Bound_Shipment_Details_Subform[In_Bound_Dispatch_Lookup == input.Challan_No && Docket_No in docket]
										{
											r.Status="Shipping";
										}
										InDispatch = In_Bound_Dispatch[ID == input.Challan_No];
										InDispatch.Current_Status="Transporting";
										for each  removedDockets in In_Bound_Received_Shipments_Subform[In_Bound_Delivery_Lookup is null]
										{
											booking = Booking[ID == removedDockets.Docket_No];
											booking.Status="Dispatched";
											booking.Location="Loaded in Truck";
										}
										delete from Run_Sheet[Challan_No == input.Challan_No && Vehicle_No == input.Vehicle_No && Service_Location_Hub == input.Current_Service_Locations_Hubs];
										delete from In_Bound_Received_Shipments_Subform[In_Bound_Delivery_Lookup is null];
										delete from Run_Sheet[Service_Location_Hub == Employees[Email == zoho.loginuserid].Service_Locations_Hub && Challan_No == Challan_No];
						)
					}
	}

			}
			Delete_record_scripts25 as "Delete record scripts"
			{
				type =  form
				form = Out_Bound_Dispatch
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
										else
										{
											outBound = Out_Bound_Delivery[Out_Challan_No == input.ID];
											if(Out_Bound_Delivery_Subform[Out_Bound_Delivery_Lookup == outBound.ID && Delivery_Status == "Delivered To Customer"].count() != 0)
											{
												alert "This entry cannot be deleted as it has been delivered to other the customer.";
												cancel delete;
											}
										}
						)
					}
	}

			}
			Delete_record_scripts26 as "Delete record scripts"
			{
				type =  form
				form = Out_Bound_Dispatch
				record event = on delete

	on success
	{
					actions 
					{
						custom deluge script
						(
											for each  removedDockets in Out_Bound_Shipment_Details_Subform[Out_Bound_Dispatch_Lookup is null]
										{
											booking = Booking[ID == removedDockets.Docket_No];
											booking.Status="Received At Destination Hub";
											booking.Location="Destination Hub";
										}
										truck = Truck_Details[ID == input.Vehicle_No];
										truck.Current_Status="Free (Ready To Transport)";
										delete from Out_Bound_Shipment_Details_Subform[Out_Bound_Dispatch_Lookup is null];
										/* for each  rec in Shipment_Details 
																																														{
																																															delete from Out_Bound_Shipment_Details_Subform [ID == rec.ID];
																																														}
																																														 */
						)
					}
	}

			}
			Delete_record_scripts27 as "Delete record scripts"
			{
				type =  form
				form = In_Bound_Dispatch
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
										else
										{
											if(Run_Sheet[Challan_No == input.ID].count() != 0 || In_Bound_Delivery[Challan_No == input.ID].count() != 0)
											{
												alert "This entry cannot be deleted as it has been dispatched to other service location.";
												cancel delete;
											}
										}
						)
					}
	}

			}
			Delete_record_scripts28 as "Delete record scripts"
			{
				type =  form
				form = In_Bound_Dispatch
				record event = on delete

	on success
	{
					actions 
					{
						custom deluge script
						(
											truck = Truck_Details[ID == input.Vehicle_No];
										truck.Current_Status="Free (Ready To Transport)";
										for each  recor in In_Bound_Shipment_Details_Subform[In_Bound_Dispatch_Lookup is null]
										{
											booking = Booking[ID == recor.Docket_No];
											booking.Status="Unsent";
											booking.Location="Origin Hub";
										}
										delete from In_Bound_Shipment_Details_Subform[In_Bound_Dispatch_Lookup is null];
						)
					}
	}

			}
			Delete_record_scripts29 as "Delete record scripts"
			{
				type =  form
				form = Employees
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
										else
										{
											thisapp.permissions.deleteuser(input.Email);
										}
						)
					}
	}

			}
			Delete_record_scripts30 as "Delete record scripts"
			{
				type =  form
				form = Employees
				record event = on delete

	on success
	{
					actions 
					{
						custom deluge script
						(
											serviceHub = Service_Locations_Hubs[ID == input.Service_Locations_Hub];
										emailList = Employees[Service_Locations_Hub == serviceHub.ID].Email.getAll();
										emailList.add(zoho.adminuserid);
										emailList = emailList.distinct();
										emailStr = "," + emailList + ",";
										serviceHub.Employee_Emails=emailStr;
						)
					}
	}

			}
			Create_record_scripts29 as "Create record scripts"
			{
				type =  form
				form = Third_Party_Carriers
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
										hide Vehicle_No;
						)
					}
	}

			}
			Delete_record_scripts31 as "Delete record scripts"
			{
				type =  form
				form = Service_Locations_Hubs
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
						)
					}
	}

			}
			Create_record_scripts30 as "Create record scripts"
			{
				type =  form
				form = Accounted_Customers
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
						)
					}
	}

			}
			Delete_record_scripts32 as "Delete record scripts"
			{
				type =  form
				form = Pick_Up_Request
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
						)
					}
	}

			}
			Create_record_scripts31 as "Create record scripts"
			{
				type =  form
				form = Regions
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											/* if (Employees[Email == zoho.loginuserid].count()  ==  0)
																																														{
																																														    alert("Please Register yourself first and select your Service Location");
																																														    openUrl("#Form:Employees", "same window");
																																														}
																																														 */
						)
					}
	}

			}
			Delete_record_scripts33 as "Delete record scripts"
			{
				type =  form
				form = Truck_Details
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
						)
					}
	}

			}
			Create_record_scripts32 as "Create record scripts"
			{
				type =  form
				form = Cities
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											/* if (Employees[Email == zoho.loginuserid].count()  ==  0)
																																														{
																																														    alert("Please Register yourself first and select your Service Location");
																																														    openUrl("#Form:Employees", "same window");
																																														}
																																														 */
						)
					}
	}

			}
			Edit_record_scripts26 as "Edit record scripts"
			{
				type =  form
				form = Run_Sheet
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
										disable Vehicle_No;
										hide Trip_No;
						)
					}
	}

			}
			Delete_record_scripts34 as "Delete record scripts"
			{
				type =  form
				form = Third_Party_Carriers
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
						)
					}
	}

			}
			Edit_record_scripts27 as "Edit record scripts"
			{
				type =  form
				form = Truck_Details
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
						)
					}
	}

			}
			Delete_record_scripts35 as "Delete record scripts"
			{
				type =  form
				form = Cities
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
						)
					}
	}

			}
			Edit_record_scripts28 as "Edit record scripts"
			{
				type =  form
				form = In_Bound_Delivery
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
										disable Received_Shipment_Details1.Docket_No;
										hide Access_Hub;
						)
					}
	}

			}
			Edit_record_scripts29 as "Edit record scripts"
			{
				type =  form
				form = In_Bound_Delivery
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											OutBoundDispatchedShipments = List:Int();
										removedDocketIDs = List();
										currentDockets = List:Int();
										temp = List:Int();
										removedDocketsID = List:Int();
										removedDocketsID = In_Bound_Received_Shipments_Subform[In_Bound_Delivery_Lookup == input.ID].Docket_No.getAll();
										for each  re in Received_Shipment_Details1
										{
											currentDockets.add(re.Docket_No);
										}
										temp = removedDocketsID.intersect(currentDockets);
										removedDocketsID.removeall(temp);
										if(!removedDocketsID.isEmpty())
										{
											//alert removedDocketsID.size();
											for each  doc in removedDocketsID
											{
												if(Out_Bound_Shipment_Details_Subform[Docket_No == doc].count() != 0)
												{
													OutBoundDispatchedShipments.add(Out_Bound_Shipment_Details_Subform[Docket_No == doc].Docket_No);
												}
											}
										}
										if(OutBoundDispatchedShipments.size() != 0)
										{
											alert " This entry cannot be edited as " + OutBoundDispatchedShipments + " shipments from this has been dispatched for Out-Bound delivery";
											cancel submit;
										}
						)
					}
	}

			}
			Edit_record_scripts30 as "Edit record scripts"
			{
				type =  form
				form = In_Bound_Delivery
				record event = on edit

	on success
	{
					actions 
					{
						custom deluge script
						(
											loginEmployee = Employees[Email == zoho.loginuserid];
										removedDocketsID = In_Bound_Received_Shipments_Subform[In_Bound_Delivery_Lookup is null].Docket_No.getAll();
										for each  r in In_Bound_Shipment_Details_Subform[Docket_No in removedDocketsID]
										{
											r.Status="Shipping";
										}
										for each  removedDockets in removedDocketsID
										{
											booking = Booking[ID == removedDockets];
											booking.Status="Dispatched";
											booking.Location="Loaded in Truck";
										}
										for each  docket in input.Received_Shipment_Details1
										{
											DocketNo = docket.Docket_No;
											coln = Booking[ID == DocketNo];
											coln.Status="Received At Destination Hub";
											coln.Location="Destination Hub";
											coln.Last_Location_Service_Locations_Hubs=loginEmployee.Service_Locations_Hub;
											rec = In_Bound_Shipment_Details_Subform[Docket_No == DocketNo];
											rec.Status="Reached the Destination Hub";
										}
										if(In_Bound_Shipment_Details_Subform[In_Bound_Dispatch_Lookup == input.Challan_No && Status == "Shipping"].count() == 0)
										{
											recor = In_Bound_Dispatch[ID == input.Challan_No];
											recor.Current_Status="Transported";
											reco = Truck_Details[ID == recor.Vehicle_No];
											reco.Current_Status="Transported (Returning)";
										}
										else if(In_Bound_Shipment_Details_Subform[In_Bound_Dispatch_Lookup == input.Challan_No && Status == "Shipping"].count() != 0)
										{
											recor = In_Bound_Dispatch[ID == input.Challan_No];
											recor.Current_Status="Transporting";
										}
										delete from In_Bound_Received_Shipments_Subform[In_Bound_Delivery_Lookup is null];
						)
					}
	}

			}
			Delete_record_scripts36 as "Delete record scripts"
			{
				type =  form
				form = Regions
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
						)
					}
	}

			}
			Edit_record_scripts31 as "Edit record scripts"
			{
				type =  form
				form = Out_Bound_Delivery
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
						)
					}
	}

			}
			Edit_record_scripts32 as "Edit record scripts"
			{
				type =  form
				form = Out_Bound_Delivery
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											currentDockets = List:Int();
										temp = List:Int();
										removedDocketIDs = List:Int();
										removedDocketIDs = Out_Bound_Delivery_Subform[Out_Bound_Delivery_Lookup == input.ID && Delivery_Status == "Delivered To Customer"].Docket_No.getAll();
										for each  r in Delivered_Shipment_Details
										{
											currentDockets.add(r.Docket_No);
										}
										temp = removedDocketIDs.intersect(currentDockets);
										removedDocketIDs.removeall(temp);
										if(removedDocketIDs.size() != 0)
										{
											deliveredDockets = Booking[ID in removedDocketIDs].Docket_No.getAll();
											alert "Sorry this shipment cannot be edited as " + deliveredDockets + " has been delivered to the receiver.";
											cancel submit;
										}
										/* a=Out_Bound_Delivery_Subform[Out_Bound_Delivery_Lookup == input.ID].Docket_No.getall();
																																														if(Out_Bound_Delivery [Out_Challan_No == input.Out_Challan_No].count() != 0)
																																														{
																																															alert "Sorry this shipment cannot be edited as it has been delivered to the receiver.";
																																															cancel submit;
																																														} */
										/* if(removedDocketIDs != 0)
																																														{
																																															for each  r in Out_Bound_Shipment_Details_Subform [Docket_No in removedDocketIDs]
																																															{
																																																r.Current_Status="Shipping";
																																															}
																																															for each  removedDockets in Out_Bound_Delivery_Subform [ID in removedDocketIDs]
																																															{
																																																booking = Booking [ID == removedDockets.Docket_No];
																																																booking.Status="Dispatched for Out-Bound Delivery";
																																																booking.Location="Loaded in Truck";
																																																delete from Out_Bound_Delivery_Subform [ID == removedDockets.ID];
																																															}
																																														}
																																														 */
						)
					}
	}

			}
			Edit_record_scripts33 as "Edit record scripts"
			{
				type =  form
				form = Out_Bound_Delivery
				record event = on edit

	on success
	{
					actions 
					{
						custom deluge script
						(
											removedDocketsID = Out_Bound_Delivery_Subform[Out_Bound_Delivery_Lookup is null].Docket_No.getAll();
										for each  shipment in Out_Bound_Shipment_Details_Subform[Docket_No in removedDocketsID]
										{
											shipment.Current_Status="Shipping";
										}
										for each  removedDockets in removedDocketsID
										{
											booking = Booking[ID == removedDockets];
											booking.Status="Dispatched for Out-Bound Delivery";
											booking.Location="Loaded in Truck";
										}
										empRecID = Employees[Email == zoho.loginuserid];
										outBoundDispatchID = Out_Bound_Dispatch[ID == input.Out_Challan_No];
										currentCity = Service_Locations_Hubs[ID == empRecID.Service_Locations_Hub].Select_City;
										originServiceLocation = List:Int();
										for each  deliveredShipment in input.Delivered_Shipment_Details
										{
											deliveredDocket = deliveredShipment.Docket_No;
											rec = Out_Bound_Shipment_Details_Subform[Docket_No == deliveredDocket];
											coln = Booking[ID == deliveredDocket];
											originServiceLocation.add(coln.Origin_Service_Location);
											if(deliveredShipment.Delivery_Status == "Delivery Attempted (Failed)")
											{
												coln.Status="Delivery Attempted (Failed)";
												coln.Location="Destination Hub";
												rec.Current_Status="Returned";
											}
											else if(deliveredShipment.Delivery_Status == "Delivered To Customer")
											{
												coln.Status="Delivered To Customer";
												coln.Location="Delivered";
												rec.Current_Status="Delivered to Customer";
											}
										}
										if(Out_Bound_Shipment_Details_Subform[Out_Bound_Dispatch_Lookup == input.Out_Challan_No && Current_Status == "Shipping"].count() == 0)
										{
											recor = Out_Bound_Dispatch[ID == input.Out_Challan_No];
											recor.Current_Status="Transported";
										}
										else if(Out_Bound_Shipment_Details_Subform[Out_Bound_Dispatch_Lookup == input.Out_Challan_No && Current_Status == "Shipping"].count() != 0)
										{
											recor = Out_Bound_Dispatch[ID == input.Out_Challan_No];
											recor.Current_Status="Transporting";
										}
										delete from Out_Bound_Delivery_Subform[Out_Bound_Delivery_Lookup is null];
						)
					}
	}

			}
			Create_record_scripts33 as "Create record scripts"
			{
				type =  form
				form = In_Bound_Dispatch
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
										else
										{
											clear Shipment_Details.Docket_No;
											clear Route_Cities;
											hide Current_Status;
											hide Access_Hubs;
											hide In_Challan_No;
											disable In_Challan_No;
											disable Route_Service_Locations;
											input.Dispatch_Date_Time = zoho.currenttime;
											hide Trip_No;
											col = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
											lst = Truck_Details[Current_Status == "Free (Ready To Transport)" && Work_Service_Location == col && Transportation_Type = "In-Bound"].ID.getAll();
											input.Vehicle_No:ui.add(lst);
											input.Origin_Service_Locations = col;
											disable Shipment_Details.Status;
											disable Current_Status;
											disable Origin_Service_Locations;
										}
						)
					}
	}

			}
			Create_record_scripts34 as "Create record scripts"
			{
				type =  form
				form = In_Bound_Dispatch
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											input.Trip_No = "Trip-" + In_Bound_Dispatch[Vehicle_No == input.Vehicle_No].count();
										if(In_Bound_Dispatch[ID != 0].count() == 0)
										{
											input.In_Challan_No = "CH0000";
										}
										else
										{
											str = In_Bound_Dispatch[ID != 0].In_Challan_No sort by Added_Time desc;
											str = str.removeAllAlpha();
											strr1 = str.toLong() + 1;
											strr = strr1.toString();
											if(strr.length() < 4)
											{
												strr = 0 + strr;
												if(strr.length() < 4)
												{
													strr = 0 + strr;
													if(strr.length() < 4)
													{
														strr = 0 + strr;
														if(strr.length() < 4)
														{
															strr = 0 + strr;
															if(strr.length() < 4)
															{
																strr = 0 + strr;
															}
														}
													}
												}
											}
											input.In_Challan_No = "CH" + strr;
										}
										AccessHubsList = input.Route_Service_Locations;
										AccessHubsList.add(input.Origin_Service_Locations);
										AccessHubsList = AccessHubsList.distinct();
										input.Access_Hubs = AccessHubsList;
						)
					}
	}

			}
			Create_record_scripts35 as "Create record scripts"
			{
				type =  form
				form = In_Bound_Dispatch
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											rec = Truck_Details[ID == input.Vehicle_No];
										rec.Current_Status="Transporting";
										for each  recc in input.Shipment_Details
										{
											var = recc.Docket_No;
											coll = Booking[ID == var];
											coll.Status="Dispatched";
											coll.Location="Loaded in Truck";
										}
										success message "Please note down the Challan Number: " + input.In_Challan_No;
						)
					}
	}

			}
			Edit_record_scripts34 as "Edit record scripts"
			{
				type =  form
				form = In_Bound_Dispatch
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
										hide Access_Hubs;
										disable Trip_No;
										disable Route_Service_Locations;
										input.Origin_Service_Locations = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
										disable Origin_Service_Locations;
						)
					}
	}

			}
			Edit_record_scripts35 as "Edit record scripts"
			{
				type =  form
				form = In_Bound_Dispatch
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											AccessHubsList = input.Route_Service_Locations;
										AccessHubsList.add(input.Origin_Service_Locations);
										AccessHubsList = AccessHubsList.distinct();
										input.Access_Hubs = AccessHubsList;
										removedDocketIDs = List();
										currentDockets = List:Int();
										temp = List:Int();
										removedDocketsID = List:Int();
										removedDocketsID = In_Bound_Shipment_Details_Subform[In_Bound_Dispatch_Lookup == input.ID].Docket_No.getAll();
										for each  r in Shipment_Details
										{
											currentDockets.add(r.Docket_No);
										}
										temp = removedDocketsID.intersect(currentDockets);
										removedDocketsID.removeall(temp);
										if(!removedDocketsID.isEmpty())
										{
											if(Run_Sheet[Challan_No == input.ID].count() != 0 || In_Bound_Delivery[Challan_No == input.ID].count() != 0)
											{
												alert "Sorry this shipment cannot be edited as it has been dispatched to other service location.";
												cancel submit;
											}
											else
											{
												for each  d in removedDocketsID
												{
													bookig = Booking[ID == d.toLong()];
													bookig.Status="Unsent";
													bookig.Location="Origin Hub";
												}
											}
										}
						)
					}
	}

			}
			Edit_record_scripts36 as "Edit record scripts"
			{
				type =  form
				form = In_Bound_Dispatch
				record event = on edit

	on success
	{
					actions 
					{
						custom deluge script
						(
											for each  recc in input.Shipment_Details
										{
											var = recc.Docket_No;
											coll = Booking[ID == var];
											coll.Status="Dispatched";
											coll.Location="Loaded in Truck";
										}
										delete from In_Bound_Shipment_Details_Subform[In_Bound_Dispatch_Lookup is null];
										success message "Please note down the Challan Number: " + input.In_Challan_No;
						)
					}
	}

			}
			Edit_record_scripts37 as "Edit record scripts"
			{
				type =  form
				form = In_Bound_Dispatch
				record event = on edit

	on update of Route_Cities
	{
					actions 
					{
						custom deluge script
						(
											lst = Service_Locations_Hubs[Select_City in input.Route_Cities].ID.getAll();
										input.Route_Service_Locations = lst;
						)
					}
	}

			}
			Create_record_scripts36 as "Create record scripts"
			{
				type =  form
				form = Out_Bound_Dispatch
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
										else
										{
											clear Shipment_Details.Docket_No;
											hide Origin_Service_Location_Hub;
											hide Access_Hub;
											hide Out_Challan_No;
											disable Out_Challan_No;
											input.Dispatch_Date_Time = zoho.currenttime;
											col = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
											input.Origin_Service_Location_Hub = col;
											rec = Service_Locations_Hubs[ID == col].Select_City;
											input.City = rec;
											input.Access_Hub = col;
											lst = Truck_Details[Current_Status == "Free (Ready To Transport)" && Work_Service_Location == col && Transportation_Type == "Out-Bound"].ID.getAll();
											input.Vehicle_No:ui.add(lst);
											disable Current_Status;
											if(input.City != null)
											{
												clear Shipment_Details.Docket_No;
												list1 = List:Int();
												recID = Service_Locations_Hubs[ID == col].ID;
												for each  booking in Booking[Dest_City == input.City && Status == "Received At Destination Hub" || Status == "Delivery Attempted (Failed)" && Destination_Service_Location == recID]
												{
													list1.add(booking.ID);
												}
												for each  shipment in Shipment_Details
												{
													list1.removeelement(shipment.Docket_No);
												}
												if(!list1.isEmpty())
												{
													Shipment_Details.Docket_No:ui.add(list1);
												}
											}
										}
						)
					}
	}

			}
			Create_record_scripts37 as "Create record scripts"
			{
				type =  form
				form = Out_Bound_Dispatch
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											//input.Trip_No = "Trip-" + (In_Bound_Dispatch[Vehicle_No == input.Vehicle_No].count());
										str = Out_Bound_Dispatch[ID != 0].count();
										strr = str.toString();
										if(strr.length() < 4)
										{
											strr = 0 + strr;
											if(strr.length() < 4)
											{
												strr = 0 + strr;
												if(strr.length() < 4)
												{
													strr = 0 + strr;
													if(strr.length() < 4)
													{
														strr = 0 + strr;
														if(strr.length() < 4)
														{
															strr = 0 + strr;
														}
													}
												}
											}
										}
										input.Out_Challan_No = "OUTCH" + strr;
						)
					}
	}

			}
			Create_record_scripts38 as "Create record scripts"
			{
				type =  form
				form = Out_Bound_Dispatch
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											rec = Truck_Details[ID == input.Vehicle_No];
										rec.Current_Status="Transporting";
										for each  recc in input.Shipment_Details
										{
											var = recc.Docket_No;
											coll = Booking[ID == var];
											//alert lst.Docket_No;
											coll.Status="Dispatched for Out-Bound Delivery";
											coll.Location="Loaded in Truck";
										}
										success message "Please note down the Out Challan Number: " + input.Out_Challan_No;
										/* for each coll in Booking  [ID == input.Shipment_Details.Docket_No]
																																														{
																																														    coll.Status = "Dispatched";
																																														    coll.Location = "Loaded in Truck";
																																														} */
										//coll  =  Booking  [ID == input.Shipment_Details.Docket_No];
										// coll.Status = "Dispatched";
										// coll.Location = "Loaded in Truck";
						)
					}
	}

			}
			Edit_record_scripts38 as "Edit record scripts"
			{
				type =  form
				form = Out_Bound_Dispatch
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
						)
					}
	}

			}
			Edit_record_scripts39 as "Edit record scripts"
			{
				type =  form
				form = Out_Bound_Dispatch
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											currentDockets = List:Int();
										temp = List:Int();
										removedDocketsID = List:Int();
										removedDocketsID = Out_Bound_Shipment_Details_Subform[Out_Bound_Dispatch_Lookup == input.ID].Docket_No.getAll();
										for each  r in Shipment_Details
										{
											currentDockets.add(r.Docket_No);
										}
										temp = removedDocketsID.intersect(currentDockets);
										removedDocketsID.removeall(temp);
										//if(Out_Bound_Delivery [Out_Challan_No == input.ID].count() != 0)
										if(Out_Bound_Delivery_Subform[Docket_No in removedDocketsID].count() != 0)
										{
											booking = Booking[ID in removedDocketsID].Docket_No.getAll();
											alert "Sorry this shipment cannot be edited as " + booking + " it has been delivered to the receiver.";
											cancel submit;
										}
						)
					}
	}

			}
			Edit_record_scripts40 as "Edit record scripts"
			{
				type =  form
				form = Out_Bound_Dispatch
				record event = on edit

	on success
	{
					actions 
					{
						custom deluge script
						(
											for each  removedDockets in Out_Bound_Shipment_Details_Subform[Out_Bound_Dispatch_Lookup is null]
										{
											booking = Booking[ID == removedDockets.Docket_No];
											booking.Status="Received At Destination Hub";
											booking.Location="Destination Hub";
										}
										for each  recc in input.Shipment_Details
										{
											var = recc.Docket_No;
											coll = Booking[ID == var];
											coll.Status="Dispatched for Out-Bound Delivery";
											coll.Location="Loaded in Truck";
										}
										delete from Out_Bound_Shipment_Details_Subform[Out_Bound_Dispatch_Lookup is null];
										success message "Please note down the Challan Number: " + input.Out_Challan_No;
						)
					}
	}

			}
			Create_record_scripts39 as "Create record scripts"
			{
				type =  form
				form = In_Bound_Delivery
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											openUrl("#Form:Employees","same window");
										}
										else
										{
											clear Received_Shipment_Details1.Docket_No;
											hide Access_Hub;
											hide Current_Service_Locations_Hubs;
											rec = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
											input.Current_Service_Locations_Hubs = rec;
											lst = Service_Locations_Hubs[ID == rec].Select_City;
											//input.Challan_No:ui.add(In_Bound_Dispatch [Current_Status == "ddaa" && Route_Service_Locations.contains(rec)].ID.getAll());
											input.Challan_No:ui.add(In_Bound_Dispatch[Current_Status == "Transporting" && Route_Service_Locations == input.Current_Service_Locations_Hubs].ID.getAll());
											input.Arrival_Time = zoho.currenttime;
										}
						)
					}
	}

			}
			Create_record_scripts40 as "Create record scripts"
			{
				type =  form
				form = In_Bound_Delivery
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											recc = Employees[Email == zoho.loginuserid];
										col = In_Bound_Dispatch[ID == input.Challan_No];
										AccessHubsList = List:Int();
										AccessHubsList.add(recc.Service_Locations_Hub);
										AccessHubsList.add(col.Origin_Service_Locations);
										AccessHubsList = AccessHubsList.distinct();
										input.Access_Hub = AccessHubsList;
						)
					}
	}

			}
			Create_record_scripts41 as "Create record scripts"
			{
				type =  form
				form = In_Bound_Delivery
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											recc = Employees[Email == zoho.loginuserid];
										col = In_Bound_Dispatch[ID == input.Challan_No];
										coll = Service_Locations_Hubs[ID == recc.Service_Locations_Hub].Select_City;
										insert into Run_Sheet
										[
											Added_User=zoho.loginuser
											Vehicle_No=input.Vehicle_No
											Service_Location_Hub=recc.Service_Locations_Hub
											Trip_No=col.ID
											Challan_No=input.Challan_No
											Arrival_Date_Time=zoho.currenttime
											City=coll
										]
										for each  rop in input.Received_Shipment_Details1
										{
											var = rop.Docket_No;
											coln = Booking[ID == var];
											coln.Status="Received At Destination Hub";
											coln.Location="Destination Hub";
											coln.Last_Location_Service_Locations_Hubs=recc.Service_Locations_Hub;
											rec = In_Bound_Shipment_Details_Subform[Docket_No == var];
											rec.Status="Reached the Destination Hub";
										}
										if(In_Bound_Shipment_Details_Subform[In_Bound_Dispatch_Lookup == input.Challan_No && Status == "Shipping"].count() == 0)
										{
											recor = In_Bound_Dispatch[ID == input.Challan_No];
											recor.Current_Status="Transported";
											reco = Truck_Details[ID == recor.Vehicle_No];
											reco.Current_Status="Transported (Returning)";
										}
						)
					}
	}

			}
			Track_Shipment_for_mobile1 as "Track Shipment for mobile"
			{
				type =  form
				form = Track_Shipment_Mobile
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(Docket_Challan_No.startsWith("CH"))
										{
											if(In_Bound_Dispatch[In_Challan_No == input.Docket_Challan_No].count() == 0)
											{
												alert "Please Enter Valid Docket/Challan Number.";
												cancel submit;
											}
										}
										else
										{
											if(Booking[Docket_No == input.Docket_Challan_No].count() == 0)
											{
												alert "Please Enter Valid Docket/Challan Number.";
												cancel submit;
											}
										}
						)
					}
	}

			}
			Track_Shipment_for_mobile2 as "Track Shipment for mobile"
			{
				type =  form
				form = Track_Shipment_Mobile
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											if(Docket_Challan_No.startsWith("CH"))
										{
											openUrl("#Page:Track_Shipment_Result?trackid=" + input.Docket_Challan_No + "&tracktype=Track Shipping Route","popup window");
										}
										else
										{
											openUrl("#Page:Track_Shipment_Result?trackid=" + input.Docket_Challan_No + "&tracktype=Track Shipping Route","popup window");
										}
						)
					}
	}

			}
			Create_record_scripts42 as "Create record scripts"
			{
				type =  form
				form = Out_Bound_Delivery
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
										else
										{
											clear Delivered_Shipment_Details.Docket_No;
											hide Access_Hubs;
											hide Current_Service_Locations_Hubs;
											rec = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
											input.Current_Service_Locations_Hubs = rec;
											city = Service_Locations_Hubs[ID == rec].Select_City;
											input.Out_Challan_No:ui.add(Out_Bound_Dispatch[Current_Status == "Transporting" && Origin_Service_Location_Hub == rec].ID.getAll());
											input.Delivery_Date_Time = zoho.currenttime;
										}
						)
					}
	}

			}
			Create_record_scripts43 as "Create record scripts"
			{
				type =  form
				form = Out_Bound_Delivery
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											for each  rec in Delivered_Shipment_Details
										{
											if(rec.Delivery_Status == "Delivered To Customer" && rec.Received_By == null || rec.Received_By == "" || rec.Relation_With_Addresee == null || rec.Relation_With_Addresee == "")
											{
												alert "Some subform fields cannot be empty";
												cancel submit;
											}
											else if(rec.Delivery_Status == "Delivery Attempted (Failed)" && rec.Comment == null || rec.Comment == "")
											{
												alert "Some subform fields cannot be empty";
												cancel submit;
											}
										}
						)
					}
	}

			}
			Create_record_scripts44 as "Create record scripts"
			{
				type =  form
				form = Out_Bound_Delivery
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											recc = Employees[Email == zoho.loginuserid];
										col = Out_Bound_Dispatch[ID == input.Out_Challan_No];
										coll = Service_Locations_Hubs[ID == recc.Service_Locations_Hub].Select_City;
										originServiceLocation = List:Int();
										for each  rop in input.Delivered_Shipment_Details
										{
											var = rop.Docket_No;
											rec = Out_Bound_Shipment_Details_Subform[Docket_No == var];
											coln = Booking[ID == var];
											originServiceLocation.add(coln.Origin_Service_Location);
											if(rop.Delivery_Status == "Delivery Attempted (Failed)")
											{
												coln.Status="Delivery Attempted (Failed)";
												coln.Location="Destination Hub";
												rec.Current_Status="Returned";
											}
											else if(rop.Delivery_Status == "Delivered To Customer")
											{
												coln.Status="Delivered To Customer";
												coln.Location="Delivered";
												rec.Current_Status="Delivered to Customer";
											}
										}
										AccessHubsList = originServiceLocation.distinct();
										AccessHubsList.add(recc.Service_Locations_Hub);
										input.Access_Hubs = AccessHubsList;
										if(Out_Bound_Shipment_Details_Subform[Out_Bound_Dispatch_Lookup == input.Out_Challan_No && Current_Status == "Shipping"].count() == 0)
										{
											recor = Out_Bound_Dispatch[ID == input.Out_Challan_No];
											recor.Current_Status="Transported";
											reco = Truck_Details[ID == recor.Vehicle_No];
											reco.Current_Status="Transported (Returning)";
										}
						)
					}
	}

			}
			Create_record_scripts45 as "Create record scripts"
			{
				type =  form
				form = Run_Sheet
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
										else
										{
											hide Trip_No;
											disable Vehicle_No;
											rec = Employees[Email == zoho.loginuserid];
											input.Service_Location_Hub = rec.Service_Locations_Hub;
											input.City = Service_Locations_Hubs[ID == rec.Service_Locations_Hub].Select_City;
											disable Service_Location_Hub;
											disable City;
											input.Arrival_Date_Time = zoho.currenttime;
											disable Trip_No;
											challanNo = In_Bound_Dispatch[Current_Status == "Transporting" && Route_Service_Locations == input.Service_Location_Hub && Origin_Service_Locations != input.Service_Location_Hub].ID.getAll();
											input.Challan_No:ui.add(challanNo);
										}
						)
					}
	}

			}
			Create_record_scripts46 as "Create record scripts"
			{
				type =  form
				form = Truck_Details
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											alert "Please Register yourself first and select your Service Location";
											openUrl("#Form:Employees","same window");
										}
										else
										{
											col = Employees[Email == zoho.loginuserid].Service_Locations_Hub;
											input.Work_Service_Location = col;
											disable Work_Service_Location;
											disable Current_Status;
											hide Third_Party_Carriers_Contracted_Carrier_Name;
											hide Current_Status;
										}
						)
					}
	}

			}
			Create_record_scripts47 as "Create record scripts"
			{
				type =  form
				form = Pick_Up_Request
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Status;
										disable Pick_Up_Request_Number;
										hide Pick_Up_Request_Number;
										cities = Service_Locations_Hubs[ID != 0].Select_City.getAll().distinct();
										input.City:ui.add(cities);
						)
					}
	}

			}
			Create_record_scripts48 as "Create record scripts"
			{
				type =  form
				form = Pick_Up_Request
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											str = Pick_Up_Request[ID != 0].count();
										strr = str.toString();
										if(strr.length() < 4)
										{
											strr = 0 + strr;
											if(strr.length() < 4)
											{
												strr = 0 + strr;
												if(strr.length() < 4)
												{
													strr = 0 + strr;
													if(strr.length() < 4)
													{
														strr = 0 + strr;
														if(strr.length() < 4)
														{
															strr = 0 + strr;
														}
													}
												}
											}
										}
										input.Pick_Up_Request_Number = "PKR" + strr;
										nearestSerLocn = Service_Locations_Hubs[Select_City == input.City].ID.getAll().distinct();
										input.Nearest_Service_Locations = nearestSerLocn;
						)
					}
	}

			}
			Create_record_scripts49 as "Create record scripts"
			{
				type =  form
				form = Pick_Up_Request
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											success message "Please note down the Pick-Up Request Number for future reference: " + input.Pick_Up_Request_Number;
										sendmail
										[
											from :zoho.adminuserid
											to :input.Email
											subject :"Pick-up Booking Confirmation"
											message :"Your Pick-Up request has been received with Reference Number: " + input.Pick_Up_Request_Number
										]
						)
					}
	}

			}
			Create_record_scripts50 as "Create record scripts"
			{
				type =  form
				form = Service_Locations_Hubs
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Employee_Emails;
										hide Employees_Employee_Name;
						)
					}
	}

			}
			Create_record_scripts51 as "Create record scripts"
			{
				type =  form
				form = Employees
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											input.Email = zoho.loginuserid;
											disable Email;
											hide plain;
											show plain1;
										}
										else
										{
											hide plain1;
											show plain;
										}
						)
					}
	}

			}
			Create_record_scripts52 as "Create record scripts"
			{
				type =  form
				form = Employees
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											if(input.Email != zoho.adminuserid)
										{
											thisapp.permissions.assignUserInProfile(input.Email,"Logistics Hubs Employees Profile");
											sendmail
											[
												from :zoho.adminuserid
												to :input.Email
												subject :"Logistics Mangement is now shared with you."
												message :"Dear " + input.Employee_Name1.first_name + ",<br><br><br><a href=https://creator.zoho.com" + zoho.appuri + "#Homepage>Logistics Management</a> is shared with you for " + input.Service_Locations_Hub.Service_Location_Name + " service location.<br> All the actions performed by you will be reflected for your service location only.<br><br> You can access it by clicking the below link.<br><br> <a href=https://creator.zoho.com" + zoho.appuri + ">Click Here</a> <br><br>  Thank You "
											]
										}
										serviceHub = Service_Locations_Hubs[ID == input.Service_Locations_Hub];
										emailList = Employees[Service_Locations_Hub == serviceHub.ID].Email.getAll();
										emailList.add(zoho.adminuserid);
										emailList = emailList.distinct();
										emailStr = "," + emailList + ",";
										serviceHub.Employee_Emails=emailStr;
						)
					}
	}

			}
			Edit_record_scripts41 as "Edit record scripts"
			{
				type =  form
				form = Employees
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide plain1;
										hide plain;
						)
					}
	}

			}
			Edit_record_scripts42 as "Edit record scripts"
			{
				type =  form
				form = Employees
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to edit this entry.";
											cancel submit;
										}
										else
										{
											if(input.Email != old.Email)
											{
												thisapp.permissions.deleteuser(old.Email);
												thisapp.permissions.assignUserInProfile(input.Email,"Logistics Hubs Employees Profile");
											}
											if(old.Service_Locations_Hub != input.Service_Locations_Hub)
											{
												serviceHub = Service_Locations_Hubs[ID == old.Service_Locations_Hub];
												emailList = Employees[Service_Locations_Hub == serviceHub.ID].Email.getAll();
												i = emailList.indexOf(input.Email);
												emailList.remove(i);
												emailStr = "," + emailList + ",";
												serviceHub.Employee_Emails=emailStr;
											}
										}
						)
					}
	}

			}
			Edit_record_scripts43 as "Edit record scripts"
			{
				type =  form
				form = Employees
				record event = on edit

	on success
	{
					actions 
					{
						custom deluge script
						(
											serviceHub = Service_Locations_Hubs[ID == input.Service_Locations_Hub];
										emailList = Employees[Service_Locations_Hub == serviceHub.ID].Email.getAll();
										emailList.add(zoho.adminuserid);
										emailList = emailList.distinct();
										emailStr = "," + emailList + ",";
										serviceHub.Employee_Emails=emailStr;
						)
					}
	}

			}
			Edit_record_scripts44 as "Edit record scripts"
			{
				type =  form
				form = Pick_Up_Request
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											disable Pick_Up_Request_Number;
						)
					}
	}

			}
			Edit_record_scripts45 as "Edit record scripts"
			{
				type =  form
				form = Service_Locations_Hubs
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											/* if (Employees[Email == zoho.loginuserid].count()  ==  0)
																																														{
																																														    alert("Please Register yourself first and select your Service Location");
																																														    openUrl("#Form:Employees", "same window");
																																														}
																																														 */
										hide Employee_Emails;
										hide Employees_Employee_Name;
						)
					}
	}

			}
			Edit_record_scripts46 as "Edit record scripts"
			{
				type =  form
				form = Booking
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Employees[Email == zoho.loginuserid].count() == 0)
										{
											openUrl("#Form:Employees","same window");
										}
										//disable Status;
										disable Total_Weight;
										disable Location;
										disable Last_Location_Service_Locations_Hubs;
										disable Service_Tax;
										hide Access_Hubs;
						)
					}
	}

			}
			Edit_record_scripts47 as "Edit record scripts"
			{
				type =  form
				form = Booking
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											input.Access_Hubs = {input.Origin_Service_Location,input.Destination_Service_Location};
						)
					}
	}

			}
			Edit_record_scripts48 as "Edit record scripts"
			{
				type =  form
				form = Booking
				record event = on edit

	on update of Status
	{
					actions 
					{
						custom deluge script
						(
											TrackShipmentPublicPageURL1 = "Please enter publish link of 'Track_Shipment_Public_Page'' here";
										TrackShipmentPublicPageURL = TrackShipmentPublicPageURL1.remove("/undefined");
										href = TrackShipmentPublicPageURL + "/?Docket_Challan_No=" + input.Docket_No;
										if(input.Status == "Dispatched")
										{
											sendmail
											[
												from :zoho.adminuserid
												to :input.Receiver_s_Email,input.Sender_Email
												subject :"Shipment Dispatched Successfully."
												message :"Dear Customer,<div><br /></div><div>Your shipment with number " + input.Docket_No + " has been dispatched successfully.</div><div><br /></div><div>You can track you shipment by clicking on the below link.</div><div><br /></div><div><a target='_blank' href=" + href + " title='track'>Track Shipment</a></div>"
											]
										}
										else if(input.Status == "Dispatched for Out-Bound Delivery")
										{
											sendmail
											[
												from :zoho.adminuserid
												to :input.Receiver_s_Email,input.Sender_Email
												subject :"Shipment Out for Delivery."
												message :"Dear Customer,<div><br /></div><div>Your shipment with number " + input.Docket_No + " is out for delivery and you can expect it by today.</div><div><br /></div><div>You can get all information about shipment by clicking on the below link.</div><div><br /></div><div><a target='_blank' href=" + href + " title='track'>Track Shipment</a></div>"
											]
										}
										else if(input.Status == "Delivered To Customer")
										{
											sendmail
											[
												from :zoho.adminuserid
												to :input.Receiver_s_Email,input.Sender_Email
												subject :"Shipment Delivered Successfully."
												message :"Dear Customer,<div><br /></div><div>Your shipment with number " + input.Docket_No + " has been dilevered successfully.</div><div><br /></div><div>You can get all information about shipment by clicking on the below link.</div><div><br /></div><div><a target='_blank' href=" + href + " title='track'>Track Shipment</a></div>"
											]
										}
										else if(input.Status == "Delivery Attempted (Failed)")
										{
											sendmail
											[
												from :zoho.adminuserid
												to :input.Receiver_s_Email,input.Sender_Email
												subject :"Shipment Delivered Failed."
												message :"Dear Customer,<div><br /></div><div>The delivery of Your shipment with number " + input.Docket_No + " has been attempted and the shipment has not been delivered.</div><div><br /></div><div>You can get all information about shipment by clicking on the below link.</div><div><br /></div><div><a target='_blank' href=" + href + " title='track'>Track Shipment</a></div>"
											]
										}
						)
					}
	}

			}
			City_form_updating_script1 as "City form updating script"
			{
				type =  form
				form = Service_Locations_Hubs
				record event = on add or edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Employee_Emails;
										hide Employees_Employee_Name;
										hide City;
										hide Select_City;
						)
					}
	}

			}
			City_form_updating_script2 as "City form updating script"
			{
				type =  form
				form = Service_Locations_Hubs
				record event = on add or edit

	on success
	{
					actions 
					{
						custom deluge script
						(
											input.City = input.Address.district_city2;
										if(Cities[City == input.City].count() == 0)
										{
											cityRec = insert into Cities
										[
											Region=input.Select_Region
											City=input.City
											Added_User=zoho.loginuser
										];
											input.Select_City = cityRec;
										}
										else
										{
											input.Select_City = Cities[City == input.City].ID;
										}
						)
					}
	}

			}
			City_form_updating_script3 as "City form updating script"
			{
				type =  form
				form = Service_Locations_Hubs
				record event = on add or edit

	on user input of Address
	{
					actions 
					{
						custom deluge script
						(
											input.City = input.Address.district_city2;
						)
					}
	}

			}
			Delete_record_scripts37 as "Delete record scripts"
			{
				type =  form
				form = Out_Bound_Delivery_Subform
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
						)
					}
	}

			}
			Delete_record_scripts38 as "Delete record scripts"
			{
				type =  form
				form = In_Bound_Shipment_Details_Subform
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
						)
					}
	}

			}
			Delete_record_scripts39 as "Delete record scripts"
			{
				type =  form
				form = Out_Bound_Shipment_Details_Subform
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
						)
					}
	}

			}
			Delete_record_scripts40 as "Delete record scripts"
			{
				type =  form
				form = Booking_Commodity_Subform
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
						)
					}
	}

			}
			Delete_record_scripts41 as "Delete record scripts"
			{
				type =  form
				form = Accounted_Customers
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											alert "Sorry you dont have permissions to delete this entry.";
											cancel delete;
										}
						)
					}
	}

			}
		}
		functions
		{
			Reject_Pick_Up_Request as "Reject Pick-Up Request"
			{
				type =  functions
				form = Pick_Up_Request
				on start
				{
					actions 
					{
					rejectPickUp(ID);
					}
				}
			}
			Approve_Pick_Up_Request as "Approve Pick-Up Request"
			{
				type =  functions
				form = Pick_Up_Request
				on start
				{
					actions 
					{
					approvePickUp(ID);
					}
				}
			}
			Ready_To_Transport as "Ready To Transport"
			{
				type =  functions
				form = Truck_Details
				on start
				{
					actions 
					{
					trucksReadyToTransport(ID);
					}
				}
			}
		}
	}
	share_settings
	{
			"Logistics Hubs Employees Profile"
			{
				name = "Logistics Hubs Employees Profile"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false}
				description = "Logistics Hubs Employees Profile Profile\n"
				ModulePermissions
				{
					Out_Bound_Delivery
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Out_Bound_Delivery_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Vehicle_No{visibility:true,readonly:false}
							Delivered_Shipment_Details{visibility:true,readonly:false}
							Access_Hubs{visibility:true,readonly:false}
							Out_Challan_No{visibility:true,readonly:false}
							Current_Service_Locations_Hubs{visibility:true,readonly:false}
							Delivery_Date_Time{visibility:true,readonly:false}
						}
					}
					Truck_Details
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Truck_Details_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Vehicle_Provider{visibility:true,readonly:false}
							Vehicle_No{visibility:true,readonly:false}
							Vehicle_Details{visibility:true,readonly:false}
							Current_Status{visibility:true,readonly:false}
							Transportation_Type{visibility:true,readonly:false}
							Third_Party_Carriers_Contracted_Carrier_Name{visibility:true,readonly:false}
							Work_Service_Location{visibility:true,readonly:false}
							Permit_of_States1{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Permit_Expiry_Date{visibility:true,readonly:false}
						}
					}
					In_Bound_Shipment_Details_Subform
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							In_Bound_Shipment_Details_Subform_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Delivery_Address{visibility:true,readonly:false}
							Docket_No{visibility:true,readonly:false}
							Destination_City{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							In_Bound_Dispatch_Lookup{visibility:true,readonly:false}
						}
					}
					Out_Bound_Dispatch
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Out_Bound_Dispatch_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Vehicle_No{visibility:true,readonly:false}
							Current_Status{visibility:true,readonly:false}
							Shipment_Details{visibility:true,readonly:false}
							Out_Challan_No{visibility:true,readonly:false}
							Origin_Service_Location_Hub{visibility:true,readonly:false}
							City{visibility:true,readonly:false}
							Dispatch_Type{visibility:true,readonly:false}
							Dispatch_Date_Time{visibility:true,readonly:false}
							Access_Hub{visibility:true,readonly:false}
						}
					}
					Track_Shipment
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Select_Tracking{visibility:true,readonly:false}
							Docket_Challan_No{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Third_Party_Carriers
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Third_Party_Carriers_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Contract_End_Date{visibility:true,readonly:false}
							Vehicle_No{visibility:true,readonly:false}
							Authorization_Number{visibility:true,readonly:false}
							Carrier_Name{visibility:true,readonly:false}
						}
					}
					Track_Shipment_Public_Form
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Docket_Challan_No{visibility:true,readonly:false}
							Select_Tracking{visibility:true,readonly:false}
						}
					}
					Employees
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Employees_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Service_Locations_Hub{visibility:true,readonly:false}
							Employee_Name1{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							plain1{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Booking
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Hubs_Inventory={"View","Edit","Delete"}
							All_Bookings={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Origin{visibility:true,readonly:false}
							Delivery_Address{visibility:true,readonly:false}
							Expected_Delivery_Date{visibility:true,readonly:false}
							Sender_Email{visibility:true,readonly:false}
							Docket_No{visibility:true,readonly:false}
							Sender_Phone_Number{visibility:true,readonly:false}
							Receiver_s_Email{visibility:true,readonly:false}
							Dest_City{visibility:true,readonly:false}
							Shipment_Details{visibility:true,readonly:false}
							Access_Hubs{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							plain1{visibility:true,readonly:false}
							Accounted_Customers{visibility:true,readonly:false}
							Service_Tax{visibility:true,readonly:false}
							Total_Weight{visibility:true,readonly:false}
							Freight{visibility:true,readonly:false}
							Status{visibility:true,readonly:false}
							Rate_KG{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Sender_Name{visibility:true,readonly:false}
							Receiver_Name1{visibility:true,readonly:false}
							Date_field{visibility:true,readonly:false}
							Origin_Service_Location{visibility:true,readonly:false}
							Select_Customer_Type{visibility:true,readonly:false}
							Last_Location_Service_Locations_Hubs{visibility:true,readonly:false}
							Destination_Service_Location{visibility:true,readonly:false}
							Region{visibility:true,readonly:false}
							Receiver_Phone_Number{visibility:true,readonly:false}
							Location{visibility:true,readonly:false}
						}
					}
					Run_Sheet
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Run_Sheet_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Vehicle_No{visibility:true,readonly:false}
							Trip_No{visibility:true,readonly:false}
							Challan_No{visibility:true,readonly:false}
							Arrival_Date_Time{visibility:true,readonly:false}
							City{visibility:true,readonly:false}
							Service_Location_Hub{visibility:true,readonly:false}
						}
					}
					Regions
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Regions_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Region{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Track_Shipment_Mobile
					{
						FieldPermissions
						{
							Modified_User{visibility:false}
							Added_User_IP_Address{visibility:false}
							Modified_Time{visibility:false}
							Added_User{visibility:false}
							ID{visibility:false}
							Docket_Challan_No{visibility:false,readonly:false}
							Section{visibility:false,readonly:false}
							Added_Time{visibility:false}
							Modified_User_IP_Address{visibility:false}
						}
					}
					In_Bound_Received_Shipments_Subform
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							In_Bound_Received_Shipments_Subform_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Docket_No{visibility:true,readonly:false}
							In_Bound_Delivery_Lookup{visibility:true,readonly:false}
							Condition_field{visibility:true,readonly:false}
						}
					}
					Booking_Commodity_Subform
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Booking_Commodity_Subform_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Commodity{visibility:true,readonly:false}
							Booking_Lookup{visibility:true,readonly:false}
							Weight{visibility:true,readonly:false}
						}
					}
					In_Bound_Delivery
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							In_Bound_Delivery_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Vehicle_No{visibility:true,readonly:false}
							Challan_No{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Current_Service_Locations_Hubs{visibility:true,readonly:false}
							Arrival_Time{visibility:true,readonly:false}
							Access_Hub{visibility:true,readonly:false}
							Received_Shipment_Details1{visibility:true,readonly:false}
						}
					}
					Trucks_Status_Update
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Vehicle_No{visibility:true,readonly:false}
							Current_Status{visibility:true,readonly:false}
						}
					}
					In_Bound_Dispatch
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							In_Bound_Dispatch_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Route_Cities{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							In_Challan_No{visibility:true,readonly:false}
							Vehicle_No{visibility:true,readonly:false}
							Trip_No{visibility:true,readonly:false}
							Route_Service_Locations{visibility:true,readonly:false}
							Current_Status{visibility:true,readonly:false}
							Access_Hubs{visibility:true,readonly:false}
							Shipment_Details{visibility:true,readonly:false}
							Region{visibility:true,readonly:false}
							Origin_Service_Locations{visibility:true,readonly:false}
							Dispatch_Type{visibility:true,readonly:false}
							Dispatch_Date_Time{visibility:true,readonly:false}
						}
					}
					Out_Bound_Delivery_Subform
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Out_Bound_Delivery_Subform_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Relation_With_Addresee{visibility:true,readonly:false}
							Comment{visibility:true,readonly:false}
							Received_By{visibility:true,readonly:false}
							Out_Bound_Delivery_Lookup{visibility:true,readonly:false}
							Delivery_Status{visibility:true,readonly:false}
							Docket_No{visibility:true,readonly:false}
						}
					}
					Pick_Up_Request
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Pick_Up_Request_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Pick_up_Date{visibility:true,readonly:false}
							Nearest_Service_Locations{visibility:true,readonly:false}
							Commodity_Details{visibility:true,readonly:false}
							Email{visibility:true,readonly:false}
							Contact_Number1{visibility:true,readonly:false}
							Pick_Up_Request_Number{visibility:true,readonly:false}
							Address1{visibility:true,readonly:false}
							City{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
							Name1{visibility:true,readonly:false}
						}
					}
					Out_Bound_Shipment_Details_Subform
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Out_Bound_Shipment_Details_Subform_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Location_Inside_Container{visibility:true,readonly:false}
							Commodity{visibility:true,readonly:false}
							Current_Status{visibility:true,readonly:false}
							Docket_No{visibility:true,readonly:false}
							City{visibility:true,readonly:false}
							Out_Bound_Dispatch_Lookup{visibility:true,readonly:false}
						}
					}
					Cities
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Cities_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Region{visibility:true,readonly:false}
							City{visibility:true,readonly:false}
						}
					}
					Accounted_Customers
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Accounted_Customers_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Email{visibility:true,readonly:false}
							Customer_Name{visibility:true,readonly:false}
							Address{visibility:false,readonly:false}
							Select_City{visibility:true,readonly:false}
							Select_Region{visibility:true,readonly:false}
							Company_Name{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Service_Locations_Hubs
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Service_Locations_Hubs_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Service_Location_Name{visibility:true,readonly:false}
							Employee_Emails{visibility:true,readonly:false}
							Select_City{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							Select_Region{visibility:true,readonly:false}
							Employees_Employee_Name{visibility:true,readonly:false}
							City{visibility:true,readonly:false}
							Section{visibility:true,readonly:false}
						}
					}
					Track
					{
						enabled = tab
					}
					Track_Shipment_Result
					{
						enabled = tab
					}
					Track_Shipment_Public_Page
					{
						enabled = tab
					}
				}
			}
			"Administrator"
			{
				name = "Administrator"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true}
				description = "This profile will have all the permissions.\n"
			}
			"User"
			{
				name = "User"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:true}
				description = "This profile only have add and view permission.\n"
			}
			"Customer"
			{
				name = "Customer"
				type = Customer_Portal
				permissions = {Chat:false, Predefined:true}
				description = "This is the default profile having only add and view permission.\n"
			}
			"Member"
			{
				name = "Member"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:true}
				description = "This profile will not have administrative permissions.\n"
			}
			roles
			{
				"CEO"
				{
					description = "User belonging to this role can access data of all other users.\n\n"
				}
			}
	}

	customize
	{
		
		layout = "tab"
		color = "black"
		base theme = "professional"
		new theme = 2
		new theme color = 1
		icons = true
    	icon type = 1
    	icon name = "zc-ab-operation-1"
    	icon theme = "green"
		icons style = solid
	}

	phone
	{
		section  Homepage
		{
			page Mobile_Dashboard
			{
			}
		}
		section  Booking
		{
			form  Booking
			{
				layout = left
			}
			list All_Bookings
			{
				quickview
				(
					layout
					(
		 				type = 9
						datablock1
						(
			 				layout type = 31
		     				title = "Overview"
							fields
							(
								Receiver_Name1 as "Receiver Name"
								Docket_No as "Docket No."
								Origin_Service_Location as "Origin Service Location"
								Destination_Service_Location as "Destination Service Location"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Delete 
    		 				Add 
    		 				Print 
    		 				Import 
    		 				Export 
    	 				)
									record
									(
										Edit   	   
										Duplicate   	   
										Print   	   
										Delete   	   
    								)
    				)
    				action
    				(
									on tap
									(
										View Record   	   
    								)
									on long press
									(
										Edit   	   
										Delete   	   
										Duplicate   	   
										Print   	   
										View Record   	   
    								)
     				)
				)
				detailview
				(
					layout
					(
		 				type = 1
						datablock1
						(
			 				layout type = -2
		     				title = "Overview"
							fields
							(
								Select_Customer_Type as "Customer Type"
								Docket_No as "Docket No."
								Sender_Email as "Sender Email"
								Origin
								Origin_Service_Location as "Origin Service Location"
								Receiver_s_Email as "Receiver's Email"
								Region as "Delivery Region"
								Dest_City as "City (Nearest to Service Location Available)"
								Destination_Service_Location as "Destination Service Location"
								Date_field as "Date"
								Expected_Delivery_Date as "Expected Delivery Date"
								Total_Weight as "Weight"
								Rate_KG as "Rate/KG"
								Freight
								Service_Tax as "Service Tax"
								Status
								Location
								Accounted_Customers as "Accounted Customers"
								Last_Location_Service_Locations_Hubs as "Last Location (Service Locations/Hubs)"
							)
						)
					)

					menu
    				(
    	 				header
    	 				(
    		 				Edit 
    		 				Duplicate 
    		 				Print 
    		 				Delete 
    	 				)
    				)
				)
			}
		}
		section  Dispatch
		{
			form  In_Bound_Dispatch
			{
				layout = auto
			}
			form  Out_Bound_Dispatch
			{
				layout = auto
			}
		}
		section  Delivery_Receives
		{
			form  In_Bound_Delivery
			{
				layout = auto
			}
			form  Out_Bound_Delivery
			{
				layout = auto
			}
		}
		section  Run_Sheet
		{
			form  Run_Sheet
			{
				layout = auto
			}
		}
		section  Warehouse
		{
		}
		section  Truck_Details
		{
			form  Truck_Details
			{
				layout = left
			}
		}
		section  Pick_Up
		{
			form  Pick_Up_Request
			{
				layout = left
			}
		}
		section  Service_Locations_Hubs
		{
			form  Service_Locations_Hubs
			{
				layout = left
			}
		}
		section  Add_Admin_Data
		{
			form  Employees
			{
				layout = left
			}
			form  Regions
			{
				layout = auto
			}
			form  Cities
			{
				layout = auto
			}
			form  Third_Party_Carriers
			{
				layout = auto
			}
			form  Accounted_Customers
			{
				layout = auto
			}
		}
		section  View_Admin_Data
		{
		}
		section  Reference_Forms
		{
			form  Booking_Commodity_Subform
			{
				layout = auto
			}
			form  Out_Bound_Shipment_Details_Subform
			{
				layout = auto
			}
			form  In_Bound_Shipment_Details_Subform
			{
				layout = left
			}
			form  In_Bound_Received_Shipments_Subform
			{
				layout = auto
			}
			form  Out_Bound_Delivery_Subform
			{
				layout = auto
			}
			form  Trucks_Status_Update
			{
				layout = auto
			}
			form  Track_Shipment_Public_Form
			{
				layout = auto
			}
		}
		section  Track_Shipment
		{
			form  Track_Shipment
			{
				layout = auto
			}
		}
		section  Track_Shipments
		{
			form  Track_Shipment_Mobile
			{
				layout = auto
			}
		}
		customize
		{
			colour = amethyst
        	layout = slidingpane
		 	icons style = outline
		}
	}
	tablet
	{
		section  Homepage
		{
			page Mobile_Dashboard
			{
			}
		}
		section  Booking
		{
			form  Booking
			{
				layout = left
			}
		}
		section  Dispatch
		{
			form  In_Bound_Dispatch
			{
				layout = auto
			}
			form  Out_Bound_Dispatch
			{
				layout = auto
			}
		}
		section  Delivery_Receives
		{
			form  In_Bound_Delivery
			{
				layout = auto
			}
			form  Out_Bound_Delivery
			{
				layout = auto
			}
		}
		section  Run_Sheet
		{
			form  Run_Sheet
			{
				layout = auto
			}
		}
		section  Warehouse
		{
		}
		section  Truck_Details
		{
			form  Truck_Details
			{
				layout = left
			}
		}
		section  Pick_Up
		{
			form  Pick_Up_Request
			{
				layout = left
			}
		}
		section  Service_Locations_Hubs
		{
			form  Service_Locations_Hubs
			{
				layout = left
			}
		}
		section  Add_Admin_Data
		{
			form  Employees
			{
				layout = left
			}
			form  Regions
			{
				layout = auto
			}
			form  Cities
			{
				layout = auto
			}
			form  Third_Party_Carriers
			{
				layout = auto
			}
			form  Accounted_Customers
			{
				layout = auto
			}
		}
		section  View_Admin_Data
		{
		}
		section  Reference_Forms
		{
			form  Booking_Commodity_Subform
			{
				layout = auto
			}
			form  Out_Bound_Shipment_Details_Subform
			{
				layout = auto
			}
			form  In_Bound_Shipment_Details_Subform
			{
				layout = left
			}
			form  In_Bound_Received_Shipments_Subform
			{
				layout = auto
			}
			form  Out_Bound_Delivery_Subform
			{
				layout = auto
			}
			form  Trucks_Status_Update
			{
				layout = auto
			}
			form  Track_Shipment_Public_Form
			{
				layout = auto
			}
		}
		section  Track_Shipment
		{
			form  Track_Shipment
			{
				layout = auto
			}
		}
		section  Track_Shipments
		{
			form  Track_Shipment_Mobile
			{
				layout = auto
			}
		}
		customize
		{
			colour = amethyst
        	layout = slidingpane
		 	icons style = outline
		}
	}
	
	reports configuration
	{
	
		Version = 1251000165802239
		Key     = "PdDt8hwXwSeeqSKjOOz3UhyAKhp171j7Czy8M5f2epfm1RCrbHpqhfdJ8hkQUBuSgaq0jfgEZGaefw5Apz2uwgqeMpzKW6aPjz6e"
	}
}