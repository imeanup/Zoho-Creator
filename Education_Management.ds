/*
 * Author       : app.zohocreator
 * Generated on : 06-May-2020 23:14:07
 * Version      : 1.0
 */
 application "Education Management"
 {
 	date format = "dd-MMM-yyyy"
 	time zone = "Asia/Calcutta"
 	time format = "24-hr"
	section Admin_Admin_Data1
	{
		displayname= "Admin Data"
		icon = "ui-1-lock-open"
		form Student_Details
		{
			displayname = "Add Student"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			initialAlertMsg
			(
    			type = plaintext
				value = "<span style=\"color: red; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 12px; background-color: rgb(255, 255, 255)\">Please fill the data in Databases and Timetable sections</span>"
	 			row = 1
	 			column = 1   
				width = 300px
			)
			must have unique Registration_Number
			(
    			type = text
				displayname = "Registration Number"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Name_of_the_Student
			(
    			type = text
				displayname = "Name of the Student"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Date_of_Birth
			(
    			type = date
				displayname = "Date of Birth"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			errorDateText
			(
    			type = plaintext
				value = "<span style=\"color: red; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 12px; background-color: rgb(255, 255, 255)\">Please enter a valid date</span>"
	 			row = 1
	 			column = 1   
				width = 300px
			)
			must have Student_Photo
			(
    			type = image
				displayname = "Student Photo"
				source  = public_url,file
				aspect ratio = original
				camera = primary
				preview duration = 0
				show gallery = true
				switch camera = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Gender
			(
				type = radiobuttons
				values = {"Male", "Female", "Other"}
	 			row = 1
	 			column = 1   
				width = 300px
			)
			must have unique Official_Email
			(
    			type = email
				displayname = "Official Email"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Mobile_Number
			(
				type = number
				displayname = "Student Contact No"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Father_Name
			(
    			type = text
				displayname = "Father Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Father_s_Occupation
			(
    			type = text
				displayname = "Father's Occupation"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Father_Contact_No
			(
				type = number
				displayname = "Father Contact No"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Religion
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = medium
			)
			Nationality
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Date_of_Joining
			(
    			type = date
				displayname = "Date of Joining"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Department
			(
				type = picklist
				values  = Department_Details.ID
    			displayformat = [Department]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Semester
			(
				type = picklist
				values  = Add_Semester.ID
    			displayformat = [Semester]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			unique Text_for_Attendance
			(
    			type = text
				displayname = "Text for Attendance"
				private = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			Student_status
			(
    			type = checkbox
				displayname = "Student status"
				initial value = true
	 			row = 1
	 			column = 1   
				width = 300px
			)
	
			customize
			(
				icon = "users-2-a-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Faculty_Details
		{
			displayname = "Add Faculty"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			initialAlertMsg
			(
    			type = plaintext
				value = "<span style=\"color: red; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 12px; background-color: rgb(255, 255, 255)\">Please fill the data in Databases and Timetable sections</span>"
	 			row = 1
	 			column = 1   
				width = 300px
			)
			must have Faculty_Name
			(
    			type = text
				displayname = "Faculty Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Date_of_Birth
			(
    			type = date
				displayname = "Date of Birth"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			errorDateText
			(
    			type = plaintext
				value = "<span style=\"color: red; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 12px; background-color: rgb(255, 255, 255)\">Please enter a valid date</span>"
	 			row = 1
	 			column = 1   
				width = 300px
			)
			must have Gender
			(
				type = radiobuttons
				values = {"Male", "Female", "Others"}
	 			row = 1
	 			column = 1   
				width = 300px
			)
			Marital_Status
			(
				type = picklist
				displayname = "Marital Status"
				values = {"Single", "Married", "Divorced", "Widowed"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have unique Contact_Number
			(
    			type = text
				displayname = "Contact Number"
				maxchar = 10
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Qualification
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Address
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Faculty_Photo
			(
    			type = image
				displayname = "Faculty Photo"
				source  = public_url,file
				aspect ratio = original
				camera = primary
				preview duration = 0
				show gallery = true
				switch camera = true
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have unique Faculty_ID
			(
    			type = text
				displayname = "Faculty ID"
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have unique Official_Email
			(
    			type = email
				displayname = "Official Email"
	 			row = 1
	 			column = 2   
				width = medium
			)
			Designation
			(
				type = picklist
				values  = Add_Designation.ID
    			displayformat = [Designation]
				sortorder = ascending
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Department
			(
				type = picklist
				values  = Department_Details.ID
    			displayformat = [Department]
				sortorder = ascending
	 			row = 1
	 			column = 2   
				width = medium
			)
	
			customize
			(
				icon = "users-2-a-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Course_Details
		{
			displayname = "Add Course Details"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			must have Course_Code
			(
    			type = text
				displayname = "Course Code"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have unique Course_Title
			(
    			type = text
				displayname = "Course Title"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Department
			(
				type = picklist
				values  = Department_Details.ID
    			displayformat = [Department]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Course_Type
			(
				type = picklist
				displayname = "Course Type"
				values  = Add_Course_Types.ID
    			displayformat = [Type]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Attendance_Status_Search
		{
			displayname = "Attendance Status Search"
			store data in zc = false
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			must have Academic_Year
			(
				type = picklist
				displayname = "Academic Year"
				values  = Add_Academic_year.ID
    			displayformat = [Academic_Year]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Faculty_Name
			(
				type = picklist
				displayname = "Faculty Name"
				values  = Faculty_Details.ID
    			displayformat = [Faculty_Name + " - " + Faculty_ID]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Course_Code
			(
				type = picklist
				displayname = "Course Code"
				values  = Course_Details.ID
    			displayformat = [Course_Code]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Slot
			(
				type = picklist
				values  = Add_Slots.ID
    			displayformat = [Slot]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "ui-1-zoom"
			)
			actions
			{
				Search
				(
   					type = button
   					displayname = "Search"
				)
			}
		}
	}
	section Database1
	{
		displayname= "Databases"
		icon = "ui-1-database"
		list Academic_years
		{
			displayName = "Academic years"
			show all rows from Add_Academic_year    
			(
				Academic_Year as "Acadamic Year"
			)
			options
			(
				icon = "ui-1-calendar-57"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Academic_Year as "Acadamic Year"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Academic_Year as "Acadamic Year"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Current_Academic_Year_Report
		{
			displayName = "Current Academic Year and Semester"
			show all rows from Current_Academic_Year    
			(
				Academic_Year as "Current Academic Year"
				Current_Semester as "Current Semester"
			)
			options
			(
				icon = "ui-1-calendar-check-62"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Academic_Year as "Current Academic Year"
							Current_Semester as "Current Semester"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Academic_Year as "Current Academic Year"
							Current_Semester as "Current Semester"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Department_Details_Report
		{
			displayName = "Departments"
			show all rows from Department_Details    
			(
				Department
			)
			options
			(
				icon = "design-2-filter-organization"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Department
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Department
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Course_Types
		{
			displayName = "Course Types"
			show all rows from Add_Course_Types    
			(
				Type
			)
			options
			(
				icon = "business-hierarchy-54"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Type
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Type
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Course_Details_Report
		{
			displayName = "Course Details"
			show all rows from Course_Details    
			(
				Course_Code as "Course Code"
				Course_Title as "Course Title"
				Department
				Course_Type as "Course Type"
			)
			options
			(
				icon = "design-2-layers"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Course_Code as "Course Code"
							Course_Title as "Course Title"
							Department
							Course_Type as "Course Type"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Course_Code as "Course Code"
							Course_Title as "Course Title"
							Department
							Course_Type as "Course Type"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Add_Designation_Report
		{
			displayName = "Designations"
			show all rows from Add_Designation    
			(
				Designation
				Allow_to_Allocate_Courses as "Allow to Allocate Courses"
			)
			options
			(
				icon = "users-2-meeting"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Designation
							Allow_to_Allocate_Courses as "Allow to Allocate Courses"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Designation
							Allow_to_Allocate_Courses as "Allow to Allocate Courses"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Semester_Details_Report
		{
			displayName = "Semesters"
			show all rows from Add_Semester    
			(
				Semester
			)
			options
			(
				icon = "business-books"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Semester
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Semester
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Slots_Details_Report
		{
			displayName = "Slots"
			show all rows from Add_Slots    
			(
				Slot as "Slots"
			)
			options
			(
				icon = "files-time"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Slot as "Slots"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Slot as "Slots"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Student_Details1
		{
			displayName = "Student Details"
			show all rows from Student_Details    
			(
				Registration_Number as "Registration Number"
				Name_of_the_Student as "Name of the Student"
				Semester
				Date_of_Birth as "Date of Birth"
				Official_Email as "Official Email"
				Date_of_Joining as "Date of Joining"
				Department
				Mobile_Number as "Student Contact No"
				Gender
				Nationality
				Religion
				Father_Name as "Father Name"
				Father_Contact_No as "Father Contact No"
				Father_s_Occupation as "Father's Occupation"
				Student_status as "Student status"
				Student_Photo as "Student Photo"
			)
			options
			(
				icon = "users-2-contacts-44"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Registration_Number as "Registration Number"
							Name_of_the_Student as "Name of the Student"
							Semester
							Date_of_Birth as "Date of Birth"
							Official_Email as "Official Email"
							Date_of_Joining as "Date of Joining"
							Department
							Mobile_Number as "Student Contact No"
							Gender
							Nationality
							Religion
							Father_Name as "Father Name"
							Father_Contact_No as "Father Contact No"
							Father_s_Occupation as "Father's Occupation"
							Student_status as "Student status"
							Student_Photo as "Student Photo"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Registration_Number as "Registration Number"
							Name_of_the_Student as "Name of the Student"
							Semester
							Date_of_Birth as "Date of Birth"
							Official_Email as "Official Email"
							Date_of_Joining as "Date of Joining"
							Department
							Mobile_Number as "Student Contact No"
							Gender
							Nationality
							Religion
							Father_Name as "Father Name"
							Father_Contact_No as "Father Contact No"
							Father_s_Occupation as "Father's Occupation"
							Student_status as "Student status"
							Student_Photo as "Student Photo"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Faculty_Details_Report
		{
			displayName = "Faculty Details"
			show all rows from Faculty_Details    
			(
				Faculty_ID as "Faculty ID"
				Faculty_Name as "Faculty Name"
				Designation
				Gender
				Official_Email as "Official Email"
				Qualification
				Date_of_Birth as "Date of Birth"
				Department
				Contact_Number as "Mobile Number"
				Address
				Faculty_Photo as "Faculty Photo"
			)
			options
			(
				icon = "users-2-contacts-45"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Faculty_ID as "Faculty ID"
							Faculty_Name as "Faculty Name"
							Designation
							Gender
							Official_Email as "Official Email"
							Qualification
							Date_of_Birth as "Date of Birth"
							Department
							Contact_Number as "Mobile Number"
							Address
							Faculty_Photo as "Faculty Photo"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Faculty_ID as "Faculty ID"
							Faculty_Name as "Faculty Name"
							Designation
							Gender
							Official_Email as "Official Email"
							Qualification
							Date_of_Birth as "Date of Birth"
							Department
							Contact_Number as "Mobile Number"
							Address
							Faculty_Photo as "Faculty Photo"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Event_Types_Report
		{
			displayName = "Event Types"
			show all rows from Event_Types    
			(
				Type
			)
			options
			(
				icon = "business-hierarchy-55"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Type
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Type
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Project_Types_Report
		{
			displayName = "Project Types"
			show all rows from Add_Project_Types    
			(
				Project_Type as "Project Type"
			)
			options
			(
				icon = "shopping-list"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Project_Type as "Project Type"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Project_Type as "Project Type"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Dayorders_and_hours
		{
			displayName = "No of Dayorders and hours"
			show all rows from Add_No_of_Dayorders_and_hours    
			(
				No_of_hours_per_day as "No of hours per day"
				No_of_dayorders as "No of dayorders"
			)
			options
			(
				icon = "ui-2-menu-bold"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							No_of_hours_per_day as "No of hours per day"
							No_of_dayorders as "No of dayorders"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							No_of_hours_per_day as "No of hours per day"
							No_of_dayorders as "No of dayorders"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Timetable
	{
		icon = "ui-1-calendar-grid-58"
		form Date_day_order_generation
		{
			displayname = "Add Semester Academic Calender"
			store data in zc = false
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			You_would_like_to
			(
				type = radiobuttons
				displayname = "You would like to"
				values = {"Generate Day Orders", "Insert/Delete days"}
	 			row = 1
	 			column = 1   
				width = 300px
			)
			Start_Date
			(
    			type = date
				displayname = "Start Date of Term/Semester"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 130px
			)
			End_Date
			(
    			type = date
				displayname = "End Date of Term/Semester"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 130px
			)
			Academic_year
			(
				type = picklist
				displayname = "Academic year"
				values  = Add_Academic_year.ID
    			displayformat = [Academic_Year]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Select_Holidays
			(
				type = checkboxes
				displayname = "Select Holidays"
				values = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
	 			row = 1
	 			column = 1   
				width = 300px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				Generate
				(
   					type = button
   					displayname = "Generate Day orders"
				)
				Insert_days
				(
   					type = button
   					displayname = "Insert day(s)"
				)
				Delete_days
				(
   					type = button
   					displayname = "Delete day(s)"
				)
			}
		}
		list Date_Day_Order_Mapping_Report
		{
			displayName = "Academic Calender"
			show all rows from Date_Day_Order_Mapping    
			(
				Date_field as "Date"
				Day_Order as "Day Order"
				Academic_Year as "Academic Year"
			)
			sort by
			(
				Date_field descending
			)
			options
			(
				icon = "ui-1-calendar-60"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Date_field as "Date"
							Day_Order as "Day Order"
							Academic_Year as "Academic Year"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Date_field as "Date"
							Day_Order as "Day Order"
							Academic_Year as "Academic Year"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Common_Time_Table_Report
		{
			displayName = "Common Time Table"
			show all rows from Common_Time_Table    
			(
				Day_Order as "Day Order"
				Hour_Slot.Hour as "Hour-Slots"
				Hour_Slot.Slot as "Hour-Slots.Slot"
			)
			options
			(
				icon = "ui-1-calendar-grid-61"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Day_Order as "Day Order"
							Hour_Slot.Hour as "Hour-Slots"
							Hour_Slot.Slot as "Hour-Slots.Slot"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Day_Order as "Day Order"
							Hour_Slot.Hour as "Hour-Slots"
							Hour_Slot.Slot as "Hour-Slots.Slot"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Student
	{
		icon = "users-single-03"
				 page Student_Dashboard 
	 	 { 
 	 	 displayname = "Dashboard" 

 	 	 icon = "ui-1-dashboard-half" 
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\twebDeviceConfig='{\"layout\":{\"displayType\":\"plain\",\"design\":\"fluid\",\"style\":\"padding-right:0px;padding-top:0px;padding-bottom:0px;padding-left:0px;\"}}'\n\t\t\n\t\t\tmobileDeviceConfig='{\"layout\":{\"design\":\"onebyone\",\"displayType\":\"plain\",\"forcedOrientation\":false}}'\n\t\t\n\t\t\ttabletDeviceConfig='{\"layout\":{\"design\":\"onebyone\",\"displayType\":\"plain\",\"forcedOrientation\":false}}'\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Student_Dashboard1'>\n\t<![CDATA[htmlpage Student_Dashboard1()\ncontent\n&lt;%{\n\t%&gt;\n&lt;style&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  .header_div\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-right:1%;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-left:1%;\n\t\t\t\t\t\t\t\t\t\t\t\t  width:98%;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:50px;\n\t\t\t\t\t\t\t\t\t\t\t\t  background:lightgrey;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \/*Table styles*\/\n\t\t\t\t\t\t\t\t\t\t\t\t   .TABLE\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  border: 5px solid rgb(224,224,224);\n\t\t\t\t\t\t\t\t\t\t\t\t  border-collapse:collapse;\n\t\t\t\t\t\t\t\t\t\t\t\t  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);\n\t\t\t\t\t\t\t\t\t\t\t\t  animation: float 5s infinite;\n\t\t\t\t\t\t\t\t\t\t\t\t  width:100%;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:100%;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .TABLE td, th\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:1px solid #D8D8D8;\n\t\t\t\t\t\t\t\t\t\t\t\t  padding:10px;\n\t\t\t\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t\t\t\t   .heading\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  color:white;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t  .TABLE tr:nth-child(odd)\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  background-color: #f2f2f2;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .TABLE tr:hover\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  background:#585858;\n\t\t\t\t\t\t\t\t\t\t\t\t  color:#FFFFFF;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-top: 1px solid #22262e;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom: 1px solid #22262e;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .TABLE tr:last-child:hover{\n\t\t\t\t\t\t\t\t\t\t\t\t  background: #f2f2f2;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:1px solid #D8D8D8;\n\t\t\t\t\t\t\t\t\t\t\t\t  color:#666;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t   \/*Table styles*\/\n\t\t\t\t\t\t\t\t\t\t\t\t  .common_tt_div\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  width:42.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:282px;\n\t\t\t\t\t\t\t\t\t\t\t\t  float:left;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-left:1.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-top:20px;\n\t\t\t\t\t\t\t\t\t\t\t\t    overflow: auto;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_div{\n\t\t\t\t\t\t\t\t\t\t\t\t  float:right;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-top:20px;\n\t\t\t\t\t\t\t\t\t\t\t\t  width:53%;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-right:1.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:282px;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .upcoming_tt_div{\n\t\t\t\t\t\t\t\t\t\t\t\t   width:53%;\n\t\t\t\t\t\t\t\t\t\t\t\t  float:right;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-right:1.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-top:15px;\n\t\t\t\t\t\t\t\t\t\t\t\t    overflow: auto;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .chart_div\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t  margin-left:1.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-top:15px;\n\t\t\t\t\t\t\t\t\t\t\t\t  width:42.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t  float:left;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:375px;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \/*Barchart styles*\/\n\t\t\t\t\t\t\t\t\t\t\t\t  body {  font: 13px\/1.3 &apos;Lucida Grande&apos;,sans-serif;  color: #666;}\n\t\t\t\t\t\t\t\t\t\t\t\t  .chart {  display: table;  table-layout: fixed;  width: 92%;  max-width: 92%;  height: 250px;  margin: 0 auto;  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.1) 2%, rgba(0, 0, 0, 0) 2%);  background-size: 100% 50px;  background-position: op;}\n\t\t\t\t\t\t\t\t\t\t\t\t  .chart li {  position: relative;  display: table-cell;  vertical-align: bottom;  height: 200px;}\n\t\t\t\t\t\t\t\t\t\t\t\t  .chart span {  margin: 0 1em;  display: block;  background: rgba(209, 236, 250, 0.75);  animation: draw 1s ease-in-out;font-size:x-small;}\n\t\t\t\t\t\t\t\t\t\t\t\t  .chart span:before {  position: absolute;  left: 0;  right: 0;  top: 100%;  padding: 5px 1em 0; display: block;  text-align: center;  content: attr(title);  word-wrap: break-word;}@keyframes draw {  0% {    height: 0;  }}\n\t\t\t\t\t\t\t\t\t\t\t\t  \/*Barchart styles*\/\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table1 {\n\t\t\t\t\t\t\t\t\t\t\t\t  border-collapse:collapse;\n\t\t\t\t\t\t\t\t\t\t\t\t  width:51%;\n\t\t\t\t\t\t\t\t\t\t\t\t  float:right;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:100%;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table2\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  border-collapse:collapse;\n\t\t\t\t\t\t\t\t\t\t\t\t  float:left;\n\t\t\t\t\t\t\t\t\t\t\t\t  width:51%;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:100%;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table1  td{\n\t\t\t\t\t\t\t\t\t\t\t\t  text-align:center;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:1px solid #D8D8D8;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-top:1px solid #D8D8D8;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table1  tr:first-child td{\n\t\t\t\t\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table1  tr:last-child td{\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:none;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table1  td a\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  color: #666;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t   .quick_link_table1  td:hover{\n\t\t\t\t\t\t\t\t\t\t\t\t  text-decoration: underline;\n\t\t\t\t\t\t\t\t\t\t\t\t  font-weight:bold; \n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t   .quick_link_table2  td {\n\t\t\t\t\t\t\t\t\t\t\t\t  background:#B7B7B7;\n\t\t\t\t\t\t\t\t\t\t\t\t  text-align:center;\n\t\t\t\t\t\t\t\t\t\t\t\t  color:white;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:1px solid white;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-right: 1px solid #A0A0A0;\n\t\t\t\t\t\t\t\t\t\t\t\t    border-left: 1px solid #A0A0A0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tfont-size : 14px;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table2  tr:last-child td{\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:none;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table2  tr:last-child td:hover{\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:2px solid #6d6d6d;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table2  td:hover{\n\t\t\t\t\t\t\t\t\t\t\t\tbackground: #909090 ;\n\t\t\t\t\t\t\t\t\t\t\t\t      color: #f7f7f7;\n\t\t\t\t\t\t\t\t\t\t\t\t    border-top: 2px solid #6d6d6d;\n\t\t\t\t\t\t\t\t\t\t\t\t    border-bottom: 2px solid #6d6d6d;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t.quick_link_table2  td:hover ul{\n\t\t\t\t\t\t\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t.quick_link_ul \n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tbackground:#F0F0F0 ;\n\t\t\t\t\t\t\t\t\t\t\t\t  border:1px solid #999;\n\t\t\t\t\t\t\t\t\t\t\t\t  color:#666;\n\t\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\t margin-left:50px;\n\t\t\t\t\t\t\t\t\t\t\t\t  padding-left:0px;\n\t\t\t\t\t\t\t\t\t\t\t\t  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1); \n\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\tdisplay: none;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t.quick_link_ul li{\n\t\t\t\t\t\t\t\t\t\t\t\t  width:176px;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:33px;\n\t\t\t\t\t\t\t\t\t\t\t\t  padding:10px;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:1px solid #D8D8D8;\n\t\t\t\t\t\t\t\t\t\t\t\tdisplay: block; \n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t.quick_link_ul li a{\n\t\t\t\t\t\t\t\t\t\t\t\t  color:#888888;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  .notification_div{\n\t\t\t\t\t\t\t\t\t\t\t\t  width: 36%;float:right;height:96.5%;border: 5px solid rgb(224,224,224);\n\t\t\t\t\t\t\t\t\t\t\t\t  position:relative;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  .notification_table_div{\n\t\t\t\t\t\t\t\t\t\t\t\t  width:100%;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:85.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .notification_table{\n\t\t\t\t\t\t\t\t\t\t\t\t  width:100%;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t .notification_header_div {\n\t\t\t\t\t\t\t\t\t\t\t\t  width:100%;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:14.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t  position:absolute;\n\t\t\t\t\t\t\t\t\t\t\t\t  bottom:0;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-top: 1px solid #D8D8D8;\n\t\t\t\t\t\t\t\t\t\t\t\t    text-align: center;\n\t\t\t\t\t\t\t\t\t\t\t\t  display:flex;\n\t\t\t\t\t\t\t\t\t\t\t\t  align-items:center;\n\t\t\t\t\t\t\t\t\t\t\t\t    justify-content: center;\n\t\t\t\t\t\t\t\t\t\t\t\t  background: #f2f2f2;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .notification_table a{\n\t\t\t\t\t\t\t\t\t\t\t\t  color: #666;\n\t\t\t\t\t\t\t\t\t\t\t\t    font-weight: bold;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .notification_table a:hover{\n\t\t\t\t\t\t\t\t\t\t\t\t    text-decoration: underline;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  p a:hover{\n\t\t\t\t\t\t\t\t\t\t\t\t  text-decoration:underline;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t  .notification_header_div a:hover{\n\t\t\t\t\t\t\t\t\t\t\t\t    text-decoration:underline;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/style&gt;\n&lt;%\n\tstudentObject = Student_Details[Official_Email == zoho.loginuserid];\n\tcurrentAcademicYear = Current_Academic_Year[ID != 0].Academic_Year;\n\tstudent_name = Student_Details[Official_Email == zoho.loginuserid].Name_of_the_Student;\n\t%&gt;\n&lt;body&gt;\n&lt;%\n\tif(studentObject.count() != 0)\n\t{\n\t\t%&gt;\n&lt;div style=&quot;padding-top:10px;&quot;&gt;\n&lt;div class=&quot;header_div&quot;&gt;\n&lt;%\n\t\tif(studentObject.count() != 0)\n\t\t{\n\t\t\t%&gt;\n&lt;div style=&quot;padding:15px;width:40%;float:left;&quot; align=&quot;left;&quot;&gt;&lt;font style=&apos;font-size:16px;&apos;&gt;Welcome &lt;%=student_name%&gt;!&lt;\/font&gt;&lt;\/div&gt;\n&lt;%\n\t\t\tif(studentObject.Date_of_Birth.getDay() == zoho.currentdate.getDay() &amp;&amp; studentObject.Date_of_Birth.getMonth() == zoho.currentdate.getMonth())\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div style=&quot;width:12%;padding: 15px;color: rgb(30, 144, 255);float: right;white-space: nowrap;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  HAPPY BIRTHDAY!!!\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/div&gt;&lt;\/div&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\t%&gt;\n&lt;div style=&quot;padding-top:10px;&quot;&gt;\n&lt;div style=&quot;padding:15px;width:40%;float:left;&quot; align=&quot;left;&quot;&gt;&lt;font style=&apos;font-size:16px;&apos;&gt;Welcome &lt;%=zoho.adminuser%&gt;!&lt;\/font&gt;&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t   &lt;div style=&quot;width:12%;padding: 15px;color: rgb(30, 144, 255);float: right;white-space: nowrap;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t   \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt; \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;&lt;\/div&gt;\n&lt;%\n\t\t}\n\t\t\/*Common_time_table*\/\n\t\t%&gt;\n&lt;div class=common_tt_div&gt;\n&lt;%\n\t\tstatus = false;\n\t\t%&gt;\n&lt;table class=&quot;TABLE&quot;&gt;\n&lt;%\n\t\tif(Common_Time_Table[ID != 0].count() != 0)\n\t\t{\n\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td class=&quot;heading&quot; style=&quot;background:radial-gradient(rgb(120,120,120) ,\trgb(80,80,80))&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;center&gt;Dayorder&lt;\/center&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n&lt;%\n\t\t\tall_records = Day_Order_Hour_Slot_Mapping[ID != 0];\n\t\t\trequired_records = Day_Order_Hour_Slot_Mapping[Day_Order == all_records.Day_Order];\n\t\t\tvariable = 1;\n\t\t\tfor each  record in required_records\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;td class=&quot;heading&quot; style=&quot;background:radial-gradient(rgb(120,120,120) ,\trgb(80,80,80))&quot;&gt;&lt;center&gt; Hour&lt;%=variable%&gt;&lt;\/center&gt; &lt;\/td&gt;\n&lt;%\n\t\t\t\tvariable = variable + 1;\n\t\t\t}\n\t\t\trgb_value = 216;\n\t\t\t%&gt;\n&lt;\/tr&gt;\n&lt;%\n\t\t\tfor each  i in Common_Time_Table sort by Day_Order\n\t\t\t{\n\t\t\t\tstatus = true;\n\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t   &lt;th style=&quot;background:rgb(&lt;%=rgb_value%&gt;,&lt;%=rgb_value%&gt;,&lt;%=rgb_value%&gt;)&quot;&gt;&lt;%=i.Day_Order%&gt;&lt;\/th&gt;\n&lt;%\n\t\t\t\tfor each  j in Day_Order_Hour_Slot_Mapping[Day_Order == i.ID] sort by Hour\n\t\t\t\t{\n\t\t\t\t\t%&gt;\n&lt;td&gt;&lt;center&gt;&lt;%=j.Slot.Slot%&gt;&lt;\/center&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t\t%&gt;\n&lt;\/tr&gt;\n&lt;%\n\t\t\t\trgb_value = rgb_value - 16;\n\t\t\t}\n\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td colspan=&quot;&lt;%=variable%&gt;&quot;&gt;&lt;center style=&apos;font-size:14px&apos;&gt;Common Time Table&lt;\/center&gt;&lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t}\n\t\tif(!status)\n\t\t{\n\t\t\t%&gt;\n&lt;tr style=&quot;border-bottom: 1px solid #f2f2f2;&quot;&gt;&lt;td height=&quot;212px&quot; style=&quot;    display: flex;\n\t\t\t\t\t\t\t\t\t\t\t\t    align-items: center;\n\t\t\t\t\t\t\t\t\t\t\t\t    justify-content: center;\n\t\t\t\t\t\t\t\t\t\t\t\t    font-size: 24px;\n\t\t\t\t\t\t\t\t\t\t\t\t  background:#FFFFFF;\n\t\t\t\t\t\t\t\t\t\t\t\t  color:#B8B8B8;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  Common timetable will be displayed here...\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;           &lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td colspan=&quot;&lt;%=variable%&gt;&quot; style=&quot;background:#f2f2f2;&quot;&gt;&lt;center&gt;Common Time Table&lt;\/center&gt;&lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/table&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n&lt;%\n\t\t\/*Common_time_table*\/\n\t\t\/*Quick Links*\/\n\t\t%&gt;\n&lt;div class=&quot;quick_link_div&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t   &lt;div style=&quot;width: 59%;\n\t\t\t\t\t\t\t\t\t\t\t\t    height: 96.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t    float: left;\n\t\t\t\t\t\t\t\t\t\t\t\t    border: 5px solid rgb(224,224,224);\n\t\t\t\t\t\t\t\t\t\t\t\t    &quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;div style=&quot;width:100%;height: 85.5%;&quot;&gt;\n&lt;%\n\t\tsemester = Current_Academic_Year[ID != 0].Current_Semester;\n\t\tif(semester == &quot;Odd&quot;)\n\t\t{\n\t\t\tcondition_variable = 1;\n\t\t}\n\t\telse if(semester == &quot;Even&quot;)\n\t\t{\n\t\t\tcondition_variable = 0;\n\t\t}\n\t\tall_course_records = Studentwise_Course_Details[Registration_Number == studentObject.ID &amp;&amp; Academic_Year == currentAcademicYear &amp;&amp; Semester == studentObject.Semester];\n\t\t%&gt;\n&lt;table class=&quot;quick_link_table2&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t   &lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td &gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  Your Courses\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;ul class=&quot;quick_link_ul&quot;&gt;\n&lt;%\n\t\tfor each  course_record in all_course_records\n\t\t{\n\t\t\tmappingObject_value = Course_and_Faculty_Mapping[Academic_Year == currentAcademicYear &amp;&amp; Course_Code == course_record.Course_Code &amp;&amp; Slot == course_record.Slot &amp;&amp; Faculty_ID == course_record.Faculty_ID];\n\t\t\tif(Add_Semester[ID == course_record.Semester].Semester % 2 == condition_variable)\n\t\t\t{\n\t\t\t\tcourse_name = Course_Details[ID == course_record.Course_Code].Course_Title;\n\t\t\t\tcourse_code = Course_Details[ID == course_record.Course_Code].Course_Code;\n\t\t\t\t%&gt;\n&lt;li&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;%=course_code%&gt;-&lt;%=course_name%&gt;&lt;br&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;a href=&quot;&lt;%=zoho.appuri%&gt;#Page:Student_Attendance_Status?mappingID=&lt;%=mappingObject_value.ID%&gt;&quot; target=&quot;_blank&quot;&gt;View Attendance Status&lt;\/a&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/li&gt;\n&lt;%\n\t\t\t}\n\t\t}\n\t\t%&gt;\n&lt;\/ul&gt; &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;    \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  Faculty Details\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;ul class=&quot;quick_link_ul&quot;&gt;\n&lt;%\n\t\tfor each  course_record in all_course_records\n\t\t{\n\t\t\tmappingObject_value = Course_and_Faculty_Mapping[Academic_Year == currentAcademicYear &amp;&amp; Course_Code == course_record.Course_Code &amp;&amp; Slot == course_record.Slot &amp;&amp; Faculty_ID == course_record.Faculty_ID];\n\t\t\tif(Add_Semester[ID == course_record.Semester].Semester % 2 == condition_variable)\n\t\t\t{\n\t\t\t\tcourse_name = Course_Details[ID == course_record.Course_Code].Course_Title;\n\t\t\t\tfaculty_name = Faculty_Details[ID == course_record.Faculty_ID].Faculty_Name;\n\t\t\t\tFaculty_ID = Faculty_Details[ID == course_record.Faculty_ID].Faculty_ID;\n\t\t\t\t%&gt;\n&lt;li&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;%=course_name%&gt;-&lt;%=faculty_name%&gt;(&lt;%=Faculty_ID%&gt;)\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/li&gt;\n&lt;%\n\t\t\t}\n\t\t}\n\t\t%&gt;\n&lt;\/ul&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;a style=&quot;color:white;&quot; href=&quot;&lt;%=zoho.appuri%&gt;#Form:Student_Course_Registration_Form&quot; target=&quot;blank&quot;&gt;Course Registeration&lt;\/a&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/table&gt;\n&lt;%\n\t\t\/*background_image = Add_Course_Types[(Hidden_Image is not null)].Hidden_Image;\n\t\t\t\t\t\t\t\t\t\t\t\t        image_src_new = background_image.replaceFirst(&quot;\/sharedBy\/appLinkName\/viewLinkName\/fieldName&quot;,&quot;https:\/\/creator.zoho.com&quot; + zoho.appuri + &quot;Course_Types\/Hidden_Image&quot;);\n\t\t\t\t\t\t\t\t\t\t\t\t        image_new = image_src_new.subString(12,138);*\/\n\t\t%&gt;\n&lt;div style=&quot;float:right;width:49%;height:100%;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;div style=&quot;\n\t\t\t\t\t\t\t\t\t\t\t\t              background-image:url(&apos;http:\/\/www.linuxbrigade.com\/wp-content\/uploads\/2013\/07\/email.png&apos;);\n\t\t\t\t\t\t\t\t\t\t\t\t              background-size: 100% 100%;\n\t\t\t\t\t\t\t\t\t\t\t\t              opacity: 0.13;\n\t\t\t\t\t\t\t\t\t\t\t\t              height: 100%;\n\t\t\t\t\t\t\t\t\t\t\t\t              width:100%;\n\t\t\t\t\t\t\t\t\t\t\t\t              &quot;&gt;&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;p style=&quot;position:relative;top: -44%;font-size: 24px;text-align: center;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;a style=&quot;color:#666&quot; href=&quot;&lt;%=zoho.appuri%&gt;#Form:Send_mail_to_officials&quot; target=&quot;blank&quot;&gt;Send Mail to Officials &lt;\/a&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/p&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n&lt;%\n\t\t\/* &lt;div style=&quot;float:right;width:49%;height:100%;background-image:url(&apos;&lt;%=image_new%&gt;&apos;);background-size: 100% 100%;filter:opacity(30%);&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  Send Mail to Officials\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t*\/\n\t\t%&gt;\n&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;div style=&quot;width:100%;height: 14.5%;border-top: 1px solid #D8D8D8;background: #f2f2f2; display:flex;align-items:center;justify-content: center;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;center style=&apos;font-size:14px;&apos;&gt;Quick Links&lt;\/center&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t       &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t   &lt;div class=&quot;notification_div&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;div class=&quot;notification_table_div&quot;&gt;\n&lt;%\n\t\tif(studentObject.count() != 0)\n\t\t{\n\t\t\timage_src = studentObject.Student_Photo.replaceFirst(&quot;\/sharedBy\/appLinkName\/viewLinkName\/fieldName&quot;,zoho.appuri + &quot;Student_Details1\/Student_Photo&quot;);\n\t\t\timage = image_src.replaceFirst(&quot;img&quot;,&quot;img height=100% width=100%&quot;);\n\t\t\t%&gt;\n&lt;%=image%&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\t%&gt;\n&lt;div style=&quot;display: flex; align-items: center;justify-content: center;font-size=24px;color: #B8B8B8;width:100%;height:100%;&quot;&gt;&lt;img src=&quot;https:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/41\/AWS_Simple_Icons_Non-Service_Specific_User.svg&quot; style=&quot;padding-top:11%;width:100%;height:100%;&quot;&gt;&lt;\/div&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/div&gt; \n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;div class=&quot;notification_header_div&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t &lt;a style=&quot;color:#666;font-size:14px;&quot; href=&quot;&lt;%=zoho.appuri%&gt;#Form:Edit_Profile&quot; target=&quot;blank&quot;&gt;Edit Profile&lt;\/a&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t    \n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n&lt;%\n\t\t\/*Quick Links*\/\n\t\t\/*\n\t\t\t\t\t\t\t\t\t\t\t\t*\/\n\t\t%&gt;\n&lt;div class=&quot;chart_div&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;div style=&quot;padding-top: 5.7%;border: 5px solid rgb(224,224,224);animation: float 5s infinite;&quot;&gt;\n&lt;%\n\t\tcourseObj_records = Studentwise_Course_Details[Academic_Year == currentAcademicYear &amp;&amp; Registration_Number == studentObject.ID];\n\t\tbool_variable = true;\n\t\tfor each  courseObj in courseObj_records\n\t\t{\n\t\t\tif(Add_Semester[ID == courseObj.Semester].Semester % 2 == condition_variable)\n\t\t\t{\n\t\t\t\tbool_variable = false;\n\t\t\t}\n\t\t}\n\t\tif(courseObj_records.count() == 0 || bool_variable)\n\t\t{\n\t\t\t%&gt;\n&lt;div style=&quot;display: flex;\n\t\t\t\t\t\t\t\t\t\t\t\t    align-items: center;\n\t\t\t\t\t\t\t\t\t\t\t\t    justify-content: center;\n\t\t\t\t\t\t\t\t\t\t\t\t    font-size: 24px;\n\t\t\t\t\t\t\t\t\t\t\t\t    color: #B8B8B8;\n\t\t\t\t\t\t\t\t\t\t\t\t    height: 250px;&quot;&gt;Attendance Chart will be displayed here...\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\t%&gt;\n&lt;ul class=&quot;chart&quot;&gt;\n&lt;%\n\t\t\tfor each  courseObj in courseObj_records\n\t\t\t{\n\t\t\t\tif(Add_Semester[ID == courseObj.Semester].Semester % 2 == condition_variable)\n\t\t\t\t{\n\t\t\t\t\tbool_variable = false;\n\t\t\t\t\tattendancePercentage = 0.0;\n\t\t\t\t\tNoOfTotalClasses = Attendance[Academic_Year == currentAcademicYear &amp;&amp; Course_Code == courseObj.Course_Code &amp;&amp; Slot == courseObj.Slot &amp;&amp; Faculty_Name == courseObj.Faculty_ID].count().toDecimal();\n\t\t\t\t\tNoOfAttendedClasses = Attendance[Academic_Year == currentAcademicYear &amp;&amp; Course_Code == courseObj.Course_Code &amp;&amp; Slot == courseObj.Slot &amp;&amp; Faculty_Name == courseObj.Faculty_ID &amp;&amp; !Student_Absent_List.contains(studentObject.ID.toString())].count().toDecimal();\n\t\t\t\t\tif(NoOfTotalClasses != 0 &amp;&amp; NoOfAttendedClasses != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tattendancePercentage = (NoOfAttendedClasses \/ NoOfTotalClasses * 100).round(2);\n\t\t\t\t\t}\n\t\t\t\t\t%&gt;\n&lt;li&gt;&lt;span style=&quot;height:&lt;%=attendancePercentage%&gt;%&quot; title=&quot;&lt;%=courseObj.Course_Code.Course_Code%&gt; (&lt;%=attendancePercentage%&gt;%)&quot;&gt;&lt;\/span&gt;&lt;\/li&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/ul&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;div style=&quot;margin-top:8.2%;height:39px;background: #f2f2f2;border-top:1px solid #D8D8D8;display:flex;align-items:center;justify-content: center;font-size:14px;&quot;&gt; Attendance Chart \n\t\t\t\t\t\t\t\t\t\t\t\t    &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n&lt;%\n\t\t\/*Chart*\/\n\t\t\/*Your_time_table*\/\n\t\tcurrectAcademicYear = Current_Academic_Year[ID != 0].Academic_Year;\n\t\t%&gt;\n&lt;div class=upcoming_tt_div&gt;\n&lt;%\n\t\tstatus1 = false;\n\t\t%&gt;\n&lt;table class=&quot;TABLE&quot;     style=&quot;font-size: 15.5px;&quot;&gt;\n&lt;%\n\t\tif(Common_Time_Table[ID != 0].count() &gt; 0)\n\t\t{\n\t\t\tif(Date_Day_Order_Mapping[Date_field &gt;= today &amp;&amp; Academic_Year == currectAcademicYear].count() &gt; 0)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td class=&quot;heading&quot; style=&quot;background:radial-gradient(rgb(120,120,120) ,\trgb(80,80,80))&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;center&gt;Date&lt;\/center&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;&lt;td class=&quot;heading&quot; style=&quot;background:radial-gradient(rgb(120,120,120) ,\trgb(80,80,80))&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;center&gt;Dayorder&lt;\/center&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n&lt;%\n\t\t\t\tall_records = Day_Order_Hour_Slot_Mapping[ID != 0];\n\t\t\t\trequired_records = Day_Order_Hour_Slot_Mapping[Day_Order == all_records.Day_Order];\n\t\t\t\tvariable = 1;\n\t\t\t\tfor each  record in required_records\n\t\t\t\t{\n\t\t\t\t\t%&gt;\n&lt;td class=&quot;heading&quot; style=&quot;background:radial-gradient(rgb(120,120,120),rgb(80,80,80))&quot;&gt; &lt;center&gt;Hour&lt;%=variable%&gt;&lt;\/center&gt; &lt;\/td&gt;\n&lt;%\n\t\t\t\t\tvariable = variable + 1;\n\t\t\t\t}\n\t\t\t\trgb_value = 216;\n\t\t\t\t%&gt;\n&lt;\/tr&gt;\n&lt;%\n\t\t\t\ttimeTableMappingObject = Date_Day_Order_Mapping[Date_field &gt;= today &amp;&amp; Academic_Year == currectAcademicYear] sort by Date_field range from 1 to 5;\n\t\t\t\trgb_value = 216;\n\t\t\t\tfor each  rcrd in timeTableMappingObject\n\t\t\t\t{\n\t\t\t\t\tstatus1 = true;\n\t\t\t\t\t%&gt;\n&lt;tr class=&quot;TR&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td style=&quot;background:rgb(&lt;%=rgb_value%&gt;,&lt;%=rgb_value%&gt;,&lt;%=rgb_value%&gt;);white-space:nowrap;border-right:1px solid #F0F0F0 ;&quot;&gt; &lt;center&gt;&lt;%=rcrd.Date_field%&gt; &lt;\/center&gt;&lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t            &lt;th style=&quot;background:rgb(&lt;%=rgb_value%&gt;,&lt;%=rgb_value%&gt;,&lt;%=rgb_value%&gt;)&quot;&gt; &lt;center&gt;&lt;%=rcrd.Day_Order%&gt;&lt;\/center&gt;&lt;\/th&gt;\n&lt;%\n\t\t\t\t\tif(Day_Order_Hour_Slot_Mapping[Day_Order.Day_Order == rcrd.Day_Order].count() &gt; 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor each  rec in Day_Order_Hour_Slot_Mapping[Day_Order.Day_Order == rcrd.Day_Order] sort by Hour\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmappingObject = Studentwise_Course_Details[Academic_Year == currectAcademicYear &amp;&amp; Slot == rec.Slot &amp;&amp; Registration_Number == studentObject.ID];\n\t\t\t\t\t\t\tif(mappingObject.count() != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t%&gt;\n&lt;td&gt;&lt;center&gt; &lt;%=mappingObject.Course_Code.Course_Code%&gt;&lt;br&gt;(&lt;%=rec.Slot.Slot%&gt;Slot)&lt;\/center&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t%&gt;\n&lt;td&gt;&lt;center&gt;-&lt;br&gt;&lt;br&gt;&lt;\/center&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfor each  record in required_records\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t%&gt;\n&lt;td&gt;&lt;center&gt;-&lt;br&gt;&lt;br&gt;&lt;\/center&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t%&gt;\n&lt;\/tr&gt;\n&lt;%\n\t\t\t\t\trgb_value = rgb_value - 16;\n\t\t\t\t}\n\t\t\t\t%&gt;\n&lt;tr&gt; \n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td colspan=&quot;&lt;%=variable + 1%&gt;&quot;&gt;&lt;center style=&apos;font-size:14px;&apos;&gt;Upcoming Time Table&lt;\/center&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t\t}\n\t\t}\n\t\tif(!status1)\n\t\t{\n\t\t\tvariable = -1;\n\t\t\t%&gt;\n&lt;tr style=&quot;border-bottom: 1px solid #f2f2f2;&quot;&gt;&lt;td height=&quot;313px&quot; style=&quot;display: flex;align-items: center;justify-content: center;font-size: 24px;background:#FFFFFF; color:#B8B8B8;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  Upcoming timetable will be displayed here...\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;      \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td colspan=&quot;&lt;%=variable + 1%&gt;&quot; style=&quot;background:#f2f2f2;&quot;&gt;&lt;center&gt;Upcoming Time Table&lt;\/center&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/table&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;br&gt;&lt;br&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;br&gt;&lt;br&gt;\n&lt;%\n\t\t\/*Your_time_table*\/\n\t}\n\telse\n\t{\n\t\t%&gt;\n&lt;p style=&apos;color:grey&apos;&gt;You don&apos;t have access to this Dashboard. Please contact Admin&lt;\/p&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;\/body&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
		list Student_Course_Registration_Form_Report
		{
			displayName = "Course Registration Details"
			show all rows from Student_Course_Registration_Form    
			(
				Registration_Number as "Registration Number"
				Courses
				Semester
				Academic_Year as "Academic Year"
				Register_Here.Faculty_ID as "Register Here"
				(
					view = Studentwise_Course_Details_Report
				)
			)
			options
			(
				icon = "ui-1-edit-76"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Registration_Number as "Registration Number"
							Courses
							Semester
							Academic_Year as "Academic Year"
							Register_Here.Faculty_ID as "Register Here"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Registration_Number as "Registration Number"
							Courses
							Semester
							Academic_Year as "Academic Year"
							Register_Here.Faculty_ID as "Register Here"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Studentwise_Course_Details_Report
		{
			displayName = "Studentwise Course Details"
			show all rows from Studentwise_Course_Details    
			(
				Registration_Number as "Registration Number"
				Course_Code as "Course Code"
				Faculty_ID as "Faculty ID"
				Faculty_ID.Faculty_Name as "Faculty Name"
				Semester
				Academic_Year as "Academic Year"
				Slot
			)
			options
			(
				icon = "users-2-a-edit"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Registration_Number as "Registration Number"
							Course_Code as "Course Code"
							Faculty_ID as "Faculty ID"
							Faculty_ID.Faculty_Name as "Faculty Name"
							Semester
							Academic_Year as "Academic Year"
							Slot
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Registration_Number as "Registration Number"
							Course_Code as "Course Code"
							Faculty_ID as "Faculty ID"
							Faculty_ID.Faculty_Name as "Faculty Name"
							Semester
							Academic_Year as "Academic Year"
							Slot
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Send_mail_to_officials
		{
			displayname = "Send mail to officials"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			must have To
			(
				type = picklist
				values  = Faculty_Details.ID
    			displayformat = [Faculty_ID + " - " + Faculty_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Subject_field
			(
    			type = text
				displayname = "Subject"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Message
			(
    			type = richtext
				height = 200px
				toolbar = enable
				[
					style, strike-through, indent, font-color, background-color, remove-formatting, alignment, link, table, ruler, bullets-and-numbering, script-text, code, html, quote, 
					font-size : {1, 2, 3, 4, 5, 6, 7},
					font-family : {"Serif", "Arial", "Courier New", "Georgia", "Tahoma", "Times New Roman", "Trebuchet", "Verdana", "Comic Sans Ms"}
				]
	 			row = 1
	 			column = 1   
				width = 382px
			)
	
			customize
			(
				icon = "shopping-newsletter"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Send_mail_to_officials_Report
		{
			displayName = "Sent Mails"
			show all rows from Send_mail_to_officials    
			(
				To
				Subject_field as "Subject"
				Message
			)
			options
			(
				icon = "ui-1-email-83"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							To
							Subject_field as "Subject"
							Message
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							To
							Subject_field as "Subject"
							Message
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Faculty
	{
		icon = "files-user"
				 page Faculty_Dashboard 
	 	 { 
 	 	 displayname = "Dashboard" 

 	 	 icon = "ui-1-dashboard-half" 
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\twebDeviceConfig='{\"layout\":{\"style\":\"padding-right:0px;padding-top:0px;padding-bottom:0px;padding-left:0px;\",\"design\":\"fluid\",\"displayType\":\"plain\"}}'\n\t\t\n\t\t\tmobileDeviceConfig='{\"layout\":{\"design\":\"onebyone\",\"displayType\":\"plain\",\"forcedOrientation\":false}}'\n\t\t\n\t\t\ttabletDeviceConfig='{\"layout\":{\"design\":\"onebyone\",\"displayType\":\"plain\",\"forcedOrientation\":false}}'\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Faculty_Dashboard1'>\n\t<![CDATA[htmlpage Faculty_Dashboard1()\ncontent\n&lt;%{\n\t%&gt;\n&lt;style&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  .header_div\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-top:10px;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-right:1%;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-left:1%;\n\t\t\t\t\t\t\t\t\t\t\t\t  width:98%;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:50px;\n\t\t\t\t\t\t\t\t\t\t\t\t  background:lightgrey;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \/*Table styles*\/\n\t\t\t\t\t\t\t\t\t\t\t\t   .TABLE\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  border: 5px solid rgb(224,224,224);\n\t\t\t\t\t\t\t\t\t\t\t\t  border-collapse:collapse;\n\t\t\t\t\t\t\t\t\t\t\t\t  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);\n\t\t\t\t\t\t\t\t\t\t\t\t  animation: float 5s infinite;\n\t\t\t\t\t\t\t\t\t\t\t\t  width:100%;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:100%;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .TABLE td, th\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:1px solid #D8D8D8;\n\t\t\t\t\t\t\t\t\t\t\t\t  padding:10px;\n\t\t\t\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t\t\t\t   .heading\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  color:white;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t  .TABLE tr:nth-child(odd)\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  background-color: #f2f2f2;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .TABLE tr:hover\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  background:#585858;\n\t\t\t\t\t\t\t\t\t\t\t\t  color:#FFFFFF;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-top: 1px solid #22262e;\n\t\t\t\t\t\t\t\t\t\t\t\t   border-bottom: 1px solid #22262e;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .TABLE tr:last-child:hover{\n\t\t\t\t\t\t\t\t\t\t\t\t  background: #f2f2f2;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:1px solid #D8D8D8;\n\t\t\t\t\t\t\t\t\t\t\t\t  color:#666;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t   \/*Table styles*\/\n\t\t\t\t\t\t\t\t\t\t\t\t  .common_tt_div\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  width:42.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:282px;\n\t\t\t\t\t\t\t\t\t\t\t\t  float:left;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-left:1.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-top:20px;\n\t\t\t\t\t\t\t\t\t\t\t\t  overflow: auto;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_div{\n\t\t\t\t\t\t\t\t\t\t\t\t  float:right;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-top:20px;\n\t\t\t\t\t\t\t\t\t\t\t\t  width:53%;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-right:1.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:282px;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .upcoming_tt_div{\n\t\t\t\t\t\t\t\t\t\t\t\t   width:53%;\n\t\t\t\t\t\t\t\t\t\t\t\t  float:right;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-right:1.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-top:15px;\n\t\t\t\t\t\t\t\t\t\t\t\t  overflow: auto;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .chart_div\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  margin-left:1.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t  margin-top:15px;\n\t\t\t\t\t\t\t\t\t\t\t\t  width:42.4%;\n\t\t\t\t\t\t\t\t\t\t\t\t  float:left;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:375px;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \/*Barchart styles*\/\n\t\t\t\t\t\t\t\t\t\t\t\t  body {  font: 13px\/1.3 &apos;Lucida Grande&apos;,sans-serif;  color: #666;}\n\t\t\t\t\t\t\t\t\t\t\t\t  .chart {  display: table;  table-layout: fixed;  width: 92%;  max-width: 92%;  height: 250px;  margin: 0 auto;  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.1) 2%, rgba(0, 0, 0, 0) 2%);  background-size: 100% 50px;  background-position: op;}\n\t\t\t\t\t\t\t\t\t\t\t\t  .chart li {  position: relative;  display: table-cell;  vertical-align: bottom;  height: 200px;}\n\t\t\t\t\t\t\t\t\t\t\t\t  .chart span {  margin: 0 1em;  display: block;  background: rgba(209, 236, 250, 0.75);  animation: draw 1s ease-in-out;}\n\t\t\t\t\t\t\t\t\t\t\t\t  .chart span:before {  position: absolute;  left: 0;  right: 0;  top: 100%;  padding: 5px 1em 0; display: block;  text-align: center;  content: attr(title);  word-wrap: break-word;}@keyframes draw {  0% {    height: 0;  }}\n\t\t\t\t\t\t\t\t\t\t\t\t  \/*Barchart styles*\/\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table1 {\n\t\t\t\t\t\t\t\t\t\t\t\t  border-collapse:collapse;\n\t\t\t\t\t\t\t\t\t\t\t\t  width:51%;\n\t\t\t\t\t\t\t\t\t\t\t\t  float:left;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:100%;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table2\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  border-collapse:collapse;\n\t\t\t\t\t\t\t\t\t\t\t\t  float:right;\n\t\t\t\t\t\t\t\t\t\t\t\t  width:49%;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:100%;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table1  td{\n\t\t\t\t\t\t\t\t\t\t\t\t  text-align:center;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:1px solid #D8D8D8;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-top:1px solid #D8D8D8;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table1  tr:first-child td{\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table1  tr:last-child td{\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:none;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table1  td a\n\t\t\t\t\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\t\t\t  color: #666;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t   .quick_link_table1  td:hover{\n\t\t\t\t\t\t\t\t\t\t\t\t  text-decoration: underline;\n\t\t\t\t\t\t\t\t\t\t\t\t  font-weight:bold;  \n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t   .quick_link_table2  td{\n\t\t\t\t\t\t\t\t\t\t\t\t  background:#B7B7B7;\n\t\t\t\t\t\t\t\t\t\t\t\t  text-align:center;\n\t\t\t\t\t\t\t\t\t\t\t\t  color:white;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:1px solid white;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-right: 1px solid #A0A0A0;\n\t\t\t\t\t\t\t\t\t\t\t\t    border-left: 1px solid #A0A0A0;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table2  tr:last-child td{\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:none;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table2  tr:last-child td:hover{\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:2px solid #6d6d6d;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  .quick_link_table2  td:hover{\n\t\t\t\t\t\t\t\t\t\t\t\tbackground: #909090 ;\n\t\t\t\t\t\t\t\t\t\t\t\t      color: #f7f7f7;\n\t\t\t\t\t\t\t\t\t\t\t\t    border-top: 2px solid #6d6d6d;\n\t\t\t\t\t\t\t\t\t\t\t\t    border-bottom: 2px solid #6d6d6d;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t.quick_link_table2  td:hover ul{\n\t\t\t\t\t\t\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t.quick_link_ul \n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tbackground:#F0F0F0 ;\n\t\t\t\t\t\t\t\t\t\t\t\t  border:1px solid #999;\n\t\t\t\t\t\t\t\t\t\t\t\t  color:#666;\n\t\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\t margin-left:50px;\n\t\t\t\t\t\t\t\t\t\t\t\t  padding-left:0px;\n\t\t\t\t\t\t\t\t\t\t\t\t  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1); \n\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\tdisplay: none;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t.quick_link_ul li{\n\t\t\t\t\t\t\t\t\t\t\t\t  width:176px;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:33px;\n\t\t\t\t\t\t\t\t\t\t\t\t  padding-top:10px;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-bottom:1px solid #D8D8D8;\n\t\t\t\t\t\t\t\t\t\t\t\tdisplay: block; \n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t.quick_link_ul li a{\n\t\t\t\t\t\t\t\t\t\t\t\t  color:#888888;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  .notification_div{\n\t\t\t\t\t\t\t\t\t\t\t\t  width: 36%;float:right;height:96.5%;border: 5px solid rgb(224,224,224);\n\t\t\t\t\t\t\t\t\t\t\t\t  position:relative;\n\t\t\t\t\t\t\t\t\t\t\t\t      font-size: 14px;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  .notification_table_div{\n\t\t\t\t\t\t\t\t\t\t\t\t  width:100%;\n\t\t\t\t\t\t\t\t\t\t\t\t  max-height:85.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t  display:flex;\n\t\t\t\t\t\t\t\t\t\t\t\t  align-items:center;\n\t\t\t\t\t\t\t\t\t\t\t\t  justify-content:center;\n\t\t\t\t\t\t\t\t\t\t\t\t  overflow: auto;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .notification_table{\n\t\t\t\t\t\t\t\t\t\t\t\t  width:100%;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  .notification_table td{\n\t\t\t\t\t\t\t\t\t\t\t\t    border-bottom: 1px solid #D0D0D0;\n\t\t\t\t\t\t\t\t\t\t\t\t    padding: 10px;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t .notification_header_div {\n\t\t\t\t\t\t\t\t\t\t\t\t  width:100%;\n\t\t\t\t\t\t\t\t\t\t\t\t  height:14.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  position:absolute;\n\t\t\t\t\t\t\t\t\t\t\t\t  bottom:0;\n\t\t\t\t\t\t\t\t\t\t\t\t  border-top: 1px solid #D8D8D8;\n\t\t\t\t\t\t\t\t\t\t\t\t    text-align: center;\n\t\t\t\t\t\t\t\t\t\t\t\t  display:flex;\n\t\t\t\t\t\t\t\t\t\t\t\t  align-items:center;\n\t\t\t\t\t\t\t\t\t\t\t\t    justify-content: center;\n\t\t\t\t\t\t\t\t\t\t\t\t  background: #f2f2f2;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .notification_table a{\n\t\t\t\t\t\t\t\t\t\t\t\t  color: #666;\n\t\t\t\t\t\t\t\t\t\t\t\t    font-weight: bold;\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  .notification_table a:hover{\n\t\t\t\t\t\t\t\t\t\t\t\t    text-decoration: underline;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/style&gt;\n&lt;%\n\tfacultyObject = Faculty_Details[Official_Email == zoho.loginuserid];\n\tfaculty_name = Faculty_Details[Official_Email == zoho.loginuserid].Faculty_Name;\n\t%&gt;\n&lt;body&gt;\n&lt;%\n\tif(zoho.loginuserid == zoho.adminuserid || facultyObject.count() != 0)\n\t{\n\t\t%&gt;\n&lt;div class=&quot;header_div&quot;&gt;\n&lt;%\n\t\tif(facultyObject.count() != 0)\n\t\t{\n\t\t\t%&gt;\n&lt;div style=&quot;padding:15px;width:40%;float:left;&quot; align=&quot;left;&quot;&gt;&lt;font style=&apos;font-size:16px;&apos; &gt;Welcome &lt;%=faculty_name%&gt;&lt;\/font&gt;&lt;\/div&gt;\n&lt;%\n\t\t\tif(facultyObject.Date_of_Birth.getDay() == zoho.currentdate.getDay() &amp;&amp; facultyObject.Date_of_Birth.getMonth() == zoho.currentdate.getMonth())\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;div style=&quot;width:12%;padding: 15px;color: rgb(30, 144, 255);float: right;white-space: nowrap;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  HAPPY BIRTHDAY!!!\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/div&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\t%&gt;\n&lt;div style=&quot;padding:15px;width:40%;float:left;&quot; align=&quot;left;&quot;&gt;&lt;font style=&apos;font-size:16px;&apos;&gt;Welcome &lt;%=zoho.adminuser%&gt;&lt;\/font&gt;&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t             &lt;div style=&quot;width:12%;padding: 15px;color: rgb(30, 144, 255);float: right;white-space: nowrap;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;         &lt;\/div&gt;\n&lt;%\n\t\t}\n\t\t\/*Common_time_table*\/\n\t\t%&gt;\n&lt;div class=common_tt_div&gt;\n&lt;%\n\t\tstatus = false;\n\t\t%&gt;\n&lt;table class=&quot;TABLE&quot;&gt;\n&lt;%\n\t\tif(Common_Time_Table[ID != 0].count() != 0)\n\t\t{\n\t\t\t%&gt;\n&lt;tr &gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td class=&quot;heading&quot; style=&quot;background:radial-gradient(rgb(120,120,120) ,\trgb(80,80,80))&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;center&gt;Dayoder&lt;\/center&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n&lt;%\n\t\t\tall_records = Day_Order_Hour_Slot_Mapping[ID != 0];\n\t\t\trequired_records = Day_Order_Hour_Slot_Mapping[Day_Order == all_records.Day_Order];\n\t\t\tvariable = 1;\n\t\t\tfor each  record in required_records\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;td class=&quot;heading&quot; style=&quot;background:radial-gradient(rgb(120,120,120) ,\trgb(80,80,80))&quot;&gt;&lt;center&gt; Hour&lt;%=variable%&gt;&lt;\/center&gt; \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n&lt;%\n\t\t\t\tvariable = variable + 1;\n\t\t\t}\n\t\t\trgb_value = 216;\n\t\t\t%&gt;\n&lt;\/tr&gt;\n&lt;%\n\t\t\tfor each  i in Common_Time_Table sort by Day_Order\n\t\t\t{\n\t\t\t\tstatus = true;\n\t\t\t\t%&gt;\n&lt;tr &gt;\n\t\t\t\t\t\t\t\t\t\t\t\t   &lt;th style=&quot;background:rgb(&lt;%=rgb_value%&gt;,&lt;%=rgb_value%&gt;,&lt;%=rgb_value%&gt;)&quot;&gt;&lt;%=i.Day_Order%&gt;&lt;\/th&gt;\n&lt;%\n\t\t\t\tfor each  j in Day_Order_Hour_Slot_Mapping[Day_Order == i.ID] sort by Hour\n\t\t\t\t{\n\t\t\t\t\t%&gt;\n&lt;td&gt;&lt;center&gt;&lt;%=j.Slot.Slot%&gt;&lt;\/center&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t\t%&gt;\n&lt;\/tr&gt;\n&lt;%\n\t\t\t\trgb_value = rgb_value - 16;\n\t\t\t}\n\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td colspan=&quot;&lt;%=variable%&gt;&quot;&gt;&lt;center style=&apos;font-size:14px;&apos;&gt;Common Time Table&lt;\/center&gt;&lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t}\n\t\tif(!status)\n\t\t{\n\t\t\t%&gt;\n&lt;tr style=&quot;border-bottom: 1px solid #f2f2f2;&quot;&gt;&lt;td height=&quot;212px&quot; style=&quot;    display: flex;\n\t\t\t\t\t\t\t\t\t\t\t\t    align-items: center;\n\t\t\t\t\t\t\t\t\t\t\t\t    justify-content: center;\n\t\t\t\t\t\t\t\t\t\t\t\t    font-size: 24px;\n\t\t\t\t\t\t\t\t\t\t\t\t  background:#FFFFFF;\n\t\t\t\t\t\t\t\t\t\t\t\t  color:#B8B8B8;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  Common timetable will be displayed here...\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;           &lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td colspan=&quot;&lt;%=variable%&gt;&quot; style=&quot;background:#f2f2f2;&quot;&gt;&lt;center&gt;Common Time Table&lt;\/center&gt;&lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/table&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n&lt;%\n\t\t\/*Common_time_table*\/\n\t\t\/*Quick Links*\/\n\t\t%&gt;\n&lt;div class=&quot;quick_link_div&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t   &lt;div style=&quot;width: 59%;\n\t\t\t\t\t\t\t\t\t\t\t\t    height: 96.5%;\n\t\t\t\t\t\t\t\t\t\t\t\t    float: left;\n\t\t\t\t\t\t\t\t\t\t\t\t    border: 5px solid rgb(224,224,224);\n\t\t\t\t\t\t\t\t\t\t\t\t    &quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t   &lt;div style=&quot;width:100%;height: 85.5%;font-size:14px;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;table class=&quot;quick_link_table1&quot; &gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t   &lt;a href=&quot;&lt;%=zoho.appuri%&gt;#Form:Attendance&quot; target=&quot;_blank&quot;&gt;  Fill Attendance&lt;\/a&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t   &lt;a href=&quot;&lt;%=zoho.appuri%&gt;#Form:Send_Mail_to_your_Students&quot; target=&quot;_blank&quot;&gt;Send Mail to Students&lt;\/a&gt; \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t   &lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t     &lt;a href=&quot;&lt;%=zoho.appuri%&gt;#View:Personalized_Academic_Time_Table&quot; target=&quot;_blank&quot;&gt;Personalized Academic&lt;br&gt; Time Table&lt;\/a&gt; \n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\tif(facultyObject.Designation.Allow_to_Allocate_Courses)\n\t\t{\n\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t     &lt;a href=&quot;&lt;%=zoho.appuri%&gt;#Form:Course_Allocation&quot; target=&quot;_blank&quot;&gt;Course Allocation&lt;\/a&gt; \n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/table&gt;\n&lt;%\n\t\tsemester = Current_Academic_Year[ID != 0].Current_Semester;\n\t\tif(semester == &quot;Odd&quot;)\n\t\t{\n\t\t\tcondition_variable = 1;\n\t\t}\n\t\telse if(semester == &quot;Even&quot;)\n\t\t{\n\t\t\tcondition_variable = 0;\n\t\t}\n\t\tall_course_records = Course_and_Faculty_Mapping[Faculty_ID == facultyObject.ID &amp;&amp; Academic_Year == Current_Academic_Year[ID != 0].Academic_Year];\n\t\t%&gt;\n&lt;table class=&quot;quick_link_table2&quot;&gt;\n&lt;%\n\t\tbool_var = true;\n\t\tfor each  course_record in all_course_records\n\t\t{\n\t\t\tif(Add_Semester[ID == course_record.Semester].Semester % 2 == condition_variable)\n\t\t\t{\n\t\t\t\tbool_var = false;\n\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td &gt;\n&lt;%\n\t\t\t\tcourse_name = Course_Details[ID == course_record.Course_Code].Course_Title;\n\t\t\t\t%&gt;\n&lt;%=course_name%&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;ul class=&quot;quick_link_ul&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;li&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;a href=&quot;&lt;%=zoho.appuri%&gt;#Page:Faculty_Attendance_Status?courseID=&lt;%=course_record.Course_Code%&gt;&amp;slotID=&lt;%=course_record.Slot%&gt;&amp;facultyID=&lt;%=facultyObject.ID%&gt;&quot; target=&quot;_blank&quot;&gt;Attendance Status&lt;\/a&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/li&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;li&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t &lt;a href=&quot;&lt;%=zoho.appuri%&gt;#Page:Course_wise_Students_List?courseID=&lt;%=course_record.Course_Code%&gt;&quot; target=&quot;_blank&quot;&gt; Students List&lt;\/a&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/li&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/ul&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t\t}\n\t\t}\n\t\tif(all_course_records.count() == 0 || bool_var)\n\t\t{\n\t\t\t%&gt;\n&lt;td&gt;Your Courses will be displayed here...\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/table&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;div style=&quot;width:100%;height: 14.5%;border-top: 1px solid #D8D8D8;background: #f2f2f2; display:flex;align-items:center;justify-content: center;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;center style=&apos;font-size:14px;&apos;&gt;Quick Links&lt;\/center&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t       &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t   &lt;div class=&quot;notification_div&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;div class=&quot;notification_table_div&quot;&gt;\n&lt;%\n\t\tcurrentYearInRec = Current_Academic_Year[ID != 0];\n\t\tcourseObj_records = Course_and_Faculty_Mapping[Academic_Year == currentYearInRec.Academic_Year &amp;&amp; Faculty_ID == facultyObject.ID];\n\t\tall_event_records = Add_Events[Start_Date == zoho.currentdate.addDay(1) || Start_Date == zoho.currentdate || End_Date == zoho.currentdate || (Start_Date &lt; zoho.currentdate &amp;&amp; End_Date &gt; zoho.currentdate)];\n\t\tl = List:String();\n\t\tfor each  day in Date_Day_Order_Mapping[Academic_Year == currentYearInRec.Academic_Year &amp;&amp; Date_field &lt;= today]\n\t\t{\n\t\t\tif(day.Date_field &gt;= currentYearInRec.Modified_Time)\n\t\t\t{\n\t\t\t\tfor each  courseObj in courseObj_records\n\t\t\t\t{\n\t\t\t\t\tif(Day_Order_Hour_Slot_Mapping[Day_Order.Day_Order == day.Day_Order &amp;&amp; Slot == courseObj.Slot].count() != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(Attendance[Date_of_Attendance == day.Date_field &amp;&amp; Academic_Year == currentYearInRec.Academic_Year &amp;&amp; Faculty_Name.Official_Email == zoho.loginuserid &amp;&amp; Course_Code == courseObj.Course_Code &amp;&amp; Slot == courseObj.Slot].count() == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tl.add(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(all_event_records.count() != 0 || l.contains(1))\n\t\t{\n\t\t\t%&gt;\n&lt;table class=&quot;notification_table&quot;&gt;\n&lt;%\n\t\t\tfor each  event_record in all_event_records\n\t\t\t{\n\t\t\t\tif(event_record.Organizer_s.contains(facultyObject.ID))\n\t\t\t\t{\n\t\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t                                      &lt;td&gt;\n&lt;%\n\t\t\t\t\tif(event_record.Start_Date == zoho.currentdate.addDay(1))\n\t\t\t\t\t{\n\t\t\t\t\t\t%&gt;\nYou have an event-&lt;a href=&quot;&lt;%=zoho.appuri%&gt;#View:Event_Management_Report?Event_Name=&lt;%=event_record.Event_Name%&gt;&quot; target=&quot;_blank&quot; &gt;&lt;%=event_record.Event_Name%&gt; &lt;\/a&gt; on &lt;%=event_record.Start_Date%&gt;.\n&lt;%\n\t\t\t\t\t}\n\t\t\t\t\telse if(event_record.Start_Date == zoho.currentdate || event_record.End_Date == zoho.currentdate || event_record.Start_Date &lt; zoho.currentdate &amp;&amp; event_record.End_Date &gt; zoho.currentdate)\n\t\t\t\t\t{\n\t\t\t\t\t\t%&gt;\nYou have an event-&lt;a href=&quot;&lt;%=zoho.appuri%&gt;#View:Event_Management_Report?Event_Name=&lt;%=event_record.Event_Name%&gt;&quot; target=&quot;_blank&quot; &gt;&lt;%=event_record.Event_Name%&gt; &lt;\/a&gt; today.\n&lt;%\n\t\t\t\t\t}\n\t\t\t\t\t%&gt;\n&lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(l.contains(1))\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  You haven&apos;t updated the Attendance.\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/table&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\t%&gt;\n&lt;font style=&quot;color:rgb(200,200,200);font-weight: bold;text-align:center;padding-top: 40%;&quot;&gt; No Notifications found!!!\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/font&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;div class=&quot;notification_header_div&quot; style=&apos;font-size:14px;&apos;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  Notifications\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n&lt;%\n\t\t\/*Quick Links*\/\n\t\t\/*Chart*\/\n\t\t%&gt;\n&lt;div class=&quot;chart_div&quot;&gt;\n&lt;%\n\t\tcurrentAcademicYear = Current_Academic_Year[ID != 0].Academic_Year;\n\t\t%&gt;\n&lt;div style=&quot;padding-top: 5.7%;border: 5px solid rgb(224,224,224);animation: float 5s infinite;&quot;&gt;\n&lt;%\n\t\tcount = 0;\n\t\tcourseObj_records = Course_and_Faculty_Mapping[Academic_Year == currentAcademicYear &amp;&amp; Faculty_ID == facultyObject.ID];\n\t\tbool_variable = true;\n\t\tfor each  courseObj in courseObj_records\n\t\t{\n\t\t\tif(Add_Semester[ID == courseObj.Semester].Semester % 2 == condition_variable)\n\t\t\t{\n\t\t\t\tbool_variable = false;\n\t\t\t}\n\t\t}\n\t\tif(courseObj_records.count() == 0 || bool_variable)\n\t\t{\n\t\t\t%&gt;\n&lt;div style=&quot;display: flex;\n\t\t\t\t\t\t\t\t\t\t\t\t    align-items: center;\n\t\t\t\t\t\t\t\t\t\t\t\t    justify-content: center;\n\t\t\t\t\t\t\t\t\t\t\t\t    font-size: 24px;\n\t\t\t\t\t\t\t\t\t\t\t\t    color: #B8B8B8;\n\t\t\t\t\t\t\t\t\t\t\t\t    height:250px;&quot;&gt;Attendance Chart will be displayed here...\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n&lt;%\n\t\t}\n\t\telse\n\t\t{\n\t\t\t%&gt;\n&lt;ul class=&quot;chart&quot;&gt;\n&lt;%\n\t\t\tfor each  courseObj in courseObj_records\n\t\t\t{\n\t\t\t\tif(Add_Semester[ID == courseObj.Semester].Semester % 2 == condition_variable)\n\t\t\t\t{\n\t\t\t\t\tbool_variable = false;\n\t\t\t\t\tnoOfStudents = Studentwise_Course_Details[Academic_Year == currentAcademicYear &amp;&amp; Course_Code == courseObj.Course_Code &amp;&amp; Faculty_ID == courseObj.Faculty_ID &amp;&amp; Slot == courseObj.Slot].count();\n\t\t\t\t\tattendancePercentage = 0.0;\n\t\t\t\t\tattendanceObject = Attendance[Academic_Year == currentAcademicYear &amp;&amp; Course_Code == courseObj.Course_Code &amp;&amp; Slot == courseObj.Slot &amp;&amp; Faculty_Name == courseObj.Faculty_ID];\n\t\t\t\t\tNoOfTotalStudents = (attendanceObject.count() * noOfStudents).toDecimal();\n\t\t\t\t\tNoOfAttendedStudents = (NoOfTotalStudents - (attendanceObject.Absent_Students_List_Admin.getall()).size()).toDecimal();\n\t\t\t\t\tif(NoOfTotalStudents != 0 &amp;&amp; NoOfAttendedStudents != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tattendancePercentage = (NoOfAttendedStudents \/ NoOfTotalStudents * 100).round(2);\n\t\t\t\t\t}\n\t\t\t\t\t%&gt;\n&lt;li&gt;&lt;span style=&apos;height:&lt;%=attendancePercentage%&gt;%&apos; title=&apos;&lt;%=courseObj.Course_Code.Course_Code%&gt; (&lt;%=attendancePercentage%&gt;%)&apos;&gt;&lt;\/span&gt;&lt;\/li&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t}\n\t\t\t%&gt;\n&lt;\/ul&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;div style=&quot;margin-top:8.2%;height:39px;background: #f2f2f2;border-top:1px solid #D8D8D8;display:flex;align-items:center;justify-content: center;font-size:14px;&quot;&gt; Attendance Chart \n\t\t\t\t\t\t\t\t\t\t\t\t    &lt;\/div&gt; &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n&lt;%\n\t\t\/*Chart*\/\n\t\t\/*Your_time_table*\/\n\t\tcurrectAcademicYear = Current_Academic_Year[ID != 0].Academic_Year;\n\t\t%&gt;\n&lt;div class=upcoming_tt_div&gt;\n&lt;%\n\t\tstatus1 = false;\n\t\t%&gt;\n&lt;table class=&quot;TABLE&quot;     style=&quot;font-size: 15.5px;&quot;&gt;\n&lt;%\n\t\tif(Common_Time_Table[ID != 0].count() &gt; 0)\n\t\t{\n\t\t\tif(Date_Day_Order_Mapping[Date_field &gt;= today &amp;&amp; Academic_Year == currectAcademicYear].count() &gt; 0)\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;tr class=&quot;TR&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td class=&quot;heading&quot; style=&quot;background:radial-gradient(rgb(120,120,120) ,\trgb(80,80,80))&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;center&gt;Date&lt;\/center&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;&lt;td class=&quot;heading&quot; style=&quot;background:radial-gradient(rgb(120,120,120) ,\trgb(80,80,80))&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;center&gt;Dayoder&lt;\/center&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n&lt;%\n\t\t\t\tall_records = Day_Order_Hour_Slot_Mapping[ID != 0];\n\t\t\t\trequired_records = Day_Order_Hour_Slot_Mapping[Day_Order == all_records.Day_Order];\n\t\t\t\tvariable = 1;\n\t\t\t\tfor each  record in required_records\n\t\t\t\t{\n\t\t\t\t\t%&gt;\n&lt;td class=&quot;heading&quot; style=&quot;background:radial-gradient(rgb(120,120,120),rgb(80,80,80))&quot;&gt; &lt;center&gt;Hour&lt;%=variable%&gt;&lt;\/center&gt; &lt;\/td&gt;\n&lt;%\n\t\t\t\t\tvariable = variable + 1;\n\t\t\t\t}\n\t\t\t\trgb_value = 216;\n\t\t\t\t%&gt;\n&lt;\/tr&gt;\n&lt;%\n\t\t\t\ttimeTableMappingObject = Date_Day_Order_Mapping[Date_field &gt;= today &amp;&amp; Academic_Year == currectAcademicYear] sort by Date_field range from 1 to 5;\n\t\t\t\trgb_value = 216;\n\t\t\t\tfor each  rcrd in timeTableMappingObject\n\t\t\t\t{\n\t\t\t\t\tstatus1 = true;\n\t\t\t\t\t%&gt;\n&lt;tr class=&quot;TR&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td style=&quot;background:rgb(&lt;%=rgb_value%&gt;,&lt;%=rgb_value%&gt;,&lt;%=rgb_value%&gt;);white-space:nowrap;border-right:1px solid #F0F0F0 ;&quot;&gt; &lt;center&gt;&lt;%=rcrd.Date_field%&gt; &lt;\/center&gt;&lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t            &lt;th style=&quot;background:rgb(&lt;%=rgb_value%&gt;,&lt;%=rgb_value%&gt;,&lt;%=rgb_value%&gt;)&quot;&gt; &lt;center&gt;&lt;%=rcrd.Day_Order%&gt;&lt;\/center&gt;&lt;\/th&gt;\n&lt;%\n\t\t\t\t\tif(Day_Order_Hour_Slot_Mapping[Day_Order.Day_Order == rcrd.Day_Order].count() &gt; 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor each  rec in Day_Order_Hour_Slot_Mapping[Day_Order.Day_Order == rcrd.Day_Order] sort by Hour\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmappingObject = Course_and_Faculty_Mapping[Academic_Year == currectAcademicYear &amp;&amp; Slot == rec.Slot &amp;&amp; Faculty_ID == facultyObject.ID];\n\t\t\t\t\t\t\tif(mappingObject.count() != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t%&gt;\n&lt;td&gt;&lt;center&gt; &lt;%=mappingObject.Course_Code.Course_Code%&gt;&lt;br&gt;(&lt;%=rec.Slot.Slot%&gt;Slot)&lt;\/center&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t%&gt;\n&lt;td&gt;&lt;center&gt;-&lt;br&gt;&lt;br&gt;&lt;\/center&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfor each  record in required_records\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t%&gt;\n&lt;td&gt;&lt;center&gt;-&lt;br&gt;&lt;br&gt;&lt;\/center&gt;&lt;\/td&gt;\n&lt;%\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t%&gt;\n&lt;\/tr&gt;\n&lt;%\n\t\t\t\t\trgb_value = rgb_value - 16;\n\t\t\t\t}\n\t\t\t\t%&gt;\n&lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td colspan=&quot;&lt;%=variable + 1%&gt;&quot;&gt;&lt;center style=&apos;font-size:14px;&apos;&gt;Upcoming Time Table&lt;\/center&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t\t}\n\t\t}\n\t\tif(!status1)\n\t\t{\n\t\t\tvariable = -1;\n\t\t\t%&gt;\n&lt;tr style=&quot;border-bottom: 1px solid #f2f2f2;&quot;&gt;&lt;td height=&quot;313px&quot; style=&quot;display: flex;align-items: center;justify-content: center;font-size: 24px;background:#FFFFFF; color:#B8B8B8;&quot;&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  Upcoming timetable will be displayed here...\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;      \n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;tr&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;td colspan=&quot;&lt;%=variable + 1%&gt;&quot; style=&quot;background:#f2f2f2;&quot;&gt;&lt;center&gt;Upcoming Time Table&lt;\/center&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/td&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/tr&gt;\n&lt;%\n\t\t}\n\t\t%&gt;\n&lt;\/table&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;\/div&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;br&gt;&lt;br&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t  &lt;br&gt;&lt;br&gt;\n&lt;%\n\t\t\/*Your_time_table*\/\n\t}\n\telse\n\t{\n\t\t%&gt;\n&lt;p style=&apos;color:grey&apos;&gt;You don&apos;t have access to this Dashboard. Please contact Admin&lt;\/p&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;\/body&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page Personalized_Academic_Time_Table 
	 	 { 
 	 	 displayname = "Personalized Academic Time Table" 

 	 	 icon = "ui-1-calendar-check-62" 
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Personalized_Academic_Time_Table1'>\n\t<![CDATA[htmlpage Personalized_Academic_Time_Table1()\ncontent\n&lt;%{\n\tfaculty_Object = Faculty_Details[Official_Email == zoho.loginuserid];\n\tif(faculty_Object.count() == 1)\n\t{\n\t\t%&gt;\n&lt;%=thisapp.css.getStyleLibrary()%&gt;\n\t\t\t\t\t\t\t&lt;div id=&apos;mainDiv&apos;align=&quot;center&quot;&gt;\n\t\t\t\t\t\t  &lt;font color=&apos;green&apos;&gt;&lt;strong&gt;Welcome &lt;%=faculty_Object.Faculty_Name%&gt;&lt;\/strong&gt;&lt;\/font&gt;\n\t\t\t\t\t\t  &lt;br&gt;&lt;br&gt;&lt;br&gt;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  &lt;%=thisapp.faculty.getPersonalizedTimeTable(faculty_Object,&quot;full&quot;)%&gt;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  &lt;br&gt;&lt;br&gt;\n&lt;%\n\t}\n\telse if(zoho.loginuserid == zoho.adminuserid)\n\t{\n\t\t%&gt;\n&lt;p style=&quot;color:grey&quot;&gt;&lt;center&gt;Sorry...Personalized Timetable will be generated only for Faculty members.&lt;\/center&gt;&lt;\/p&gt;\n&lt;%\n\t}\n\telse\n\t{\n\t\t%&gt;\n&lt;p style=&apos;color:red&apos;&gt;&lt;center&gt;You Don&apos;t have permission to access this Time Table&lt;\/center&gt;&lt;\/p&gt;\n&lt;%\n\t}\n\t%&gt;\n&lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
		list Attendance_Report
		{
			displayName = "Students Attendance Report"
			show all rows from Attendance    
			(
				ID
				Faculty_Name as "Faculty Name"
				Course_Code as "Course Code"
				Date_of_Attendance as "Date of Attendance"
				Select_Absent_Students as "Absent Students"
				Absent_Students_List_Admin as "Absent Students List Admin"
				(
					view = Student_Details1
				)
				Academic_Year as "Academic Year"
				Topic_Covered as "Topic Covered"
				Slot
				Student_Absent_List as "Student Absent List"
			)
			group by
			(
				Date_of_Attendance ascending
			)
			options
			(
				icon = "ui-1-calendar-grid-58"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							ID
							Faculty_Name as "Faculty Name"
							Course_Code as "Course Code"
							Date_of_Attendance as "Date of Attendance"
							Select_Absent_Students as "Absent Students"
							Absent_Students_List_Admin as "Absent Students List Admin"
							Academic_Year as "Academic Year"
							Topic_Covered as "Topic Covered"
							Slot
							Student_Absent_List as "Student Absent List"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							ID
							Faculty_Name as "Faculty Name"
							Course_Code as "Course Code"
							Date_of_Attendance as "Date of Attendance"
							Select_Absent_Students as "Absent Students"
							Absent_Students_List_Admin as "Absent Students List Admin"
							Academic_Year as "Academic Year"
							Topic_Covered as "Topic Covered"
							Slot
							Student_Absent_List as "Student Absent List"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Send_Mail_to_your_Students
		{
			displayname = "Send Mail to your Students"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			must have Faculty_ID
			(
				type = picklist
				displayname = "Faculty ID"
				values  = Faculty_Details.ID
    			displayformat = [Faculty_ID + " - " + Faculty_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Semester
			(
				type = picklist
				values  = Add_Semester.ID
    			displayformat = [Semester]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Your_Courses
			(
				type = picklist
				displayname = "Your Courses"
				values  = Course_Details.ID
    			displayformat = [Course_Code]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Slot
			(
				type = picklist
				values  = Add_Slots.ID
    			displayformat = [Slot]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Students_List
			(
				type = list
				displayname = "Students List"
				values  = Student_Details.ID
    			displayformat = [Name_of_the_Student + " - " + Registration_Number]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Template_Mail
			(
				type = picklist
				displayname = "Template Mail"
				values  = Mail_content.ID
    			displayformat = [Subject_field]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Mail_Subject
			(
    			type = text
				displayname = "Subject"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Message
			(
    			type = richtext
				height = 100px
				toolbar = enable
				[
					style, strike-through, indent, font-color, background-color, remove-formatting, alignment, link, table, ruler, bullets-and-numbering, script-text, code, html, quote, 
					font-size : {1, 2, 3, 4, 5, 6, 7},
					font-family : {"Serif", "Arial", "Courier New", "Georgia", "Tahoma", "Times New Roman", "Trebuchet", "Verdana", "Comic Sans Ms"}
				]
	 			row = 1
	 			column = 1   
				width = 1000px
			)
			Save_as_Template
			(
    			type = checkbox
				displayname = "Save as Template"
				initial value = false
	 			row = 1
	 			column = 1   
				width = 300px
			)
	
			customize
			(
				icon = "shopping-newsletter"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Sent_mails_to_Students
		{
			displayName = "Sent Mails"
			show all rows from Send_Mail_to_your_Students    
			(
				Faculty_ID as "Faculty Name"
				Semester
				Your_Courses as "Your Courses"
				Slot
				Students_List as "Student Name"
				Mail_Subject as "Subject"
				Message
			)
			options
			(
				icon = "ui-1-email-84"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Faculty_ID as "Faculty Name"
							Semester
							Your_Courses as "Your Courses"
							Slot
							Students_List as "Student Name"
							Mail_Subject as "Subject"
							Message
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Faculty_ID as "Faculty Name"
							Semester
							Your_Courses as "Your Courses"
							Slot
							Students_List as "Student Name"
							Mail_Subject as "Subject"
							Message
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Send_Mail_Report
		{
			displayName = "Mail Template"
			show all rows from Mail_content    
			(
				Message as "Mail Content"
				Subject_field as "Subject"
			)
			options
			(
				icon = "files-single-content-03"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Message as "Mail Content"
							Subject_field as "Subject"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Message as "Mail Content"
							Subject_field as "Subject"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Course_Allocation_Report
		{
			displayName = "Course Allocation Report"
			show all rows from Course_Allocation    
			(
				Department
				Course_Code as "Course Code"
				Academic_Year as "Academic Year"
				Semester
				Slot
				Allocate_here.Faculty_ID as "Allocate here"
				(
					view = Course_and_Faculty_Mapping_Report
				)
			)
			options
			(
				icon = "design-bullet-list-67"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Department
							Course_Code as "Course Code"
							Academic_Year as "Academic Year"
							Semester
							Slot
							Allocate_here.Faculty_ID as "Allocate here"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Department
							Course_Code as "Course Code"
							Academic_Year as "Academic Year"
							Semester
							Slot
							Allocate_here.Faculty_ID as "Allocate here"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		list Course_and_Faculty_Mapping_Report
		{
			displayName = "Course and Faculty Mapping Report"
			show all rows from Course_and_Faculty_Mapping    
			(
				Faculty_ID as "Faculty ID"
				Course_Code as "Course Code"
				Number_of_Seats as "Number of Students"
				Department
				Semester
				Academic_Year as "Academic Year"
				Slot as "Slots"
			)
			group by
			(
				Faculty_ID ascending
			)
			options
			(
				icon = "ui-3-filter-check"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Faculty_ID as "Faculty ID"
							Course_Code as "Course Code"
							Number_of_Seats as "Number of Students"
							Department
							Semester
							Academic_Year as "Academic Year"
							Slot as "Slots"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Faculty_ID as "Faculty ID"
							Course_Code as "Course Code"
							Number_of_Seats as "Number of Students"
							Department
							Semester
							Academic_Year as "Academic Year"
							Slot as "Slots"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Events
	{
		icon = "ui-1-calendar-60"
		form Add_Events
		{
			displayname = "Add Events"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			must have Event_Name
			(
    			type = text
				displayname = "Event Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Type_of_the_Event
			(
				type = picklist
				displayname = "Type of the Event"
				values  = Event_Types.ID
    			displayformat = [Type]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Start_Date
			(
    			type = date
				displayname = "Start Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 128px
			)
			must have End_Date
			(
    			type = date
				displayname = "End Date"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 130px
			)
			must have Venue
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Organizer_s
			(
				type = list
				displayname = "Organizer(s)"
				values  = Faculty_Details.ID
    			displayformat = [Faculty_ID]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have List_of_Programs
			(
				type = grid
				displayname = "List of Programs"
				values  = Add_Event_wise_Programs.ID
    			bidirectional = Event_Name
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-3-calendar-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Event_Management_Report
		{
			displayName = "Event Details"
			show all rows from Add_Events    
			(
				Event_Name as "Event Name"
				Type_of_the_Event as "Type of the Event"
				Start_Date as "Start Date"
				End_Date as "End Date"
				Venue
				Organizer_s as "Organizer(s)"
				List_of_Programs.Program_Name as "List of Programs"
				(
					view = Event_wise_Programs_Report
				)
			)
			options
			(
				icon = "ui-1-calendar-check-59"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Event_Name as "Event Name"
							Type_of_the_Event as "Type of the Event"
							Start_Date as "Start Date"
							End_Date as "End Date"
							Venue
							Organizer_s as "Organizer(s)"
							List_of_Programs.Program_Name as "List of Programs"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Event_Name as "Event Name"
							Type_of_the_Event as "Type of the Event"
							Start_Date as "Start Date"
							End_Date as "End Date"
							Venue
							Organizer_s as "Organizer(s)"
							List_of_Programs.Program_Name as "List of Programs"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Add_Event_wise_Programs
		{
			displayname = "Add Programs to an Event"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			must have Event_Name
			(
				type = picklist
				displayname = "Event Name"
				values  = Add_Events.ID
    			bidirectional = List_of_Programs
    			displayformat = [Event_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Program_Name
			(
    			type = text
				displayname = "Program Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Description_of_the_Program_optional
			(
    			type = textarea
				displayname = "Description of the Program (optional)"
				height = 100px
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Time
			(
    			type = datetime
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Participants
			(
				type = list
				values  = Student_Details.ID
    			displayformat = [Registration_Number]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Event_wise_Programs_Report
		{
			displayName = "Event wise Programs"
			show all rows from Add_Event_wise_Programs    
			(
				Program_Name as "Program Name"
				Time
				Description_of_the_Program_optional as "Describe the Program"
				Event_Name as "Event Name"
				Participants
			)
			options
			(
				icon = "business-hierarchy-54"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Program_Name as "Program Name"
							Time
							Description_of_the_Program_optional as "Describe the Program"
							Event_Name as "Event Name"
							Participants
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Program_Name as "Program Name"
							Time
							Description_of_the_Program_optional as "Describe the Program"
							Event_Name as "Event Name"
							Participants
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Projects
	{
		icon = "shopping-list"
		form Add_Project
		{
			displayname = "Add Project"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
			must have Faculty_Name
			(
				type = picklist
				displayname = "Faculty Name"
				values  = Faculty_Details.ID
    			displayformat = [Faculty_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Current_Academic_Year
			(
				type = picklist
				displayname = "Current Academic Year"
				values  = Add_Academic_year.ID
    			displayformat = [Academic_Year]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Project_Name
			(
    			type = text
				displayname = "Project Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Project_Type
			(
				type = picklist
				displayname = "Project Type"
				values  = Add_Project_Types.ID
    			displayformat = [Project_Type]
				allow new entries = true
				[
					displayname = "Add your own"
				]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Department
			(
				type = picklist
				values  = Department_Details.ID
    			displayformat = [Department]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Semester
			(
				type = picklist
				values  = Add_Semester.ID
    			displayformat = [Semester]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Done_by_Students_List
			(
				type = list
				displayname = "Assign to (Students List)"
				values  = Student_Details[Department == input.Department && Semester == input.Semester].ID
    			displayformat = [Registration_Number]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Status
			(
				type = radiobuttons
				values = {"Initiated", "Reviewed", "Completed"}
				initial value = "Initiated"
	 			row = 1
	 			column = 1   
				width = 300px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		list Project_Management_Report
		{
			displayName = "Project Details"
			show all rows from Add_Project    
			(
				Project_Name as "Project Name"
				Project_Type as "Project Type"
				Faculty_Name as "Faculty Name"
				Current_Academic_Year as "Current Academic Year"
				Department
				Done_by_Students_List as "Done by (Students List)"
				Status
			)
			options
			(
				icon = "ui-1-database"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Project_Name as "Project Name"
							Project_Type as "Project Type"
							Faculty_Name as "Faculty Name"
							Current_Academic_Year as "Current Academic Year"
							Department
							Done_by_Students_List as "Done by (Students List)"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Project_Name as "Project Name"
							Project_Type as "Project Type"
							Faculty_Name as "Faculty Name"
							Current_Academic_Year as "Current Academic Year"
							Department
							Done_by_Students_List as "Done by (Students List)"
							Status
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Hidden_items
	{
		displayname= "Hidden items"
		hide = true
		icon = "ui-2-menu-bold"
		form Add_No_of_Dayorders_and_hours
		{
			displayname = "Add No of Dayorders and hours"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			No_of_dayorders
			(
				type = picklist
				displayname = "No of dayorders"
				values = {"1", "2", "3", "4", "5", "6", "7"}
	 			row = 1
	 			column = 1   
				width = 200px
			)
			plain
			(
    			type = plaintext
				value = "<font color=\"#cccccc\" size=\"2\">i.e.,Select the number of working days per week.</font>"
	 			row = 1
	 			column = 1   
				width = 300px
			)
			No_of_hours_per_day
			(
				type = number
				displayname = "No of hours per day"
	 			row = 1
	 			column = 1   
				width = 200px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		properties
		{
			total entries
			{
				allowed count = 1
			}
		}
		}
		list Hour_Slot_Mapping_Report
		{
			displayName = "Hour - Slot Mapping Report"
   			hide = true
			show all rows from Day_Order_Hour_Slot_Mapping    
			(
				Hour
				Slot
				Day_Order as "Day Order"
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Hour
							Slot
							Day_Order as "Day Order"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Hour
							Slot
							Day_Order as "Day Order"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Current_Academic_Year
		{
			displayname = "Add Current Academic Year and Semester"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have Academic_Year
			(
				type = picklist
				displayname = "Academic Year"
				values  = Add_Academic_year.ID
    			displayformat = [Academic_Year]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Current_Semester
			(
				type = radiobuttons
				displayname = "Current Semester"
				values = {"Odd", "Even"}
	 			row = 1
	 			column = 1   
				width = 300px
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		properties
		{
			total entries
			{
				allowed count = 1
			}
		}
		}
		form Add_Designation
		{
			displayname = "Add Designation"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Designation
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Allow_to_Allocate_Courses
			(
    			type = checkbox
				displayname = "Allow to Allocate Courses"
				initial value = false
	 			row = 1
	 			column = 1   
				width = 300px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Course_and_Faculty_Mapping
		{
			displayname = "Course and Faculty Mapping"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have Course_Allocation_ID
			(
				type = picklist
				displayname = "Course Allocation ID"
				values  = Course_Allocation.ID
    			bidirectional = Allocate_here
    			displayformat = [ID]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Academic_Year
			(
				type = picklist
				displayname = "Academic Year"
				values  = Add_Academic_year.ID
    			displayformat = [Academic_Year]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Department
			(
				type = picklist
				values  = Department_Details.ID
    			displayformat = [Department]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Semester
			(
				type = picklist
				values  = Add_Semester.ID
    			displayformat = [Semester]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Course_Code
			(
				type = picklist
				displayname = "Course Code"
				values  = Course_Details.ID
    			displayformat = [Course_Code]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Slot
			(
				type = picklist
				values  = Add_Slots.ID
    			displayformat = [Slot]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Faculty_ID
			(
				type = picklist
				displayname = "Faculty ID"
				values  = Faculty_Details.ID
    			displayformat = [Faculty_Name]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Number_of_Seats
			(
				type = number
				displayname = "Number of Seats"
	 			row = 1
	 			column = 1   
				width = 100px
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_Slots
		{
			displayname = "Add Slots"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have unique Slot
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			plain
			(
    			type = plaintext
				value = "<span style=\"color: rgb(153, 153, 153); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 12px; line-height: 18px; background-color: rgb(255, 255, 255)\">E.g.A,B..,(Timetable time slot) which can be used in timetable for mapping faculty, students and course.</span>"
	 			row = 1
	 			column = 1   
				width = 300px
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_Academic_year
		{
			displayname = "Add Academic year"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have unique Academic_Year
			(
    			type = text
				displayname = "Academic Year"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			plain
			(
    			type = plaintext
				value = "<span style=\"color: rgb(153, 153, 153); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 12px; line-height: 18px; background-color: rgb(255, 255, 255)\">E.g.2000-01,2001-02</span>"
	 			row = 1
	 			column = 1   
				width = 300px
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_Course_Types
		{
			displayname = "Add Course Types"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have unique Type
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			plain
			(
    			type = plaintext
				value = "<span style=\"color: rgb(153, 153, 153); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 12px; line-height: 18px; background-color: rgb(255, 255, 255)\">E.g.Practical,Thoery</span>"
	 			row = 1
	 			column = 1   
				width = 300px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_Project_Types
		{
			displayname = "Add Project Types"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have unique Project_Type
			(
    			type = text
				displayname = "Project Type"
	 			row = 1
	 			column = 1   
				width = 200px
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Event_Types
		{
			displayname = "Add Event Types"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have unique Type
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Add_Semester
		{
			displayname = "Add Semester"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have unique Semester
			(
				type = number
	 			row = 1
	 			column = 1   
				width = 200px
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Department_Details
		{
			displayname = "Add Department"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have unique Department
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Mail_content
		{
			displayname = "Add Mail Content"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have Subject_field
			(
    			type = text
				displayname = "Subject"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Message
			(
    			type = richtext
				height = 200px
				toolbar = enable
				[
					style, strike-through, indent, font-color, background-color, remove-formatting, alignment, link, table, ruler, bullets-and-numbering, script-text, code, html, quote, 
					font-size : {1, 2, 3, 4, 5, 6, 7},
					font-family : {"Serif", "Arial", "Courier New", "Georgia", "Tahoma", "Times New Roman", "Trebuchet", "Verdana", "Comic Sans Ms"}
				]
	 			row = 1
	 			column = 1   
				width = 382px
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Course_Allocation
		{
			displayname = "Course Allocation"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Academic_Year
			(
				type = picklist
				displayname = "Academic Year"
				values  = Add_Academic_year.ID
    			displayformat = [Academic_Year]
				searchable = true
				sortorder = ascending
				private = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Department
			(
				type = picklist
				values  = Department_Details.ID
    			displayformat = [Department]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Semester
			(
				type = picklist
				values  = Add_Semester.ID
    			displayformat = [Semester]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Course_Code
			(
				type = picklist
				displayname = "Course Code"
				values  = Course_Details[Department == input.Department].ID
    			displayformat = [Course_Code]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Slot
			(
				type = picklist
				values  = Add_Slots.ID
    			displayformat = [Slot]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Allocate_here
			(
				type = grid
				displayname = "Allocate here"
				values  = Course_and_Faculty_Mapping.ID
    			bidirectional = Course_Allocation_ID
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Attendance
		{
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Academic_Year
			(
				type = picklist
				displayname = "Academic Year"
				values  = Add_Academic_year.ID
    			displayformat = [Academic_Year]
				searchable = true
				sortorder = ascending
				private = true
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Date_of_Attendance
			(
    			type = date
				displayname = "Date of Attendance"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = 130px
			)
			must have Faculty_Name
			(
				type = picklist
				displayname = "Faculty Name"
				values  = Faculty_Details.ID
    			displayformat = [Faculty_Name + " - " + Faculty_ID]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 300px
			)
			must have Course_Code
			(
				type = picklist
				displayname = "Course Code"
				values  = Course_Details.ID
    			displayformat = [Course_Code + " - " + Course_Title]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 300px
			)
			must have Slot
			(
				type = picklist
				values  = Add_Slots.ID
    			displayformat = [Slot]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Select_Absent_Students
			(
				type = checkboxes
				displayname = "Select Absent Students"
				values = {"Choice 1", "SID01 - Student1"}
	 			row = 1
	 			column = 1   
				width = 300px
			)
			Absent_Students_List_Admin
			(
				type = list
				displayname = "Absent Students List Admin"
				values  = Student_Details.ID
    			displayformat = [Registration_Number]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Student_Absent_List
			(
    			type = textarea
				displayname = "Student Absent List"
				height = 100px
				private = true
	 			row = 1
	 			column = 1   
				width = 200px
			)
			must have Topic_Covered
			(
    			type = textarea
				displayname = "Topic Covered"
				height = 100px
	 			row = 1
	 			column = 1   
				width = 200px
			)
	
			customize
			(
				icon = "ui-1-bold-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
				 page Faculty_Attendance_Chart 
	 	 { 
 	 	 displayname = "Faculty Attendance Chart" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Faculty_Attendance_Chart1'>\n\t<![CDATA[htmlpage Faculty_Attendance_Chart1()\ncontent\n&lt;%{\n\t%&gt;\n&lt;%=thisapp.css.getBarChartStyle() + thisapp.faculty.getAttendanceChart()%&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page View_Attendance(attendanceID) 
	 	 { 
 	 	 displayname = "View Attendance" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='View_Attendance1'>\n\t<![CDATA[htmlpage View_Attendance1(attendanceID)\ncontent\n&lt;%{\n\tif(input.attendanceID != null &amp;&amp; input.attendanceID != &quot;&quot;)\n\t{\n\t\tif(isNumber(attendanceID))\n\t\t{\n\t\t\tattendance_ID = attendanceID.toLong();\n\t\t\t%&gt;\n&lt;div id=&apos;mainDiv&apos; align=&apos;center&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;%=thisapp.css.getStyleLibrary()%&gt;\n\t\t\t\t\t\t\t\t\t&lt;%=thisapp.faculty.viewAttendance(attendance_ID)%&gt;\n\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n&lt;%\n\t\t}\n\t}\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page Course_wise_Students_List(courseID) 
	 	 { 
 	 	 displayname = "Course wise Students List" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Course_wise_Students_List1'>\n\t<![CDATA[htmlpage Course_wise_Students_List1(courseID)\ncontent\n&lt;%{\n\tif(input.courseID != null &amp;&amp; input.courseID != &quot;&quot;)\n\t{\n\t\tif(isNumber(courseID))\n\t\t{\n\t\t\tcourse_ID = courseID.toLong();\n\t\t\tcourse_Obj = Course_Details[ID == course_ID];\n\t\t\tfaculty_Object = Faculty_Details[Official_Email == zoho.loginuserid];\n\t\t\t%&gt;\n&lt;%=thisapp.css.getStyleLibrary()%&gt;\n\t\t\t\t\t\t\t\t\t&lt;div id=&apos;mainDiv&apos; align=&apos;center&apos;&gt;\n\t\t\t\t\t\t\t\t\t&lt;%=thisapp.faculty.getCoursewiseStudentsList(course_ID,faculty_Object)%&gt;        \n\t\t\t\t\t\t\t\t\t&lt;\/div&gt;\n&lt;%\n\t\t}\n\t}\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page Faculty_Attendance_Status(courseID,slotID,facultyID) 
	 	 { 
 	 	 displayname = "Faculty Attendance Status" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Faculty_Attendance_Status1'>\n\t<![CDATA[htmlpage Faculty_Attendance_Status1(courseID,slotID,facultyID)\ncontent\n&lt;%{\n\t%&gt;\n&lt;div id=&apos;mainDiv&apos; align=&apos;center&apos;&gt;\n\t\t\t\t\t\t &lt;%=thisapp.css.getStyleLibrary()%&gt;&lt;br&gt;&lt;br&gt;\n&lt;%\n\tfaculty_Object = Faculty_Details[ID == facultyID.toLong()];\n\tif(faculty_Object.count() == 1)\n\t{\n\t\tif(input.courseID != null &amp;&amp; input.slotID != null &amp;&amp; input.courseID != &quot;&quot; &amp;&amp; input.slotID != &quot;&quot;)\n\t\t{\n\t\t\tif(isNumber(courseID) &amp;&amp; isNumber(slotID))\n\t\t\t{\n\t\t\t\tcourse_ID = courseID.toLong();\n\t\t\t\tSlot_ID = slotID.toLong();\n\t\t\t\tcurrent_Academic_Year = Current_Academic_Year[ID != 0].Academic_Year;\n\t\t\t\t%&gt;\n&lt;%=thisapp.faculty.getAttendanceStatus(faculty_Object,current_Academic_Year,course_ID,Slot_ID)%&gt;\n&lt;%\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;font color=&apos;red&apos;&gt;Somethimg went wrong&lt;\/font&gt;\n&lt;%\n\t\t\t}\n\t\t}\n\t}\n\t%&gt;\n&lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page Student_Attendance_Status(mappingID,studentID) 
	 	 { 
 	 	 displayname = "Student Attendance Status" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Student_Attendance_Status1'>\n\t<![CDATA[htmlpage Student_Attendance_Status1(mappingID,studentID)\ncontent\n&lt;%{\n\t%&gt;\n&lt;div id=&apos;mainDiv&apos; align=&quot;center&quot;&gt;\n\t\t\t\t\t\t &lt;%=thisapp.css.getStyleLibrary()%&gt;&lt;br&gt;&lt;br&gt;\n&lt;%\n\tstudent_Object = Student_Details[Official_Email == zoho.loginuserid];\n\tif(student_Object.count() == 1)\n\t{\n\t\tif(input.mappingID != null &amp;&amp; input.mappingID != &quot;&quot;)\n\t\t{\n\t\t\tif(isNumber(mappingID))\n\t\t\t{\n\t\t\t\tmapping_ID = mappingID.toLong();\n\t\t\t\tcurrent_Academic_Year = Current_Academic_Year[ID != 0].Academic_Year;\n\t\t\t\tmapping_Object = Course_and_Faculty_Mapping[ID == mapping_ID];\n\t\t\t\tstudent_Object = Student_Details[Official_Email == zoho.loginuserid];\n\t\t\t\tfaculty_Object = Faculty_Details[Official_Email == zoho.loginuserid];\n\t\t\t\tif(student_Object.count() == 1 || faculty_Object.count() == 1 &amp;&amp; mapping_Object.count() == 1 &amp;&amp; mapping_Object.Academic_Year == current_Academic_Year)\n\t\t\t\t{\n\t\t\t\t\tif(student_Object.count() == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(input.studentID != null &amp;&amp; input.studentID != &quot;&quot;)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(isNumber(studentID))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstudent_ID = studentID.toLong();\n\t\t\t\t\t\t\t\tstudent_Object = Student_Details[ID == student_ID];\n\t\t\t\t\t\t\t\tif(student_Object.count() == 1 &amp;&amp; mapping_Object.Faculty_ID == faculty_Object.ID)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t%&gt;\n&lt;%=thisapp.student.getAttendanceStatus(student_Object,mapping_Object)%&gt;\n&lt;%\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t%&gt;\n&lt;font color=&apos;red&apos;&gt;Somethimg went wrong&lt;\/font&gt;\n&lt;%\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t%&gt;\n&lt;%=thisapp.student.getAttendanceStatus(student_Object,mapping_Object)%&gt;\n&lt;%\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t%&gt;\n&lt;font color=&apos;red&apos;&gt;Somethimg went wrong&lt;\/font&gt;\n&lt;%\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t%&gt;\n&lt;font color=&apos;red&apos;&gt;Somethimg went wrong&lt;\/font&gt;\n&lt;%\n\t\t\t}\n\t\t}\n\t}\n\t%&gt;\n&lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
				 page Student_Attendance_Chart 
	 	 { 
 	 	 displayname = "Student Attendance Chart" 

 	 	 icon = "" 

 	 	 hide =  true
	 	 Content="<zml \t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='Student_Attendance_Chart1'>\n\t<![CDATA[htmlpage Student_Attendance_Chart1()\ncontent\n&lt;%{\n\t%&gt;\n&lt;%=thisapp.css.getBarChartStyle() + thisapp.student.getAttendanceChart()%&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
		form Studentwise_Course_Details
		{
			displayname = "Add Studentwise Course Details"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Registration_ID
			(
				type = picklist
				displayname = "Registration ID"
				values  = Student_Course_Registration_Form.ID
    			bidirectional = Register_Here
    			displayformat = [ID]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Academic_Year
			(
				type = picklist
				displayname = "Academic Year"
				values  = Add_Academic_year.ID
    			displayformat = [Academic_Year]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Registration_Number
			(
				type = picklist
				displayname = "Registration Number"
				values  = Student_Details.ID
    			displayformat = [Registration_Number]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Semester
			(
				type = picklist
				values  = Add_Semester.ID
    			displayformat = [Semester]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Course_Code
			(
				type = picklist
				displayname = "Course Code"
				values  = Course_Details.ID
    			displayformat = [Course_Code]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Slot
			(
				type = picklist
				values  = Add_Slots.ID
    			displayformat = [Slot]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Faculty_ID
			(
				type = picklist
				displayname = "Faculty ID"
				values  = Faculty_Details.ID
    			displayformat = [Faculty_ID]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Student_Course_Registration_Form
		{
			displayname = "Course Registeration Form"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			plain1
			(
    			type = plaintext
				value = "<font color=\"#ff6666\" size=\"3\">You have already registered your courses!!</font>"
	 			row = 1
	 			column = 1   
				width = 300px
			)
			must have Registration_Number
			(
				type = picklist
				displayname = "Registration Number"
				values  = Student_Details.ID
    			displayformat = [Registration_Number]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Semester
			(
				type = picklist
				values  = Add_Semester.ID
    			displayformat = [Semester]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Academic_Year
			(
				type = picklist
				displayname = "Academic Year"
				values  = Add_Academic_year.ID
    			displayformat = [Academic_Year]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Courses
			(
				type = list
				values  = Course_Details.ID
    			displayformat = [Course_Code]
				searchable = true
				sortorder = ascending
				height = 60px
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Register_Here
			(
				type = grid
				displayname = "Register Here"
				values  = Studentwise_Course_Details.ID
    			bidirectional = Registration_ID
				defaultrow = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Date_Day_Order_Mapping
		{
			displayname = "Date-Day Order Mapping"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have Academic_Year
			(
				type = picklist
				displayname = "Academic Year"
				values  = Add_Academic_year.ID
    			displayformat = [Academic_Year]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have unique Date_field
			(
    			type = date
				displayname = "Date"
				alloweddays = 1,2,3,4,5
	 			row = 1
	 			column = 1   
				width = 130px
			)
			must have Day_Order
			(
				type = number
				displayname = "Day Order"
	 			row = 1
	 			column = 1   
				width = 100px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Common_Time_Table
		{
			displayname = "Add Common Time Table"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have Day_Order_Dropdown
			(
				type = picklist
				displayname = "Day Order"
				values = {""}
	 			row = 1
	 			column = 1   
				width = 206px
			)
			Day_Order
			(
				type = number
				displayname = "Day Order"
	 			row = 1
	 			column = 1   
				width = 100px
			)
			must have Hour_Slot
			(
				type = grid
				displayname = "Hour - Slot"
				values  = Day_Order_Hour_Slot_Mapping.ID
    			bidirectional = Day_Order
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Day_Order_Hour_Slot_Mapping
		{
			displayname = "Day Order - Hour - Slot Mapping"
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			must have Day_Order
			(
				type = picklist
				displayname = "Day Order"
				values  = Common_Time_Table.ID
    			bidirectional = Hour_Slot
    			displayformat = [Day_Order]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
			must have Hour
			(
				type = number
	 			row = 1
	 			column = 1   
				width = 100px
			)
			must have Slot
			(
				type = picklist
				values  = Add_Slots.ID
    			displayformat = [Slot]
				searchable = true
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = 206px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		form Edit_Profile
		{
			displayname = "Edit Profile"
			store data in zc = false
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			Name_of_the_Student
			(
    			type = text
				displayname = "Name of the Student"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Student_Contact_No
			(
				type = number
				displayname = "Student Contact No"
	 			row = 1
	 			column = 1   
				width = 100px
			)
			Father_Name
			(
    			type = text
				displayname = "Father Name"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Father_s_Occupation
			(
    			type = text
				displayname = "Father's Occupation"
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Father_Contact_No
			(
				type = number
				displayname = "Father's Contact No"
	 			row = 1
	 			column = 1   
				width = 100px
			)
			Religion
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			Student_Photo
			(
    			type = image
				displayname = "Student Photo"
				source  = public_url
				aspect ratio = original
				camera = primary
				preview duration = 0
				show gallery = true
				switch camera = true
	 			row = 1
	 			column = 1   
				width = 140px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
			actions
			{
				Update
				(
   					type = button
   					displayname = "Update"
				)
			}
		}
		form Popup_Form
		{
			displayname = "Popup Form"
			store data in zc = false
			success message = "Data Added Successfully!"
			field alignment = left
			feature property = 32
					hide = true
			status
			(
    			type = text
	 			row = 1
	 			column = 1   
				width = 200px
			)
			plain
			(
    			type = plaintext
				value = ""
	 			row = 1
	 			column = 1   
				width = 300px
			)
	
			customize
			(
				icon = "ui-2-square-add-11"
			)
		}
	}
	functions
	{
 			string student.getInfo(int recID)
			{
				student_Object = Student_Details[ID == input.recID];
				if(student_Object.count() == 1)
				{
					information = "<table>";
					information = information + "<tr><td><font size='2'>Registration Number</font></td><td>:</td><td><strong><font size='2'>" + student_Object.Registration_Number + "</font></strong></td></tr>";
					information = information + "<tr><td><font size='2'>Name</font></td><td>:</td><td><strong><font size='2'>" + student_Object.Name_of_the_Student + "</font></strong></td></tr>";
					information = information + "</table>";
				}
				else
				{
					information = "<font color='red'>No Student found!</font>";
				}
				return information;
			}
 			string faculty.getImportantLinks(Faculty_Details facultyObject)
			{
				tableString = "<p><strong>Important Links : </strong></p><br>";
				tableString = tableString + "<table id='innerTABLE'>";
				tableString = tableString + "<tr class='TR'>";
				tableString = tableString + "<th class='TH'>S.No</th>";
				tableString = tableString + "<th class='TH'>Course Code</th>";
				tableString = tableString + "<th class='TH'>Slot</th>";
				tableString = tableString + "<th class='TH'>View Attendence Status</th>";
				tableString = tableString + "<th class='TH'>View Students List</th>";
				tableString = tableString + "</tr>";
				currentAcademicYear = Current_Academic_Year[ID != 0].Academic_Year;
				count = 0;
				for each  i in Course_and_Faculty_Mapping[Faculty_ID == facultyObject.ID && Academic_Year == currentAcademicYear]
				{
					count = count + 1;
					tableString = tableString + "<tr class='TR'>";
					tableString = tableString + "<td class='TD'>" + count + "</td>";
					tableString = tableString + "<td class='TD'>" + i.Course_Code.Course_Code + "</td>";
					tableString = tableString + "<td class='TD'>" + i.Slot.Slot + "</td>";
					attendanceStatusLink = "<a href='#Page:Faculty_Attendance_Status?zc_LoadIn=dialog&courseID=" + i.Course_Code + "&slotID=" + i.Slot + "' >Click here</a>";
					stuntsListLink = "<a href='#Page:Course_wise_Students_List?courseID=" + i.Course_Code + "' target='_blank'>Click Here</a>";
					tableString = tableString + "<td class='TD'>" + attendanceStatusLink + "</td>";
					tableString = tableString + "<td class='TD'>" + stuntsListLink + "</td>";
					tableString = tableString + "</tr>";
				}
				tableString = tableString + "</table>";
				return tableString;
			}
 			string css.getBarChartStyle()
			{
				cssString = "<style>body {  font: 13px/1.3 'Lucida Grande',sans-serif;  color: #666;}.chart {  display: table;  table-layout: fixed;  width: 50%;  max-width: 700px;  height: 250px;  margin: 0 auto;  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.1) 2%, rgba(0, 0, 0, 0) 2%);  background-size: 100% 50px;  background-position: op;}.chart li {  position: relative;  display: table-cell;  vertical-align: bottom;  height: 200px;}.chart span {  margin: 0 1em;  display: block;  background: rgba(209, 236, 250, 0.75);  animation: draw 1s ease-in-out;}.chart span:before {  position: absolute;  left: 0;  right: 0;  top: 100%;  padding: 5px 1em 0; display: block;  text-align: center;  content: attr(title);  word-wrap: break-word;}@keyframes draw {  0% {    height: 0;  }}</style>";
				return cssString;
			}
 			string faculty.viewAttendance(int attendanceID)
			{
				attendanceObject = Attendance[ID == input.attendanceID];
				faculty_Object = Faculty_Details[Official_Email == zoho.loginuserid];
				if(attendanceObject.Faculty_Name == faculty_Object.ID || zoho.loginuserid == zoho.adminuserid)
				{
					totalCount = 0;
					absentCount = 0;
					tableString = "<table id='innerTABLE'>";
					tableString = tableString + "<tr class='TR'>";
					tableString = tableString + "<th class='TH'>S.No</th>";
					tableString = tableString + "<th class='TH'>Registraion Number</th>";
					tableString = tableString + "<th class='TH'>Student Name</th>";
					tableString = tableString + "<th class='TH'>Department</th>";
					tableString = tableString + "<th class='TH'>Status</th>";
					tableString = tableString + "</tr>";
					for each  i in Studentwise_Course_Details[Course_Code == attendanceObject.Course_Code && Slot == attendanceObject.Slot && Faculty_ID == attendanceObject.Faculty_Name && Academic_Year == attendanceObject.Academic_Year] sort by Registration_Number
					{
						totalCount = totalCount + 1;
						tableString = tableString + "<tr class='TR'>";
						tableString = tableString + "<td class='TD'>" + totalCount + "</td>";
						tableString = tableString + "<td class='TD'>" + i.Registration_Number.Registration_Number + "</td>";
						tableString = tableString + "<td class='TD'>" + i.Registration_Number.Name_of_the_Student + "</td>";
						tableString = tableString + "<td class='TD'>" + Department_Details[ID == i.Registration_Number.Department].Department + "</td>";
						status = "<font color='green'>Present</font>";
						if(attendanceObject.Absent_Students_List_Admin.contains(i.Registration_Number))
						{
							status = "<font color='red'>Absent</font>";
							absentCount = absentCount + 1;
						}
						tableString = tableString + "<td class='TD'>" + status + "</td>";
						tableString = tableString + "</tr>";
					}
					tableString = tableString + "</table>";
					headerString = "<p><strong>Attendance Details  </strong></p><br>";
					headerString = headerString + "<table>";
					headerString = headerString + "<tr><td>Academic Year</td><td>&nbsp;&nbsp;:&nbsp;&nbsp;</td><td>" + attendanceObject.Academic_Year.Academic_Year + "</td></tr>";
					headerString = headerString + "<tr><td>Date</td><td>&nbsp;&nbsp;:&nbsp;&nbsp;</td><td>" + attendanceObject.Date_of_Attendance + "</td></tr>";
					headerString = headerString + "<tr><td>Course Code</td><td>&nbsp;&nbsp;:&nbsp;&nbsp;</td><td>" + attendanceObject.Course_Code.Course_Code + "</td></tr>";
					headerString = headerString + "<tr><td>Total Students</td><td>&nbsp;&nbsp;:&nbsp;&nbsp;</td><td>" + totalCount + "</td></tr>";
					headerString = headerString + "<tr><td>Absent Students</td><td>&nbsp;&nbsp;:&nbsp;&nbsp;</td><td>" + absentCount + "</td></tr>";
					headerString = headerString + "<tr><td>Topic Covered</td><td>&nbsp;&nbsp;:&nbsp;&nbsp;</td><td>" + attendanceObject.Topic_Covered + "</td></tr>";
					headerString = headerString + "</table><br>";
					return headerString + tableString;
				}
				else
				{
					tableString = "<font color='red'>You don't have permission to access this Attendance view</font>";
					return tableString;
				}
			}
 			string faculty.getAttendanceChart()
			{
				facultyObject = Faculty_Details[Official_Email == zoho.loginuserid];
				currentAcademicYear = Current_Academic_Year[ID != 0].Academic_Year;
				chartString = "<ul class='chart' style='position:relative;top:100px;'>";
				count = 0;
				for each  courseObj in Course_and_Faculty_Mapping[Academic_Year == currentAcademicYear && Faculty_ID == facultyObject.ID]
				{
					noOfStudents = Studentwise_Course_Details[Academic_Year == currentAcademicYear && Course_Code == courseObj.Course_Code && Faculty_ID == courseObj.Faculty_ID && Slot == courseObj.Slot].count();
					attendancePercentage = 0.0;
					attendanceObject = Attendance[Academic_Year == currentAcademicYear && Course_Code == courseObj.Course_Code && Slot == courseObj.Slot && Faculty_Name == courseObj.Faculty_ID];
					NoOfTotalStudents = (attendanceObject.count() * noOfStudents).toDecimal();
					NoOfAttendedStudents = (NoOfTotalStudents - (attendanceObject.Absent_Students_List_Admin.getall()).size()).toDecimal();
					if(NoOfTotalStudents != 0 && NoOfAttendedStudents != 0)
					{
						attendancePercentage = (NoOfAttendedStudents / NoOfTotalStudents * 100).round(2);
					}
					chartString = chartString + "<li><span style='height:" + attendancePercentage + "%' title='" + courseObj.Course_Code.Course_Code + " (" + attendancePercentage + "%)'></span></li>";
				}
				chartString = chartString + "</ul>";
				return chartString;
			}
 			void general.Date_day_order_generation(date Start_Date, date End_Date, int Academic_year, list:int day_list)
			{
				dayorder_record = Add_No_of_Dayorders_and_hours[ID != 0];
				no_of_dayorders = dayorder_record.No_of_dayorders.toLong();
				no_of_days = days360(Start_Date,End_Date) + 1;
				List = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366};
				Sublist = List.subList(0,no_of_days);
				record = Date_Day_Order_Mapping[Date_field < input.Start_Date].Day_Order sort by Date_field desc range from 1 to 1;
				if(record == null)
				{
					day_order = 1;
				}
				else
				{
					if(record < no_of_dayorders)
					{
						day_order = record + 1;
					}
					else
					{
						day_order = 1;
					}
				}
				for each  element in Sublist
				{
					condition_variable = 0;
					for each  day in day_list
					{
						if(Start_Date.getDayOfWeek() == day)
						{
							condition_variable = 1;
						}
					}
					if(condition_variable != 1)
					{
						insert into Date_Day_Order_Mapping
						[
							Academic_Year=Academic_year
							Added_User=zoho.loginuser
							Date_field=Start_Date
							Day_Order=day_order
						]
						if(day_order < no_of_dayorders)
						{
							day_order = day_order + 1;
						}
						else
						{
							day_order = 1;
						}
					}
					Start_Date = Start_Date.addDay(1);
				}
			}
 			void general.Insert_days(date Start_Date, date End_Date, int Academic_year, list:int day_list)
			{
				dayorder_record = Add_No_of_Dayorders_and_hours[ID != 0];
				no_of_dayorders = dayorder_record.No_of_dayorders.toLong();
				thisapp.general.Date_day_order_generation(Start_Date,End_Date,Academic_year,day_list);
				all_records = Date_Day_Order_Mapping[Date_field > input.End_Date] sort by Date_field;
				for each  record in all_records
				{
					if(record.Day_Order < no_of_dayorders)
					{
						record.Day_Order=record.Day_Order + 1;
					}
					else
					{
						record.Day_Order=1;
					}
				}
			}
 			void general.Delete_days(date Start_Date, date End_Date)
			{
				dayorder_record = Add_No_of_Dayorders_and_hours[ID != 0];
				no_of_dayorders = dayorder_record.No_of_dayorders.toLong();
				no_of_days = days360(Start_Date,End_Date) + 1;
				List = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366};
				Sublist = List.subList(0,no_of_days);
				record = Date_Day_Order_Mapping[Date_field < input.Start_Date].Day_Order sort by Date_field desc range from 1 to 1;
				for each  element in Sublist
				{
					delete from Date_Day_Order_Mapping[Date_field = input.Start_Date];
					Start_Date = Start_Date.addDay(1);
				}
				if(record < no_of_dayorders)
				{
					day_order = record;
				}
				else
				{
					day_order = 1;
				}
				all_records = Date_Day_Order_Mapping[Date_field > input.End_Date];
				for each  records in all_records
				{
					if(day_order < no_of_dayorders)
					{
						day_order = day_order + 1;
					}
					else
					{
						day_order = 1;
					}
					records.Day_Order=day_order;
				}
			}
 			string css.getStyleLibrary()
			{
				cssString = "";
				cssString = cssString + "<style>";
				cssString = cssString + "#mainDiv{top:30px;position:relative;}";
				cssString = cssString + "* { margin: 0; padding: 0;}";
				cssString = cssString + "#page-wrap {margin: 50px;}";
				cssString = cssString + "#container {width:100%;}";
				cssString = cssString + "#innerTABLE { border-collapse: collapse; }";
				cssString = cssString + ".TR:nth-of-type(odd) { background: #eee; }";
				cssString = cssString + ".TH { background: #333; color: white; font-weight: bold; }";
				cssString = cssString + ".TD, .TH { padding: 6px; border: 1px solid #ccc; text-align: left; }";
				cssString = cssString + "</style>";
				return cssString;
			}
 			string faculty.getAttendanceStatus(Faculty_Details facultyObject, int academicYear, int courseID, int slotID)
			{
				course_Object = Course_Details[ID == input.courseID];
				slot = Add_Slots[ID == input.slotID].Slot;
				tableString = "<p><strong>Attendance Status for <font color='green'>" + course_Object.Course_Code + "  (" + slot + " Slot)</font> : </strong></p><br>";
				tableString = tableString + "<table id='innerTABLE'>";
				tableString = tableString + "<tr class='TR'>";
				tableString = tableString + "<th class='TH'>S.No</th>";
				tableString = tableString + "<th class='TH'>Date</th>";
				tableString = tableString + "<th class='TH'>Day Order</th>";
				tableString = tableString + "<th class='TH'>Status</th>";
				tableString = tableString + "</tr>";
				currentAcademicYear = Current_Academic_Year[ID != 0].Academic_Year;
				count = 0;
				for each  i in Date_Day_Order_Mapping[Academic_Year == input.academicYear && Date_field <= today] sort by Date_field
				{
					if(Day_Order_Hour_Slot_Mapping[Day_Order.Day_Order == i.Day_Order && Slot == input.slotID].count() != 0)
					{
						attendanceObject = Attendance[Date_of_Attendance == i.Date_field && Academic_Year == input.academicYear && Faculty_Name == facultyObject.ID && Course_Code == input.courseID && Slot == input.slotID];
						count = count + 1;
						tableString = tableString + "<tr class='TR'>";
						tableString = tableString + "<td class='TD'>" + count + "</td>";
						tableString = tableString + "<td class='TD'>" + i.Date_field + "</td>";
						tableString = tableString + "<td class='TD'>" + i.Day_Order + "</td>";
						status = "<font color='red'>Pending</font>";
						if(attendanceObject.count() != 0)
						{
							if(zoho.loginuser == zoho.adminuser)
							{
								viewAttendanceLink = zoho.appuri + "#Page:View_Attendance?attendanceID=" + attendanceObject.ID;
							}
							else
							{
								viewAttendanceLink = zoho.appuri + "#Page:View_Attendance?attendanceID=" + attendanceObject.ID;
							}
							status = "<a href='" + viewAttendanceLink + "' target='_blank' >Completed</a>";
						}
						tableString = tableString + "<td class='TD'>" + status + "</td>";
						tableString = tableString + "</tr>";
					}
				}
				tableString = tableString + "</table>";
				return tableString;
			}
 			string faculty.getCoursewiseStudentsList(int courseID, Faculty_Details faculty_Obj)
			{
				course_Obj = Course_Details[ID == input.courseID];
				currentAcademicYear = Current_Academic_Year[ID != 0].Academic_Year;
				if(faculty_Obj.count() == 1)
				{
					tableString = "<p><strong>Course_Code : " + course_Obj.Course_Title + "( " + course_Obj.Course_Code + " )" + "</strong></p><br>";
					tableString = tableString + "<table id='innerTABLE'>";
					tableString = tableString + "<tr class='TR'>";
					tableString = tableString + "<th class='TH'>S.No</th>";
					tableString = tableString + "<th class='TH'>Registration Number</th>";
					tableString = tableString + "<th class='TH'>Student Name</th>";
					tableString = tableString + "<th class='TH'>Department</th>";
					tableString = tableString + "</tr>";
					count = 0;
					for each  i in Studentwise_Course_Details[Academic_Year == currentAcademicYear && Course_Code == course_Obj.ID && Faculty_ID = faculty_Obj.ID]
					{
						count = count + 1;
						tableString = tableString + "<tr class='TR'>";
						tableString = tableString + "<td class='TD'>" + count + "</td>";
						tableString = tableString + "<td class='TD'>" + i.Registration_Number.Registration_Number + "</td>";
						tableString = tableString + "<td class='TD'>" + i.Registration_Number.Name_of_the_Student + "</td>";
						tableString = tableString + "<td class='TD'>" + Department_Details[ID == i.Registration_Number.Department].Department + "</td>";
						tableString = tableString + "</tr>";
					}
					tableString = tableString + "</table>";
				}
				return tableString;
			}
 			string faculty.getPersonalizedTimeTable(Faculty_Details facultyObject, string type)
			{
				if(facultyObject.count() != 0)
				{
					currectAcademicYear = Current_Academic_Year[ID != 0].Academic_Year;
					tableString = "<p><strong>Your Upcoming Time Table :</strong></p><br>";
					if(input.type == "full")
					{
						tableString = "<p><strong>Academic Time Table :</strong></p><br>";
					}
					tableString = tableString + "<table id='innerTABLE'>";
					tableString = tableString + "<tr class='TR'>";
					tableString = tableString + "<th class='TH'>Date</th>";
					tableString = tableString + "<th class='TH'>Day Order</th>";
					all_records = Day_Order_Hour_Slot_Mapping[ID != 0];
					required_records = Day_Order_Hour_Slot_Mapping[Day_Order == all_records.Day_Order];
					variable = 1;
					for each  record in required_records
					{
						tableString = tableString + "<th class='TH'>Hour " + variable + "</th>";
						variable = variable + 1;
					}
					tableString = tableString + "</tr>";
					timeTableMappingObject = Date_Day_Order_Mapping[Date_field >= today && Academic_Year == currectAcademicYear] sort by Date_field range from 1 to 5;
					if(input.type == "full")
					{
						timeTableMappingObject = Date_Day_Order_Mapping[Academic_Year == currectAcademicYear] sort by Date_field;
					}
					for each  i in timeTableMappingObject
					{
						tableString = tableString + "<tr class='TR'>";
						tableString = tableString + "<td class='TD'>" + i.Date_field + "</td>";
						tableString = tableString + "<td class='TD'>" + i.Day_Order + "</td>";
						for each  j in Day_Order_Hour_Slot_Mapping[Day_Order.Day_Order == i.Day_Order] sort by Hour
						{
							mappingObject = Course_and_Faculty_Mapping[Academic_Year == currectAcademicYear && Slot == j.Slot && Faculty_ID == facultyObject.ID];
							if(mappingObject.count() != 0)
							{
								tableString = tableString + "<td class='TD'>" + mappingObject.Course_Code.Course_Code + "<br>( " + j.Slot.Slot + " Slot )</td>";
							}
							else
							{
								tableString = tableString + "<td class='TD'>-</td>";
							}
						}
						tableString = tableString + "</tr>";
					}
					tableString = tableString + "</table><br><br>";
				}
				else
				{
					tableString = "<p style='color:red'>You don't have Personalized Time Table. Please contact Admin</p>";
				}
				return tableString;
			}
 			string faculty.getQuickLinks()
			{
				tableString = "<p><strong>Quick Links :</strong></p><br>";
				tableString = tableString + "<table id='innerTABLE'>";
				tableString = tableString + "<tr class='TR'>";
				tableString = tableString + "<td class='TD'>Attendance Entry</td>";
				tableString = tableString + "</tr>";
				tableString = tableString + "<tr class='TR'>";
				tableString = tableString + "<td class='TD'><a href='#Page:Faculty_Attendance_Chart' target='_blank'>Attendance Chart</a></td>";
				tableString = tableString + "</tr>";
				tableString = tableString + "<tr class='TR'>";
				tableString = tableString + "</tr>";
				tableString = tableString + "</table>";
				return tableString;
			}
 			string general.getTimeTable()
			{
				tableString = "<div style='left:50px;top:50px'>";
				tableString = tableString + "<p><strong>Common Time Table : </strong></p><br>";
				tableString = tableString + "<table id='innerTABLE'>";
				tableString = tableString + "<tr class='TR'>";
				tableString = tableString + "<th class='TH'>Day Order</th>";
				all_records = Day_Order_Hour_Slot_Mapping[ID != 0];
				required_records = Day_Order_Hour_Slot_Mapping[Day_Order == all_records.Day_Order];
				variable = 1;
				for each  record in required_records
				{
					tableString = tableString + "<th class='TH'>Hour " + variable + "</th>";
					variable = variable + 1;
				}
				tableString = tableString + "</tr>";
				for each  i in Common_Time_Table sort by Day_Order
				{
					tableString = tableString + "<tr class='TR'>";
					tableString = tableString + "<td class='TD'>" + i.Day_Order + "</td>";
					for each  j in Day_Order_Hour_Slot_Mapping[Day_Order == i.ID] sort by Hour
					{
						tableString = tableString + "<td class='TD'>" + j.Slot.Slot + "</td>";
					}
					tableString = tableString + "</tr>";
				}
				tableString = tableString + "</table>";
				tableString = tableString + "</div>";
				return tableString;
			}
 			void general.update_semester()
			{
				all_student_records = Student_Details[Student_status];
				for each  record in all_student_records
				{
					sem = Add_Semester[ID = record.Semester].Semester;
					if(sem < 8)
					{
						next_sem_ID = Add_Semester[Semester == sem + 1].ID;
						record.Semester=next_sem_ID;
					}
					else if(sem == 8)
					{
						record.Semester=null;
						record.Student_status=false;
					}
				}
			}
 			string student.getAttendanceChart()
			{
				studentObject = Student_Details[Official_Email == zoho.loginuserid];
				currentAcademicYear = Current_Academic_Year[ID != 0].Academic_Year;
				chartString = "<ul class='chart' style='position:relative;top:100px;'>";
				for each  courseObj in Studentwise_Course_Details[Academic_Year == currentAcademicYear && Registration_Number == studentObject.ID]
				{
					attendancePercentage = 0.0;
					NoOfTotalClasses = Attendance[Academic_Year == currentAcademicYear && Course_Code == courseObj.Course_Code && Slot == courseObj.Slot && Faculty_Name == courseObj.Faculty_ID].count().toDecimal();
					NoOfAttendedClasses = Attendance[Academic_Year == currentAcademicYear && Course_Code == courseObj.Course_Code && Slot == courseObj.Slot && Faculty_Name == courseObj.Faculty_ID && !Student_Absent_List.contains(studentObject.ID.toString())].count().toDecimal();
					if(NoOfTotalClasses != 0 && NoOfAttendedClasses != 0)
					{
						attendancePercentage = (NoOfAttendedClasses / NoOfTotalClasses * 100).round(2);
					}
					chartString = chartString + "<li><span style='height:" + attendancePercentage + "%' title='" + courseObj.Course_Code.Course_Code + " (" + attendancePercentage + "%)'></span></li>";
				}
				chartString = chartString + "</ul>";
				return chartString;
			}
 			string student.getAttendanceStatus(Student_Details studentObject, Course_and_Faculty_Mapping mappingObject)
			{
				if(Attendance[Academic_Year == mappingObject.Academic_Year && Faculty_Name == mappingObject.Faculty_ID && Course_Code == mappingObject.Course_Code && Slot == mappingObject.Slot].count() > 0)
				{
					course_Object = Course_Details[ID == mappingObject.Course_Code];
					slot = Add_Slots[ID == mappingObject.Slot].Slot;
					tableString = "<p><strong>Attendance Status for <font color='green'>" + course_Object.Course_Code + "  (" + slot + " Slot)</font> : </strong></p><br>";
					tableString = tableString + "<table id='innerTABLE'>";
					tableString = tableString + "<tr class='TR'>";
					tableString = tableString + "<th class='TH'>S.No</th>";
					tableString = tableString + "<th class='TH'>Date</th>";
					tableString = tableString + "<th class='TH'>Day Order</th>";
					tableString = tableString + "<th class='TH'>Status</th>";
					tableString = tableString + "</tr>";
					count = 0;
					for each  i in Attendance[Academic_Year == mappingObject.Academic_Year && Faculty_Name == mappingObject.Faculty_ID && Course_Code == mappingObject.Course_Code && Slot == mappingObject.Slot] sort by Date_of_Attendance
					{
						count = count + 1;
						tableString = tableString + "<tr class='TR'>";
						tableString = tableString + "<td class='TD'>" + count + "</td>";
						tableString = tableString + "<td class='TD'>" + i.Date_of_Attendance + "</td>";
						tableString = tableString + "<td class='TD'>" + Date_Day_Order_Mapping[Date_field == i.Date_of_Attendance].Day_Order + "</td>";
						status = "<font color='green'>Present</font>";
						if(i.Absent_Students_List_Admin.contains(studentObject.ID))
						{
							status = "<font color='red'>Absent</font>";
						}
						tableString = tableString + "<td class='TD'>" + status + "</td>";
						tableString = tableString + "</tr>";
					}
					tableString = tableString + "</table>";
				}
				else
				{
					tableString = "<p>Your attendance has not yet updated!!</p>";
				}
				return tableString;
			}
 			string student.getImportantLinks(Student_Details studentObject)
			{
				tableString = "<p><strong>Important Links : </strong></p><br>";
				tableString = tableString + "<table id='innerTABLE'>";
				tableString = tableString + "<tr class='TR'>";
				tableString = tableString + "<th class='TH'>S.No</th>";
				tableString = tableString + "<th class='TH'>Course Code</th>";
				tableString = tableString + "<th class='TH'>Slot</th>";
				tableString = tableString + "<th class='TH'>Faculty Name</th>";
				tableString = tableString + "<th class='TH'>View Attendence Status</th>";
				tableString = tableString + "</tr>";
				currentAcademicYear = Current_Academic_Year[ID != 0].Academic_Year;
				count = 0;
				for each  i in Studentwise_Course_Details[Registration_Number == studentObject.ID && Academic_Year == currentAcademicYear]
				{
					count = count + 1;
					tableString = tableString + "<tr class='TR'>";
					tableString = tableString + "<td class='TD'>" + count + "</td>";
					tableString = tableString + "<td class='TD'>" + i.Course_Code.Course_Code + "</td>";
					tableString = tableString + "<td class='TD'>" + i.Slot.Slot + "</td>";
					tableString = tableString + "<td class='TD'> " + i.Faculty_ID.Faculty_Name + " (" + i.Faculty_ID.Faculty_ID + ")</td>";
					mappingObject = Course_and_Faculty_Mapping[Academic_Year == currentAcademicYear && Course_Code == i.Course_Code && Slot == i.Slot && Faculty_ID == i.Faculty_ID];
					link = "https://suresh93.zohocreator.com/portal/" + zoho.appname + "#Page:Student_Attendance_Status?mappingID=" + mappingObject.ID;
					if(zoho.adminuser == zoho.loginuser)
					{
						link = "https://app.zohocreator.com" + zoho.appuri + "#Page:Student_Attendance_Status?mappingID=" + mappingObject.ID;
					}
					attendanceStatusLink = "<a href='" + link + "' target='_blank' >Click here</a>";
					tableString = tableString + "<td class='TD'>" + attendanceStatusLink + "</td>";
					tableString = tableString + "</tr>";
				}
				tableString = tableString + "</table>";
				return tableString;
			}
 			string student.getPersonalizedTimeTable(Student_Details studentObject)
			{
				if(studentObject.count() != 0)
				{
					currectAcademicYear = Current_Academic_Year[ID != 0].Academic_Year;
					tableString = "<p><strong>Your Upcoming Time Table :</strong></p><br>";
					tableString = tableString + "<table id='innerTABLE'>";
					tableString = tableString + "<tr class='TR'>";
					tableString = tableString + "<th class='TH'>Date</th>";
					tableString = tableString + "<th class='TH'>Day Order</th>";
					all_records = Day_Order_Hour_Slot_Mapping[ID != 0];
					required_records = Day_Order_Hour_Slot_Mapping[Day_Order == all_records.Day_Order];
					variable = 1;
					for each  record in required_records
					{
						tableString = tableString + "<th class='TH'>Hour " + variable + "</th>";
						variable = variable + 1;
					}
					tableString = tableString + "</tr>";
					timeTableMappingObject = Date_Day_Order_Mapping[Date_field >= today && Academic_Year == currectAcademicYear] sort by Date_field range from 1 to 5;
					for each  i in timeTableMappingObject
					{
						tableString = tableString + "<tr class='TR'>";
						tableString = tableString + "<td class='TD'>" + i.Date_field + "</td>";
						tableString = tableString + "<td class='TD'>" + i.Day_Order + "</td>";
						for each  j in Day_Order_Hour_Slot_Mapping[Day_Order.Day_Order == i.Day_Order] sort by Hour
						{
							mappingObject = Studentwise_Course_Details[Academic_Year == currectAcademicYear && Slot == j.Slot && Registration_Number == studentObject.ID];
							if(mappingObject.count() != 0)
							{
								tableString = tableString + "<td class='TD'>" + mappingObject.Course_Code.Course_Code + "<br>(" + j.Slot.Slot + " Slot)</td>";
							}
							else
							{
								tableString = tableString + "<td class='TD'>-</td>";
							}
						}
						tableString = tableString + "</tr>";
					}
					tableString = tableString + "</table><br><br>";
				}
				else
				{
					tableString = "<p style='color:red'>You don't have Personalized Time Table. Please contact Admin</p>";
				}
				return tableString;
			}
 			string student.getQuickLinks()
			{
				tableString = "<p><strong>Quick Links :</strong></p><br>";
				tableString = tableString + "<table id='innerTABLE'>";
				tableString = tableString + "<tr class='TR'>";
				tableString = tableString + "<td class='TD'><a href='#Page:Student_Attendance_Chart' target='_blank'>Attendance Chart</a></td>";
				tableString = tableString + "</tr>";
				tableString = tableString + "<tr class='TR'>";
				tableString = tableString + "</tr>";
				tableString = tableString + "</table>";
				return tableString;
			}
	}



	workflow
	{
		form
		{
			Search_Actions as "Search"
			{
				type =  form
				form = Attendance_Status_Search
				button = Search
				on click
				{
					actions 
					{
					on click
					(
						openUrl("#Page:Faculty_Attendance_Status?courseID=" + input.Course_Code + "&slotID=" + input.Slot + "&facultyID=" + input.Faculty_Name,"new window");
					)
					}
				}
			}
			Insert_day_s_Actions as "Insert day(s)"
			{
				type =  form
				form = Date_day_order_generation
				button = Insert_days
				on click
				{
					actions 
					{
					on click
					(
						List = List:String();
										dayorder_record = Add_No_of_Dayorders_and_hours[ID != 0];
										if(dayorder_record.count() > 0)
										{
											for each  day in input.Select_Holidays
											{
												if(day == "Sunday")
												{
													List.add(1);
												}
												else if(day == "Monday")
												{
													List.add(2);
												}
												else if(day == "Tuesday")
												{
													List.add(3);
												}
												else if(day == "Wednesday")
												{
													List.add(4);
												}
												else if(day == "Thursday")
												{
													List.add(5);
												}
												else if(day == "Friday")
												{
													List.add(6);
												}
												else if(day == "Saturday")
												{
													List.add(7);
												}
											}
											no_of_days = days360(input.Start_Date,input.End_Date);
											if(no_of_days > 366)
											{
												alert "Sorry...You are allowed to insert dayorders for one year only!";
											}
											else
											{
												if(Date_Day_Order_Mapping[Date_field == input.Start_Date || Date_field == input.End_Date].count() != 0)
												{
													alert "This date already exists!";
												}
												else
												{
													if(input.Start_Date <= zoho.currentdate)
													{
														alert "Please Enter a valid future date!";
													}
													else
													{
														thisapp.general.Insert_days(input.Start_Date,input.End_Date,input.Academic_year,List);
														openUrl("#Form:Popup_Form?zc_Header=false&status=insert","popup window","height=90,width=500");
														reload;
													}
												}
											}
										}
										else
										{
											alert "Please specify the no of dayorders in 'Dayorders and hours' form and then access this form";
										}
					)
					}
				}
			}
			Delete_day_s_Actions as "Delete day(s)"
			{
				type =  form
				form = Date_day_order_generation
				button = Delete_days
				on click
				{
					actions 
					{
					on click
					(
						dayorder_record = Add_No_of_Dayorders_and_hours[ID != 0];
										if(dayorder_record.count() > 0)
										{
											no_of_days = days360(input.Start_Date,input.End_Date);
											if(no_of_days > 366)
											{
												alert "Sorry...You are allowed to delete dayorders for one year only!";
											}
											else
											{
												if(Date_Day_Order_Mapping[Date_field == input.Start_Date || Date_field == input.End_Date].count() = 0)
												{
													alert "This date does not exists!";
												}
												else
												{
													thisapp.general.Delete_days(input.Start_Date,input.End_Date);
													openUrl("#Form:Popup_Form?zc_Header=false&status=delete","popup window","height=90,width=500");
													reload;
												}
											}
										}
										else
										{
											alert "Please specify the no of dayorders in 'Dayorders and hours' form and then access this form";
										}
					)
					}
				}
			}
			Generate_Day_orders_Actio as "Generate Day orders"
			{
				type =  form
				form = Date_day_order_generation
				button = Generate
				on click
				{
					actions 
					{
					on click
					(
						List = List:String();
										dayorder_record = Add_No_of_Dayorders_and_hours[ID != 0];
										if(dayorder_record.count() > 0)
										{
											for each  day in input.Select_Holidays
											{
												if(day == "Sunday")
												{
													List.add(1);
												}
												else if(day == "Monday")
												{
													List.add(2);
												}
												else if(day == "Tuesday")
												{
													List.add(3);
												}
												else if(day == "Wednesday")
												{
													List.add(4);
												}
												else if(day == "Thursday")
												{
													List.add(5);
												}
												else if(day == "Friday")
												{
													List.add(6);
												}
												else if(day == "Saturday")
												{
													List.add(7);
												}
											}
											no_of_days = days360(input.Start_Date,input.End_Date);
											if(no_of_days > 366)
											{
												alert "Sorry...You are allowed to generate dayorders for one year only!";
											}
											else
											{
												if(Date_Day_Order_Mapping[Date_field == input.Start_Date || Date_field == input.End_Date].count() != 0)
												{
													alert "This date already exists!";
												}
												else
												{
													if(input.Start_Date < zoho.currentdate)
													{
														alert "Please Enter a valid future date!";
													}
													else
													{
														thisapp.general.Date_day_order_generation(input.Start_Date,input.End_Date,input.Academic_year,List);
														openUrl("#Form:Popup_Form?zc_Header=false&status=generate","popup window","height=90,width=500");
														reload;
													}
												}
											}
										}
										else
										{
											alert "Please specify the no of dayorders in 'Dayorders and hours' form and then access this form";
										}
					)
					}
				}
			}
			Update_Actions as "Update"
			{
				type =  form
				form = Edit_Profile
				button = Update
				on click
				{
					actions 
					{
					on click
					(
						if(zoho.loginuserid != zoho.adminuserid)
										{
											student_record = Student_Details[Official_Email == zoho.loginuserid];
											student_record.Name_of_the_Student=input.Name_of_the_Student;
											student_record.Mobile_Number=input.Student_Contact_No;
											student_record.Father_Name=input.Father_Name;
											student_record.Father_s_Occupation=input.Father_s_Occupation;
											student_record.Father_Contact_No=input.Father_Contact_No;
											student_record.Religion=input.Religion;
											student_record.Student_Photo=input.Student_Photo;
											openUrl("#Form:Popup_Form?zc_Header=false&status=edit","popup window","height=100,width=500");
											reload;
										}
										else if(zoho.loginuserid == zoho.adminuserid)
										{
											openUrl("#Form:Popup_Form?zc_Header=false&status=edit_admin","popup window","height=100,width=500");
											reload;
										}
					)
					}
				}
			}
			Create_record_scripts17 as "Create record scripts"
			{
				type =  form
				form = Student_Details
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Text_for_Attendance;
										hide Student_status;
										hide errorDateText;
										departmentCount = Department_Details[ID != 0].count();
										semesterCount = Add_Semester[ID != 0].count();
										if(departmentCount == 0 || semesterCount == 0)
										{
											show initialAlertMsg;
										}
										else
										{
											hide initialAlertMsg;
										}
						)
					}
	}

			}
			Create_record_scripts18 as "Create record scripts"
			{
				type =  form
				form = Student_Details
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(input.Date_of_Birth >= zoho.currentdate)
										{
											alert "Please enter a valid date..";
											cancel submit;
										}
						)
					}
	}

			}
			Create_record_scripts19 as "Create record scripts"
			{
				type =  form
				form = Student_Details
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											input.Text_for_Attendance = input.Registration_Number + " - " + input.Name_of_the_Student;
						)
					}
	}

			}
			Edit_record_scripts6 as "Edit record scripts"
			{
				type =  form
				form = Student_Details
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide errorDateText;
										hide initialAlertMsg;
						)
					}
	}

			}
			Field_scripts10 as "Field scripts"
			{
				type =  form
				form = Student_Details
				record event = on add or edit

	on user input of Date_of_Birth
	{
					actions 
					{
						custom deluge script
						(
											if(input.Date_of_Birth >= zoho.currentdate)
										{
											show errorDateText;
										}
										else
										{
											hide errorDateText;
										}
						)
					}
	}

			}
			Create_record_scripts20 as "Create record scripts"
			{
				type =  form
				form = Faculty_Details
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide errorDateText;
										departmentCount = Department_Details[ID != 0].count();
										semesterCount = Add_Semester[ID != 0].count();
										if(departmentCount == 0 || semesterCount == 0)
										{
											show initialAlertMsg;
										}
										else
										{
											hide initialAlertMsg;
										}
						)
					}
	}

			}
			Create_record_scripts21 as "Create record scripts"
			{
				type =  form
				form = Faculty_Details
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(input.Date_of_Birth >= zoho.currentdate)
										{
											alert "Please enter a valid date..";
											cancel submit;
										}
						)
					}
	}

			}
			Edit_record_scripts7 as "Edit record scripts"
			{
				type =  form
				form = Faculty_Details
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide errorDateText;
										hide initialAlertMsg;
						)
					}
	}

			}
			Field_scripts11 as "Field scripts"
			{
				type =  form
				form = Faculty_Details
				record event = on add or edit

	on user input of Date_of_Birth
	{
					actions 
					{
						custom deluge script
						(
											if(input.Date_of_Birth >= zoho.currentdate)
										{
											show errorDateText;
										}
										else
										{
											hide errorDateText;
										}
						)
					}
	}

			}
			Create_record_scripts22 as "Create record scripts"
			{
				type =  form
				form = Course_Details
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											no_of_records = Course_Details[Department == input.Department && Course_Code == input.Course_Code].count();
										if(no_of_records > 0)
										{
											alert "This course already exists in this department";
											cancel submit;
										}
						)
					}
	}

			}
			Create_record_scripts23 as "Create record scripts"
			{
				type =  form
				form = Attendance_Status_Search
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											clear Course_Code;
										clear Slot;
										current_Academic_Year = Current_Academic_Year[ID != 0].Academic_Year;
										if(zoho.loginuser == zoho.adminuser)
										{
											input.Academic_Year = current_Academic_Year;
										}
										else
										{
											clear Academic_Year;
											clear Faculty_Name;
											disable Academic_Year;
											disable Faculty_Name;
											faculty_Object = Faculty_Details[Official_Email == zoho.loginuserid];
											if(faculty_Object.count() == 1)
											{
												input.Faculty_Name = faculty_Object.ID;
												input.Academic_Year = current_Academic_Year;
												input.Course_Code:ui.add(Course_and_Faculty_Mapping[Academic_Year == input.Academic_Year && Faculty_ID == input.Faculty_Name].Course_Code.getAll());
											}
											else
											{
												alert "<font color='red'>You don't have permission for access this module.</p>";
											}
										}
						)
					}
	}

			}
			Field_scripts12 as "Field scripts"
			{
				type =  form
				form = Attendance_Status_Search
				record event = on add or edit

	on user input of Faculty_Name
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.adminuser == zoho.loginuser)
										{
											clear Course_Code;
											clear Slot;
											input.Course_Code:ui.add(Course_and_Faculty_Mapping[Academic_Year == input.Academic_Year && Faculty_ID == input.Faculty_Name].Course_Code.getAll());
										}
						)
					}
	}

			}
			Field_scripts13 as "Field scripts"
			{
				type =  form
				form = Attendance_Status_Search
				record event = on add or edit

	on user input of Course_Code
	{
					actions 
					{
						custom deluge script
						(
											if(input.Course_Code != null)
										{
											input.Slot:ui.add(Course_and_Faculty_Mapping[Academic_Year == input.Academic_Year && Faculty_ID == input.Faculty_Name && Course_Code == input.Course_Code].Slot.getAll());
										}
						)
					}
	}

			}
			Create_record_scripts24 as "Create record scripts"
			{
				type =  form
				form = Date_day_order_generation
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Start_Date;
										hide End_Date;
										hide Academic_year;
										hide Select_Holidays;
						)
					}
	}

			}
			Field_scripts14 as "Field scripts"
			{
				type =  form
				form = Date_day_order_generation
				record event = on add or edit

	on user input of Academic_year
	{
					actions 
					{
						custom deluge script
						(
											current_year_ID = Current_Academic_Year[ID != 0].Academic_Year;
										current_year = Add_Academic_year[ID = current_year_ID].Academic_Year;
										given_year = Add_Academic_year[ID = input.Academic_year].Academic_Year;
										current_year = current_year.trim();
										current_year = current_year.subString(5,6);
										current_year_int = current_year.toLong();
										given_year = given_year.trim();
										given_year = given_year.subString(5,6);
										given_year_int = given_year.toLong();
										if(given_year_int < current_year_int)
										{
											alert "Please Enter a valid academic year!";
										}
						)
					}
	}

			}
			Field_scripts15 as "Field scripts"
			{
				type =  form
				form = Date_day_order_generation
				record event = on add or edit

	on user input of End_Date
	{
					actions 
					{
						custom deluge script
						(
											if(input.End_Date < input.Start_Date)
										{
											alert "Please Enter a valid date according to Start Date!";
											input.End_Date = null;
										}
										no_of_days = days360(input.Start_Date,input.End_Date);
										if(no_of_days > 366)
										{
											alert "Sorry...You are allowed to generate dayorders for one year only!";
											input.End_Date = null;
										}
						)
					}
	}

			}
			Field_scripts16 as "Field scripts"
			{
				type =  form
				form = Date_day_order_generation
				record event = on add or edit

	on user input of Start_Date
	{
					actions 
					{
						custom deluge script
						(
											if(input.Start_Date < zoho.currentdate)
										{
											alert "Please Enter a valid date!";
											input.Start_Date = null;
										}
						)
					}
	}

			}
			Field_scripts17 as "Field scripts"
			{
				type =  form
				form = Date_day_order_generation
				record event = on add or edit

	on user input of You_would_like_to
	{
					actions 
					{
						custom deluge script
						(
											if(input.You_would_like_to == "Generate Day Orders")
										{
											show Start_Date;
											show End_Date;
											show Academic_year;
											show Select_Holidays;
										}
										if(input.You_would_like_to == "Insert/Delete days")
										{
											show Start_Date;
											show End_Date;
											show Academic_year;
											hide Select_Holidays;
										}
						)
					}
	}

			}
			Create_record_scripts25 as "Create record scripts"
			{
				type =  form
				form = Send_mail_to_officials
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											faculty_email = Faculty_Details[ID == input.To].Official_Email;
										sendmail
										[
											from :zoho.loginuserid
											to :faculty_email
											subject :input.Subject_field
											message :input.Message
										]
						)
					}
	}

			}
			Create_record_scripts26 as "Create record scripts"
			{
				type =  form
				form = Send_Mail_to_your_Students
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											input.Faculty_ID = Faculty_Details[Official_Email == zoho.loginuserid].ID;
											disable Faculty_ID;
										}
						)
					}
	}

			}
			Create_record_scripts27 as "Create record scripts"
			{
				type =  form
				form = Send_Mail_to_your_Students
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(input.Save_as_Template)
										{
											if(Mail_content[Subject_field == input.Mail_Subject].count() != 0)
											{
												alert "Mail Subject already exist,Please change mail subject to save as template.";
												cancel submit;
											}
											else
											{
												insert into Mail_content
												[
													Added_User=zoho.loginuser
													Message=input.Message
													Subject_field=input.Mail_Subject
												]
											}
										}
						)
					}
	}

			}
			Create_record_scripts28 as "Create record scripts"
			{
				type =  form
				form = Send_Mail_to_your_Students
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											for each  student in input.Students_List
										{
											student_email = Student_Details[ID == student].Official_Email;
											sendmail
											[
												from :zoho.loginuserid
												to :student_email
												subject :input.Mail_Subject
												message :input.Message
											]
										}
						)
					}
	}

			}
			Field_scripts18 as "Field scripts"
			{
				type =  form
				form = Send_Mail_to_your_Students
				record event = on add or edit

	on user input of Template_Mail
	{
					actions 
					{
						custom deluge script
						(
											if(input.Template_Mail != null)
										{
											templateMail = Mail_content[ID == input.Template_Mail];
											input.Mail_Subject = templateMail.Subject_field;
											input.Message = templateMail.Message;
											hide Save_as_Template;
										}
										else
										{
											input.Mail_Subject = "";
											input.Message = "";
											show Save_as_Template;
										}
						)
					}
	}

			}
			Field_scripts19 as "Field scripts"
			{
				type =  form
				form = Send_Mail_to_your_Students
				record event = on add or edit

	on user input of Faculty_ID
	{
					actions 
					{
						custom deluge script
						(
											if(input.Faculty_ID != null)
										{
											current_year = Current_Academic_Year[ID != 0].Academic_Year;
											selected_records = Course_and_Faculty_Mapping[Faculty_ID == input.Faculty_ID && Academic_Year == current_year].Semester.getAll();
											input.Semester:ui.add(selected_records);
										}
										else
										{
											semesterRec = Add_Semester[ID != 0].ID.getAll();
											input.Semester:ui.add(semesterRec);
										}
						)
					}
	}

			}
			Field_scripts20 as "Field scripts"
			{
				type =  form
				form = Send_Mail_to_your_Students
				record event = on add or edit

	on user input of Semester
	{
					actions 
					{
						custom deluge script
						(
											current_year = Current_Academic_Year[ID != 0].Academic_Year;
										selected_records = Course_and_Faculty_Mapping[Faculty_ID == input.Faculty_ID && Academic_Year == current_year && Semester == input.Semester].Course_Code.getAll();
										selected_records = selected_records.distinct();
										input.Your_Courses:ui.add(selected_records);
						)
					}
	}

			}
			Field_scripts21 as "Field scripts"
			{
				type =  form
				form = Send_Mail_to_your_Students
				record event = on add or edit

	on user input of Your_Courses
	{
					actions 
					{
						custom deluge script
						(
											current_year = Current_Academic_Year[ID != 0].Academic_Year;
										selected_records = Course_and_Faculty_Mapping[Faculty_ID == input.Faculty_ID && Academic_Year == current_year && Semester == input.Semester && Course_Code == input.Your_Courses].Slot.getAll();
										input.Slot:ui.add(selected_records);
						)
					}
	}

			}
			Field_scripts22 as "Field scripts"
			{
				type =  form
				form = Send_Mail_to_your_Students
				record event = on add or edit

	on user input of Slot
	{
					actions 
					{
						custom deluge script
						(
											current_year = Current_Academic_Year[ID != 0].Academic_Year;
										selected_records = Studentwise_Course_Details[Faculty_ID == input.Faculty_ID && Academic_Year == current_year && Slot == input.Slot && Course_Code == input.Your_Courses].Registration_Number.getAll();
										input.Students_List:ui.add(selected_records);
						)
					}
	}

			}
			Create_record_scripts29 as "Create record scripts"
			{
				type =  form
				form = Add_Project
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											disable Current_Academic_Year;
										input.Current_Academic_Year = Current_Academic_Year[ID != 0].Academic_Year;
										clear Faculty_Name;
										disable Faculty_Name;
										facultyObject = Faculty_Details[Official_Email == zoho.loginuserid];
										if(facultyObject.count() == 1)
										{
											input.Faculty_Name = facultyObject.ID;
										}
										else if(zoho.loginuserid == zoho.adminuserid)
										{
											enable Faculty_Name;
										}
										else
										{
											alert "You don't have permission to access this Project Management Module.\nPlease contact admin";
										}
						)
					}
	}

			}
			Create_record_scripts30 as "Create record scripts"
			{
				type =  form
				form = Current_Academic_Year
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											thisapp.general.update_semester();
						)
					}
	}

			}
			Edit_record_scripts8 as "Edit record scripts"
			{
				type =  form
				form = Current_Academic_Year
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(input.Current_Semester != old.Current_Semester)
										{
											thisapp.general.update_semester();
										}
						)
					}
	}

			}
			Create_record_scripts31 as "Create record scripts"
			{
				type =  form
				form = Add_Designation
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											if(Add_Designation[Allow_to_Allocate_Courses].count() != 0)
										{
											hide Allow_to_Allocate_Courses;
										}
						)
					}
	}

			}
			Field_scripts23 as "Field scripts"
			{
				type =  form
				form = Course_and_Faculty_Mapping
				record event = on add or edit

	on user input of Course_Allocation_ID
	{
					actions 
					{
						custom deluge script
						(
											courseAllocation = Course_and_Faculty_Mapping[Course_Allocation_ID == input.Course_Allocation_ID].Faculty_ID.getAll();
										facultyRec = Faculty_Details[ID != 0].ID.getAll();
										for each  eachRec in courseAllocation
										{
											if(facultyRec.contains(eachRec))
											{
												facultyRec.removeelement(eachRec);
											}
										}
										input.Faculty_ID:ui.add(facultyRec);
						)
					}
	}

			}
			Create_record_scripts32 as "Create record scripts"
			{
				type =  form
				form = Course_Allocation
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Allocate_here.Academic_Year;
										hide Allocate_here.Department;
										hide Allocate_here.Course_Code;
										hide Allocate_here.Semester;
										hide Allocate_here.Slot;
										input.Academic_Year = Current_Academic_Year[ID != 0].Academic_Year;
						)
					}
	}

			}
			Create_record_scripts33 as "Create record scripts"
			{
				type =  form
				form = Course_Allocation
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											input.Academic_Year = Current_Academic_Year[ID != 0].Academic_Year;
										if(Course_Allocation[Academic_Year == input.Academic_Year && Department == input.Department && Course_Code == input.Course_Code && Semester == input.Semester].count() != 0)
										{
											alert "This Combination is already added";
											cancel submit;
										}
						)
					}
	}

			}
			Create_record_scripts34 as "Create record scripts"
			{
				type =  form
				form = Course_Allocation
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											for each  i in Course_and_Faculty_Mapping[Course_Allocation_ID == input.ID]
										{
											i.Department=input.Department;
											i.Course_Code=input.Course_Code;
											i.Semester=input.Semester;
											i.Academic_Year=input.Academic_Year;
											i.Slot=input.Slot;
										}
						)
					}
	}

			}
			Edit_record_scripts9 as "Edit record scripts"
			{
				type =  form
				form = Course_Allocation
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Allocate_here.Academic_Year;
										hide Allocate_here.Department;
										hide Allocate_here.Course_Code;
										hide Allocate_here.Semester;
										hide Allocate_here.Slot;
						)
					}
	}

			}
			Edit_record_scripts10 as "Edit record scripts"
			{
				type =  form
				form = Course_Allocation
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(Course_Allocation[ID != input.ID && Academic_Year == input.Academic_Year && Department == input.Department && Course_Code == input.Course_Code && Semester == input.Semester].count() != 0)
										{
											alert "The Combination is already added";
											cancel submit;
										}
						)
					}
	}

			}
			Edit_record_scripts11 as "Edit record scripts"
			{
				type =  form
				form = Course_Allocation
				record event = on edit

	on success
	{
					actions 
					{
						custom deluge script
						(
											for each  i in Course_and_Faculty_Mapping[Course_Allocation_ID == input.ID]
										{
											i.Department=input.Department;
											i.Course_Code=input.Course_Code;
											i.Semester=input.Semester;
											i.Academic_Year=input.Academic_Year;
											i.Slot=input.Slot;
										}
						)
					}
	}

			}
			Delete_record_scripts3 as "Delete record scripts"
			{
				type =  form
				form = Course_Allocation
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											delete from Course_and_Faculty_Mapping[Course_Allocation_ID == input.ID];
						)
					}
	}

			}
			Field_scripts24 as "Field scripts"
			{
				type =  form
				form = Course_Allocation
				record event = on add or edit

	on add row of Allocate_here
	{
					actions 
					{
						custom deluge script
						(
											facultyRec = Faculty_Details[ID != 0].ID.getAll();
										for each  eachRow in Allocate_here
										{
											facultyRec.removeelement(eachRow.Faculty_ID);
										}
										row.Faculty_ID:ui.add(facultyRec);
						)
					}
	}

			}
			Create_record_scripts35 as "Create record scripts"
			{
				type =  form
				form = Attendance
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											clear Absent_Students_List_Admin;
										clear Select_Absent_Students;
										clear Course_Code;
										//--------
										// set current academic year.
										input.Academic_Year = Current_Academic_Year[ID != 0].Academic_Year;
										hide Absent_Students_List_Admin;
										hide Student_Absent_List;
										//--------
										// codition for users.
										if(zoho.loginuser != zoho.adminuser)
										{
											clear Faculty_Name;
											disable Faculty_Name;
											faculty_Obj = Faculty_Details[Official_Email == zoho.loginuserid];
											if(faculty_Obj.count() == 1)
											{
												input.Faculty_Name = faculty_Obj.ID;
												input.Course_Code:ui.add(Course_and_Faculty_Mapping[Faculty_ID == input.Faculty_Name && Academic_Year == input.Academic_Year].Course_Code.getAll());
											}
											// If the faculty's(logged in user) information not in faculties database we have throw this alert.
											else
											{
												alert "You don't have permission to access this Attendance Module.\nPlease contact admin";
											}
											//--------
										}
						)
					}
	}

			}
			Create_record_scripts36 as "Create record scripts"
			{
				type =  form
				form = Attendance
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(Attendance[Date_of_Attendance == input.Date_of_Attendance && Academic_Year == input.Academic_Year && Faculty_Name == input.Faculty_Name && Course_Code == input.Course_Code].count() != 0)
										{
											alert "You have already enterd this entry";
											cancel submit;
										}
										tempAbsentList = List:Int();
										for each  i in input.Select_Absent_Students
										{
											tempAbsentList.add(Student_Details[Text_for_Attendance == i].ID);
										}
										input.Select_Absent_Students = {};
										input.Absent_Students_List_Admin = tempAbsentList.distinct();
						)
					}
	}

			}
			Create_record_scripts37 as "Create record scripts"
			{
				type =  form
				form = Attendance
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											input.Student_Absent_List = input.Absent_Students_List_Admin.toString();
						)
					}
	}

			}
			Edit_record_scripts12 as "Edit record scripts"
			{
				type =  form
				form = Attendance
				record event = on edit

	on success
	{
					actions 
					{
						custom deluge script
						(
											input.Student_Absent_List = input.Absent_Students_List_Admin.toString();
						)
					}
	}

			}
			Field_scripts25 as "Field scripts"
			{
				type =  form
				form = Attendance
				record event = on add or edit

	on user input of Slot
	{
					actions 
					{
						custom deluge script
						(
											clear Select_Absent_Students;
										clear Absent_Students_List_Admin;
										if(input.Slot != null && input.Faculty_Name != null && input.Course_Code != null)
										{
											tempStudentsList = {};
											for each  i in Studentwise_Course_Details[Academic_Year == input.Academic_Year && Faculty_ID == input.Faculty_Name && Course_Code == input.Course_Code]
											{
												tempStudentsList.add(i.Registration_Number.Text_for_Attendance);
											}
											input.Select_Absent_Students:ui.add(tempStudentsList);
										}
						)
					}
	}

			}
			Field_scripts26 as "Field scripts"
			{
				type =  form
				form = Attendance
				record event = on add or edit

	on user input of Faculty_Name
	{
					actions 
					{
						custom deluge script
						(
											if(zoho.adminuser == zoho.loginuser)
										{
											clear Course_Code;
											clear Select_Absent_Students;
											clear Absent_Students_List_Admin;
											if(input.Faculty_Name != null)
											{
												input.Course_Code:ui.add(Course_and_Faculty_Mapping[Faculty_ID == input.Faculty_Name && Academic_Year == input.Academic_Year].Course_Code.getAll());
											}
										}
						)
					}
	}

			}
			Field_scripts27 as "Field scripts"
			{
				type =  form
				form = Attendance
				record event = on add or edit

	on user input of Course_Code
	{
					actions 
					{
						custom deluge script
						(
											clear Slot;
										clear Select_Absent_Students;
										clear Absent_Students_List_Admin;
										if(input.Faculty_Name != null && input.Course_Code != null)
										{
											input.Slot:ui.add(Course_and_Faculty_Mapping[Faculty_ID == input.Faculty_Name && Course_Code == input.Course_Code].distinct(Slot));
										}
						)
					}
	}

			}
			Create_record_scripts38 as "Create record scripts"
			{
				type =  form
				form = Student_Course_Registration_Form
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											student_Object = Student_Details[Official_Email == zoho.loginuserid];
										clear Registration_Number;
										hide Register_Here.Registration_Number;
										hide Register_Here.Slot;
										hide Register_Here.Academic_Year;
										hide Register_Here.Semester;
										disable Register_Here.Course_Code;
										clear Courses;
										hide plain1;
										disable Semester;
										input.Semester = student_Object.Semester;
										hide Academic_Year;
										if(student_Object.count() == 1)
										{
											input.Registration_Number = student_Object.ID;
											currentAcademicYear = Current_Academic_Year[ID != 0].Academic_Year;
											input.Academic_Year = currentAcademicYear;
											if(Student_Course_Registration_Form[Registration_Number == input.Registration_Number && Academic_Year == currentAcademicYear].count() == 0)
											{
												input.Courses = Course_and_Faculty_Mapping[Academic_Year == currentAcademicYear && Department == student_Object.Department && Semester == student_Object.Semester].Course_Code.getAll();
											}
											else
											{
												show plain1;
											}
										}
										else
										{
											hide Register_Here;
										}
						)
					}
	}

			}
			Create_record_scripts39 as "Create record scripts"
			{
				type =  form
				form = Student_Course_Registration_Form
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											if(Student_Course_Registration_Form[Registration_Number == input.Registration_Number && Academic_Year == input.Academic_Year].count() != 0)
										{
											alert "Already you have registered your courses.";
											cancel submit;
										}
										student_Object = Student_Details[ID == input.Registration_Number];
										course_List = Course_and_Faculty_Mapping[Academic_Year == input.Academic_Year && Department == student_Object.Department && Semester == student_Object.Semester].Course_Code.getAll().distinct();
										selected_course_List = List:Int();
										for each  i in Register_Here
										{
											selected_course_List.add(i.Course_Code);
										}
										if(selected_course_List.size() == course_List.size())
										{
											selected_course_List.sort();
											course_List.sort();
											if(selected_course_List.toString() == course_List.toString())
											{
												for each  j in Register_Here
												{
													numberOfSeats = Course_and_Faculty_Mapping[Academic_Year == input.Academic_Year && Course_Code == j.Course_Code && Faculty_ID == j.Faculty_ID && Department == student_Object.Department && Semester == student_Object.Semester].Number_of_Seats;
													if(!numberOfSeats > Studentwise_Course_Details[Academic_Year == input.Academic_Year && Course_Code == j.Course_Code && Faculty_ID == j.Faculty_ID].count())
													{
														alert ("Unfortunately someone selected the Faculty (" + Faculty_Details[ID == j.Faculty_ID].Faculty_Name + ") for this Course (") + Course_Details[ID == j.Course_Code].Course_Code + ").\nSo, please Slect another Faculty";
														cancel submit;
													}
												}
											}
										}
										else
										{
											if(selected_course_List.size() > course_List.size())
											{
												alert "Some additional entry(s) found.\n Kindly delete the entry(s) and submit again";
												cancel submit;
											}
											else
											{
												alert "Some entry(s) are missing.\n Kindly add the entry(s) and submit again";
												cancel submit;
											}
										}
						)
					}
	}

			}
			Create_record_scripts40 as "Create record scripts"
			{
				type =  form
				form = Student_Course_Registration_Form
				record event = on add

	on success
	{
					actions 
					{
						custom deluge script
						(
											for each  i in Studentwise_Course_Details[Registration_ID == input.ID]
										{
											i.Registration_Number=input.Registration_Number;
											i.Academic_Year=input.Academic_Year;
											i.Semester=input.Semester;
											i.Slot=Course_and_Faculty_Mapping[Academic_Year == input.Academic_Year && Course_Code == i.Course_Code && Faculty_ID == i.Faculty_ID].Slot;
										}
						)
					}
	}

			}
			Delete_record_scripts4 as "Delete record scripts"
			{
				type =  form
				form = Student_Course_Registration_Form
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											delete from Studentwise_Course_Details[Registration_ID == input.ID];
						)
					}
	}

			}
			Field_scripts28 as "Field scripts"
			{
				type =  form
				form = Student_Course_Registration_Form
				record event = on add or edit

	on user input of Courses
	{
					actions 
					{
						custom deluge script
						(
											clear Register_Here.Course_Code;
										clear Register_Here.Faculty_ID;
										tempCourseList = input.Courses;
										for each  i in Register_Here
										{
											tempCourseList.removeelement(i.Course_Code);
										}
										if(tempCourseList.size() > 0)
										{
											input.Register_Here.Course_Code = tempCourseList.get(0);
											facultyList = List:Int();
											student_Object = Student_Details[ID == input.Registration_Number];
											for each  j in Course_and_Faculty_Mapping[Academic_Year == input.Academic_Year && Course_Code == input.Register_Here.Course_Code && Department == student_Object.Department && Semester == student_Object.Semester]
											{
												if(j.Number_of_Seats > Studentwise_Course_Details[Academic_Year == input.Academic_Year && Course_Code == input.Register_Here.Course_Code && Faculty_ID == j.Faculty_ID].count())
												{
													facultyList.add(j.Faculty_ID);
												}
											}
											for each  rec in Register_Here
											{
												rec.Faculty_ID:ui.add(facultyList);
											}
											//Register_Here.Faculty_ID:ui.add(facultyList);
										}
						)
					}
	}

			}
			Field_scripts29 as "Field scripts"
			{
				type =  form
				form = Student_Course_Registration_Form
				record event = on add or edit

	on add row of Register_Here
	{
					actions 
					{
						custom deluge script
						(
											clear row.Course_Code;
										clear row.Faculty_ID;
										tempCourseList = input.Courses;
										for each  i in Register_Here
										{
											tempCourseList.removeelement(i.Course_Code);
										}
										if(tempCourseList.size() > 0)
										{
											row.Course_Code=tempCourseList.get(0);
											facultyList = List:Int();
											student_Object = Student_Details[ID == input.Registration_Number];
											for each  j in Course_and_Faculty_Mapping[Academic_Year == input.Academic_Year && Course_Code == row.Course_Code && Department == student_Object.Department && Semester == student_Object.Semester]
											{
												if(j.Number_of_Seats > Studentwise_Course_Details[Academic_Year == input.Academic_Year && Course_Code == row.Course_Code && Faculty_ID == j.Faculty_ID].count())
												{
													facultyList.add(j.Faculty_ID);
												}
											}
											row.Faculty_ID:ui.add(facultyList);
										}
						)
					}
	}

			}
			Create_record_scripts41 as "Create record scripts"
			{
				type =  form
				form = Date_Day_Order_Mapping
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											input.Academic_Year = Current_Academic_Year[ID != 0].Academic_Year;
						)
					}
	}

			}
			Create_record_scripts42 as "Create record scripts"
			{
				type =  form
				form = Common_Time_Table
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Day_Order;
										disable Hour_Slot.Hour;
										record = Add_No_of_Dayorders_and_hours[ID != 0];
										if(record.No_of_dayorders == null)
										{
										}
										else
										{
											List = {1,2,3,4,5,6,7,8};
											limit_value = record.No_of_dayorders.toLong();
											Sublist = List.subList(0,limit_value);
											input.Day_Order_Dropdown:ui.add(Sublist);
										}
						)
					}
	}

			}
			Create_record_scripts43 as "Create record scripts"
			{
				type =  form
				form = Common_Time_Table
				record event = on add

	on validate
	{
					actions 
					{
						custom deluge script
						(
											dayOrderCheck = Common_Time_Table[Day_Order_Dropdown == input.Day_Order_Dropdown];
										record = Add_No_of_Dayorders_and_hours[ID != 0];
										count = 0;
										for each  i in Hour_Slot
										{
											count = count + 1;
										}
										if(dayOrderCheck.count() > 0)
										{
											alert "DayOrder already exist.";
											cancel submit;
										}
										else
										{
											input.Day_Order = input.Day_Order_Dropdown.toLong();
										}
										if(count < record.No_of_hours_per_day)
										{
											alert "You have to give " + record.No_of_hours_per_day + " hours per dayorder. So, please specify the remaining hours!!";
											cancel submit;
										}
						)
					}
	}

			}
			Edit_record_scripts13 as "Edit record scripts"
			{
				type =  form
				form = Common_Time_Table
				record event = on edit

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide Day_Order;
						)
					}
	}

			}
			Edit_record_scripts14 as "Edit record scripts"
			{
				type =  form
				form = Common_Time_Table
				record event = on edit

	on validate
	{
					actions 
					{
						custom deluge script
						(
											dayOrderCheck = Common_Time_Table[ID != input.ID && Day_Order_Dropdown == input.Day_Order_Dropdown];
										if(dayOrderCheck.count() > 0)
										{
											alert "DayOrder already exist.";
											cancel submit;
										}
										else
										{
											input.Day_Order = input.Day_Order_Dropdown.toLong();
										}
						)
					}
	}

			}
			Delete_record_scripts5 as "Delete record scripts"
			{
				type =  form
				form = Common_Time_Table
				record event = on delete

	on validate
	{
					actions 
					{
						custom deluge script
						(
											delete from Day_Order_Hour_Slot_Mapping[Day_Order == input.ID];
						)
					}
	}

			}
			Field_scripts30 as "Field scripts"
			{
				type =  form
				form = Common_Time_Table
				record event = on add or edit

	on add row of Hour_Slot
	{
					actions 
					{
						custom deluge script
						(
											record = Add_No_of_Dayorders_and_hours[ID != 0];
										Condition_variable = 0;
										for each  element in Hour_Slot
										{
											Condition_variable = Condition_variable + 1;
										}
										if(Condition_variable <= record.No_of_hours_per_day)
										{
											row.Hour=Condition_variable;
										}
										else
										{
											alert "No more entries are allowed!!!";
										}
						)
					}
	}

			}
			Create_record_scripts44 as "Create record scripts"
			{
				type =  form
				form = Edit_Profile
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											student_record = Student_Details[Official_Email == zoho.loginuserid];
										input.Name_of_the_Student = student_record.Name_of_the_Student;
										input.Student_Contact_No = student_record.Mobile_Number;
										input.Father_Name = student_record.Father_Name;
										input.Father_s_Occupation = student_record.Father_s_Occupation;
										input.Father_Contact_No = student_record.Father_Contact_No;
										input.Religion = student_record.Religion;
										input.Student_Photo = student_record.Student_Photo;
						)
					}
	}

			}
			Create_record_scripts45 as "Create record scripts"
			{
				type =  form
				form = Popup_Form
				record event = on add

	on load
	{
					actions 
					{
						custom deluge script
						(
											hide status;
										if(input.status == "generate")
										{
											input.plain = "Dayorders has been generated successfully!!!";
										}
										else if(input.status == "insert")
										{
											input.plain = "Dayorder(s) has been inserted successfully!!!";
										}
										else if(input.status == "delete")
										{
											input.plain = "Dayorder(s) has been deleted successfully!!!";
										}
										else if(input.status == "edit")
										{
											input.plain = "Your Profile has been updated successfully!!!";
										}
										else if(input.status == "edit_admin")
										{
											input.plain = "You are not allowed to update the profile here!!!";
										}
						)
					}
	}

			}
		}
	}
	share_settings
	{
			"Faculty"
			{
				name = "Faculty"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false}
				description = "This profile will have faculty permissions.\n"
				ModulePermissions
				{
					Course_and_Faculty_Mapping
					{
						ReportPermissions
						{
							Course_and_Faculty_Mapping_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Faculty_ID{visibility:true,readonly:false}
							Course_Code{visibility:true,readonly:false}
							Course_Allocation_ID{visibility:true,readonly:false}
							Department{visibility:true,readonly:false}
							Semester{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
							Slot{visibility:true,readonly:false}
							Number_of_Seats{visibility:true,readonly:false}
						}
					}
					Send_mail_to_officials
					{
						FieldPermissions
						{
							To{visibility:true,readonly:false}
							Message{visibility:true,readonly:false}
							Subject_field{visibility:true,readonly:false}
						}
					}
					Add_Events
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Event_Management_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Organizer_s{visibility:true,readonly:false}
							Venue{visibility:true,readonly:false}
							Event_Name{visibility:true,readonly:false}
							Type_of_the_Event{visibility:true,readonly:false}
							Start_Date{visibility:true,readonly:false}
							End_Date{visibility:true,readonly:false}
							List_of_Programs{visibility:true,readonly:false}
						}
					}
					Attendance_Status_Search
					{
						FieldPermissions
						{
							Course_Code{visibility:true,readonly:false}
							Slot{visibility:true,readonly:false}
							Faculty_Name{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
						}
					}
					Faculty_Details
					{
						FieldPermissions
						{
							Faculty_ID{visibility:true,readonly:false}
							Designation{visibility:true,readonly:false}
							initialAlertMsg{visibility:true,readonly:false}
							Date_of_Birth{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							Faculty_Photo{visibility:true,readonly:false}
							Marital_Status{visibility:true,readonly:false}
							errorDateText{visibility:true,readonly:false}
							Official_Email{visibility:true,readonly:false}
							Gender{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Faculty_Name{visibility:true,readonly:false}
							Qualification{visibility:true,readonly:false}
							Department{visibility:true,readonly:false}
							Contact_Number{visibility:true,readonly:false}
						}
					}
					Day_Order_Hour_Slot_Mapping
					{
						FieldPermissions
						{
							Slot{visibility:true,readonly:false}
							Hour{visibility:true,readonly:false}
							Day_Order{visibility:true,readonly:false}
						}
					}
					Mail_content
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Send_Mail_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Message{visibility:true,readonly:false}
							Subject_field{visibility:true,readonly:false}
						}
					}
					Common_Time_Table
					{
						FieldPermissions
						{
							Day_Order_Dropdown{visibility:true,readonly:false}
							Hour_Slot{visibility:true,readonly:false}
							Day_Order{visibility:true,readonly:false}
						}
					}
					Studentwise_Course_Details
					{
						FieldPermissions
						{
							Faculty_ID{visibility:true,readonly:false}
							Course_Code{visibility:true,readonly:false}
							Semester{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
							Slot{visibility:true,readonly:false}
							Registration_ID{visibility:true,readonly:false}
							Registration_Number{visibility:true,readonly:false}
						}
					}
					Add_Project_Types
					{
						FieldPermissions
						{
							Project_Type{visibility:true,readonly:false}
						}
					}
					Student_Course_Registration_Form
					{
						FieldPermissions
						{
							Semester{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
							plain1{visibility:true,readonly:false}
							Courses{visibility:true,readonly:false}
							Registration_Number{visibility:true,readonly:false}
							Register_Here{visibility:true,readonly:false}
						}
					}
					Add_Event_wise_Programs
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Event_wise_Programs_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Program_Name{visibility:true,readonly:false}
							Time{visibility:true,readonly:false}
							Participants{visibility:true,readonly:false}
							Description_of_the_Program_optional{visibility:true,readonly:false}
							Event_Name{visibility:true,readonly:false}
						}
					}
					Event_Types
					{
						FieldPermissions
						{
							Type{visibility:true,readonly:false}
						}
					}
					Send_Mail_to_your_Students
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Sent_mails_to_Students={"View","Delete"}
						}
						FieldPermissions
						{
							Faculty_ID{visibility:true,readonly:false}
							Mail_Subject{visibility:true,readonly:false}
							Save_as_Template{visibility:true,readonly:false}
							Semester{visibility:true,readonly:false}
							Message{visibility:true,readonly:false}
							Students_List{visibility:true,readonly:false}
							Slot{visibility:true,readonly:false}
							Your_Courses{visibility:true,readonly:false}
							Template_Mail{visibility:true,readonly:false}
						}
					}
					Date_day_order_generation
					{
						FieldPermissions
						{
							Start_Date{visibility:true,readonly:false}
							End_Date{visibility:true,readonly:false}
							Academic_year{visibility:true,readonly:false}
							Select_Holidays{visibility:true,readonly:false}
							You_would_like_to{visibility:true,readonly:false}
						}
					}
					Edit_Profile
					{
						FieldPermissions
						{
							Father_Contact_No{visibility:true,readonly:false}
							Student_Contact_No{visibility:true,readonly:false}
							Student_Photo{visibility:true,readonly:false}
							Father_Name{visibility:true,readonly:false}
							Father_s_Occupation{visibility:true,readonly:false}
							Religion{visibility:true,readonly:false}
							Name_of_the_Student{visibility:true,readonly:false}
						}
					}
					Course_Details
					{
						FieldPermissions
						{
							Course_Title{visibility:true,readonly:false}
							Course_Code{visibility:true,readonly:false}
							Department{visibility:true,readonly:false}
							Course_Type{visibility:true,readonly:false}
						}
					}
					Course_Allocation
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Course_Allocation_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Course_Code{visibility:true,readonly:false}
							Department{visibility:true,readonly:false}
							Semester{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
							Allocate_here{visibility:true,readonly:false}
							Slot{visibility:true,readonly:false}
						}
					}
					Attendance
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Attendance_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Course_Code{visibility:true,readonly:false}
							Faculty_Name{visibility:true,readonly:false}
							Date_of_Attendance{visibility:true,readonly:false}
							Topic_Covered{visibility:true,readonly:false}
							Absent_Students_List_Admin{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
							Slot{visibility:true,readonly:false}
							Select_Absent_Students{visibility:true,readonly:false}
							Student_Absent_List{visibility:true,readonly:false}
						}
					}
					Popup_Form
					{
						FieldPermissions
						{
							plain{visibility:true,readonly:false}
							status{visibility:true,readonly:false}
						}
					}
					Add_No_of_Dayorders_and_hours
					{
						FieldPermissions
						{
							No_of_hours_per_day{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							No_of_dayorders{visibility:true,readonly:false}
						}
					}
					Student_Details
					{
						FieldPermissions
						{
							initialAlertMsg{visibility:true,readonly:false}
							Date_of_Joining{visibility:true,readonly:false}
							Date_of_Birth{visibility:true,readonly:false}
							Student_status{visibility:true,readonly:false}
							Semester{visibility:true,readonly:false}
							errorDateText{visibility:true,readonly:false}
							Father_s_Occupation{visibility:true,readonly:false}
							Religion{visibility:true,readonly:false}
							Official_Email{visibility:true,readonly:false}
							Gender{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Registration_Number{visibility:true,readonly:false}
							Nationality{visibility:true,readonly:false}
							Father_Contact_No{visibility:true,readonly:false}
							Department{visibility:true,readonly:false}
							Student_Photo{visibility:true,readonly:false}
							Mobile_Number{visibility:true,readonly:false}
							Father_Name{visibility:true,readonly:false}
							Name_of_the_Student{visibility:true,readonly:false}
							Text_for_Attendance{visibility:true,readonly:false}
						}
					}
					Add_Project
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Project_Management_Report={"View","Edit","Delete"}
						}
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Faculty_Name{visibility:true,readonly:false}
							Department{visibility:true,readonly:false}
							Semester{visibility:true,readonly:false}
							Project_Name{visibility:true,readonly:false}
							Current_Academic_Year{visibility:true,readonly:false}
							Project_Type{visibility:true,readonly:false}
							Done_by_Students_List{visibility:true,readonly:false}
						}
					}
					Add_Slots
					{
						FieldPermissions
						{
							Slot{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Add_Designation
					{
						FieldPermissions
						{
							Designation{visibility:true,readonly:false}
							Allow_to_Allocate_Courses{visibility:true,readonly:false}
						}
					}
					Date_Day_Order_Mapping
					{
						FieldPermissions
						{
							Date_field{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
							Day_Order{visibility:true,readonly:false}
						}
					}
					Add_Semester
					{
						FieldPermissions
						{
							Semester{visibility:true,readonly:false}
						}
					}
					Add_Academic_year
					{
						FieldPermissions
						{
							plain{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
						}
					}
					Add_Course_Types
					{
						FieldPermissions
						{
							Type{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Current_Academic_Year
					{
						FieldPermissions
						{
							Academic_Year{visibility:true,readonly:false}
							Current_Semester{visibility:true,readonly:false}
						}
					}
					Department_Details
					{
						FieldPermissions
						{
							Department{visibility:true,readonly:false}
						}
					}
					Faculty_Dashboard
					{
						enabled = tab
					}
					Personalized_Academic_Time_Table
					{
						enabled = tab
					}
					Course_wise_Students_List
					{
						enabled = tab
					}
					Faculty_Attendance_Status
					{
						enabled = tab
					}
				}
			}
			"Administrator"
			{
				name = "Administrator"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true}
				description = "This profile will have all the permissions.\n"
			}
			"Student"
			{
				name = "Student"
				type = Users_Permissions
				permissions = {Chat:false, Predefined:false}
				description = "This profile will have student permissions.\n"
				ModulePermissions
				{
					Course_and_Faculty_Mapping
					{
						FieldPermissions
						{
							Faculty_ID{visibility:true,readonly:false}
							Course_Code{visibility:true,readonly:false}
							Course_Allocation_ID{visibility:true,readonly:false}
							Department{visibility:true,readonly:false}
							Semester{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
							Slot{visibility:true,readonly:false}
							Number_of_Seats{visibility:true,readonly:false}
						}
					}
					Send_mail_to_officials
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Send_mail_to_officials_Report={"View"}
						}
						FieldPermissions
						{
							To{visibility:true,readonly:false}
							Message{visibility:true,readonly:false}
							Subject_field{visibility:true,readonly:false}
						}
					}
					Add_Events
					{
						FieldPermissions
						{
							Organizer_s{visibility:true,readonly:false}
							Venue{visibility:true,readonly:false}
							Event_Name{visibility:true,readonly:false}
							Type_of_the_Event{visibility:true,readonly:false}
							Start_Date{visibility:true,readonly:false}
							End_Date{visibility:true,readonly:false}
							List_of_Programs{visibility:true,readonly:false}
						}
					}
					Attendance_Status_Search
					{
						FieldPermissions
						{
							Course_Code{visibility:true,readonly:false}
							Slot{visibility:true,readonly:false}
							Faculty_Name{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
						}
					}
					Faculty_Details
					{
						FieldPermissions
						{
							Faculty_ID{visibility:true,readonly:false}
							Designation{visibility:true,readonly:false}
							initialAlertMsg{visibility:true,readonly:false}
							Date_of_Birth{visibility:true,readonly:false}
							Address{visibility:true,readonly:false}
							Faculty_Photo{visibility:true,readonly:false}
							Marital_Status{visibility:true,readonly:false}
							errorDateText{visibility:true,readonly:false}
							Official_Email{visibility:true,readonly:false}
							Gender{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Faculty_Name{visibility:true,readonly:false}
							Qualification{visibility:true,readonly:false}
							Department{visibility:true,readonly:false}
							Contact_Number{visibility:true,readonly:false}
						}
					}
					Day_Order_Hour_Slot_Mapping
					{
						FieldPermissions
						{
							Slot{visibility:true,readonly:false}
							Hour{visibility:true,readonly:false}
							Day_Order{visibility:true,readonly:false}
						}
					}
					Mail_content
					{
						FieldPermissions
						{
							Message{visibility:true,readonly:false}
							Subject_field{visibility:true,readonly:false}
						}
					}
					Common_Time_Table
					{
						FieldPermissions
						{
							Day_Order_Dropdown{visibility:true,readonly:false}
							Hour_Slot{visibility:true,readonly:false}
							Day_Order{visibility:true,readonly:false}
						}
					}
					Studentwise_Course_Details
					{
						ReportPermissions
						{
							Studentwise_Course_Details_Report={"View"}
						}
						FieldPermissions
						{
							Faculty_ID{visibility:true,readonly:false}
							Course_Code{visibility:true,readonly:false}
							Semester{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
							Slot{visibility:true,readonly:false}
							Registration_ID{visibility:true,readonly:false}
							Registration_Number{visibility:true,readonly:false}
						}
					}
					Add_Project_Types
					{
						FieldPermissions
						{
							Project_Type{visibility:true,readonly:false}
						}
					}
					Student_Course_Registration_Form
					{
						enabled= Create,Tab 
						ReportPermissions
						{
							Student_Course_Registration_Form_Report={"View"}
						}
						FieldPermissions
						{
							Semester{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
							plain1{visibility:true,readonly:false}
							Courses{visibility:true,readonly:false}
							Registration_Number{visibility:true,readonly:false}
							Register_Here{visibility:true,readonly:false}
						}
					}
					Add_Event_wise_Programs
					{
						FieldPermissions
						{
							Program_Name{visibility:true,readonly:false}
							Time{visibility:true,readonly:false}
							Participants{visibility:true,readonly:false}
							Description_of_the_Program_optional{visibility:true,readonly:false}
							Event_Name{visibility:true,readonly:false}
						}
					}
					Event_Types
					{
						FieldPermissions
						{
							Type{visibility:true,readonly:false}
						}
					}
					Send_Mail_to_your_Students
					{
						FieldPermissions
						{
							Faculty_ID{visibility:true,readonly:false}
							Mail_Subject{visibility:true,readonly:false}
							Save_as_Template{visibility:true,readonly:false}
							Semester{visibility:true,readonly:false}
							Message{visibility:true,readonly:false}
							Students_List{visibility:true,readonly:false}
							Slot{visibility:true,readonly:false}
							Your_Courses{visibility:true,readonly:false}
							Template_Mail{visibility:true,readonly:false}
						}
					}
					Date_day_order_generation
					{
						FieldPermissions
						{
							Start_Date{visibility:true,readonly:false}
							End_Date{visibility:true,readonly:false}
							Academic_year{visibility:true,readonly:false}
							Select_Holidays{visibility:true,readonly:false}
							You_would_like_to{visibility:true,readonly:false}
						}
					}
					Edit_Profile
					{
						enabled= Create,Tab 
						FieldPermissions
						{
							Father_Contact_No{visibility:true,readonly:false}
							Student_Contact_No{visibility:true,readonly:false}
							Student_Photo{visibility:true,readonly:false}
							Father_Name{visibility:true,readonly:false}
							Father_s_Occupation{visibility:true,readonly:false}
							Religion{visibility:true,readonly:false}
							Name_of_the_Student{visibility:true,readonly:false}
						}
					}
					Course_Details
					{
						FieldPermissions
						{
							Course_Title{visibility:true,readonly:false}
							Course_Code{visibility:true,readonly:false}
							Department{visibility:true,readonly:false}
							Course_Type{visibility:true,readonly:false}
						}
					}
					Course_Allocation
					{
						FieldPermissions
						{
							Course_Code{visibility:true,readonly:false}
							Department{visibility:true,readonly:false}
							Semester{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
							Allocate_here{visibility:true,readonly:false}
							Slot{visibility:true,readonly:false}
						}
					}
					Attendance
					{
						FieldPermissions
						{
							Course_Code{visibility:true,readonly:false}
							Faculty_Name{visibility:true,readonly:false}
							Date_of_Attendance{visibility:true,readonly:false}
							Topic_Covered{visibility:true,readonly:false}
							Absent_Students_List_Admin{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
							Slot{visibility:true,readonly:false}
							Select_Absent_Students{visibility:true,readonly:false}
							Student_Absent_List{visibility:true,readonly:false}
						}
					}
					Popup_Form
					{
						FieldPermissions
						{
							plain{visibility:true,readonly:false}
							status{visibility:true,readonly:false}
						}
					}
					Add_No_of_Dayorders_and_hours
					{
						FieldPermissions
						{
							No_of_hours_per_day{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
							No_of_dayorders{visibility:true,readonly:false}
						}
					}
					Student_Details
					{
						FieldPermissions
						{
							initialAlertMsg{visibility:true,readonly:false}
							Date_of_Joining{visibility:true,readonly:false}
							Date_of_Birth{visibility:true,readonly:false}
							Student_status{visibility:true,readonly:false}
							Semester{visibility:true,readonly:false}
							errorDateText{visibility:true,readonly:false}
							Father_s_Occupation{visibility:true,readonly:false}
							Religion{visibility:true,readonly:false}
							Official_Email{visibility:true,readonly:false}
							Gender{visibility:true,readonly:false}
							Section{visibility:false,readonly:false}
							Registration_Number{visibility:true,readonly:false}
							Nationality{visibility:true,readonly:false}
							Father_Contact_No{visibility:true,readonly:false}
							Department{visibility:true,readonly:false}
							Student_Photo{visibility:true,readonly:false}
							Mobile_Number{visibility:true,readonly:false}
							Father_Name{visibility:true,readonly:false}
							Name_of_the_Student{visibility:true,readonly:false}
							Text_for_Attendance{visibility:true,readonly:false}
						}
					}
					Add_Project
					{
						FieldPermissions
						{
							Status{visibility:true,readonly:false}
							Faculty_Name{visibility:true,readonly:false}
							Department{visibility:true,readonly:false}
							Semester{visibility:true,readonly:false}
							Project_Name{visibility:true,readonly:false}
							Current_Academic_Year{visibility:true,readonly:false}
							Project_Type{visibility:true,readonly:false}
							Done_by_Students_List{visibility:true,readonly:false}
						}
					}
					Add_Slots
					{
						FieldPermissions
						{
							Slot{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Add_Designation
					{
						FieldPermissions
						{
							Designation{visibility:true,readonly:false}
							Allow_to_Allocate_Courses{visibility:true,readonly:false}
						}
					}
					Date_Day_Order_Mapping
					{
						FieldPermissions
						{
							Date_field{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
							Day_Order{visibility:true,readonly:false}
						}
					}
					Add_Semester
					{
						FieldPermissions
						{
							Semester{visibility:true,readonly:false}
						}
					}
					Add_Academic_year
					{
						FieldPermissions
						{
							plain{visibility:true,readonly:false}
							Academic_Year{visibility:true,readonly:false}
						}
					}
					Add_Course_Types
					{
						FieldPermissions
						{
							Type{visibility:true,readonly:false}
							plain{visibility:true,readonly:false}
						}
					}
					Current_Academic_Year
					{
						FieldPermissions
						{
							Academic_Year{visibility:true,readonly:false}
							Current_Semester{visibility:true,readonly:false}
						}
					}
					Department_Details
					{
						FieldPermissions
						{
							Department{visibility:true,readonly:false}
						}
					}
					Student_Dashboard
					{
						enabled = tab
					}
					Student_Attendance_Status
					{
						enabled = tab
					}
				}
			}
			"Customer"
			{
				name = "Customer"
				type = Customer_Portal
				permissions = {Chat:false, Predefined:true}
				description = "This is the default profile having only add and view permission.\n"
			}
			roles
			{
				"CEO"
				{
					description = "User belonging to this role can access data of all other users."
				}
			}
	}

	customize
	{
		
		layout = "drop down menu"
		color = "green"
		base theme = "classic"
		new theme = 4
		new theme color = 1
		icons = true
    	icon type = 1
    	icon name = "zc-ab-education-5"
    	icon theme = "lightred"
		icons style = solid
	}

	phone
	{
		section  Admin_Admin_Data1
		{
			displayname= "Admin Data"
			form  Student_Details
			{
				layout = left
			}
			form  Faculty_Details
			{
				layout = left
			}
			form  Course_Details
			{
				layout = auto
			}
			form  Attendance_Status_Search
			{
				layout = auto
			}
		}
		section  Database1
		{
			displayname= "Databases"
			list Academic_years
			{
			}
			list Current_Academic_Year_Report
			{
			}
			list Department_Details_Report
			{
			}
			list Course_Types
			{
			}
			list Course_Details_Report
			{
			}
			list Add_Designation_Report
			{
			}
			list Semester_Details_Report
			{
			}
			list Slots_Details_Report
			{
			}
			list Student_Details1
			{
			}
			list Faculty_Details_Report
			{
			}
			list Event_Types_Report
			{
			}
			list Project_Types_Report
			{
			}
			list Dayorders_and_hours
			{
			}
		}
		section  Timetable
		{
			form  Date_day_order_generation
			{
				layout = auto
			}
			list Date_Day_Order_Mapping_Report
			{
			}
			list Common_Time_Table_Report
			{
			}
		}
		section  Student
		{
			page Student_Dashboard
			{
			}
			list Student_Course_Registration_Form_Report
			{
			}
			list Studentwise_Course_Details_Report
			{
			}
			form  Send_mail_to_officials
			{
				layout = auto
			}
			list Send_mail_to_officials_Report
			{
			}
		}
		section  Faculty
		{
			page Faculty_Dashboard
			{
			}
			page Personalized_Academic_Time_Table
			{
			}
			list Attendance_Report
			{
			}
			form  Send_Mail_to_your_Students
			{
				layout = auto
			}
			list Sent_mails_to_Students
			{
			}
			list Send_Mail_Report
			{
			}
			list Course_Allocation_Report
			{
			}
			list Course_and_Faculty_Mapping_Report
			{
			}
		}
		section  Events
		{
			form  Add_Events
			{
				layout = auto
			}
			list Event_Management_Report
			{
			}
			form  Add_Event_wise_Programs
			{
				layout = auto
			}
			list Event_wise_Programs_Report
			{
			}
		}
		section  Projects
		{
			form  Add_Project
			{
				layout = auto
			}
			list Project_Management_Report
			{
			}
		}
		section  Hidden_items
		{
			displayname= "Hidden items"
			hide = true
			form  Add_No_of_Dayorders_and_hours
			{
				layout = auto
				hide = true
			}
			list Hour_Slot_Mapping_Report
			{
				hide = true
			}
			form  Current_Academic_Year
			{
				layout = auto
				hide = true
			}
			form  Add_Designation
			{
				layout = auto
				hide = true
			}
			form  Course_and_Faculty_Mapping
			{
				layout = auto
				hide = true
			}
			form  Add_Slots
			{
				layout = auto
				hide = true
			}
			form  Add_Academic_year
			{
				layout = auto
				hide = true
			}
			form  Add_Course_Types
			{
				layout = auto
				hide = true
			}
			form  Add_Project_Types
			{
				layout = auto
				hide = true
			}
			form  Event_Types
			{
				layout = auto
				hide = true
			}
			form  Add_Semester
			{
				layout = auto
				hide = true
			}
			form  Department_Details
			{
				layout = auto
				hide = true
			}
			form  Mail_content
			{
				layout = auto
				hide = true
			}
			form  Course_Allocation
			{
				layout = auto
				hide = true
			}
			form  Attendance
			{
				layout = auto
				hide = true
			}
			page Faculty_Attendance_Chart
			{
				hide = true
			}
			page View_Attendance
			{
				hide = true
			}
			page Course_wise_Students_List
			{
				hide = true
			}
			page Faculty_Attendance_Status
			{
				hide = true
			}
			page Student_Attendance_Status
			{
				hide = true
			}
			page Student_Attendance_Chart
			{
				hide = true
			}
			form  Studentwise_Course_Details
			{
				layout = auto
				hide = true
			}
			form  Student_Course_Registration_Form
			{
				layout = auto
				hide = true
			}
			form  Date_Day_Order_Mapping
			{
				layout = auto
				hide = true
			}
			form  Common_Time_Table
			{
				layout = auto
				hide = true
			}
			form  Day_Order_Hour_Slot_Mapping
			{
				layout = auto
				hide = true
			}
			form  Edit_Profile
			{
				layout = auto
				hide = true
			}
			form  Popup_Form
			{
				layout = auto
				hide = true
			}
		}
		customize
		{
			colour = lightred
        	layout = slidingpane
		 	icons style = outline
		}
	}
	tablet
	{
		section  Admin_Admin_Data1
		{
			displayname= "Admin Data"
			form  Student_Details
			{
				layout = left
			}
			form  Faculty_Details
			{
				layout = left
			}
			form  Course_Details
			{
				layout = auto
			}
			form  Attendance_Status_Search
			{
				layout = auto
			}
		}
		section  Database1
		{
			displayname= "Databases"
			list Academic_years
			{
			}
			list Current_Academic_Year_Report
			{
			}
			list Department_Details_Report
			{
			}
			list Course_Types
			{
			}
			list Course_Details_Report
			{
			}
			list Add_Designation_Report
			{
			}
			list Semester_Details_Report
			{
			}
			list Slots_Details_Report
			{
			}
			list Student_Details1
			{
			}
			list Faculty_Details_Report
			{
			}
			list Event_Types_Report
			{
			}
			list Project_Types_Report
			{
			}
			list Dayorders_and_hours
			{
			}
		}
		section  Timetable
		{
			form  Date_day_order_generation
			{
				layout = auto
			}
			list Date_Day_Order_Mapping_Report
			{
			}
			list Common_Time_Table_Report
			{
			}
		}
		section  Student
		{
			page Student_Dashboard
			{
			}
			list Student_Course_Registration_Form_Report
			{
			}
			list Studentwise_Course_Details_Report
			{
			}
			form  Send_mail_to_officials
			{
				layout = auto
			}
			list Send_mail_to_officials_Report
			{
			}
		}
		section  Faculty
		{
			page Faculty_Dashboard
			{
			}
			page Personalized_Academic_Time_Table
			{
			}
			list Attendance_Report
			{
			}
			form  Send_Mail_to_your_Students
			{
				layout = auto
			}
			list Sent_mails_to_Students
			{
			}
			list Send_Mail_Report
			{
			}
			list Course_Allocation_Report
			{
			}
			list Course_and_Faculty_Mapping_Report
			{
			}
		}
		section  Events
		{
			form  Add_Events
			{
				layout = auto
			}
			list Event_Management_Report
			{
			}
			form  Add_Event_wise_Programs
			{
				layout = auto
			}
			list Event_wise_Programs_Report
			{
			}
		}
		section  Projects
		{
			form  Add_Project
			{
				layout = auto
			}
			list Project_Management_Report
			{
			}
		}
		section  Hidden_items
		{
			displayname= "Hidden items"
			hide = true
			form  Add_No_of_Dayorders_and_hours
			{
				layout = auto
				hide = true
			}
			list Hour_Slot_Mapping_Report
			{
				hide = true
			}
			form  Current_Academic_Year
			{
				layout = auto
				hide = true
			}
			form  Add_Designation
			{
				layout = auto
				hide = true
			}
			form  Course_and_Faculty_Mapping
			{
				layout = auto
				hide = true
			}
			form  Add_Slots
			{
				layout = auto
				hide = true
			}
			form  Add_Academic_year
			{
				layout = auto
				hide = true
			}
			form  Add_Course_Types
			{
				layout = auto
				hide = true
			}
			form  Add_Project_Types
			{
				layout = auto
				hide = true
			}
			form  Event_Types
			{
				layout = auto
				hide = true
			}
			form  Add_Semester
			{
				layout = auto
				hide = true
			}
			form  Department_Details
			{
				layout = auto
				hide = true
			}
			form  Mail_content
			{
				layout = auto
				hide = true
			}
			form  Course_Allocation
			{
				layout = auto
				hide = true
			}
			form  Attendance
			{
				layout = auto
				hide = true
			}
			page Faculty_Attendance_Chart
			{
				hide = true
			}
			page View_Attendance
			{
				hide = true
			}
			page Course_wise_Students_List
			{
				hide = true
			}
			page Faculty_Attendance_Status
			{
				hide = true
			}
			page Student_Attendance_Status
			{
				hide = true
			}
			page Student_Attendance_Chart
			{
				hide = true
			}
			form  Studentwise_Course_Details
			{
				layout = auto
				hide = true
			}
			form  Student_Course_Registration_Form
			{
				layout = auto
				hide = true
			}
			form  Date_Day_Order_Mapping
			{
				layout = auto
				hide = true
			}
			form  Common_Time_Table
			{
				layout = auto
				hide = true
			}
			form  Day_Order_Hour_Slot_Mapping
			{
				layout = auto
				hide = true
			}
			form  Edit_Profile
			{
				layout = auto
				hide = true
			}
			form  Popup_Form
			{
				layout = auto
				hide = true
			}
		}
		customize
		{
			colour = lightred
        	layout = slidingpane
		 	icons style = outline
		}
	}
	
}